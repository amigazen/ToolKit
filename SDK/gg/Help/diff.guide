@database diff.guide

@Master /gg-src/gg/fsf/diffutils/diff.texi

@Width 72


This is the AmigaGuide®  file diff.guide, produced by Makeinfo-1.68 from 
the input file /gg-src/gg/fsf/diffutils/diff.texi.

   This file documents the the GNU @{b}diff@{ub}, @{b}diff3@{ub}, @{b}sdiff@{ub}, and @{b}cmp@{ub} commands
for showing the differences between text files and the @{b}patch@{ub} command
for using their output to update files.

   Copyright (C) 1992, 1993, 1994 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.

@node Main "diff.guide"

   This file documents the the GNU @{b}diff@{ub}, @{b}diff3@{ub}, @{b}sdiff@{ub}, and @{b}cmp@{ub} commands
for showing the differences between text files and the @{b}patch@{ub} command
for using their output to update files.

   This is Edition 1.2, for @{b}diff@{ub} 2.4 and @{b}patch@{ub} 2.1.


 @{" Overview      " link "Overview"}  Preliminary information.

 @{" Comparison    " link "Comparison"}  What file comparison means.
 @{" Output Formats " link "Output Formats"}  Formats for difference reports.
 @{" Comparing Directories " link "Comparing Directories"}  Comparing files and directories.
 @{" Adjusting Output " link "Adjusting Output"}  Making @{b}diff@{ub} output prettier.
 @{" diff Performance " link "diff Performance"}  Making @{b}diff@{ub} smarter or faster.
 @{" Comparing Three Files " link "Comparing Three Files"}  Formats for three-way difference reports.

 @{" diff3 Merging " link "diff3 Merging"}  Merging from a common ancestor.
 @{" Interactive Merging " link "Interactive Merging"}  Interactive merging with @{b}sdiff@{ub}.
 @{" Merging with patch " link "Merging with patch"}  Using @{b}patch@{ub} to change old files into new ones.
 @{" Making Patches " link "Making Patches"}  Tips for making patch distributions.

 @{" Invoking cmp  " link "Invoking cmp"}  How to run @{b}cmp@{ub} and a summary of its options.
 @{" Invoking diff " link "Invoking diff"}  How to run @{b}diff@{ub} and a summary of its options.
 @{" Invoking diff3 " link "Invoking diff3"}  How to run @{b}diff3@{ub} and a summary of its options.
 @{" Invoking patch " link "Invoking patch"}  How to run @{b}patch@{ub} and a summary of its options.
 @{" Invoking sdiff " link "Invoking sdiff"}  How to run @{b}sdiff@{ub} and a summary of its options.

 @{" Incomplete Lines " link "Incomplete Lines"}  Lines that lack trailing newlines.
 @{" Projects      " link "Projects"}  If you think you've found a bug or other shortcoming.

 @{" Concept Index " link "Concept Index"}  Index of concepts.


@endnode

@node "Overview" "diff.guide/Overview"
@next "Comparison"
@toc "Main"

Overview
********

   Computer users often find occasion to ask how two files differ.
Perhaps one file is a newer version of the other file.  Or maybe the
two files started out as identical copies but were changed by different
people.

   You can use the @{b}diff@{ub} command to show differences between two files,
or each corresponding file in two directories.  @{b}diff@{ub} outputs
differences between files line by line in any of several formats,
selectable by command line options.  This set of differences is often
called a @{i}diff@{ui} or @{i}patch@{ui}.  For files that are identical, @{b}diff@{ub} normally
produces no output; for binary (non-text) files, @{b}diff@{ub} normally reports
only that they are different.

   You can use the @{b}cmp@{ub} command to show the offsets and line numbers
where two files differ.  @{b}cmp@{ub} can also show all the characters that
differ between the two files, side by side.  Another way to compare two
files character by character is the Emacs command @{b}M-x compare-windows@{ub}.
See @{"Other Window" link "emacs.guide/Other Window"}, for more information on that command.

   You can use the @{b}diff3@{ub} command to show differences among three files.
When two people have made independent changes to a common original,
@{b}diff3@{ub} can report the differences between the original and the two
changed versions, and can produce a merged file that contains both
persons' changes together with warnings about conflicts.

   You can use the @{b}sdiff@{ub} command to merge two files interactively.

   You can use the set of differences produced by @{b}diff@{ub} to distribute
updates to text files (such as program source code) to other people.
This method is especially useful when the differences are small compared
to the complete files.  Given @{b}diff@{ub} output, you can use the @{b}patch@{ub}
program to update, or @{i}patch@{ui}, a copy of the file.  If you think of @{b}diff@{ub}
as subtracting one file from another to produce their difference, you
can think of @{b}patch@{ub} as adding the difference to one file to reproduce
the other.

   This manual first concentrates on making diffs, and later shows how
to use diffs to update files.

   GNU @{b}diff@{ub} was written by Mike Haertel, David Hayes, Richard Stallman,
Len Tower, and Paul Eggert.  Wayne Davison designed and implemented the
unified output format.  The basic algorithm is described in "An O(ND)
Difference Algorithm and its Variations", Eugene W. Myers,
`Algorithmica' Vol. 1 No. 2, 1986, pp. 251-266; and in "A File
Comparison Program", Webb Miller and Eugene W. Myers,
`Software--Practice and Experience' Vol. 15 No. 11, 1985, pp. 1025-1040.
The algorithm was independently discovered as described in "Algorithms
for Approximate String Matching", E. Ukkonen, `Information and Control'
Vol. 64, 1985, pp. 100-118.

   GNU @{b}diff3@{ub} was written by Randy Smith.  GNU @{b}sdiff@{ub} was written by
Thomas Lord.  GNU @{b}cmp@{ub} was written by Torbjorn Granlund and David
MacKenzie.

@{b}   patch@{ub} was written mainly by Larry Wall; the GNU enhancements were
written mainly by Wayne Davison and David MacKenzie.  Parts of this
manual are adapted from a manual page written by Larry Wall, with his
permission.


@endnode

@node "Comparison" "diff.guide/Comparison"
@next "Output Formats"
@prev "Overview"
@toc "Main"

What Comparison Means
*********************

   There are several ways to think about the differences between two
files.  One way to think of the differences is as a series of lines
that were deleted from, inserted in, or changed in one file to produce
the other file.  @{b}diff@{ub} compares two files line by line, finds groups of
lines that differ, and reports each group of differing lines.  It can
report the differing lines in several formats, which have different
purposes.

   GNU @{b}diff@{ub} can show whether files are different without detailing the
differences.  It also provides ways to suppress certain kinds of
differences that are not important to you.  Most commonly, such
differences are changes in the amount of white space between words or
lines.  @{b}diff@{ub} also provides ways to suppress differences in alphabetic
case or in lines that match a regular expression that you provide.
These options can accumulate; for example, you can ignore changes in
both white space and alphabetic case.

   Another way to think of the differences between two files is as a
sequence of pairs of characters that can be either identical or
different.  @{b}cmp@{ub} reports the differences between two files character by
character, instead of line by line.  As a result, it is more useful
than @{b}diff@{ub} for comparing binary files.  For text files, @{b}cmp@{ub} is useful
mainly when you want to know only whether two files are identical.

   To illustrate the effect that considering changes character by
character can have compared with considering them line by line, think
of what happens if a single newline character is added to the beginning
of a file.  If that file is then compared with an otherwise identical
file that lacks the newline at the beginning, @{b}diff@{ub} will report that a
blank line has been added to the file, while @{b}cmp@{ub} will report that
almost every character of the two files differs.

@{b}   diff3@{ub} normally compares three input files line by line, finds groups
of lines that differ, and reports each group of differing lines.  Its
output is designed to make it easy to inspect two different sets of
changes to the same file.


 @{" Hunks            " link "Hunks"}  Groups of differing lines.
 @{" White Space      " link "White Space"}  Suppressing differences in white space.
 @{" Blank Lines      " link "Blank Lines"}  Suppressing differences in blank lines.
 @{" Case Folding     " link "Case Folding"}  Suppressing differences in alphabetic case.
 @{" Specified Folding " link "Specified Folding"}  Suppressing differences that match regular expressions.
 @{" Brief            " link "Brief"}  Summarizing which files are different.
 @{" Binary           " link "Binary"}  Comparing binary files or forcing text comparisons.


@endnode

@node "Hunks" "diff.guide/Hunks"
@next "White Space"
@toc "Comparison"

Hunks
=====

   When comparing two files, @{b}diff@{ub} finds sequences of lines common to
both files, interspersed with groups of differing lines called @{i}hunks@{ui}.
Comparing two identical files yields one sequence of common lines and
no hunks, because no lines differ.  Comparing two entirely different
files yields no common lines and one large hunk that contains all lines
of both files.  In general, there are many ways to match up lines
between two given files.  @{b}diff@{ub} tries to minimize the total hunk size by
finding large sequences of common lines interspersed with small hunks
of differing lines.

   For example, suppose the file @{b}F@{ub} contains the three lines @{b}a@{ub}, @{b}b@{ub}, @{b}c@{ub},
and the file @{b}G@{ub} contains the same three lines in reverse order @{b}c@{ub}, @{b}b@{ub}, @{b}a@{ub}.
If @{b}diff@{ub} finds the line @{b}c@{ub} as common, then the command @{b}diff F G@{ub} produces
this output:

     1,2d0
     < a
     < b
     3a2,3
     > b
     > a

But if @{b}diff@{ub} notices the common line @{b}b@{ub} instead, it produces this output:

     1c1
     < a
     ---
     > c
     3c3
     < c
     ---
     > a

It is also possible to find @{b}a@{ub} as the common line.  @{b}diff@{ub} does not always
find an optimal matching between the files; it takes shortcuts to run
faster.  But its output is usually close to the shortest possible.  You
can adjust this tradeoff with the @{b}--minimal@{ub} option (see
@{"diff Performance" link "diff Performance"}).


@endnode

@node "White Space" "diff.guide/White Space"
@next "Blank Lines"
@prev "Hunks"
@toc "Comparison"

Suppressing Differences in Blank and Tab Spacing
================================================

   The @{b}-b@{ub} and @{b}--ignore-space-change@{ub} options ignore white space at line
end, and considers all other sequences of one or more white space
characters to be equivalent.  With these options, @{b}diff@{ub} considers the
following two lines to be equivalent, where @{b}$@{ub} denotes the line end:

     Here lyeth  muche rychnesse  in lytell space.   -- John Heywood$
     Here lyeth muche rychnesse in lytell space. -- John Heywood   $

   The @{b}-w@{ub} and @{b}--ignore-all-space@{ub} options are stronger than @{b}-b@{ub}.  They
ignore difference even if one file has white space where the other file
has none.  @{i}White space@{ui} characters include tab, newline, vertical tab,
form feed, carriage return, and space; some locales may define
additional characters to be white space.  With these options, @{b}diff@{ub}
considers the following two lines to be equivalent, where @{b}$@{ub} denotes the
line end and @{b}^M@{ub} denotes a carriage return:

     Here lyeth  muche  rychnesse in lytell space.--  John Heywood$
       He relyeth much erychnes  seinly tells pace.  --John Heywood   ^M$


@endnode

@node "Blank Lines" "diff.guide/Blank Lines"
@next "Case Folding"
@prev "White Space"
@toc "Comparison"

Suppressing Differences in Blank Lines
======================================

   The @{b}-B@{ub} and @{b}--ignore-blank-lines@{ub} options ignore insertions or
deletions of blank lines.  These options normally affect only lines
that are completely empty; they do not affect lines that look empty but
contain space or tab characters.  With these options, for example, a
file containing
     1.  A point is that which has no part.
     
     2.  A line is breadthless length.
     -- Euclid, The Elements, I

is considered identical to a file containing
     1.  A point is that which has no part.
     2.  A line is breadthless length.
     
     
     -- Euclid, The Elements, I


@endnode

@node "Case Folding" "diff.guide/Case Folding"
@next "Specified Folding"
@prev "Blank Lines"
@toc "Comparison"

Suppressing Case Differences
============================

   GNU @{b}diff@{ub} can treat lowercase letters as equivalent to their
uppercase counterparts, so that, for example, it considers @{b}Funky Stuff@{ub},
@{b}funky STUFF@{ub}, and @{b}fUNKy stuFf@{ub} to all be the same.  To request this, use
the @{b}-i@{ub} or @{b}--ignore-case@{ub} option.


@endnode

@node "Specified Folding" "diff.guide/Specified Folding"
@next "Brief"
@prev "Case Folding"
@toc "Comparison"

Suppressing Lines Matching a Regular Expression
===============================================

   To ignore insertions and deletions of lines that match a regular
expression, use the @{b}-I REGEXP@{ub} or @{b}--ignore-matching-lines=REGEXP@{ub} option.
You should escape regular expressions that contain shell
metacharacters to prevent the shell from expanding them.  For example,
@{b}diff -I '^[0-9]'@{ub} ignores all changes to lines beginning with a digit.

   However, @{b}-I@{ub} only ignores the insertion or deletion of lines that
contain the regular expression if every changed line in the hunk--every
insertion and every deletion--matches the regular expression.  In other
words, for each nonignorable change, @{b}diff@{ub} prints the complete set of
changes in its vicinity, including the ignorable ones.

   You can specify more than one regular expression for lines to ignore
by using more than one @{b}-I@{ub} option.  @{b}diff@{ub} tries to match each line
against each regular expression, starting with the last one given.


@endnode

@node "Brief" "diff.guide/Brief"
@next "Binary"
@prev "Specified Folding"
@toc "Comparison"

Summarizing Which Files Differ
==============================

   When you only want to find out whether files are different, and you
don't care what the differences are, you can use the summary output
format.  In this format, instead of showing the differences between the
files, @{b}diff@{ub} simply reports whether files differ.  The @{b}-q@{ub} and @{b}--brief@{ub}
options select this output format.

   This format is especially useful when comparing the contents of two
directories.  It is also much faster than doing the normal line by line
comparisons, because @{b}diff@{ub} can stop analyzing the files as soon as it
knows that there are any differences.

   You can also get a brief indication of whether two files differ by
using @{b}cmp@{ub}.  For files that are identical, @{b}cmp@{ub} produces no output.  When
the files differ, by default, @{b}cmp@{ub} outputs the byte offset and line
number where the first difference occurs.  You can use the @{b}-s@{ub} option to
suppress that information, so that @{b}cmp@{ub} produces no output and reports
whether the files differ using only its exit status (see @{"Invoking cmp" link "Invoking cmp"}).

   Unlike @{b}diff@{ub}, @{b}cmp@{ub} cannot compare directories; it can only compare two
files.


@endnode

@node "Binary" "diff.guide/Binary"
@prev "Brief"
@toc "Comparison"

Binary Files and Forcing Text Comparisons
=========================================

   If @{b}diff@{ub} thinks that either of the two files it is comparing is
binary (a non-text file), it normally treats that pair of files much as
if the summary output format had been selected (see @{"Brief" link "Brief"}), and
reports only that the binary files are different.  This is because line
by line comparisons are usually not meaningful for binary files.

@{b}   diff@{ub} determines whether a file is text or binary by checking the
first few bytes in the file; the exact number of bytes is system
dependent, but it is typically several thousand.  If every character in
that part of the file is non-null, @{b}diff@{ub} considers the file to be text;
otherwise it considers the file to be binary.

   Sometimes you might want to force @{b}diff@{ub} to consider files to be text.
For example, you might be comparing text files that contain null
characters; @{b}diff@{ub} would erroneously decide that those are non-text
files.  Or you might be comparing documents that are in a format used
by a word processing system that uses null characters to indicate
special formatting.  You can force @{b}diff@{ub} to consider all files to be
text files, and compare them line by line, by using the @{b}-a@{ub} or @{b}--text@{ub}
option.  If the files you compare using this option do not in fact
contain text, they will probably contain few newline characters, and
the @{b}diff@{ub} output will consist of hunks showing differences between long
lines of whatever characters the files contain.

   You can also force @{b}diff@{ub} to consider all files to be binary files,
and report only whether they differ (but not how).  Use the @{b}--brief@{ub}
option for this.

   In operating systems that distinguish between text and binary files,
@{b}diff@{ub} normally reads and writes all data as text.  Use the @{b}--binary@{ub}
option to force @{b}diff@{ub} to read and write binary data instead.  This
option has no effect on a Posix-compliant system like GNU or
traditional Unix.  However, many personal computer operating systems
represent the end of a line with a carriage return followed by a
newline.  On such systems, @{b}diff@{ub} normally ignores these carriage returns
on input and generates them at the end of each output line, but with
the @{b}--binary@{ub} option @{b}diff@{ub} treats each carriage return as just another
input character, and does not generate a carriage return at the end of
each output line.  This can be useful when dealing with non-text files
that are meant to be interchanged with Posix-compliant systems.

   If you want to compare two files byte by byte, you can use the @{b}cmp@{ub}
program with the @{b}-l@{ub} option to show the values of each differing byte in
the two files.  With GNU @{b}cmp@{ub}, you can also use the @{b}-c@{ub} option to show
the ASCII representation of those bytes.  See @{"Invoking cmp" link "Invoking cmp"}, for more
information.

   If @{b}diff3@{ub} thinks that any of the files it is comparing is binary (a
non-text file), it normally reports an error, because such comparisons
are usually not useful.  @{b}diff3@{ub} uses the same test as @{b}diff@{ub} to decide
whether a file is binary.  As with @{b}diff@{ub}, if the input files contain a
few non-text characters but otherwise are like text files, you can
force @{b}diff3@{ub} to consider all files to be text files and compare them
line by line by using the @{b}-a@{ub} or @{b}--text@{ub} options.


@endnode

@node "Output Formats" "diff.guide/Output Formats"
@next "Comparing Directories"
@prev "Comparison"
@toc "Main"

@{b}diff@{ub} Output Formats
*******************

@{b}   diff@{ub} has several mutually exclusive options for output format.  The
following sections describe each format, illustrating how @{b}diff@{ub} reports
the differences between two sample input files.


 @{" Sample diff Input  " link "Sample diff Input"}  Sample @{b}diff@{ub} input files for examples.
 @{" Normal             " link "Normal"}  Showing differences without surrounding text.
 @{" Context            " link "Context"}  Showing differences with the surrounding text.
 @{" Side by Side       " link "Side by Side"}  Showing differences in two columns.
 @{" Scripts            " link "Scripts"}  Generating scripts for other programs.
 @{" If-then-else       " link "If-then-else"}  Merging files with if-then-else.


@endnode

@node "Sample diff Input" "diff.guide/Sample diff Input"
@next "Normal"
@toc "Output Formats"

Two Sample Input Files
======================

   Here are two sample files that we will use in numerous examples to
illustrate the output of @{b}diff@{ub} and how various options can change it.

   This is the file @{b}lao@{ub}:

     The Way that can be told of is not the eternal Way;
     The name that can be named is not the eternal name.
     The Nameless is the origin of Heaven and Earth;
     The Named is the mother of all things.
     Therefore let there always be non-being,
       so we may see their subtlety,
     And let there always be being,
       so we may see their outcome.
     The two are the same,
     But after they are produced,
       they have different names.

   This is the file @{b}tzu@{ub}:

     The Nameless is the origin of Heaven and Earth;
     The named is the mother of all things.
     
     Therefore let there always be non-being,
       so we may see their subtlety,
     And let there always be being,
       so we may see their outcome.
     The two are the same,
     But after they are produced,
       they have different names.
     They both may be called deep and profound.
     Deeper and more profound,
     The door of all subtleties!

   In this example, the first hunk contains just the first two lines of
@{b}lao@{ub}, the second hunk contains the fourth line of @{b}lao@{ub} opposing the
second and third lines of @{b}tzu@{ub}, and the last hunk contains just the last
three lines of @{b}tzu@{ub}.


@endnode

@node "Normal" "diff.guide/Normal"
@next "Context"
@prev "Sample diff Input"
@toc "Output Formats"

Showing Differences Without Context
===================================

   The "normal" @{b}diff@{ub} output format shows each hunk of differences
without any surrounding context.  Sometimes such output is the clearest
way to see how lines have changed, without the clutter of nearby
unchanged lines (although you can get similar results with the context
or unified formats by using 0 lines of context).  However, this format
is no longer widely used for sending out patches; for that purpose, the
context format (see @{"Context Format" link "Context Format"}) and the unified format (see
@{"Unified Format" link "Unified Format"}) are superior.  Normal format is the default for
compatibility with older versions of @{b}diff@{ub} and the Posix standard.


 @{" Detailed Normal    " link "Detailed Normal"}  A detailed description of normal output format.
 @{" Example Normal     " link "Example Normal"}  Sample output in the normal format.


@endnode

@node "Detailed Normal" "diff.guide/Detailed Normal"
@next "Example Normal"
@toc "Normal"

Detailed Description of Normal Format
-------------------------------------

   The normal output format consists of one or more hunks of
differences; each hunk shows one area where the files differ.  Normal
format hunks look like this:

     CHANGE-COMMAND
     < FROM-FILE-LINE
     < FROM-FILE-LINE...
     ---
     > TO-FILE-LINE
     > TO-FILE-LINE...

   There are three types of change commands.  Each consists of a line
number or comma-separated range of lines in the first file, a single
character indicating the kind of change to make, and a line number or
comma-separated range of lines in the second file.  All line numbers are
the original line numbers in each file.  The types of change commands
are:

@{b}LaR@{ub}
     Add the lines in range R of the second file after line L of the
     first file.  For example, @{b}8a12,15@{ub} means append lines 12-15 of file
     2 after line 8 of file 1; or, if changing file 2 into file 1,
     delete lines 12-15 of file 2.

@{b}FcT@{ub}
     Replace the lines in range F of the first file with lines in range
     T of the second file.  This is like a combined add and delete, but
     more compact.  For example, @{b}5,7c8,10@{ub} means change lines 5-7 of
     file 1 to read as lines 8-10 of file 2; or, if changing file 2 into
     file 1, change lines 8-10 of file 2 to read as lines 5-7 of file 1.

@{b}RdL@{ub}
     Delete the lines in range R from the first file; line L is where
     they would have appeared in the second file had they not been
     deleted.  For example, @{b}5,7d3@{ub} means delete lines 5-7 of file 1; or,
     if changing file 2 into file 1, append lines 5-7 of file 1 after
     line 3 of file 2.


@endnode

@node "Example Normal" "diff.guide/Example Normal"
@prev "Detailed Normal"
@toc "Normal"

An Example of Normal Format
---------------------------

   Here is the output of the command @{b}diff lao tzu@{ub} (see
@{"Sample diff Input" link "Sample diff Input"}, for the complete contents of the two files).
Notice that it shows only the lines that are different between the two
files.

     1,2d0
     < The Way that can be told of is not the eternal Way;
     < The name that can be named is not the eternal name.
     4c2,3
     < The Named is the mother of all things.
     ---
     > The named is the mother of all things.
     >
     11a11,13
     > They both may be called deep and profound.
     > Deeper and more profound,
     > The door of all subtleties!


@endnode

@node "Context" "diff.guide/Context"
@next "Side by Side"
@prev "Normal"
@toc "Output Formats"

Showing Differences in Their Context
====================================

   Usually, when you are looking at the differences between files, you
will also want to see the parts of the files near the lines that
differ, to help you understand exactly what has changed.  These nearby
parts of the files are called the @{i}context@{ui}.

   GNU @{b}diff@{ub} provides two output formats that show context around the
differing lines: @{i}context format@{ui} and @{i}unified format@{ui}.  It can optionally
show in which function or section of the file the differing lines are
found.

   If you are distributing new versions of files to other people in the
form of @{b}diff@{ub} output, you should use one of the output formats that show
context so that they can apply the diffs even if they have made small
changes of their own to the files.  @{b}patch@{ub} can apply the diffs in this
case by searching in the files for the lines of context around the
differing lines; if those lines are actually a few lines away from
where the diff says they are, @{b}patch@{ub} can adjust the line numbers
accordingly and still apply the diff correctly.  See @{"Imperfect" link "Imperfect"}, for
more information on using @{b}patch@{ub} to apply imperfect diffs.


 @{" Context Format     " link "Context Format"}  An output format that shows surrounding lines.
 @{" Unified Format     " link "Unified Format"}  A more compact output format that shows context.
 @{" Sections           " link "Sections"}  Showing which sections of the files differences are in.
 @{" Alternate Names    " link "Alternate Names"}  Showing alternate file names in context headers.


@endnode

@node "Context Format" "diff.guide/Context Format"
@next "Unified Format"
@toc "Context"

Context Format
--------------

   The context output format shows several lines of context around the
lines that differ.  It is the standard format for distributing updates
to source code.

   To select this output format, use the @{b}-C LINES@{ub}, @{b}--context[=LINES]@{ub},
or @{b}-c@{ub} option.  The argument LINES that some of these options take is
the number of lines of context to show.  If you do not specify LINES, it
defaults to three.  For proper operation, @{b}patch@{ub} typically needs at
least two lines of context.


 @{" Detailed Context   " link "Detailed Context"}  A detailed description of the context output format.
 @{" Example Context    " link "Example Context"}  Sample output in context format.
 @{" Less Context       " link "Less Context"}  Another sample with less context.


@endnode

@node "Detailed Context" "diff.guide/Detailed Context"
@next "Example Context"
@toc "Context Format"

Detailed Description of Context Format
......................................

   The context output format starts with a two-line header, which looks
like this:

     *** FROM-FILE FROM-FILE-MODIFICATION-TIME
     --- TO-FILE TO-FILE-MODIFICATION TIME

You can change the header's content with the @{b}-L LABEL@{ub} or @{b}--label=LABEL@{ub}
option; see @{"Alternate Names" link "Alternate Names"}.

   Next come one or more hunks of differences; each hunk shows one area
where the files differ.  Context format hunks look like this:

     ***************
     *** FROM-FILE-LINE-RANGE ****
       FROM-FILE-LINE
       FROM-FILE-LINE...
     --- TO-FILE-LINE-RANGE ----
       TO-FILE-LINE
       TO-FILE-LINE...

   The lines of context around the lines that differ start with two
space characters.  The lines that differ between the two files start
with one of the following indicator characters, followed by a space
character:

@{b}!@{ub}
     A line that is part of a group of one or more lines that changed
     between the two files.  There is a corresponding group of lines
     marked with @{b}!@{ub} in the part of this hunk for the other file.

@{b}+@{ub}
     An "inserted" line in the second file that corresponds to nothing
     in the first file.

@{b}-@{ub}
     A "deleted" line in the first file that corresponds to nothing in
     the second file.

   If all of the changes in a hunk are insertions, the lines of
FROM-FILE are omitted.  If all of the changes are deletions, the lines
of TO-FILE are omitted.


@endnode

@node "Example Context" "diff.guide/Example Context"
@next "Less Context"
@prev "Detailed Context"
@toc "Context Format"

An Example of Context Format
............................

   Here is the output of @{b}diff -c lao tzu@{ub} (see @{"Sample diff Input" link "Sample diff Input"}, for
the complete contents of the two files).  Notice that up to three lines
that are not different are shown around each line that is different;
they are the context lines.  Also notice that the first two hunks have
run together, because their contents overlap.

     *** lao	Sat Jan 26 23:30:39 1991
     --- tzu	Sat Jan 26 23:30:50 1991
     ***************
     *** 1,7 ****
     - The Way that can be told of is not the eternal Way;
     - The name that can be named is not the eternal name.
       The Nameless is the origin of Heaven and Earth;
     ! The Named is the mother of all things.
       Therefore let there always be non-being,
         so we may see their subtlety,
       And let there always be being,
     --- 1,6 ----
       The Nameless is the origin of Heaven and Earth;
     ! The named is the mother of all things.
     !
       Therefore let there always be non-being,
         so we may see their subtlety,
       And let there always be being,
     ***************
     *** 9,11 ****
     --- 8,13 ----
       The two are the same,
       But after they are produced,
         they have different names.
     + They both may be called deep and profound.
     + Deeper and more profound,
     + The door of all subtleties!


@endnode

@node "Less Context" "diff.guide/Less Context"
@prev "Example Context"
@toc "Context Format"

An Example of Context Format with Less Context
..............................................

   Here is the output of @{b}diff --context=1 lao tzu@{ub} (see
@{"Sample diff Input" link "Sample diff Input"}, for the complete contents of the two files).
Notice that at most one context line is reported here.

     *** lao	Sat Jan 26 23:30:39 1991
     --- tzu	Sat Jan 26 23:30:50 1991
     ***************
     *** 1,5 ****
     - The Way that can be told of is not the eternal Way;
     - The name that can be named is not the eternal name.
       The Nameless is the origin of Heaven and Earth;
     ! The Named is the mother of all things.
       Therefore let there always be non-being,
     --- 1,4 ----
       The Nameless is the origin of Heaven and Earth;
     ! The named is the mother of all things.
     !
       Therefore let there always be non-being,
     ***************
     *** 11 ****
     --- 10,13 ----
         they have different names.
     + They both may be called deep and profound.
     + Deeper and more profound,
     + The door of all subtleties!


@endnode

@node "Unified Format" "diff.guide/Unified Format"
@next "Sections"
@prev "Context Format"
@toc "Context"

Unified Format
--------------

   The unified output format is a variation on the context format that
is more compact because it omits redundant context lines.  To select
this output format, use the @{b}-U LINES@{ub}, @{b}--unified[=LINES]@{ub}, or @{b}-u@{ub} option.
The argument LINES is the number of lines of context to show.  When it
is not given, it defaults to three.

   At present, only GNU @{b}diff@{ub} can produce this format and only GNU @{b}patch@{ub}
can automatically apply diffs in this format.  For proper operation,
@{b}patch@{ub} typically needs at least two lines of context.


 @{" Detailed Unified   " link "Detailed Unified"}  A detailed description of unified format.
 @{" Example Unified    " link "Example Unified"}  Sample output in unified format.


@endnode

@node "Detailed Unified" "diff.guide/Detailed Unified"
@next "Example Unified"
@toc "Unified Format"

Detailed Description of Unified Format
......................................

   The unified output format starts with a two-line header, which looks
like this:

     --- FROM-FILE FROM-FILE-MODIFICATION-TIME
     +++ TO-FILE TO-FILE-MODIFICATION-TIME

You can change the header's content with the @{b}-L LABEL@{ub} or @{b}--label=LABEL@{ub}
option; see See @{"Alternate Names" link "Alternate Names"}.

   Next come one or more hunks of differences; each hunk shows one area
where the files differ.  Unified format hunks look like this:

     @@ FROM-FILE-RANGE TO-FILE-RANGE \@\@
      LINE-FROM-EITHER-FILE
      LINE-FROM-EITHER-FILE...

   The lines common to both files begin with a space character.  The
lines that actually differ between the two files have one of the
following indicator characters in the left column:

@{b}+@{ub}
     A line was added here to the first file.

@{b}-@{ub}
     A line was removed here from the first file.


@endnode

@node "Example Unified" "diff.guide/Example Unified"
@prev "Detailed Unified"
@toc "Unified Format"

An Example of Unified Format
............................

   Here is the output of the command @{b}diff -u lao tzu@{ub} (see
@{"Sample diff Input" link "Sample diff Input"}, for the complete contents of the two files):

     --- lao	Sat Jan 26 23:30:39 1991
     +++ tzu	Sat Jan 26 23:30:50 1991
     @@ -1,7 +1,6 \@\@
     -The Way that can be told of is not the eternal Way;
     -The name that can be named is not the eternal name.
      The Nameless is the origin of Heaven and Earth;
     -The Named is the mother of all things.
     +The named is the mother of all things.
     +
      Therefore let there always be non-being,
        so we may see their subtlety,
      And let there always be being,
     @@ -9,3 +8,6 \@\@
      The two are the same,
      But after they are produced,
        they have different names.
     +They both may be called deep and profound.
     +Deeper and more profound,
     +The door of all subtleties!


@endnode

@node "Sections" "diff.guide/Sections"
@next "Alternate Names"
@prev "Unified Format"
@toc "Context"

Showing Which Sections Differences Are in
-----------------------------------------

   Sometimes you might want to know which part of the files each change
falls in.  If the files are source code, this could mean which function
was changed.  If the files are documents, it could mean which chapter or
appendix was changed.  GNU @{b}diff@{ub} can show this by displaying the nearest
section heading line that precedes the differing lines.  Which lines
are "section headings" is determined by a regular expression.


 @{" Specified Headings " link "Specified Headings"}  Showing headings that match regular expressions.
 @{" C Function Headings " link "C Function Headings"}  Showing headings of C functions.


@endnode

@node "Specified Headings" "diff.guide/Specified Headings"
@next "C Function Headings"
@toc "Sections"

Showing Lines That Match Regular Expressions
............................................

   To show in which sections differences occur for files that are not
source code for C or similar languages, use the @{b}-F REGEXP@{ub} or
@{b}--show-function-line=REGEXP@{ub} option.  @{b}diff@{ub} considers lines that match
the argument REGEXP to be the beginning of a section of the file.  Here
are suggested regular expressions for some common languages:

@{b}^[A-Za-z_]@{ub}
     C, C++, Prolog

@{b}^(@{ub}
     Lisp

@{b}^@\\(chapter\\|appendix\\|unnumbered\\|chapheading\\)@{ub}
     Texinfo

   This option does not automatically select an output format; in order
to use it, you must select the context format (see @{"Context Format" link "Context Format"}) or
unified format (see @{"Unified Format" link "Unified Format"}).  In other output formats it has
no effect.

   The @{b}-F@{ub} and @{b}--show-function-line@{ub} options find the nearest unchanged
line that precedes each hunk of differences and matches the given
regular expression.  Then they add that line to the end of the line of
asterisks in the context format, or to the @{b}\@\@@{ub} line in unified format.  If
no matching line exists, they leave the output for that hunk unchanged.
If that line is more than 40 characters long, they output only the
first 40 characters.  You can specify more than one regular expression
for such lines; @{b}diff@{ub} tries to match each line against each regular
expression, starting with the last one given.  This means that you can
use @{b}-p@{ub} and @{b}-F@{ub} together, if you wish.


@endnode

@node "C Function Headings" "diff.guide/C Function Headings"
@prev "Specified Headings"
@toc "Sections"

Showing C Function Headings
...........................

   To show in which functions differences occur for C and similar
languages, you can use the @{b}-p@{ub} or @{b}--show-c-function@{ub} option.  This option
automatically defaults to the context output format (see
@{"Context Format" link "Context Format"}), with the default number of lines of context.  You
can override that number with @{b}-C LINES@{ub} elsewhere in the command line.
You can override both the format and the number with @{b}-U LINES@{ub} elsewhere
in the command line.

   The @{b}-p@{ub} and @{b}--show-c-function@{ub} options are equivalent to
@{b}-F'^[_a-zA-Z$]'@{ub} if the unified format is specified, otherwise @{b}-c
-F'^[_a-zA-Z$]'@{ub} (see @{"Specified Headings" link "Specified Headings"}).  GNU @{b}diff@{ub} provides them for
the sake of convenience.


@endnode

@node "Alternate Names" "diff.guide/Alternate Names"
@prev "Sections"
@toc "Context"

Showing Alternate File Names
----------------------------

   If you are comparing two files that have meaningless or uninformative
names, you might want @{b}diff@{ub} to show alternate names in the header of the
context and unified output formats.  To do this, use the @{b}-L LABEL@{ub} or
@{b}--label=LABEL@{ub} option.  The first time you give this option, its
argument replaces the name and date of the first file in the header;
the second time, its argument replaces the name and date of the second
file.  If you give this option more than twice, @{b}diff@{ub} reports an error.
The @{b}-L@{ub} option does not affect the file names in the @{b}pr@{ub} header when the
@{b}-l@{ub} or @{b}--paginate@{ub} option is used (see @{"Pagination" link "Pagination"}).

   Here are the first two lines of the output from @{b}diff -C2 -Loriginal
-Lmodified lao tzu@{ub}:

     *** original
     --- modified


@endnode

@node "Side by Side" "diff.guide/Side by Side"
@next "Scripts"
@prev "Context"
@toc "Output Formats"

Showing Differences Side by Side
================================

@{b}   diff@{ub} can produce a side by side difference listing of two files.
The files are listed in two columns with a gutter between them.  The
gutter contains one of the following markers:

white space
     The corresponding lines are in common.  That is, either the lines
     are identical, or the difference is ignored because of one of the
     @{b}--ignore@{ub} options (see @{"White Space" link "White Space"}).

@{b}|@{ub}
     The corresponding lines differ, and they are either both complete
     or both incomplete.

@{b}<@{ub}
     The files differ and only the first file contains the line.

@{b}>@{ub}
     The files differ and only the second file contains the line.

@{b}(@{ub}
     Only the first file contains the line, but the difference is
     ignored.

@{b})@{ub}
     Only the second file contains the line, but the difference is
     ignored.

@{b}\\ @{ub}
     The corresponding lines differ, and only the first line is
     incomplete.

@{b}/@{ub}
     The corresponding lines differ, and only the second line is
     incomplete.

   Normally, an output line is incomplete if and only if the lines that
it contains are incomplete; See @{"Incomplete Lines" link "Incomplete Lines"}.  However, when an
output line represents two differing lines, one might be incomplete
while the other is not.  In this case, the output line is complete, but
its the gutter is marked @{b}\\ @{ub} if the first line is incomplete, @{b}/@{ub} if the
second line is.

   Side by side format is sometimes easiest to read, but it has
limitations.  It generates much wider output than usual, and truncates
lines that are too long to fit.  Also, it relies on lining up output
more heavily than usual, so its output looks particularly bad if you
use varying width fonts, nonstandard tab stops, or nonprinting
characters.

   You can use the @{b}sdiff@{ub} command to interactively merge side by side
differences.  See @{"Interactive Merging" link "Interactive Merging"}, for more information on merging
files.


 @{" Side by Side Format        " link "Side by Side Format"}  Controlling side by side output format.
 @{" Example Side by Side       " link "Example Side by Side"}  Sample side by side output.


@endnode

@node "Side by Side Format" "diff.guide/Side by Side Format"
@next "Example Side by Side"
@toc "Side by Side"

Controlling Side by Side Format
===============================

   The @{b}-y@{ub} or @{b}--side-by-side@{ub} option selects side by side format.
Because side by side output lines contain two input lines, they are
wider than usual.  They are normally 130 columns, which can fit onto a
traditional printer line.  You can set the length of output lines with
the @{b}-W COLUMNS@{ub} or @{b}--width=COLUMNS@{ub} option.  The output line is split
into two halves of equal length, separated by a small gutter to mark
differences; the right half is aligned to a tab stop so that tabs line
up.  Input lines that are too long to fit in half of an output line are
truncated for output.

   The @{b}--left-column@{ub} option prints only the left column of two common
lines.  The @{b}--suppress-common-lines@{ub} option suppresses common lines
entirely.


@endnode

@node "Example Side by Side" "diff.guide/Example Side by Side"
@prev "Side by Side Format"
@toc "Side by Side"

An Example of Side by Side Format
---------------------------------

   Here is the output of the command @{b}diff -y -W 72 lao tzu@{ub} (see
@{"Sample diff Input" link "Sample diff Input"}, for the complete contents of the two files).

     The Way that can be told of is n   <
     The name that can be named is no   <
     The Nameless is the origin of He        The Nameless is the origin of He
     The Named is the mother of all t   |    The named is the mother of all t
                                        >
     Therefore let there always be no        Therefore let there always be no
       so we may see their subtlety,           so we may see their subtlety,
     And let there always be being,          And let there always be being,
       so we may see their outcome.            so we may see their outcome.
     The two are the same,                   The two are the same,
     But after they are produced,            But after they are produced,
       they have different names.              they have different names.
                                        >    They both may be called deep and
                                        >    Deeper and more profound,
                                        >    The door of all subtleties!


@endnode

@node "Scripts" "diff.guide/Scripts"
@next "If-then-else"
@prev "Side by Side"
@toc "Output Formats"

Making Edit Scripts
===================

   Several output modes produce command scripts for editing FROM-FILE
to produce TO-FILE.


 @{" ed Scripts  " link "ed Scripts"}  Using @{b}diff@{ub} to produce commands for @{b}ed@{ub}.
 @{" Forward ed  " link "Forward ed"}  Making forward @{b}ed@{ub} scripts.
 @{" RCS         " link "RCS"}  A special @{b}diff@{ub} output format used by RCS.


@endnode

@node "ed Scripts" "diff.guide/ed Scripts"
@next "Forward ed"
@toc "Scripts"

@{b}ed@{ub} Scripts
----------

@{b}   diff@{ub} can produce commands that direct the @{b}ed@{ub} text editor to change
the first file into the second file.  Long ago, this was the only
output mode that was suitable for editing one file into another
automatically; today, with @{b}patch@{ub}, it is almost obsolete.  Use the @{b}-e@{ub} or
@{b}--ed@{ub} option to select this output format.

   Like the normal format (see @{"Normal" link "Normal"}), this output format does not
show any context; unlike the normal format, it does not include the
information necessary to apply the diff in reverse (to produce the first
file if all you have is the second file and the diff).

   If the file @{b}d@{ub} contains the output of @{b}diff -e old new@{ub}, then the
command @{b}(cat d && echo w) | ed - old@{ub} edits @{b}old@{ub} to make it a copy of
@{b}new@{ub}.  More generally, if @{b}d1@{ub}, @{b}d2@{ub}, ..., @{b}dN@{ub} contain the outputs of @{b}diff -e
old new1@{ub}, @{b}diff -e new1 new2@{ub}, ..., @{b}diff -e newN-1 newN@{ub}, respectively,
then the command @{b}(cat d1 d2 ... dN && echo w) | ed - old@{ub} edits @{b}old@{ub} to
make it a copy of @{b}newN@{ub}.


 @{" Detailed ed        " link "Detailed ed"}  A detailed description of @{b}ed@{ub} format.
 @{" Example ed         " link "Example ed"}  A sample @{b}ed@{ub} script.


@endnode

@node "Detailed ed" "diff.guide/Detailed ed"
@next "Example ed"
@toc "ed Scripts"

Detailed Description of @{b}ed@{ub} Format
.................................

   The @{b}ed@{ub} output format consists of one or more hunks of differences.
The changes closest to the ends of the files come first so that
commands that change the number of lines do not affect how @{b}ed@{ub}
interprets line numbers in succeeding commands.  @{b}ed@{ub} format hunks look
like this:

     CHANGE-COMMAND
     TO-FILE-LINE
     TO-FILE-LINE...
     .

   Because @{b}ed@{ub} uses a single period on a line to indicate the end of
input, GNU @{b}diff@{ub} protects lines of changes that contain a single period
on a line by writing two periods instead, then writing a subsequent @{b}ed@{ub}
command to change the two periods into one.  The @{b}ed@{ub} format cannot
represent an incomplete line, so if the second file ends in a changed
incomplete line, @{b}diff@{ub} reports an error and then pretends that a newline
was appended.

   There are three types of change commands.  Each consists of a line
number or comma-separated range of lines in the first file and a single
character indicating the kind of change to make.  All line numbers are
the original line numbers in the file.  The types of change commands
are:

@{b}La@{ub}
     Add text from the second file after line L in the first file.  For
     example, @{b}8a@{ub} means to add the following lines after line 8 of file
     1.

@{b}Rc@{ub}
     Replace the lines in range R in the first file with the following
     lines.  Like a combined add and delete, but more compact.  For
     example, @{b}5,7c@{ub} means change lines 5-7 of file 1 to read as the text
     file 2.

@{b}Rd@{ub}
     Delete the lines in range R from the first file.  For example,
     @{b}5,7d@{ub} means delete lines 5-7 of file 1.


@endnode

@node "Example ed" "diff.guide/Example ed"
@prev "Detailed ed"
@toc "ed Scripts"

Example @{b}ed@{ub} Script
.................

   Here is the output of @{b}diff -e lao tzu@{ub} (see @{"Sample diff Input" link "Sample diff Input"}, for
the complete contents of the two files):

     11a
     They both may be called deep and profound.
     Deeper and more profound,
     The door of all subtleties!
     .
     4c
     The named is the mother of all things.
     
     .
     1,2d


@endnode

@node "Forward ed" "diff.guide/Forward ed"
@next "RCS"
@prev "ed Scripts"
@toc "Scripts"

Forward @{b}ed@{ub} Scripts
------------------

@{b}   diff@{ub} can produce output that is like an @{b}ed@{ub} script, but with hunks in
forward (front to back) order.  The format of the commands is also
changed slightly: command characters precede the lines they modify,
spaces separate line numbers in ranges, and no attempt is made to
disambiguate hunk lines consisting of a single period.  Like @{b}ed@{ub} format,
forward @{b}ed@{ub} format cannot represent incomplete lines.

   Forward @{b}ed@{ub} format is not very useful, because neither @{b}ed@{ub} nor @{b}patch@{ub}
can apply diffs in this format.  It exists mainly for compatibility
with older versions of @{b}diff@{ub}.  Use the @{b}-f@{ub} or @{b}--forward-ed@{ub} option to
select it.


@endnode

@node "RCS" "diff.guide/RCS"
@prev "Forward ed"
@toc "Scripts"

RCS Scripts
-----------

   The RCS output format is designed specifically for use by the
Revision Control System, which is a set of free programs used for
organizing different versions and systems of files.  Use the @{b}-n@{ub} or
@{b}--rcs@{ub} option to select this output format.  It is like the forward @{b}ed@{ub}
format (see @{"Forward ed" link "Forward ed"}), but it can represent arbitrary changes to the
contents of a file because it avoids the forward @{b}ed@{ub} format's problems
with lines consisting of a single period and with incomplete lines.
Instead of ending text sections with a line consisting of a single
period, each command specifies the number of lines it affects; a
combination of the @{b}a@{ub} and @{b}d@{ub} commands are used instead of @{b}c@{ub}.  Also, if
the second file ends in a changed incomplete line, then the output also
ends in an incomplete line.

   Here is the output of @{b}diff -n lao tzu@{ub} (see @{"Sample diff Input" link "Sample diff Input"}, for
the complete contents of the two files):

     d1 2
     d4 1
     a4 2
     The named is the mother of all things.
     
     a11 3
     They both may be called deep and profound.
     Deeper and more profound,
     The door of all subtleties!


@endnode

@node "If-then-else" "diff.guide/If-then-else"
@prev "Scripts"
@toc "Output Formats"

Merging Files with If-then-else
===============================

   You can use @{b}diff@{ub} to merge two files of C source code.  The output of
@{b}diff@{ub} in this format contains all the lines of both files.  Lines common
to both files are output just once; the differing parts are separated
by the C preprocessor directives @{b}#ifdef NAME@{ub} or @{b}#ifndef NAME@{ub}, @{b}#else@{ub},
and @{b}#endif@{ub}.  When compiling the output, you select which version to use
by either defining or leaving undefined the macro NAME.

   To merge two files, use @{b}diff@{ub} with the @{b}-D NAME@{ub} or @{b}--ifdef=NAME@{ub}
option.  The argument NAME is the C preprocessor identifier to use in
the @{b}#ifdef@{ub} and @{b}#ifndef@{ub} directives.

   For example, if you change an instance of @{b}wait (&s)@{ub} to @{b}waitpid (-1,
&s, 0)@{ub} and then merge the old and new files with the
@{b}--ifdef=HAVE_WAITPID@{ub} option, then the affected part of your code might
look like this:

         do {
     #ifndef HAVE_WAITPID
             if ((w = wait (&s)) < 0  &&  errno != EINTR)
     #else /* HAVE_WAITPID */
             if ((w = waitpid (-1, &s, 0)) < 0  &&  errno != EINTR)
     #endif /* HAVE_WAITPID */
                 return w;
         } while (w != child);

   You can specify formats for languages other than C by using line
group formats and line formats, as described in the next sections.


 @{" Line Group Formats  " link "Line Group Formats"}  Formats for general if-then-else line groups.
 @{" Line Formats        " link "Line Formats"}  Formats for each line in a line group.
 @{" Detailed If-then-else " link "Detailed If-then-else"}  A detailed description of if-then-else format.
 @{" Example If-then-else " link "Example If-then-else"}  Sample if-then-else format output.


@endnode

@node "Line Group Formats" "diff.guide/Line Group Formats"
@next "Line Formats"
@toc "If-then-else"

Line Group Formats
------------------

   Line group formats let you specify formats suitable for many
applications that allow if-then-else input, including programming
languages and text formatting languages.  A line group format specifies
the output format for a contiguous group of similar lines.

   For example, the following command compares the TeX files @{b}old@{ub} and
@{b}new@{ub}, and outputs a merged file in which old regions are surrounded by
@{b}\\begin{em}@{ub}-@{b}\\end{em}@{ub} lines, and new regions are surrounded by
@{b}\\begin{bf}@{ub}-@{b}\\end{bf}@{ub} lines.

     diff \\
        --old-group-format='\\begin{em}
     %<\\end{em}
     ' \\
        --new-group-format='\\begin{bf}
     %>\\end{bf}
     ' \\
        old new

   The following command is equivalent to the above example, but it is a
little more verbose, because it spells out the default line group
formats.

     diff \\
        --old-group-format='\\begin{em}
     %<\\end{em}
     ' \\
        --new-group-format='\\begin{bf}
     %>\\end{bf}
     ' \\
        --unchanged-group-format='%=' \\
        --changed-group-format='\\begin{em}
     %<\\end{em}
     \\begin{bf}
     %>\\end{bf}
     ' \\
        old new

   Here is a more advanced example, which outputs a diff listing with
headers containing line numbers in a "plain English" style.

     diff \\
        --unchanged-group-format='' \\
        --old-group-format='-------- %dn line%(n=1?:s) deleted at %df:
     %<' \\
        --new-group-format='-------- %dN line%(N=1?:s) added after %de:
     %>' \\
        --changed-group-format='-------- %dn line%(n=1?:s) changed at %df:
     %<-------- to:
     %>' \\
        old new

   To specify a line group format, use @{b}diff@{ub} with one of the options
listed below.  You can specify up to four line group formats, one for
each kind of line group.  You should quote FORMAT, because it typically
contains shell metacharacters.

@{b}--old-group-format=FORMAT@{ub}
     These line groups are hunks containing only lines from the first
     file.  The default old group format is the same as the changed
     group format if it is specified; otherwise it is a format that
     outputs the line group as-is.

@{b}--new-group-format=FORMAT@{ub}
     These line groups are hunks containing only lines from the second
     file.  The default new group format is same as the the changed
     group format if it is specified; otherwise it is a format that
     outputs the line group as-is.

@{b}--changed-group-format=FORMAT@{ub}
     These line groups are hunks containing lines from both files.  The
     default changed group format is the concatenation of the old and
     new group formats.

@{b}--unchanged-group-format=FORMAT@{ub}
     These line groups contain lines common to both files.  The default
     unchanged group format is a format that outputs the line group
     as-is.

   In a line group format, ordinary characters represent themselves;
conversion specifications start with @{b}%@{ub} and have one of the following
forms.

@{b}%<@{ub}
     stands for the lines from the first file, including the trailing
     newline.  Each line is formatted according to the old line format
     (see @{"Line Formats" link "Line Formats"}).

@{b}%>@{ub}
     stands for the lines from the second file, including the trailing
     newline.  Each line is formatted according to the new line format.

@{b}%=@{ub}
     stands for the lines common to both files, including the trailing
     newline.  Each line is formatted according to the unchanged line
     format.

@{b}%%@{ub}
     stands for @{b}%@{ub}.

@{b}%c'C'@{ub}
     where C is a single character, stands for C.  C may not be a
     backslash or an apostrophe.  For example, @{b}%c':'@{ub} stands for a
     colon, even inside the then-part of an if-then-else format, which
     a colon would normally terminate.

@{b}%c'\\O'@{ub}
     where O is a string of 1, 2, or 3 octal digits, stands for the
     character with octal code O.  For example, @{b}%c'\\0'@{ub} stands for a
     null character.

@{b}FN@{ub}
     where F is a @{b}printf@{ub} conversion specification and N is one of the
     following letters, stands for N's value formatted with F.

    @{b}e@{ub}
          The line number of the line just before the group in the old
          file.

    @{b}f@{ub}
          The line number of the first line in the group in the old
          file; equals E + 1.

    @{b}l@{ub}
          The line number of the last line in the group in the old file.

    @{b}m@{ub}
          The line number of the line just after the group in the old
          file; equals L + 1.

    @{b}n@{ub}
          The number of lines in the group in the old file; equals L -
          F + 1.

    @{b}E, F, L, M, N@{ub}
          Likewise, for lines in the new file.

     The @{b}printf@{ub} conversion specification can be @{b}%d@{ub}, @{b}%o@{ub}, @{b}%x@{ub}, or @{b}%X@{ub},
     specifying decimal, octal, lower case hexadecimal, or upper case
     hexadecimal output respectively.  After the @{b}%@{ub} the following
     options can appear in sequence: a @{b}-@{ub} specifying left-justification;
     an integer specifying the minimum field width; and a period
     followed by an optional integer specifying the minimum number of
     digits.  For example, @{b}%5dN@{ub} prints the number of new lines in the
     group in a field of width 5 characters, using the @{b}printf@{ub} format
     @{b}"%5d"@{ub}.

@{b}(A=B?T:E)@{ub}
     If A equals B then T else E.  A and B are each either a decimal
     constant or a single letter interpreted as above.  This format
     spec is equivalent to T if A's value equals B's; otherwise it is
     equivalent to E.

     For example, @{b}%(N=0?no:%dN) line%(N=1?:s)@{ub} is equivalent to @{b}no lines@{ub}
     if N (the number of lines in the group in the the new file) is 0,
     to @{b}1 line@{ub} if N is 1, and to @{b}%dN lines@{ub} otherwise.


@endnode

@node "Line Formats" "diff.guide/Line Formats"
@next "Detailed If-then-else"
@prev "Line Group Formats"
@toc "If-then-else"

Line Formats
------------

   Line formats control how each line taken from an input file is
output as part of a line group in if-then-else format.

   For example, the following command outputs text with a one-column
change indicator to the left of the text.  The first column of output
is @{b}-@{ub} for deleted lines, @{b}|@{ub} for added lines, and a space for unchanged
lines.  The formats contain newline characters where newlines are
desired on output.

     diff \\
        --old-line-format='-%l
     ' \\
        --new-line-format='|%l
     ' \\
        --unchanged-line-format=' %l
     ' \\
        old new

   To specify a line format, use one of the following options.  You
should quote FORMAT, since it often contains shell metacharacters.

@{b}--old-line-format=FORMAT@{ub}
     formats lines just from the first file.

@{b}--new-line-format=FORMAT@{ub}
     formats lines just from the second file.

@{b}--unchanged-line-format=FORMAT@{ub}
     formats lines common to both files.

@{b}--line-format=FORMAT@{ub}
     formats all lines; in effect, it sets all three above options
     simultaneously.

   In a line format, ordinary characters represent themselves;
conversion specifications start with @{b}%@{ub} and have one of the following
forms.

@{b}%l@{ub}
     stands for the the contents of the line, not counting its trailing
     newline (if any).  This format ignores whether the line is
     incomplete; See @{"Incomplete Lines" link "Incomplete Lines"}.

@{b}%L@{ub}
     stands for the the contents of the line, including its trailing
     newline (if any).  If a line is incomplete, this format preserves
     its incompleteness.

@{b}%%@{ub}
     stands for @{b}%@{ub}.

@{b}%c'C'@{ub}
     where C is a single character, stands for C.  C may not be a
     backslash or an apostrophe.  For example, @{b}%c':'@{ub} stands for a colon.

@{b}%c'\\O'@{ub}
     where O is a string of 1, 2, or 3 octal digits, stands for the
     character with octal code O.  For example, @{b}%c'\\0'@{ub} stands for a
     null character.

@{b}Fn@{ub}
     where F is a @{b}printf@{ub} conversion specification, stands for the line
     number formatted with F.  For example, @{b}%.5dn@{ub} prints the line
     number using the @{b}printf@{ub} format @{b}"%.5d"@{ub}.  See @{"Line Group Formats" link "Line Group Formats"},
     for more about printf conversion specifications.

   The default line format is @{b}%l@{ub} followed by a newline character.

   If the input contains tab characters and it is important that they
line up on output, you should ensure that @{b}%l@{ub} or @{b}%L@{ub} in a line format is
just after a tab stop (e.g. by preceding @{b}%l@{ub} or @{b}%L@{ub} with a tab
character), or you should use the @{b}-t@{ub} or @{b}--expand-tabs@{ub} option.

   Taken together, the line and line group formats let you specify many
different formats.  For example, the following command uses a format
similar to @{b}diff@{ub}'s normal format.  You can tailor this command to get
fine control over @{b}diff@{ub}'s output.

     diff \\
        --old-line-format='< %l
     ' \\
        --new-line-format='> %l
     ' \\
        --old-group-format='%df%(f=l?:,%dl)d%dE
     %<' \\
        --new-group-format='%dea%dF%(F=L?:,%dL)
     %>' \\
        --changed-group-format='%df%(f=l?:,%dl)c%dF%(F=L?:,%dL)
     %<---
     %>' \\
        --unchanged-group-format='' \\
        old new


@endnode

@node "Detailed If-then-else" "diff.guide/Detailed If-then-else"
@next "Example If-then-else"
@prev "Line Formats"
@toc "If-then-else"

Detailed Description of If-then-else Format
-------------------------------------------

   For lines common to both files, @{b}diff@{ub} uses the unchanged line group
format.  For each hunk of differences in the merged output format, if
the hunk contains only lines from the first file, @{b}diff@{ub} uses the old
line group format; if the hunk contains only lines from the second
file, @{b}diff@{ub} uses the new group format; otherwise, @{b}diff@{ub} uses the changed
group format.

   The old, new, and unchanged line formats specify the output format of
lines from the first file, lines from the second file, and lines common
to both files, respectively.

   The option @{b}--ifdef=NAME@{ub} is equivalent to the following sequence of
options using shell syntax:

     --old-group-format='#ifndef NAME
     %<#endif /* not NAME */
     ' \\
     --new-group-format='#ifdef NAME
     %>#endif /* NAME */
     ' \\
     --unchanged-group-format='%=' \\
     --changed-group-format='#ifndef NAME
     %<#else /* NAME */
     %>#endif /* NAME */
     '

   You should carefully check the @{b}diff@{ub} output for proper nesting.  For
example, when using the the @{b}-D NAME@{ub} or @{b}--ifdef=NAME@{ub} option, you should
check that if the differing lines contain any of the C preprocessor
directives @{b}#ifdef@{ub}, @{b}#ifndef@{ub}, @{b}#else@{ub}, @{b}#elif@{ub}, or @{b}#endif@{ub}, they are nested
properly and match.  If they don't, you must make corrections manually.
It is a good idea to carefully check the resulting code anyway to make
sure that it really does what you want it to; depending on how the
input files were produced, the output might contain duplicate or
otherwise incorrect code.

   The @{b}patch@{ub} @{b}-D NAME@{ub} option behaves just like the @{b}diff@{ub} @{b}-D NAME@{ub} option,
except it operates on a file and a diff to produce a merged file; See
@{"patch Options" link "patch Options"}.


@endnode

@node "Example If-then-else" "diff.guide/Example If-then-else"
@prev "Detailed If-then-else"
@toc "If-then-else"

An Example of If-then-else Format
---------------------------------

   Here is the output of @{b}diff -DTWO lao tzu@{ub} (see @{"Sample diff Input" link "Sample diff Input"},
for the complete contents of the two files):

     #ifndef TWO
     The Way that can be told of is not the eternal Way;
     The name that can be named is not the eternal name.
     #endif /* not TWO */
     The Nameless is the origin of Heaven and Earth;
     #ifndef TWO
     The Named is the mother of all things.
     #else /* TWO */
     The named is the mother of all things.
     
     #endif /* TWO */
     Therefore let there always be non-being,
       so we may see their subtlety,
     And let there always be being,
       so we may see their outcome.
     The two are the same,
     But after they are produced,
       they have different names.
     #ifdef TWO
     They both may be called deep and profound.
     Deeper and more profound,
     The door of all subtleties!
     #endif /* TWO */


@endnode

@node "Comparing Directories" "diff.guide/Comparing Directories"
@next "Adjusting Output"
@prev "Output Formats"
@toc "Main"

Comparing Directories
*********************

   You can use @{b}diff@{ub} to compare some or all of the files in two
directory trees.  When both file name arguments to @{b}diff@{ub} are
directories, it compares each file that is contained in both
directories, examining file names in alphabetical order.  Normally @{b}diff@{ub}
is silent about pairs of files that contain no differences, but if you
use the @{b}-s@{ub} or @{b}--report-identical-files@{ub} option, it reports pairs of
identical files.  Normally @{b}diff@{ub} reports subdirectories common to both
directories without comparing subdirectories' files, but if you use the
@{b}-r@{ub} or @{b}--recursive@{ub} option, it compares every corresponding pair of files
in the directory trees, as many levels deep as they go.

   For file names that are in only one of the directories, @{b}diff@{ub}
normally does not show the contents of the file that exists; it reports
only that the file exists in that directory and not in the other.  You
can make @{b}diff@{ub} act as though the file existed but was empty in the other
directory, so that it outputs the entire contents of the file that
actually exists.  (It is output as either an insertion or a deletion,
depending on whether it is in the first or the second directory given.)
To do this, use the @{b}-N@{ub} or @{b}--new-file@{ub} option.

   If the older directory contains one or more large files that are not
in the newer directory, you can make the patch smaller by using the @{b}-P@{ub}
or @{b}--unidirectional-new-file@{ub} option instead of @{b}-N@{ub}.  This option is like
@{b}-N@{ub} except that it only inserts the contents of files that appear in the
second directory but not the first (that is, files that were added).
At the top of the patch, write instructions for the user applying the
patch to remove the files that were deleted before applying the patch.
See @{"Making Patches" link "Making Patches"}, for more discussion of making patches for
distribution.

   To ignore some files while comparing directories, use the @{b}-x PATTERN@{ub}
or @{b}--exclude=PATTERN@{ub} option.  This option ignores any files or
subdirectories whose base names match the shell pattern PATTERN.
Unlike in the shell, a period at the start of the base of a file name
matches a wildcard at the start of a pattern.  You should enclose
PATTERN in quotes so that the shell does not expand it.  For example,
the option @{b}-x '*.[ao]'@{ub} ignores any file whose name ends with @{b}.a@{ub} or @{b}.o@{ub}.

   This option accumulates if you specify it more than once.  For
example, using the options @{b}-x 'RCS' -x '*,v'@{ub} ignores any file or
subdirectory whose base name is @{b}RCS@{ub} or ends with @{b},v@{ub}.

   If you need to give this option many times, you can instead put the
patterns in a file, one pattern per line, and use the @{b}-X FILE@{ub} or
@{b}--exclude-from=FILE@{ub} option.

   If you have been comparing two directories and stopped partway
through, later you might want to continue where you left off.  You can
do this by using the @{b}-S FILE@{ub} or @{b}--starting-file=FILE@{ub} option.  This
compares only the file FILE and all alphabetically later files in the
topmost directory level.


@endnode

@node "Adjusting Output" "diff.guide/Adjusting Output"
@next "diff Performance"
@prev "Comparing Directories"
@toc "Main"

Making @{b}diff@{ub} Output Prettier
***************************

@{b}   diff@{ub} provides several ways to adjust the appearance of its output.
These adjustments can be applied to any output format.


 @{" Tabs              " link "Tabs"}  Preserving the alignment of tabstops.
 @{" Pagination        " link "Pagination"}  Page numbering and timestamping @{b}diff@{ub} output.


@endnode

@node "Tabs" "diff.guide/Tabs"
@next "Pagination"
@toc "Adjusting Output"

Preserving Tabstop Alignment
============================

   The lines of text in some of the @{b}diff@{ub} output formats are preceded by
one or two characters that indicate whether the text is inserted,
deleted, or changed.  The addition of those characters can cause tabs to
move to the next tabstop, throwing off the alignment of columns in the
line.  GNU @{b}diff@{ub} provides two ways to make tab-aligned columns line up
correctly.

   The first way is to have @{b}diff@{ub} convert all tabs into the correct
number of spaces before outputting them; select this method with the @{b}-t@{ub}
or @{b}--expand-tabs@{ub} option.  @{b}diff@{ub} assumes that tabstops are set every 8
columns.  To use this form of output with @{b}patch@{ub}, you must give @{b}patch@{ub}
the @{b}-l@{ub} or @{b}--ignore-white-space@{ub} option (see @{"Changed White Space" link "Changed White Space"}, for
more information).

   The other method for making tabs line up correctly is to add a tab
character instead of a space after the indicator character at the
beginning of the line.  This ensures that all following tab characters
are in the same position relative to tabstops that they were in the
original files, so that the output is aligned correctly.  Its
disadvantage is that it can make long lines too long to fit on one line
of the screen or the paper.  It also does not work with the unified
output format, which does not have a space character after the change
type indicator character.  Select this method with the @{b}-T@{ub} or
@{b}--initial-tab@{ub} option.


@endnode

@node "Pagination" "diff.guide/Pagination"
@prev "Tabs"
@toc "Adjusting Output"

Paginating @{b}diff@{ub} Output
======================

   It can be convenient to have long output page-numbered and
time-stamped.  The @{b}-l@{ub} and @{b}--paginate@{ub} options do this by sending the
@{b}diff@{ub} output through the @{b}pr@{ub} program.  Here is what the page header might
look like for @{b}diff -lc lao tzu@{ub}:

     Mar 11 13:37 1991  diff -lc lao tzu Page 1


@endnode

@node "diff Performance" "diff.guide/diff Performance"
@next "Comparing Three Files"
@prev "Adjusting Output"
@toc "Main"

@{b}diff@{ub} Performance Tradeoffs
**************************

   GNU @{b}diff@{ub} runs quite efficiently; however, in some circumstances you
can cause it to run faster or produce a more compact set of changes.
There are two ways that you can affect the performance of GNU @{b}diff@{ub} by
changing the way it compares files.

   Performance has more than one dimension.  These options improve one
aspect of performance at the cost of another, or they improve
performance in some cases while hurting it in others.

   The way that GNU @{b}diff@{ub} determines which lines have changed always
comes up with a near-minimal set of differences.  Usually it is good
enough for practical purposes.  If the @{b}diff@{ub} output is large, you might
want @{b}diff@{ub} to use a modified algorithm that sometimes produces a smaller
set of differences.  The @{b}-d@{ub} or @{b}--minimal@{ub} option does this; however, it
can also cause @{b}diff@{ub} to run more slowly than usual, so it is not the
default behavior.

   When the files you are comparing are large and have small groups of
changes scattered throughout them, you can use the @{b}-H@{ub} or
@{b}--speed-large-files@{ub} option to make a different modification to the
algorithm that @{b}diff@{ub} uses.  If the input files have a constant small
density of changes, this option speeds up the comparisons without
changing the output.  If not, @{b}diff@{ub} might produce a larger set of
differences; however, the output will still be correct.

   Normally @{b}diff@{ub} discards the prefix and suffix that is common to both
files before it attempts to find a minimal set of differences.  This
makes @{b}diff@{ub} run faster, but occasionally it may produce non-minimal
output.  The @{b}--horizon-lines=LINES@{ub} option prevents @{b}diff@{ub} from discarding
the last LINES lines of the prefix and the first LINES lines of the
suffix.  This gives @{b}diff@{ub} further opportunities to find a minimal output.


@endnode

@node "Comparing Three Files" "diff.guide/Comparing Three Files"
@next "diff3 Merging"
@prev "diff Performance"
@toc "Main"

Comparing Three Files
*********************

   Use the program @{b}diff3@{ub} to compare three files and show any
differences among them.  (@{b}diff3@{ub} can also merge files; see
@{"diff3 Merging" link "diff3 Merging"}.).

   The "normal" @{b}diff3@{ub} output format shows each hunk of differences
without surrounding context.  Hunks are labeled depending on whether
they are two-way or three-way, and lines are annotated by their
location in the input files.

   See @{"Invoking diff3" link "Invoking diff3"}, for more information on how to run @{b}diff3@{ub}.


 @{" Sample diff3 Input  " link "Sample diff3 Input"}  Sample @{b}diff3@{ub} input for examples.
 @{" Detailed diff3 Normal " link "Detailed diff3 Normal"}  A detailed description of normal output format.
 @{" diff3 Hunks         " link "diff3 Hunks"}  The format of normal output format.
 @{" Example diff3 Normal " link "Example diff3 Normal"}  Sample output in the normal format.


@endnode

@node "Sample diff3 Input" "diff.guide/Sample diff3 Input"
@next "Detailed diff3 Normal"
@toc "Comparing Three Files"

A Third Sample Input File
=========================

   Here is a third sample file that will be used in examples to
illustrate the output of @{b}diff3@{ub} and how various options can change it.
The first two files are the same that we used for @{b}diff@{ub} (see
@{"Sample diff Input" link "Sample diff Input"}).  This is the third sample file, called @{b}tao@{ub}:

     The Way that can be told of is not the eternal Way;
     The name that can be named is not the eternal name.
     The Nameless is the origin of Heaven and Earth;
     The named is the mother of all things.
     
     Therefore let there always be non-being,
       so we may see their subtlety,
     And let there always be being,
       so we may see their result.
     The two are the same,
     But after they are produced,
       they have different names.
     
       -- The Way of Lao-Tzu, tr. Wing-tsit Chan


@endnode

@node "Detailed diff3 Normal" "diff.guide/Detailed diff3 Normal"
@next "diff3 Hunks"
@prev "Sample diff3 Input"
@toc "Comparing Three Files"

Detailed Description of @{b}diff3@{ub} Normal Format
===========================================

   Each hunk begins with a line marked @{b}====@{ub}.  Three-way hunks have
plain @{b}====@{ub} lines, and two-way hunks have @{b}1@{ub}, @{b}2@{ub}, or @{b}3@{ub} appended to specify
which of the three input files differ in that hunk.  The hunks contain
copies of two or three sets of input lines each preceded by one or two
commands identifying where the lines came from.

   Normally, two spaces precede each copy of an input line to
distinguish it from the commands.  But with the @{b}-T@{ub} or @{b}--initial-tab@{ub}
option, @{b}diff3@{ub} uses a tab instead of two spaces; this lines up tabs
correctly.  See @{"Tabs" link "Tabs"}, for more information.

   Commands take the following forms:

@{b}FILE:La@{ub}
     This hunk appears after line L of file FILE, and contains no lines
     in that file.  To edit this file to yield the other files, one
     must append hunk lines taken from the other files.  For example,
     @{b}1:11a@{ub} means that the hunk follows line 11 in the first file and
     contains no lines from that file.

@{b}FILE:Rc@{ub}
     This hunk contains the lines in the range R of file FILE.  The
     range R is a comma-separated pair of line numbers, or just one
     number if the range is a singleton.  To edit this file to yield the
     other files, one must change the specified lines to be the lines
     taken from the other files.  For example, @{b}2:11,13c@{ub} means that the
     hunk contains lines 11 through 13 from the second file.

   If the last line in a set of input lines is incomplete (see
@{"Incomplete Lines" link "Incomplete Lines"}), it is distinguished on output from a full line by
a following line that starts with @{b}\\ @{ub}.


@endnode

@node "diff3 Hunks" "diff.guide/diff3 Hunks"
@next "Example diff3 Normal"
@prev "Detailed diff3 Normal"
@toc "Comparing Three Files"

@{b}diff3@{ub} Hunks
===========

   Groups of lines that differ in two or three of the input files are
called @{i}diff3 hunks@{ui}, by analogy with @{b}diff@{ub} hunks (see @{"Hunks" link "Hunks"}).  If all
three input files differ in a @{b}diff3@{ub} hunk, the hunk is called a
@{i}three-way hunk@{ui}; if just two input files differ, it is a @{i}two-way hunk@{ui}.

   As with @{b}diff@{ub}, several solutions are possible.  When comparing the
files @{b}A@{ub}, @{b}B@{ub}, and @{b}C@{ub}, @{b}diff3@{ub} normally finds @{b}diff3@{ub} hunks by merging the
two-way hunks output by the two commands @{b}diff A B@{ub} and @{b}diff A C@{ub}.  This
does not necessarily minimize the size of the output, but exceptions
should be rare.

   For example, suppose @{b}F@{ub} contains the three lines @{b}a@{ub}, @{b}b@{ub}, @{b}f@{ub}, @{b}G@{ub} contains
the lines @{b}g@{ub}, @{b}b@{ub}, @{b}g@{ub}, and @{b}H@{ub} contains the lines @{b}a@{ub}, @{b}b@{ub}, @{b}h@{ub}.  @{b}diff3 F G H@{ub} might
output the following:

     ====2
     1:1c
     3:1c
       a
     2:1c
       g
     ====
     1:3c
       f
     2:3c
       g
     3:3c
       h

because it found a two-way hunk containing @{b}a@{ub} in the first and third
files and @{b}g@{ub} in the second file, then the single line @{b}b@{ub} common to all
three files, then a three-way hunk containing the last line of each
file.


@endnode

@node "Example diff3 Normal" "diff.guide/Example diff3 Normal"
@prev "diff3 Hunks"
@toc "Comparing Three Files"

An Example of @{b}diff3@{ub} Normal Format
=================================

   Here is the output of the command @{b}diff3 lao tzu tao@{ub} (see
@{"Sample diff3 Input" link "Sample diff3 Input"}, for the complete contents of the files).  Notice
that it shows only the lines that are different among the three files.

     ====2
     1:1,2c
     3:1,2c
       The Way that can be told of is not the eternal Way;
       The name that can be named is not the eternal name.
     2:0a
     ====1
     1:4c
       The Named is the mother of all things.
     2:2,3c
     3:4,5c
       The named is the mother of all things.
     
     ====3
     1:8c
     2:7c
         so we may see their outcome.
     3:9c
         so we may see their result.
     ====
     1:11a
     2:11,13c
       They both may be called deep and profound.
       Deeper and more profound,
       The door of all subtleties!
     3:13,14c
     
         -- The Way of Lao-Tzu, tr. Wing-tsit Chan


@endnode

@node "diff3 Merging" "diff.guide/diff3 Merging"
@next "Interactive Merging"
@prev "Comparing Three Files"
@toc "Main"

Merging From a Common Ancestor
******************************

   When two people have made changes to copies of the same file, @{b}diff3@{ub}
can produce a merged output that contains both sets of changes together
with warnings about conflicts.

   One might imagine programs with names like @{b}diff4@{ub} and @{b}diff5@{ub} to
compare more than three files simultaneously, but in practice the need
rarely arises.  You can use @{b}diff3@{ub} to merge three or more sets of
changes to a file by merging two change sets at a time.

@{b}   diff3@{ub} can incorporate changes from two modified versions into a
common preceding version.  This lets you merge the sets of changes
represented by the two newer files.  Specify the common ancestor version
as the second argument and the two newer versions as the first and third
arguments, like this:

     diff3 MINE OLDER YOURS

You can remember the order of the arguments by noting that they are in
alphabetical order.

   You can think of this as subtracting OLDER from YOURS and adding the
result to MINE, or as merging into MINE the changes that would turn
OLDER into YOURS.  This merging is well-defined as long as MINE and
OLDER match in the neighborhood of each such change.  This fails to be
true when all three input files differ or when only OLDER differs; we
call this a @{i}conflict@{ui}.  When all three input files differ, we call the
conflict an @{i}overlap@{ui}.

@{b}   diff3@{ub} gives you several ways to handle overlaps and conflicts.  You
can omit overlaps or conflicts, or select only overlaps, or mark
conflicts with special @{b}<<<<<<<@{ub} and @{b}>>>>>>>@{ub} lines.

@{b}   diff3@{ub} can output the merge results as an @{b}ed@{ub} script that that can be
applied to the first file to yield the merged output.  However, it is
usually better to have @{b}diff3@{ub} generate the merged output directly; this
bypasses some problems with @{b}ed@{ub}.


 @{" Which Changes            " link "Which Changes"}  Selecting changes to incorporate.
 @{" Marking Conflicts        " link "Marking Conflicts"}  Marking conflicts.
 @{" Bypassing ed             " link "Bypassing ed"}  Generating merged output directly.
 @{" Merging Incomplete Lines " link "Merging Incomplete Lines"}  How @{b}diff3@{ub} merges incomplete lines.
 @{" Saving the Changed File  " link "Saving the Changed File"}  Emulating System V behavior.


@endnode

@node "Which Changes" "diff.guide/Which Changes"
@next "Marking Conflicts"
@toc "diff3 Merging"

Selecting Which Changes to Incorporate
======================================

   You can select all unmerged changes from OLDER to YOURS for merging
into MINE with the @{b}-e@{ub} or @{b}--ed@{ub} option.  You can select only the
nonoverlapping unmerged changes with @{b}-3@{ub} or @{b}--easy-only@{ub}, and you can
select only the overlapping changes with @{b}-x@{ub} or @{b}--overlap-only@{ub}.

   The @{b}-e@{ub}, @{b}-3@{ub} and @{b}-x@{ub} options select only @{i}unmerged changes@{ui}, i.e. changes
where MINE and YOURS differ; they ignore changes from OLDER to YOURS
where MINE and YOURS are identical, because they assume that such
changes have already been merged.  If this assumption is not a safe
one, you can use the @{b}-A@{ub} or @{b}--show-all@{ub} option (see @{"Marking Conflicts" link "Marking Conflicts"}).

   Here is the output of the command @{b}diff3@{ub} with each of these three
options (see @{"Sample diff3 Input" link "Sample diff3 Input"}, for the complete contents of the
files).  Notice that @{b}-e@{ub} outputs the union of the disjoint sets of
changes output by @{b}-3@{ub} and @{b}-x@{ub}.

   Output of @{b}diff3 -e lao tzu tao@{ub}:
     11a
     
       -- The Way of Lao-Tzu, tr. Wing-tsit Chan
     .
     8c
       so we may see their result.
     .

   Output of @{b}diff3 -3 lao tzu tao@{ub}:
     8c
       so we may see their result.
     .

   Output of @{b}diff3 -x lao tzu tao@{ub}:
     11a
     
       -- The Way of Lao-Tzu, tr. Wing-tsit Chan
     .


@endnode

@node "Marking Conflicts" "diff.guide/Marking Conflicts"
@next "Bypassing ed"
@prev "Which Changes"
@toc "diff3 Merging"

Marking Conflicts
=================

@{b}   diff3@{ub} can mark conflicts in the merged output by bracketing them
with special marker lines.  A conflict that comes from two files A and
B is marked as follows:

     <<<<<<< A
     lines from A
     =======
     lines from B
     >>>>>>> B

   A conflict that comes from three files A, B and C is marked as
follows:

     <<<<<<< A
     lines from A
     ||||||| B
     lines from B
     =======
     lines from C
     >>>>>>> C

   The @{b}-A@{ub} or @{b}--show-all@{ub} option acts like the @{b}-e@{ub} option, except that it
brackets conflicts, and it outputs all changes from OLDER to YOURS, not
just the unmerged changes.  Thus, given the sample input files (see
@{"Sample diff3 Input" link "Sample diff3 Input"}), @{b}diff3 -A lao tzu tao@{ub} puts brackets around the
conflict where only @{b}tzu@{ub} differs:

     <<<<<<< tzu
     =======
     The Way that can be told of is not the eternal Way;
     The name that can be named is not the eternal name.
     >>>>>>> tao

   And it outputs the three-way conflict as follows:

     <<<<<<< lao
     ||||||| tzu
     They both may be called deep and profound.
     Deeper and more profound,
     The door of all subtleties!
     =======
     
       -- The Way of Lao-Tzu, tr. Wing-tsit Chan
     >>>>>>> tao

   The @{b}-E@{ub} or @{b}--show-overlap@{ub} option outputs less information than the @{b}-A@{ub}
or @{b}--show-all@{ub} option, because it outputs only unmerged changes, and it
never outputs the contents of the second file.  Thus the @{b}-E@{ub} option acts
like the @{b}-e@{ub} option, except that it brackets the first and third files
from three-way overlapping changes.  Similarly, @{b}-X@{ub} acts like @{b}-x@{ub}, except
it brackets all its (necessarily overlapping) changes.  For example,
for the three-way overlapping change above, the @{b}-E@{ub} and @{b}-X@{ub} options
output the following:

     <<<<<<< lao
     =======
     
       -- The Way of Lao-Tzu, tr. Wing-tsit Chan
     >>>>>>> tao

   If you are comparing files that have meaningless or uninformative
names, you can use the @{b}-L LABEL@{ub} or @{b}--label=LABEL@{ub} option to show
alternate names in the @{b}<<<<<<<@{ub}, @{b}|||||||@{ub} and @{b}>>>>>>>@{ub} brackets.  This
option can be given up to three times, once for each input file.  Thus
@{b}diff3 -A -L X -L Y -L Z A B C@{ub} acts like @{b}diff3 -A A B C@{ub}, except that the
output looks like it came from files named @{b}X@{ub}, @{b}Y@{ub} and @{b}Z@{ub} rather than from
files named @{b}A@{ub}, @{b}B@{ub} and @{b}C@{ub}.


@endnode

@node "Bypassing ed" "diff.guide/Bypassing ed"
@next "Merging Incomplete Lines"
@prev "Marking Conflicts"
@toc "diff3 Merging"

Generating the Merged Output Directly
=====================================

   With the @{b}-m@{ub} or @{b}--merge@{ub} option, @{b}diff3@{ub} outputs the merged file
directly.  This is more efficient than using @{b}ed@{ub} to generate it, and
works even with non-text files that @{b}ed@{ub} would reject.  If you specify @{b}-m@{ub}
without an @{b}ed@{ub} script option, @{b}-A@{ub} (@{b}--show-all@{ub}) is assumed.

   For example, the command @{b}diff3 -m lao tzu tao@{ub} (see
@{"Sample diff3 Input" link "Sample diff3 Input"} for a copy of the input files) would output the
following:

     <<<<<<< tzu
     =======
     The Way that can be told of is not the eternal Way;
     The name that can be named is not the eternal name.
     >>>>>>> tao
     The Nameless is the origin of Heaven and Earth;
     The Named is the mother of all things.
     Therefore let there always be non-being,
       so we may see their subtlety,
     And let there always be being,
       so we may see their result.
     The two are the same,
     But after they are produced,
       they have different names.
     <<<<<<< lao
     ||||||| tzu
     They both may be called deep and profound.
     Deeper and more profound,
     The door of all subtleties!
     =======
     
       -- The Way of Lao-Tzu, tr. Wing-tsit Chan
     >>>>>>> tao


@endnode

@node "Merging Incomplete Lines" "diff.guide/Merging Incomplete Lines"
@next "Saving the Changed File"
@prev "Bypassing ed"
@toc "diff3 Merging"

How @{b}diff3@{ub} Merges Incomplete Lines
=================================

   With @{b}-m@{ub}, incomplete lines (see @{"Incomplete Lines" link "Incomplete Lines"}) are simply copied
to the output as they are found; if the merged output ends in an
conflict and one of the input files ends in an incomplete line,
succeeding @{b}|||||||@{ub}, @{b}=======@{ub} or @{b}>>>>>>>@{ub} brackets appear somewhere other
than the start of a line because they are appended to the incomplete
line.

   Without @{b}-m@{ub}, if an @{b}ed@{ub} script option is specified and an incomplete
line is found, @{b}diff3@{ub} generates a warning and acts as if a newline had
been present.


@endnode

@node "Saving the Changed File" "diff.guide/Saving the Changed File"
@prev "Merging Incomplete Lines"
@toc "diff3 Merging"

Saving the Changed File
=======================

   Traditional Unix @{b}diff3@{ub} generates an @{b}ed@{ub} script without the trailing @{b}w@{ub}
and and @{b}q@{ub} commands that save the changes.  System V @{b}diff3@{ub} generates
these extra commands.  GNU @{b}diff3@{ub} normally behaves like traditional Unix
@{b}diff3@{ub}, but with the @{b}-i@{ub} option it behaves like System V @{b}diff3@{ub} and
appends the @{b}w@{ub} and @{b}q@{ub} commands.

   The @{b}-i@{ub} option requires one of the @{b}ed@{ub} script options @{b}-AeExX3@{ub}, and is
incompatible with the merged output option @{b}-m@{ub}.


@endnode

@node "Interactive Merging" "diff.guide/Interactive Merging"
@next "Merging with patch"
@prev "diff3 Merging"
@toc "Main"

Interactive Merging with @{b}sdiff@{ub}
******************************

   With @{b}sdiff@{ub}, you can merge two files interactively based on a
side-by-side @{b}-y@{ub} format comparison (see @{"Side by Side" link "Side by Side"}).  Use @{b}-o FILE@{ub} or
@{b}--output=FILE@{ub} to specify where to put the merged text.  See
@{"Invoking sdiff" link "Invoking sdiff"}, for more details on the options to @{b}sdiff@{ub}.

   Another way to merge files interactively is to use the Emacs Lisp
package @{b}emerge@{ub}.  See @{"emerge" link "emacs.guide/emerge"}, for more information.


 @{" sdiff Option Summary " link "sdiff Option Summary"}  Summary of @{b}sdiff@{ub} options.
 @{" Merge Commands     " link "Merge Commands"}  Merging two files interactively.


@endnode

@node "sdiff Option Summary" "diff.guide/sdiff Option Summary"
@next "Merge Commands"
@toc "Interactive Merging"

Specifying @{b}diff@{ub} Options to @{b}sdiff@{ub}
================================

   The following @{b}sdiff@{ub} options have the same meaning as for @{b}diff@{ub}.  See
@{"diff Options" link "diff Options"}, for the use of these options.

     -a -b -d -i -t -v
     -B -H -I REGEXP
     
     --ignore-blank-lines  --ignore-case
     --ignore-matching-lines=REGEXP  --ignore-space-change
     --left-column  --minimal  --speed-large-files
     --suppress-common-lines  --expand-tabs
     --text  --version  --width=COLUMNS

   For historical reasons, @{b}sdiff@{ub} has alternate names for some options.
The @{b}-l@{ub} option is equivalent to the @{b}--left-column@{ub} option, and similarly
@{b}-s@{ub} is equivalent to @{b}--suppress-common-lines@{ub}.  The meaning of the @{b}sdiff@{ub}
@{b}-w@{ub} and @{b}-W@{ub} options is interchanged from that of @{b}diff@{ub}: with @{b}sdiff@{ub}, @{b}-w
COLUMNS@{ub} is equivalent to @{b}--width=COLUMNS@{ub}, and @{b}-W@{ub} is equivalent to
@{b}--ignore-all-space@{ub}.  @{b}sdiff@{ub} without the @{b}-o@{ub} option is equivalent to @{b}diff@{ub}
with the @{b}-y@{ub} or @{b}--side-by-side@{ub} option (see @{"Side by Side" link "Side by Side"}).


@endnode

@node "Merge Commands" "diff.guide/Merge Commands"
@prev "sdiff Option Summary"
@toc "Interactive Merging"

Merge Commands
==============

   Groups of common lines, with a blank gutter, are copied from the
first file to the output.  After each group of differing lines, @{b}sdiff@{ub}
prompts with @{b}%@{ub} and pauses, waiting for one of the following commands.
Follow each command with <RET>.

@{b}e@{ub}
     Discard both versions.  Invoke a text editor on an empty temporary
     file, then copy the resulting file to the output.

@{b}eb@{ub}
     Concatenate the two versions, edit the result in a temporary file,
     then copy the edited result to the output.

@{b}el@{ub}
     Edit a copy of the left version, then copy the result to the
     output.

@{b}er@{ub}
     Edit a copy of the right version, then copy the result to the
     output.

@{b}l@{ub}
     Copy the left version to the output.

@{b}q@{ub}
     Quit.

@{b}r@{ub}
     Copy the right version to the output.

@{b}s@{ub}
     Silently copy common lines.

@{b}v@{ub}
     Verbosely copy common lines.  This is the default.

   The text editor invoked is specified by the @{b}EDITOR@{ub} environment
variable if it is set.  The default is system-dependent.


@endnode

@node "Merging with patch" "diff.guide/Merging with patch"
@next "Making Patches"
@prev "Interactive Merging"
@toc "Main"

Merging with @{b}patch@{ub}
******************

@{b}   patch@{ub} takes comparison output produced by @{b}diff@{ub} and applies the
differences to a copy of the original file, producing a patched
version.  With @{b}patch@{ub}, you can distribute just the changes to a set of
files instead of distributing the entire file set; your correspondents
can apply @{b}patch@{ub} to update their copy of the files with your changes.
@{b}patch@{ub} automatically determines the diff format, skips any leading or
trailing headers, and uses the headers to determine which file to
patch.  This lets your correspondents feed an article or message
containing a difference listing directly to @{b}patch@{ub}.

@{b}   patch@{ub} detects and warns about common problems like forward patches.
It saves the original version of the files it patches, and saves any
patches that it could not apply.  It can also maintain a @{b}patchlevel.h@{ub}
file to ensures that your correspondents apply diffs in the proper
order.

@{b}   patch@{ub} accepts a series of diffs in its standard input, usually
separated by headers that specify which file to patch.  It applies @{b}diff@{ub}
hunks (see @{"Hunks" link "Hunks"}) one by one.  If a hunk does not exactly match the
original file, @{b}patch@{ub} uses heuristics to try to patch the file as well
as it can.  If no approximate match can be found, @{b}patch@{ub} rejects the
hunk and skips to the next hunk.  @{b}patch@{ub} normally replaces each file F
with its new version, saving the original file in @{b}F.orig@{ub}, and putting
reject hunks (if any) into @{b}F.rej@{ub}.

   See @{"Invoking patch" link "Invoking patch"}, for detailed information on the options to
@{b}patch@{ub}.  See @{"Backups" link "Backups"}, for more information on how @{b}patch@{ub} names backup
files.  See @{"Rejects" link "Rejects"}, for more information on where @{b}patch@{ub} puts reject
hunks.


 @{" patch Input        " link "patch Input"}  Selecting the type of @{b}patch@{ub} input.
 @{" Imperfect          " link "Imperfect"}  Dealing with imperfect patches.
 @{" Empty Files        " link "Empty Files"}  Removing empty files after patching.
 @{" Multiple Patches   " link "Multiple Patches"}  Handling multiple patches in a file specially.
 @{" patch Messages     " link "patch Messages"}  Messages and questions @{b}patch@{ub} can produce.


@endnode

@node "patch Input" "diff.guide/patch Input"
@next "Imperfect"
@toc "Merging with patch"

Selecting the @{b}patch@{ub} Input Format
================================

@{b}   patch@{ub} normally determines which @{b}diff@{ub} format the patch file uses by
examining its contents.  For patch files that contain particularly
confusing leading text, you might need to use one of the following
options to force @{b}patch@{ub} to interpret the patch file as a certain format
of diff.  The output formats listed here are the only ones that @{b}patch@{ub}
can understand.

@{b}-c@{ub}
@{b}--context@{ub}
     context diff.

@{b}-e@{ub}
@{b}--ed@{ub}
@{b}     ed@{ub} script.

@{b}-n@{ub}
@{b}--normal@{ub}
     normal diff.

@{b}-u@{ub}
@{b}--unified@{ub}
     unified diff.


@endnode

@node "Imperfect" "diff.guide/Imperfect"
@next "Empty Files"
@prev "patch Input"
@toc "Merging with patch"

Applying Imperfect Patches
==========================

@{b}   patch@{ub} tries to skip any leading text in the patch file, apply the
diff, and then skip any trailing text.  Thus you can feed a news article
or mail message directly to @{b}patch@{ub}, and it should work.  If the entire
diff is indented by a constant amount of white space, @{b}patch@{ub}
automatically ignores the indentation.

   However, certain other types of imperfect input require user
intervention.


 @{" Changed White Space " link "Changed White Space"}  When tabs and spaces don't match exactly.
 @{" Reversed Patches   " link "Reversed Patches"}  Applying reversed patches correctly.
 @{" Inexact            " link "Inexact"}  Helping @{b}patch@{ub} find close matches.


@endnode

@node "Changed White Space" "diff.guide/Changed White Space"
@next "Reversed Patches"
@toc "Imperfect"

Applying Patches with Changed White Space
-----------------------------------------

   Sometimes mailers, editors, or other programs change spaces into
tabs, or vice versa.  If this happens to a patch file or an input file,
the files might look the same, but @{b}patch@{ub} will not be able to match them
properly.  If this problem occurs, use the @{b}-l@{ub} or @{b}--ignore-white-space@{ub}
option, which makes @{b}patch@{ub} compare white space loosely so that any
sequence of white space in the patch file matches any sequence of white
space in the input files.  Non-white-space characters must still match
exactly.  Each line of the context must still match a line in the input
file.


@endnode

@node "Reversed Patches" "diff.guide/Reversed Patches"
@next "Inexact"
@prev "Changed White Space"
@toc "Imperfect"

Applying Reversed Patches
-------------------------

   Sometimes people run @{b}diff@{ub} with the new file first instead of second.
This creates a diff that is "reversed".  To apply such patches, give
@{b}patch@{ub} the @{b}-R@{ub} or @{b}--reverse@{ub} option.  @{b}patch@{ub} then attempts to swap each
hunk around before applying it.  Rejects come out in the swapped
format.  The @{b}-R@{ub} option does not work with @{b}ed@{ub} scripts because there is
too little information in them to reconstruct the reverse operation.

   Often @{b}patch@{ub} can guess that the patch is reversed.  If the first hunk
of a patch fails, @{b}patch@{ub} reverses the hunk to see if it can apply it
that way.  If it can, @{b}patch@{ub} asks you if you want to have the @{b}-R@{ub} option
set; if it can't, @{b}patch@{ub} continues to apply the patch normally.  This
method cannot detect a reversed patch if it is a normal diff and the
first command is an append (which should have been a delete) since
appends always succeed, because a null context matches anywhere.  But
most patches add or change lines rather than delete them, so most
reversed normal diffs begin with a delete, which fails, and @{b}patch@{ub}
notices.

   If you apply a patch that you have already applied, @{b}patch@{ub} thinks it
is a reversed patch and offers to un-apply the patch.  This could be
construed as a feature.  If you did this inadvertently and you don't
want to un-apply the patch, just answer @{b}n@{ub} to this offer and to the
subsequent "apply anyway" question--or type @{b}C-c@{ub} to kill the @{b}patch@{ub}
process.


@endnode

@node "Inexact" "diff.guide/Inexact"
@prev "Reversed Patches"
@toc "Imperfect"

Helping @{b}patch@{ub} Find Inexact Matches
----------------------------------

   For context diffs, and to a lesser extent normal diffs, @{b}patch@{ub} can
detect when the line numbers mentioned in the patch are incorrect, and
it attempts to find the correct place to apply each hunk of the patch.
As a first guess, it takes the line number mentioned in the hunk, plus
or minus any offset used in applying the previous hunk.  If that is not
the correct place, @{b}patch@{ub} scans both forward and backward for a set of
lines matching the context given in the hunk.

   First @{b}patch@{ub} looks for a place where all lines of the context match.
If it cannot find such a place, and it is reading a context or unified
diff, and the maximum fuzz factor is set to 1 or more, then @{b}patch@{ub} makes
another scan, ignoring the first and last line of context.  If that
fails, and the maximum fuzz factor is set to 2 or more, it makes
another scan, ignoring the first two and last two lines of context are
ignored.  It continues similarly if the maximum fuzz factor is larger.

   The @{b}-F LINES@{ub} or @{b}--fuzz=LINES@{ub} option sets the maximum fuzz factor to
LINES.  This option only applies to context and unified diffs; it
ignores up to LINES lines while looking for the place to install a
hunk.  Note that a larger fuzz factor increases the odds of making a
faulty patch.  The default fuzz factor is 2; it may not be set to more
than the number of lines of context in the diff, ordinarily 3.

   If @{b}patch@{ub} cannot find a place to install a hunk of the patch, it
writes the hunk out to a reject file (see @{"Rejects" link "Rejects"}, for information on
how reject files are named).  It writes out rejected hunks in context
format no matter what form the input patch is in.  If the input is a
normal or @{b}ed@{ub} diff, many of the contexts are simply null.  The line
numbers on the hunks in the reject file may be different from those in
the patch file: they show the approximate location where @{b}patch@{ub} thinks
the failed hunks belong in the new file rather than in the old one.

   As it completes each hunk, @{b}patch@{ub} tells you whether the hunk
succeeded or failed, and if it failed, on which line (in the new file)
@{b}patch@{ub} thinks the hunk should go.  If this is different from the line
number specified in the diff, it tells you the offset.  A single large
offset @{i}may@{ui} indicate that @{b}patch@{ub} installed a hunk in the wrong place.
@{b}patch@{ub} also tells you if it used a fuzz factor to make the match, in
which case you should also be slightly suspicious.

@{b}   patch@{ub} cannot tell if the line numbers are off in an @{b}ed@{ub} script, and
can only detect wrong line numbers in a normal diff when it finds a
change or delete command.  It may have the same problem with a context
diff using a fuzz factor equal to or greater than the number of lines
of context shown in the diff (typically 3).  In these cases, you should
probably look at a context diff between your original and patched input
files to see if the changes make sense.  Compiling without errors is a
pretty good indication that the patch worked, but not a guarantee.

@{b}   patch@{ub} usually produces the correct results, even when it must make
many guesses.  However, the results are guaranteed only when the patch
is applied to an exact copy of the file that the patch was generated
from.


@endnode

@node "Empty Files" "diff.guide/Empty Files"
@next "Multiple Patches"
@prev "Imperfect"
@toc "Merging with patch"

Removing Empty Files
====================

   Sometimes when comparing two directories, the first directory
contains a file that the second directory does not.  If you give @{b}diff@{ub}
the @{b}-N@{ub} or @{b}--new-file@{ub} option, it outputs a diff that deletes the
contents of this file.  By default, @{b}patch@{ub} leaves an empty file after
applying such a diff.  The @{b}-E@{ub} or @{b}--remove-empty-files@{ub} option to @{b}patch@{ub}
deletes output files that are empty after applying the diff.


@endnode

@node "Multiple Patches" "diff.guide/Multiple Patches"
@next "patch Messages"
@prev "Empty Files"
@toc "Merging with patch"

Multiple Patches in a File
==========================

   If the patch file contains more than one patch, @{b}patch@{ub} tries to apply
each of them as if they came from separate patch files.  This means
that it determines the name of the file to patch for each patch, and
that it examines the leading text before each patch for file names and
prerequisite revision level (see @{"Making Patches" link "Making Patches"}, for more on that
topic).

   For the second and subsequent patches in the patch file, you can give
options and another original file name by separating their argument
lists with a @{b}+@{ub}.  However, the argument list for a second or subsequent
patch may not specify a new patch file, since that does not make sense.

   For example, to tell @{b}patch@{ub} to strip the first three slashes from the
name of the first patch in the patch file and none from subsequent
patches, and to use @{b}code.c@{ub} as the first input file, you can use:

     patch -p3 code.c + -p0 < patchfile

   The @{b}-S@{ub} or @{b}--skip@{ub} option ignores the current patch from the patch
file, but continue looking for the next patch in the file.  Thus, to
ignore the first and third patches in the patch file, you can use:

     patch -S + + -S + < patch file


@endnode

@node "patch Messages" "diff.guide/patch Messages"
@prev "Multiple Patches"
@toc "Merging with patch"

Messages and Questions from @{b}patch@{ub}
=================================

@{b}   patch@{ub} can produce a variety of messages, especially if it has
trouble decoding its input.  In a few situations where it's not sure how
to proceed, @{b}patch@{ub} normally prompts you for more information from the
keyboard.  There are options to suppress printing non-fatal messages
and stopping for keyboard input.

   The message @{b}Hmm...@{ub} indicates that @{b}patch@{ub} is reading text in the patch
file, attempting to determine whether there is a patch in that text,
and if so, what kind of patch it is.

   You can inhibit all terminal output from @{b}patch@{ub}, unless an error
occurs, by using the @{b}-s@{ub}, @{b}--quiet@{ub}, or @{b}--silent@{ub} option.

   There are two ways you can prevent @{b}patch@{ub} from asking you any
questions.  The @{b}-f@{ub} or @{b}--force@{ub} option assumes that you know what you are
doing.  It assumes the following:

   * skip patches that do not contain file names in their headers;

   * patch files even though they have the wrong version for the
     @{b}Prereq:@{ub} line in the patch;

   * assume that patches are not reversed even if they look like they
     are.

   The @{b}-t@{ub} or @{b}--batch@{ub} option is similar to @{b}-f@{ub}, in that it suppresses
questions, but it makes somewhat different assumptions:

   * skip patches that do not contain file names in their headers (the
     same as @{b}-f@{ub});

   * skip patches for which the file has the wrong version for the
     @{b}Prereq:@{ub} line in the patch;

   * assume that patches are reversed if they look like they are.

@{b}   patch@{ub} exits with a non-zero status if it creates any reject files.
When applying a set of patches in a loop, you should check the exit
status, so you don't apply a later patch to a partially patched file.


@endnode

@node "Making Patches" "diff.guide/Making Patches"
@next "Invoking cmp"
@prev "Merging with patch"
@toc "Main"

Tips for Making Patch Distributions
***********************************

   Here are some things you should keep in mind if you are going to
distribute patches for updating a software package.

   Make sure you have specified the file names correctly, either in a
context diff header or with an @{b}Index:@{ub} line.  If you are patching files
in a subdirectory, be sure to tell the patch user to specify a @{b}-p@{ub} or
@{b}--strip@{ub} option as needed.  Take care to not send out reversed patches,
since these make people wonder whether they have already applied the
patch.

   To save people from partially applying a patch before other patches
that should have gone before it, you can make the first patch in the
patch file update a file with a name like @{b}patchlevel.h@{ub} or @{b}version.c@{ub},
which contains a patch level or version number.  If the input file
contains the wrong version number, @{b}patch@{ub} will complain immediately.

   An even clearer way to prevent this problem is to put a @{b}Prereq:@{ub} line
before the patch.  If the leading text in the patch file contains a
line that starts with @{b}Prereq:@{ub}, @{b}patch@{ub} takes the next word from that line
(normally a version number) and checks whether the next input file
contains that word, preceded and followed by either white space or a
newline.  If not, @{b}patch@{ub} prompts you for confirmation before proceeding.
This makes it difficult to accidentally apply patches in the wrong
order.

   Since @{b}patch@{ub} does not handle incomplete lines properly, make sure
that all the source files in your program end with a newline whenever
you release a version.

   To create a patch that changes an older version of a package into a
newer version, first make a copy of the older version in a scratch
directory.  Typically you do that by unpacking a @{b}tar@{ub} or @{b}shar@{ub} archive of
the older version.

   You might be able to reduce the size of the patch by renaming or
removing some files before making the patch.  If the older version of
the package contains any files that the newer version does not, or if
any files have been renamed between the two versions, make a list of @{b}rm@{ub}
and @{b}mv@{ub} commands for the user to execute in the old version directory
before applying the patch.  Then run those commands yourself in the
scratch directory.

   If there are any files that you don't need to include in the patch
because they can easily be rebuilt from other files (for example, @{b}TAGS@{ub}
and output from @{b}yacc@{ub} and @{b}makeinfo@{ub}), replace the versions in the scratch
directory with the newer versions, using @{b}rm@{ub} and @{b}ln@{ub} or @{b}cp@{ub}.

   Now you can create the patch.  The de-facto standard @{b}diff@{ub} format for
patch distributions is context format with two lines of context,
produced by giving @{b}diff@{ub} the @{b}-C 2@{ub} option.  Do not use less than two
lines of context, because @{b}patch@{ub} typically needs at least two lines for
proper operation.  Give @{b}diff@{ub} the @{b}-P@{ub} option in case the newer version of
the package contains any files that the older one does not.  Make sure
to specify the scratch directory first and the newer directory second.

   Add to the top of the patch a note telling the user any @{b}rm@{ub} and @{b}mv@{ub}
commands to run before applying the patch.  Then you can remove the
scratch directory.


@endnode

@node "Invoking cmp" "diff.guide/Invoking cmp"
@next "Invoking diff"
@prev "Making Patches"
@toc "Main"

Invoking @{b}cmp@{ub}
************

   The @{b}cmp@{ub} command compares two files, and if they differ, tells the
first byte and line number where they differ.  Its arguments are as
follows:

     cmp OPTIONS... FROM-FILE [TO-FILE]

   The file name @{b}-@{ub} is always the standard input.  @{b}cmp@{ub} also uses the
standard input if one file name is omitted.

   An exit status of 0 means no differences were found, 1 means some
differences were found, and 2 means trouble.


 @{" cmp Options        " link "cmp Options"}  Summary of options to @{b}cmp@{ub}.


@endnode

@node "cmp Options" "diff.guide/cmp Options"
@toc "Invoking cmp"

Options to @{b}cmp@{ub}
==============

   Below is a summary of all of the options that GNU @{b}cmp@{ub} accepts.  Most
options have two equivalent names, one of which is a single letter
preceded by @{b}-@{ub}, and the other of which is a long name preceded by @{b}--@{ub}.
Multiple single letter options (unless they take an argument) can be
combined into a single command line word: @{b}-cl@{ub} is equivalent to @{b}-c -l@{ub}.

@{b}-c@{ub}
     Print the differing characters.  Display control characters as a @{b}^@{ub}
     followed by a letter of the alphabet and precede characters that
     have the high bit set with @{b}M-@{ub} (which stands for "meta").

@{b}--ignore-initial=BYTES@{ub}
     Ignore any differences in the the first BYTES bytes of the input
     files.  Treat files with fewer than BYTES bytes as if they are
     empty.

@{b}-l@{ub}
     Print the (decimal) offsets and (octal) values of all differing
     bytes.

@{b}--print-chars@{ub}
     Print the differing characters.  Display control characters as a @{b}^@{ub}
     followed by a letter of the alphabet and precede characters that
     have the high bit set with @{b}M-@{ub} (which stands for "meta").

@{b}--quiet@{ub}
@{b}-s@{ub}
@{b}--silent@{ub}
     Do not print anything; only return an exit status indicating
     whether the files differ.

@{b}--verbose@{ub}
     Print the (decimal) offsets and (octal) values of all differing
     bytes.

@{b}-v@{ub}

@{b}--version@{ub}
     Output the version number of @{b}cmp@{ub}.


@endnode

@node "Invoking diff" "diff.guide/Invoking diff"
@next "Invoking diff3"
@prev "Invoking cmp"
@toc "Main"

Invoking @{b}diff@{ub}
*************

   The format for running the @{b}diff@{ub} command is:

     diff OPTIONS... FROM-FILE TO-FILE

   In the simplest case, @{b}diff@{ub} compares the contents of the two files
FROM-FILE and TO-FILE.  A file name of @{b}-@{ub} stands for text read from the
standard input.  As a special case, @{b}diff - -@{ub} compares a copy of
standard input to itself.

   If FROM-FILE is a directory and TO-FILE is not, @{b}diff@{ub} compares the
file in FROM-FILE whose file name is that of TO-FILE, and vice versa.
The non-directory file must not be @{b}-@{ub}.

   If both FROM-FILE and TO-FILE are directories, @{b}diff@{ub} compares
corresponding files in both directories, in alphabetical order; this
comparison is not recursive unless the @{b}-r@{ub} or @{b}--recursive@{ub} option is
given.  @{b}diff@{ub} never compares the actual contents of a directory as if it
were a file.  The file that is fully specified may not be standard
input, because standard input is nameless and the notion of "file with
the same name" does not apply.

@{b}   diff@{ub} options begin with @{b}-@{ub}, so normally FROM-FILE and TO-FILE may not
begin with @{b}-@{ub}.  However, @{b}--@{ub} as an argument by itself treats the
remaining arguments as file names even if they begin with @{b}-@{ub}.

   An exit status of 0 means no differences were found, 1 means some
differences were found, and 2 means trouble.


 @{" diff Options       " link "diff Options"}  Summary of options to @{b}diff@{ub}.


@endnode

@node "diff Options" "diff.guide/diff Options"
@toc "Invoking diff"

Options to @{b}diff@{ub}
===============

   Below is a summary of all of the options that GNU @{b}diff@{ub} accepts.
Most options have two equivalent names, one of which is a single letter
preceded by @{b}-@{ub}, and the other of which is a long name preceded by @{b}--@{ub}.
Multiple single letter options (unless they take an argument) can be
combined into a single command line word: @{b}-ac@{ub} is equivalent to @{b}-a -c@{ub}.
Long named options can be abbreviated to any unique prefix of their
name.  Brackets ([ and ]) indicate that an option takes an optional
argument.

@{b}-LINES@{ub}
     Show LINES (an integer) lines of context.  This option does not
     specify an output format by itself; it has no effect unless it is
     combined with @{b}-c@{ub} (see @{"Context Format" link "Context Format"}) or @{b}-u@{ub} (see
     @{"Unified Format" link "Unified Format"}).  This option is obsolete.  For proper
     operation, @{b}patch@{ub} typically needs at least two lines of context.

@{b}-a@{ub}
     Treat all files as text and compare them line-by-line, even if they
     do not seem to be text.  See @{"Binary" link "Binary"}.

@{b}-b@{ub}
     Ignore changes in amount of white space.  See @{"White Space" link "White Space"}.

@{b}-B@{ub}
     Ignore changes that just insert or delete blank lines.  See
     @{"Blank Lines" link "Blank Lines"}.

@{b}--binary@{ub}
     Read and write data in binary mode.  See @{"Binary" link "Binary"}.

@{b}--brief@{ub}
     Report only whether the files differ, not the details of the
     differences.  See @{"Brief" link "Brief"}.

@{b}-c@{ub}
     Use the context output format.  See @{"Context Format" link "Context Format"}.

@{b}-C LINES@{ub}
@{b}--context[=LINES]@{ub}
     Use the context output format, showing LINES (an integer) lines of
     context, or three if LINES is not given.  See @{"Context Format" link "Context Format"}.
     For proper operation, @{b}patch@{ub} typically needs at least two lines of
     context.

@{b}--changed-group-format=FORMAT@{ub}
     Use FORMAT to output a line group containing differing lines from
     both files in if-then-else format.  See @{"Line Group Formats" link "Line Group Formats"}.

@{b}-d@{ub}
     Change the algorithm perhaps find a smaller set of changes.  This
     makes @{b}diff@{ub} slower (sometimes much slower).  See @{"diff Performance" link "diff Performance"}.

@{b}-D NAME@{ub}
     Make merged @{b}#ifdef@{ub} format output, conditional on the preprocessor
     macro NAME.  See @{"If-then-else" link "If-then-else"}.

@{b}-e@{ub}
@{b}--ed@{ub}
     Make output that is a valid @{b}ed@{ub} script.  See @{"ed Scripts" link "ed Scripts"}.

@{b}--exclude=PATTERN@{ub}
     When comparing directories, ignore files and subdirectories whose
     basenames match PATTERN.  See @{"Comparing Directories" link "Comparing Directories"}.

@{b}--exclude-from=FILE@{ub}
     When comparing directories, ignore files and subdirectories whose
     basenames match any pattern contained in FILE.  See
     @{"Comparing Directories" link "Comparing Directories"}.

@{b}--expand-tabs@{ub}
     Expand tabs to spaces in the output, to preserve the alignment of
     tabs in the input files.  See @{"Tabs" link "Tabs"}.

@{b}-f@{ub}
     Make output that looks vaguely like an @{b}ed@{ub} script but has changes
     in the order they appear in the file.  See @{"Forward ed" link "Forward ed"}.

@{b}-F REGEXP@{ub}
     In context and unified format, for each hunk of differences, show
     some of the last preceding line that matches REGEXP.  See
     @{"Specified Headings" link "Specified Headings"}.

@{b}--forward-ed@{ub}
     Make output that looks vaguely like an @{b}ed@{ub} script but has changes
     in the order they appear in the file.  See @{"Forward ed" link "Forward ed"}.

@{b}-h@{ub}
     This option currently has no effect; it is present for Unix
     compatibility.

@{b}-H@{ub}
     Use heuristics to speed handling of large files that have numerous
     scattered small changes.  See @{"diff Performance" link "diff Performance"}.

@{b}--horizon-lines=LINES@{ub}
     Do not discard the last LINES lines of the common prefix and the
     first LINES lines of the common suffix.  See @{"diff Performance" link "diff Performance"}.

@{b}-i@{ub}
     Ignore changes in case; consider upper- and lower-case letters
     equivalent.  See @{"Case Folding" link "Case Folding"}.

@{b}-I REGEXP@{ub}
     Ignore changes that just insert or delete lines that match REGEXP.
     See @{"Specified Folding" link "Specified Folding"}.

@{b}--ifdef=NAME@{ub}
     Make merged if-then-else output using NAME.  See @{"If-then-else" link "If-then-else"}.

@{b}--ignore-all-space@{ub}
     Ignore white space when comparing lines.  See @{"White Space" link "White Space"}.

@{b}--ignore-blank-lines@{ub}
     Ignore changes that just insert or delete blank lines.  See
     @{"Blank Lines" link "Blank Lines"}.

@{b}--ignore-case@{ub}
     Ignore changes in case; consider upper- and lower-case to be the
     same.  See @{"Case Folding" link "Case Folding"}.

@{b}--ignore-matching-lines=REGEXP@{ub}
     Ignore changes that just insert or delete lines that match REGEXP.
     See @{"Specified Folding" link "Specified Folding"}.

@{b}--ignore-space-change@{ub}
     Ignore changes in amount of white space.  See @{"White Space" link "White Space"}.

@{b}--initial-tab@{ub}
     Output a tab rather than a space before the text of a line in
     normal or context format.  This causes the alignment of tabs in
     the line to look normal.  See @{"Tabs" link "Tabs"}.

@{b}-l@{ub}
     Pass the output through @{b}pr@{ub} to paginate it.  See @{"Pagination" link "Pagination"}.

@{b}-L LABEL@{ub}
     Use LABEL instead of the file name in the context format (see
     @{"Context Format" link "Context Format"}) and unified format (see @{"Unified Format" link "Unified Format"})
     headers.  See @{"RCS" link "RCS"}.

@{b}--label=LABEL@{ub}
     Use LABEL instead of the file name in the context format (see
     @{"Context Format" link "Context Format"}) and unified format (see @{"Unified Format" link "Unified Format"}) headers.

@{b}--left-column@{ub}
     Print only the left column of two common lines in side by side
     format.  See @{"Side by Side Format" link "Side by Side Format"}.

@{b}--line-format=FORMAT@{ub}
     Use FORMAT to output all input lines in if-then-else format.  See
     @{"Line Formats" link "Line Formats"}.

@{b}--minimal@{ub}
     Change the algorithm to perhaps find a smaller set of changes.
     This makes @{b}diff@{ub} slower (sometimes much slower).  See
     @{"diff Performance" link "diff Performance"}.

@{b}-n@{ub}
     Output RCS-format diffs; like @{b}-f@{ub} except that each command
     specifies the number of lines affected.  See @{"RCS" link "RCS"}.

@{b}-N@{ub}
@{b}--new-file@{ub}
     In directory comparison, if a file is found in only one directory,
     treat it as present but empty in the other directory.  See
     @{"Comparing Directories" link "Comparing Directories"}.

@{b}--new-group-format=FORMAT@{ub}
     Use FORMAT to output a group of lines taken from just the second
     file in if-then-else format.  See @{"Line Group Formats" link "Line Group Formats"}.

@{b}--new-line-format=FORMAT@{ub}
     Use FORMAT to output a line taken from just the second file in
     if-then-else format.  See @{"Line Formats" link "Line Formats"}.

@{b}--old-group-format=FORMAT@{ub}
     Use FORMAT to output a group of lines taken from just the first
     file in if-then-else format.  See @{"Line Group Formats" link "Line Group Formats"}.

@{b}--old-line-format=FORMAT@{ub}
     Use FORMAT to output a line taken from just the first file in
     if-then-else format.  See @{"Line Formats" link "Line Formats"}.

@{b}-p@{ub}
     Show which C function each change is in.  See @{"C Function Headings" link "C Function Headings"}.

@{b}-P@{ub}
     When comparing directories, if a file appears only in the second
     directory of the two, treat it as present but empty in the other.
     See @{"Comparing Directories" link "Comparing Directories"}.

@{b}--paginate@{ub}
     Pass the output through @{b}pr@{ub} to paginate it.  See @{"Pagination" link "Pagination"}.

@{b}-q@{ub}
     Report only whether the files differ, not the details of the
     differences.  See @{"Brief" link "Brief"}.

@{b}-r@{ub}
     When comparing directories, recursively compare any subdirectories
     found.  See @{"Comparing Directories" link "Comparing Directories"}.

@{b}--rcs@{ub}
     Output RCS-format diffs; like @{b}-f@{ub} except that each command
     specifies the number of lines affected.  See @{"RCS" link "RCS"}.

@{b}--recursive@{ub}
     When comparing directories, recursively compare any subdirectories
     found.  See @{"Comparing Directories" link "Comparing Directories"}.

@{b}--report-identical-files@{ub}
     Report when two files are the same.  See @{"Comparing Directories" link "Comparing Directories"}.

@{b}-s@{ub}
     Report when two files are the same.  See @{"Comparing Directories" link "Comparing Directories"}.

@{b}-S FILE@{ub}
     When comparing directories, start with the file FILE.  This is
     used for resuming an aborted comparison.  See
     @{"Comparing Directories" link "Comparing Directories"}.

@{b}--sdiff-merge-assist@{ub}
     Print extra information to help @{b}sdiff@{ub}.  @{b}sdiff@{ub} uses this option
     when it runs @{b}diff@{ub}.  This option is not intended for users to use
     directly.

@{b}--show-c-function@{ub}
     Show which C function each change is in.  See @{"C Function Headings" link "C Function Headings"}.

@{b}--show-function-line=REGEXP@{ub}
     In context and unified format, for each hunk of differences, show
     some of the last preceding line that matches REGEXP.  See
     @{"Specified Headings" link "Specified Headings"}.

@{b}--side-by-side@{ub}
     Use the side by side output format.  See @{"Side by Side Format" link "Side by Side Format"}.

@{b}--speed-large-files@{ub}
     Use heuristics to speed handling of large files that have numerous
     scattered small changes.  See @{"diff Performance" link "diff Performance"}.

@{b}--starting-file=FILE@{ub}
     When comparing directories, start with the file FILE.  This is
     used for resuming an aborted comparison.  See
     @{"Comparing Directories" link "Comparing Directories"}.

@{b}--suppress-common-lines@{ub}
     Do not print common lines in side by side format.  See
     @{"Side by Side Format" link "Side by Side Format"}.

@{b}-t@{ub}
     Expand tabs to spaces in the output, to preserve the alignment of
     tabs in the input files.  See @{"Tabs" link "Tabs"}.

@{b}-T@{ub}
     Output a tab rather than a space before the text of a line in
     normal or context format.  This causes the alignment of tabs in
     the line to look normal.  See @{"Tabs" link "Tabs"}.

@{b}--text@{ub}
     Treat all files as text and compare them line-by-line, even if they
     do not appear to be text.  See @{"Binary" link "Binary"}.

@{b}-u@{ub}
     Use the unified output format.  See @{"Unified Format" link "Unified Format"}.

@{b}--unchanged-group-format=FORMAT@{ub}
     Use FORMAT to output a group of common lines taken from both files
     in if-then-else format.  See @{"Line Group Formats" link "Line Group Formats"}.

@{b}--unchanged-line-format=FORMAT@{ub}
     Use FORMAT to output a line common to both files in if-then-else
     format.  See @{"Line Formats" link "Line Formats"}.

@{b}--unidirectional-new-file@{ub}
     When comparing directories, if a file appears only in the second
     directory of the two, treat it as present but empty in the other.
     See @{"Comparing Directories" link "Comparing Directories"}.

@{b}-U LINES@{ub}
@{b}--unified[=LINES]@{ub}
     Use the unified output format, showing LINES (an integer) lines of
     context, or three if LINES is not given.  See @{"Unified Format" link "Unified Format"}.
     For proper operation, @{b}patch@{ub} typically needs at least two lines of
     context.

@{b}-v@{ub}
@{b}--version@{ub}
     Output the version number of @{b}diff@{ub}.

@{b}-w@{ub}
     Ignore white space when comparing lines.  See @{"White Space" link "White Space"}.

@{b}-W COLUMNS@{ub}
@{b}--width=COLUMNS@{ub}
     Use an output width of COLUMNS in side by side format.  See
     @{"Side by Side Format" link "Side by Side Format"}.

@{b}-x PATTERN@{ub}
     When comparing directories, ignore files and subdirectories whose
     basenames match PATTERN.  See @{"Comparing Directories" link "Comparing Directories"}.

@{b}-X FILE@{ub}
     When comparing directories, ignore files and subdirectories whose
     basenames match any pattern contained in FILE.  See
     @{"Comparing Directories" link "Comparing Directories"}.

@{b}-y@{ub}
     Use the side by side output format.  See @{"Side by Side Format" link "Side by Side Format"}.


@endnode

@node "Invoking diff3" "diff.guide/Invoking diff3"
@next "Invoking patch"
@prev "Invoking diff"
@toc "Main"

Invoking @{b}diff3@{ub}
**************

   The @{b}diff3@{ub} command compares three files and outputs descriptions of
their differences.  Its arguments are as follows:

     diff3 OPTIONS... MINE OLDER YOURS

   The files to compare are MINE, OLDER, and YOURS.  At most one of
these three file names may be @{b}-@{ub}, which tells @{b}diff3@{ub} to read the standard
input for that file.

   An exit status of 0 means @{b}diff3@{ub} was successful, 1 means some
conflicts were found, and 2 means trouble.


 @{" diff3 Options            " link "diff3 Options"}  Summary of options to @{b}diff3@{ub}.


@endnode

@node "diff3 Options" "diff.guide/diff3 Options"
@toc "Invoking diff3"

Options to @{b}diff3@{ub}
================

   Below is a summary of all of the options that GNU @{b}diff3@{ub} accepts.
Multiple single letter options (unless they take an argument) can be
combined into a single command line argument.

@{b}-a@{ub}
     Treat all files as text and compare them line-by-line, even if they
     do not appear to be text.  See @{"Binary" link "Binary"}.

@{b}-A@{ub}
     Incorporate all changes from OLDER to YOURS into MINE, surrounding
     all conflicts with bracket lines.  See @{"Marking Conflicts" link "Marking Conflicts"}.

@{b}-e@{ub}
     Generate an @{b}ed@{ub} script that incorporates all the changes from OLDER
     to YOURS into MINE.  See @{"Which Changes" link "Which Changes"}.

@{b}-E@{ub}
     Like @{b}-e@{ub}, except bracket lines from overlapping changes' first and
     third files.  See @{"Marking Conflicts" link "Marking Conflicts"}.  With @{b}-e@{ub}, an overlapping
     change looks like this:

          <<<<<<< MINE
          lines from MINE
          =======
          lines from YOURS
          >>>>>>> YOURS

@{b}--ed@{ub}
     Generate an @{b}ed@{ub} script that incorporates all the changes from OLDER
     to YOURS into MINE.  See @{"Which Changes" link "Which Changes"}.

@{b}--easy-only@{ub}
     Like @{b}-e@{ub}, except output only the nonoverlapping changes.  See
     @{"Which Changes" link "Which Changes"}.

@{b}-i@{ub}
     Generate @{b}w@{ub} and @{b}q@{ub} commands at the end of the @{b}ed@{ub} script for System V
     compatibility.  This option must be combined with one of the
     @{b}-AeExX3@{ub} options, and may not be combined with @{b}-m@{ub}.  See
     @{"Saving the Changed File" link "Saving the Changed File"}.

@{b}--initial-tab@{ub}
     Output a tab rather than two spaces before the text of a line in
     normal format.  This causes the alignment of tabs in the line to
     look normal.  See @{"Tabs" link "Tabs"}.

@{b}-L LABEL@{ub}
@{b}--label=LABEL@{ub}
     Use the label LABEL for the brackets output by the @{b}-A@{ub}, @{b}-E@{ub} and @{b}-X@{ub}
     options.  This option may be given up to three times, one for each
     input file.  The default labels are the names of the input files.
     Thus @{b}diff3 -L X -L Y -L Z -m A B C@{ub} acts like @{b}diff3 -m A B C@{ub},
     except that the output looks like it came from files named @{b}X@{ub}, @{b}Y@{ub}
     and @{b}Z@{ub} rather than from files named @{b}A@{ub}, @{b}B@{ub} and @{b}C@{ub}.  See
     @{"Marking Conflicts" link "Marking Conflicts"}.

@{b}-m@{ub}
@{b}--merge@{ub}
     Apply the edit script to the first file and send the result to
     standard output.  Unlike piping the output from @{b}diff3@{ub} to @{b}ed@{ub}, this
     works even for binary files and incomplete lines.  @{b}-A@{ub} is assumed
     if no edit script option is specified.  See @{"Bypassing ed" link "Bypassing ed"}.

@{b}--overlap-only@{ub}
     Like @{b}-e@{ub}, except output only the overlapping changes.  See
     @{"Which Changes" link "Which Changes"}.

@{b}--show-all@{ub}
     Incorporate all unmerged changes from OLDER to YOURS into MINE,
     surrounding all overlapping changes with bracket lines.  See
     @{"Marking Conflicts" link "Marking Conflicts"}.

@{b}--show-overlap@{ub}
     Like @{b}-e@{ub}, except bracket lines from overlapping changes' first and
     third files.  See @{"Marking Conflicts" link "Marking Conflicts"}.

@{b}-T@{ub}
     Output a tab rather than two spaces before the text of a line in
     normal format.  This causes the alignment of tabs in the line to
     look normal.  See @{"Tabs" link "Tabs"}.

@{b}--text@{ub}
     Treat all files as text and compare them line-by-line, even if they
     do not appear to be text.  See @{"Binary" link "Binary"}.

@{b}-v@{ub}
@{b}--version@{ub}
     Output the version number of @{b}diff3@{ub}.

@{b}-x@{ub}
     Like @{b}-e@{ub}, except output only the overlapping changes.  See
     @{"Which Changes" link "Which Changes"}.

@{b}-X@{ub}
     Like @{b}-E@{ub}, except output only the overlapping changes.  In other
     words, like @{b}-x@{ub}, except bracket changes as in @{b}-E@{ub}.  See
     @{"Marking Conflicts" link "Marking Conflicts"}.

@{b}-3@{ub}
     Like @{b}-e@{ub}, except output only the nonoverlapping changes.  See
     @{"Which Changes" link "Which Changes"}.


@endnode

@node "Invoking patch" "diff.guide/Invoking patch"
@next "Invoking sdiff"
@prev "Invoking diff3"
@toc "Main"

Invoking @{b}patch@{ub}
**************

   Normally @{b}patch@{ub} is invoked like this:

     patch <PATCHFILE

   The full format for invoking @{b}patch@{ub} is:

     patch OPTIONS... [ORIGFILE [PATCHFILE]] [+ OPTIONS... [ORIGFILE]]...

   If you do not specify PATCHFILE, or if PATCHFILE is @{b}-@{ub}, @{b}patch@{ub} reads
the patch (that is, the @{b}diff@{ub} output) from the standard input.

   You can specify one or more of the original files as ORIG arguments;
each one and options for interpreting it is separated from the others
with a @{b}+@{ub}.  See @{"Multiple Patches" link "Multiple Patches"}, for more information.

   If you do not specify an input file on the command line, @{b}patch@{ub} tries
to figure out from the @{i}leading text@{ui} (any text in the patch that comes
before the @{b}diff@{ub} output) which file to edit.  In the header of a context
or unified diff, @{b}patch@{ub} looks in lines beginning with @{b}***@{ub}, @{b}---@{ub}, or @{b}+++@{ub};
among those, it chooses the shortest name of an existing file.
Otherwise, if there is an @{b}Index:@{ub} line in the leading text, @{b}patch@{ub} tries
to use the file name from that line.  If @{b}patch@{ub} cannot figure out the
name of an existing file from the leading text, it prompts you for the
name of the file to patch.

   If the input file does not exist or is read-only, and a suitable RCS
or SCCS file exists, @{b}patch@{ub} attempts to check out or get the file before
proceeding.

   By default, @{b}patch@{ub} replaces the original input file with the patched
version, after renaming the original file into a backup file (see
@{"Backups" link "Backups"}, for a description of how @{b}patch@{ub} names backup files).  You can
also specify where to put the output with the @{b}-o OUTPUT-FILE@{ub} or
@{b}--output=OUTPUT-FILE@{ub} option.


 @{" patch Directories  " link "patch Directories"}  Changing directory and stripping directories.
 @{" Backups            " link "Backups"}  Backup file names.
 @{" Rejects            " link "Rejects"}  Reject file names.
 @{" patch Options      " link "patch Options"}  Summary table of options to @{b}patch@{ub}.


@endnode

@node "patch Directories" "diff.guide/patch Directories"
@next "Backups"
@toc "Invoking patch"

Applying Patches in Other Directories
=====================================

   The @{b}-d DIRECTORY@{ub} or @{b}--directory=DIRECTORY@{ub} option to @{b}patch@{ub} makes
directory DIRECTORY the current directory for interpreting both file
names in the patch file, and file names given as arguments to other
options (such as @{b}-B@{ub} and @{b}-o@{ub}).  For example, while in a news reading
program, you can patch a file in the @{b}/usr/src/emacs@{ub} directory directly
from the article containing the patch like this:

     | patch -d /usr/src/emacs

   Sometimes the file names given in a patch contain leading
directories, but you keep your files in a directory different from the
one given in the patch.  In those cases, you can use the @{b}-p[NUMBER]@{ub} or
@{b}--strip[=NUMBER]@{ub} option to set the file name strip count to NUMBER.
The strip count tells @{b}patch@{ub} how many slashes, along with the directory
names between them, to strip from the front of file names.  @{b}-p@{ub} with no
NUMBER given is equivalent to @{b}-p0@{ub}.  By default, @{b}patch@{ub} strips off all
leading directories, leaving just the base file names, except that when
a file name given in the patch is a relative file name and all of its
leading directories already exist, @{b}patch@{ub} does not strip off the leading
directory.  (A @{i}relative@{ui} file name is one that does not start with a
slash.)

@{b}   patch@{ub} looks for each file (after any slashes have been stripped) in
the current directory, or if you used the @{b}-d DIRECTORY@{ub} option, in that
directory.

   For example, suppose the file name in the patch file is
@{b}/gnu/src/emacs/etc/NEWS@{ub}.  Using @{b}-p@{ub} or @{b}-p0@{ub} gives the entire file name
unmodified, @{b}-p1@{ub} gives @{b}gnu/src/emacs/etc/NEWS@{ub} (no leading slash), @{b}-p4@{ub}
gives @{b}etc/NEWS@{ub}, and not specifying @{b}-p@{ub} at all gives @{b}NEWS@{ub}.


@endnode

@node "Backups" "diff.guide/Backups"
@next "Rejects"
@prev "patch Directories"
@toc "Invoking patch"

Backup File Names
=================

   Normally, @{b}patch@{ub} renames an original input file into a backup file by
appending to its name the extension @{b}.orig@{ub}, or @{b}~@{ub} on systems that do not
support long file names.  The @{b}-b BACKUP-SUFFIX@{ub} or
@{b}--suffix=BACKUP-SUFFIX@{ub} option uses BACKUP-SUFFIX as the backup
extension instead.

   Alternately, you can specify the extension for backup files with the
@{b}SIMPLE_BACKUP_SUFFIX@{ub} environment variable, which the options override.

@{b}   patch@{ub} can also create numbered backup files the way GNU Emacs does.
With this method, instead of having a single backup of each file, @{b}patch@{ub}
makes a new backup file name each time it patches a file.  For example,
the backups of a file named @{b}sink@{ub} would be called, successively,
@{b}sink.~1~@{ub}, @{b}sink.~2~@{ub}, @{b}sink.~3~@{ub}, etc.

   The @{b}-V BACKUP-STYLE@{ub} or @{b}--version-control=BACKUP-STYLE@{ub} option takes
as an argument a method for creating backup file names.  You can
alternately control the type of backups that @{b}patch@{ub} makes with the
@{b}VERSION_CONTROL@{ub} environment variable, which the @{b}-V@{ub} option overrides.
The value of the @{b}VERSION_CONTROL@{ub} environment variable and the argument
to the @{b}-V@{ub} option are like the GNU Emacs @{b}version-control@{ub} variable (see
@{"emacs" link "Backups"}, for more information on backup versions in Emacs).  They also
recognize synonyms that are more descriptive.  The valid values are
listed below; unique abbreviations are acceptable.

@{b}t@{ub}
@{b}numbered@{ub}
     Always make numbered backups.

@{b}nil@{ub}
@{b}existing@{ub}
     Make numbered backups of files that already have them, simple
     backups of the others.  This is the default.

@{b}never@{ub}
@{b}simple@{ub}
     Always make simple backups.

   Alternately, you can tell @{b}patch@{ub} to prepend a prefix, such as a
directory name, to produce backup file names.  The @{b}-B BACKUP-PREFIX@{ub} or
@{b}--prefix=BACKUP-PREFIX@{ub} option makes backup files by prepending
BACKUP-PREFIX to them.  If you use this option, @{b}patch@{ub} ignores any @{b}-b@{ub}
option that you give.

   If the backup file already exists, @{b}patch@{ub} creates a new backup file
name by changing the first lowercase letter in the last component of
the file name into uppercase.  If there are no more lowercase letters
in the name, it removes the first character from the name.  It repeats
this process until it comes up with a backup file name that does not
already exist.

   If you specify the output file with the @{b}-o@{ub} option, that file is the
one that is backed up, not the input file.


@endnode

@node "Rejects" "diff.guide/Rejects"
@next "patch Options"
@prev "Backups"
@toc "Invoking patch"

Reject File Names
=================

   The names for reject files (files containing patches that @{b}patch@{ub}
could not find a place to apply) are normally the name of the output
file with @{b}.rej@{ub} appended (or @{b}#@{ub} on systems that do not support long file
names).

   Alternatively, you can tell @{b}patch@{ub} to place all of the rejected
patches in a single file.  The @{b}-r REJECT-FILE@{ub} or
@{b}--reject-file=REJECT-FILE@{ub} option uses REJECT-FILE as the reject file
name.


@endnode

@node "patch Options" "diff.guide/patch Options"
@prev "Rejects"
@toc "Invoking patch"

Options to @{b}patch@{ub}
================

   Here is a summary of all of the options that @{b}patch@{ub} accepts.  Older
versions of @{b}patch@{ub} do not accept long-named options or the @{b}-t@{ub}, @{b}-E@{ub}, or @{b}-V@{ub}
options.

   Multiple single-letter options that do not take an argument can be
combined into a single command line argument (with only one dash).
Brackets ([ and ]) indicate that an option takes an optional argument.

@{b}-b BACKUP-SUFFIX@{ub}
     Use BACKUP-SUFFIX as the backup extension instead of @{b}.orig@{ub} or @{b}~@{ub}.
     See @{"Backups" link "Backups"}.

@{b}-B BACKUP-PREFIX@{ub}
     Use BACKUP-PREFIX as a prefix to the backup file name.  If this
     option is specified, any @{b}-b@{ub} option is ignored.  See @{"Backups" link "Backups"}.

@{b}--batch@{ub}
     Do not ask any questions.  See @{"patch Messages" link "patch Messages"}.

@{b}-c@{ub}
@{b}--context@{ub}
     Interpret the patch file as a context diff.  See @{"patch Input" link "patch Input"}.

@{b}-d DIRECTORY@{ub}
@{b}--directory=DIRECTORY@{ub}
     Makes directory DIRECTORY the current directory for interpreting
     both file names in the patch file, and file names given as
     arguments to other options.  See @{"patch Directories" link "patch Directories"}.

@{b}-D NAME@{ub}
     Make merged if-then-else output using FORMAT.  See @{"If-then-else" link "If-then-else"}.

@{b}--debug=NUMBER@{ub}
     Set internal debugging flags.  Of interest only to @{b}patch@{ub} patchers.

@{b}-e@{ub}
@{b}--ed@{ub}
     Interpret the patch file as an @{b}ed@{ub} script.  See @{"patch Input" link "patch Input"}.

@{b}-E@{ub}
     Remove output files that are empty after the patches have been
     applied.  See @{"Empty Files" link "Empty Files"}.

@{b}-f@{ub}
     Assume that the user knows exactly what he or she is doing, and do
     not ask any questions.  See @{"patch Messages" link "patch Messages"}.

@{b}-F LINES@{ub}
     Set the maximum fuzz factor to LINES.  See @{"Inexact" link "Inexact"}.

@{b}--force@{ub}
     Assume that the user knows exactly what he or she is doing, and do
     not ask any questions.  See @{"patch Messages" link "patch Messages"}.

@{b}--forward@{ub}
     Ignore patches that @{b}patch@{ub} thinks are reversed or already applied.
     See also @{b}-R@{ub}.  See @{"Reversed Patches" link "Reversed Patches"}.

@{b}--fuzz=LINES@{ub}
     Set the maximum fuzz factor to LINES.  See @{"Inexact" link "Inexact"}.

@{b}--help@{ub}
     Print a summary of the options that @{b}patch@{ub} recognizes, then exit.

@{b}--ifdef=NAME@{ub}
     Make merged if-then-else output using FORMAT.  See @{"If-then-else" link "If-then-else"}.

@{b}--ignore-white-space@{ub}
@{b}-l@{ub}
     Let any sequence of white space in the patch file match any
     sequence of white space in the input file.  See
     @{"Changed White Space" link "Changed White Space"}.

@{b}-n@{ub}
@{b}--normal@{ub}
     Interpret the patch file as a normal diff.  See @{"patch Input" link "patch Input"}.

@{b}-N@{ub}
     Ignore patches that @{b}patch@{ub} thinks are reversed or already applied.
     See also @{b}-R@{ub}.  See @{"Reversed Patches" link "Reversed Patches"}.

@{b}-o OUTPUT-FILE@{ub}
@{b}--output=OUTPUT-FILE@{ub}
     Use OUTPUT-FILE as the output file name.  See @{"patch Options" link "patch Options"}.

@{b}-p[NUMBER]@{ub}
     Set the file name strip count to NUMBER.  See @{"patch Directories" link "patch Directories"}.

@{b}--prefix=BACKUP-PREFIX@{ub}
     Use BACKUP-PREFIX as a prefix to the backup file name.  If this
     option is specified, any @{b}-b@{ub} option is ignored.  See @{"Backups" link "Backups"}.

@{b}--quiet@{ub}
     Work silently unless an error occurs.  See @{"patch Messages" link "patch Messages"}.

@{b}-r REJECT-FILE@{ub}
     Use REJECT-FILE as the reject file name.  See @{"Rejects" link "Rejects"}.

@{b}-R@{ub}
     Assume that this patch was created with the old and new files
     swapped.  See @{"Reversed Patches" link "Reversed Patches"}.

@{b}--reject-file=REJECT-FILE@{ub}
     Use REJECT-FILE as the reject file name.  See @{"Rejects" link "Rejects"}.

@{b}--remove-empty-files@{ub}
     Remove output files that are empty after the patches have been
     applied.  See @{"Empty Files" link "Empty Files"}.

@{b}--reverse@{ub}
     Assume that this patch was created with the old and new files
     swapped.  See @{"Reversed Patches" link "Reversed Patches"}.

@{b}-s@{ub}
     Work silently unless an error occurs.  See @{"patch Messages" link "patch Messages"}.

@{b}-S@{ub}
     Ignore this patch from the patch file, but continue looking for
     the next patch in the file.  See @{"Multiple Patches" link "Multiple Patches"}.

@{b}--silent@{ub}
     Work silently unless an error occurs.  See @{"patch Messages" link "patch Messages"}.

@{b}--skip@{ub}
     Ignore this patch from the patch file, but continue looking for
     the next patch in the file.  See @{"Multiple Patches" link "Multiple Patches"}.

@{b}--strip[=NUMBER]@{ub}
     Set the file name strip count to NUMBER.  See @{"patch Directories" link "patch Directories"}.

@{b}--suffix=BACKUP-SUFFIX@{ub}
     Use BACKUP-SUFFIX as the backup extension instead of @{b}.orig@{ub} or @{b}~@{ub}.
     See @{"Backups" link "Backups"}.

@{b}-t@{ub}
     Do not ask any questions.  See @{"patch Messages" link "patch Messages"}.

@{b}-u@{ub}
@{b}--unified@{ub}
     Interpret the patch file as a unified diff.  See @{"patch Input" link "patch Input"}.

@{b}-v@{ub}
     Output the revision header and patch level of @{b}patch@{ub}.

@{b}-V BACKUP-STYLE@{ub}
     Select the kind of backups to make.  See @{"Backups" link "Backups"}.

@{b}--version@{ub}
     Output the revision header and patch level of @{b}patch@{ub}, then exit.

@{b}--version=control=BACKUP-STYLE@{ub}
     Select the kind of backups to make.  See @{"Backups" link "Backups"}.

@{b}-x NUMBER@{ub}
     Set internal debugging flags.  Of interest only to @{b}patch@{ub} patchers.


@endnode

@node "Invoking sdiff" "diff.guide/Invoking sdiff"
@next "Incomplete Lines"
@prev "Invoking patch"
@toc "Main"

Invoking @{b}sdiff@{ub}
**************

   The @{b}sdiff@{ub} command merges two files and interactively outputs the
results.  Its arguments are as follows:

     sdiff -o OUTFILE OPTIONS... FROM-FILE TO-FILE

   This merges FROM-FILE with TO-FILE, with output to OUTFILE.  If
FROM-FILE is a directory and TO-FILE is not, @{b}sdiff@{ub} compares the file in
FROM-FILE whose file name is that of TO-FILE, and vice versa.
FROM-FILE and TO-FILE may not both be directories.

@{b}   sdiff@{ub} options begin with @{b}-@{ub}, so normally FROM-FILE and TO-FILE may
not begin with @{b}-@{ub}.  However, @{b}--@{ub} as an argument by itself treats the
remaining arguments as file names even if they begin with @{b}-@{ub}.  You may
not use @{b}-@{ub} as an input file.

   An exit status of 0 means no differences were found, 1 means some
differences were found, and 2 means trouble.

@{b}   sdiff@{ub} without @{b}-o@{ub} (or @{b}--output@{ub}) produces a side-by-side difference.
This usage is obsolete; use @{b}diff --side-by-side@{ub} instead.


 @{" sdiff Options      " link "sdiff Options"}  Summary of options to @{b}diff@{ub}.


@endnode

@node "sdiff Options" "diff.guide/sdiff Options"
@toc "Invoking sdiff"

Options to @{b}sdiff@{ub}
================

   Below is a summary of all of the options that GNU @{b}sdiff@{ub} accepts.
Each option has two equivalent names, one of which is a single letter
preceded by @{b}-@{ub}, and the other of which is a long name preceded by @{b}--@{ub}.
Multiple single letter options (unless they take an argument) can be
combined into a single command line argument.  Long named options can
be abbreviated to any unique prefix of their name.

@{b}-a@{ub}
     Treat all files as text and compare them line-by-line, even if they
     do not appear to be text.  See @{"Binary" link "Binary"}.

@{b}-b@{ub}
     Ignore changes in amount of white space.  See @{"White Space" link "White Space"}.

@{b}-B@{ub}
     Ignore changes that just insert or delete blank lines.  See
     @{"Blank Lines" link "Blank Lines"}.

@{b}-d@{ub}
     Change the algorithm to perhaps find a smaller set of changes.
     This makes @{b}sdiff@{ub} slower (sometimes much slower).  See
     @{"diff Performance" link "diff Performance"}.

@{b}-H@{ub}
     Use heuristics to speed handling of large files that have numerous
     scattered small changes.  See @{"diff Performance" link "diff Performance"}.

@{b}--expand-tabs@{ub}
     Expand tabs to spaces in the output, to preserve the alignment of
     tabs in the input files.  See @{"Tabs" link "Tabs"}.

@{b}-i@{ub}
     Ignore changes in case; consider upper- and lower-case to be the
     same.  See @{"Case Folding" link "Case Folding"}.

@{b}-I REGEXP@{ub}
     Ignore changes that just insert or delete lines that match REGEXP.
     See @{"Specified Folding" link "Specified Folding"}.

@{b}--ignore-all-space@{ub}
     Ignore white space when comparing lines.  See @{"White Space" link "White Space"}.

@{b}--ignore-blank-lines@{ub}
     Ignore changes that just insert or delete blank lines.  See
     @{"Blank Lines" link "Blank Lines"}.

@{b}--ignore-case@{ub}
     Ignore changes in case; consider upper- and lower-case to be the
     same.  See @{"Case Folding" link "Case Folding"}.

@{b}--ignore-matching-lines=REGEXP@{ub}
     Ignore changes that just insert or delete lines that match REGEXP.
     See @{"Specified Folding" link "Specified Folding"}.

@{b}--ignore-space-change@{ub}
     Ignore changes in amount of white space.  See @{"White Space" link "White Space"}.

@{b}-l@{ub}
@{b}--left-column@{ub}
     Print only the left column of two common lines.  See
     @{"Side by Side Format" link "Side by Side Format"}.

@{b}--minimal@{ub}
     Change the algorithm to perhaps find a smaller set of changes.
     This makes @{b}sdiff@{ub} slower (sometimes much slower).  See
     @{"diff Performance" link "diff Performance"}.

@{b}-o FILE@{ub}
@{b}--output=FILE@{ub}
     Put merged output into FILE.  This option is required for merging.

@{b}-s@{ub}
@{b}--suppress-common-lines@{ub}
     Do not print common lines.  See @{"Side by Side Format" link "Side by Side Format"}.

@{b}--speed-large-files@{ub}
     Use heuristics to speed handling of large files that have numerous
     scattered small changes.  See @{"diff Performance" link "diff Performance"}.

@{b}-t@{ub}
     Expand tabs to spaces in the output, to preserve the alignment of
     tabs in the input files.  See @{"Tabs" link "Tabs"}.

@{b}--text@{ub}
     Treat all files as text and compare them line-by-line, even if they
     do not appear to be text.  See @{"Binary" link "Binary"}.

@{b}-v@{ub}
@{b}--version@{ub}
     Output the version number of @{b}sdiff@{ub}.

@{b}-w COLUMNS@{ub}
@{b}--width=COLUMNS@{ub}
     Use an output width of COLUMNS.  See @{"Side by Side Format" link "Side by Side Format"}.  Note
     that for historical reasons, this option is @{b}-W@{ub} in @{b}diff@{ub}, @{b}-w@{ub} in
     @{b}sdiff@{ub}.

@{b}-W@{ub}
     Ignore horizontal white space when comparing lines.  See
     @{"White Space" link "White Space"}.  Note that for historical reasons, this option is
     @{b}-w@{ub} in @{b}diff@{ub}, @{b}-W@{ub} in @{b}sdiff@{ub}.


@endnode

@node "Incomplete Lines" "diff.guide/Incomplete Lines"
@next "Projects"
@prev "Invoking sdiff"
@toc "Main"

Incomplete Lines
****************

   When an input file ends in a non-newline character, its last line is
called an @{i}incomplete line@{ui} because its last character is not a newline.
All other lines are called @{i}full lines@{ui} and end in a newline character.
Incomplete lines do not match full lines unless differences in white
space are ignored (see @{"White Space" link "White Space"}).

   An incomplete line is normally distinguished on output from a full
line by a following line that starts with @{b}\\ @{ub}.  However, the RCS format
(see @{"RCS" link "RCS"}) outputs the incomplete line as-is, without any trailing
newline or following line.  The side by side format normally represents
incomplete lines as-is, but in some cases uses a @{b}\\ @{ub} or @{b}/@{ub} gutter
marker; See @{"Side by Side" link "Side by Side"}.  The if-then-else line format preserves a
line's incompleteness with @{b}%L@{ub}, and discards the newline with @{b}%l@{ub}; See
@{"Line Formats" link "Line Formats"}.  Finally, with the @{b}ed@{ub} and forward @{b}ed@{ub} output formats
(see @{"Output Formats" link "Output Formats"}) @{b}diff@{ub} cannot represent an incomplete line, so it
pretends there was a newline and reports an error.

   For example, suppose @{b}F@{ub} and @{b}G@{ub} are one-byte files that contain just @{b}f@{ub}
and @{b}g@{ub}, respectively.  Then @{b}diff F G@{ub} outputs

     1c1
     < f
     \\ No newline at end of file
     ---
     > g
     \\ No newline at end of file

(The exact message may differ in non-English locales.)  @{b}diff -n F G@{ub}
outputs the following without a trailing newline:

     d1 1
     a1 1
     g

@{b}   diff -e F G@{ub} reports two errors and outputs the following:

     1c
     g
     .


@endnode

@node "Projects" "diff.guide/Projects"
@next "Concept Index"
@prev "Incomplete Lines"
@toc "Main"

Future Projects
***************

   Here are some ideas for improving GNU @{b}diff@{ub} and @{b}patch@{ub}.  The GNU
project has identified some improvements as potential programming
projects for volunteers.  You can also help by reporting any bugs that
you find.

   If you are a programmer and would like to contribute something to the
GNU project, please consider volunteering for one of these projects.  If
you are seriously contemplating work, please write to
@{b}gnu@prep.ai.mit.edu@{ub} to coordinate with other volunteers.


 @{" Shortcomings       " link "Shortcomings"}  Suggested projects for improvements.
 @{" Bugs               " link "Bugs"}  Reporting bugs.


@endnode

@node "Shortcomings" "diff.guide/Shortcomings"
@next "Bugs"
@toc "Projects"

Suggested Projects for Improving GNU @{b}diff@{ub} and @{b}patch@{ub}
===================================================

   One should be able to use GNU @{b}diff@{ub} to generate a patch from any pair
of directory trees, and given the patch and a copy of one such tree,
use @{b}patch@{ub} to generate a faithful copy of the other.  Unfortunately,
some changes to directory trees cannot be expressed using current patch
formats; also, @{b}patch@{ub} does not handle some of the existing formats.
These shortcomings motivate the following suggested projects.


 @{" Changing Structure " link "Changing Structure"}  Handling changes to the directory structure.
 @{" Special Files      " link "Special Files"}  Handling symbolic links, device special files, etc.
 @{" Unusual File Names " link "Unusual File Names"}  Handling file names that contain unusual characters.
 @{" Arbitrary Limits   " link "Arbitrary Limits"}  Patching non-text files.
 @{" Large Files        " link "Large Files"}  Handling files that do not fit in memory.
 @{" Ignoring Changes   " link "Ignoring Changes"}  Ignoring certain changes while showing others.


@endnode

@node "Changing Structure" "diff.guide/Changing Structure"
@next "Special Files"
@toc "Shortcomings"

Handling Changes to the Directory Structure
-------------------------------------------

@{b}   diff@{ub} and @{b}patch@{ub} do not handle some changes to directory structure.
For example, suppose one directory tree contains a directory named @{b}D@{ub}
with some subsidiary files, and another contains a file with the same
name @{b}D@{ub}.  @{b}diff -r@{ub} does not output enough information for @{b}patch@{ub} to
transform the the directory subtree into the file.

   There should be a way to specify that a file has been deleted without
having to include its entire contents in the patch file.  There should
also be a way to tell @{b}patch@{ub} that a file was renamed, even if there is
no way for @{b}diff@{ub} to generate such information.

   These problems can be fixed by extending the @{b}diff@{ub} output format to
represent changes in directory structure, and extending @{b}patch@{ub} to
understand these extensions.


@endnode

@node "Special Files" "diff.guide/Special Files"
@next "Unusual File Names"
@prev "Changing Structure"
@toc "Shortcomings"

Files that are Neither Directories Nor Regular Files
----------------------------------------------------

   Some files are neither directories nor regular files: they are
unusual files like symbolic links, device special files, named pipes,
and sockets.  Currently, @{b}diff@{ub} treats symbolic links like regular files;
it treats other special files like regular files if they are specified
at the top level, but simply reports their presence when comparing
directories.  This means that @{b}patch@{ub} cannot represent changes to such
files.  For example, if you change which file a symbolic link points
to, @{b}diff@{ub} outputs the difference between the two files, instead of the
change to the symbolic link.

@{b}   diff@{ub} should optionally report changes to special files specially,
and @{b}patch@{ub} should be extended to understand these extensions.


@endnode

@node "Unusual File Names" "diff.guide/Unusual File Names"
@next "Arbitrary Limits"
@prev "Special Files"
@toc "Shortcomings"

File Names that Contain Unusual Characters
------------------------------------------

   When a file name contains an unusual character like a newline or
white space, @{b}diff -r@{ub} generates a patch that @{b}patch@{ub} cannot parse.  The
problem is with format of @{b}diff@{ub} output, not just with @{b}patch@{ub}, because
with odd enough file names one can cause @{b}diff@{ub} to generate a patch that
is syntactically correct but patches the wrong files.  The format of
@{b}diff@{ub} output should be extended to handle all possible file names.


@endnode

@node "Arbitrary Limits" "diff.guide/Arbitrary Limits"
@next "Large Files"
@prev "Unusual File Names"
@toc "Shortcomings"

Arbitrary Limits
----------------

   GNU @{b}diff@{ub} can analyze files with arbitrarily long lines and files
that end in incomplete lines.  However, @{b}patch@{ub} cannot patch such files.
The @{b}patch@{ub} internal limits on line lengths should be removed, and @{b}patch@{ub}
should be extended to parse @{b}diff@{ub} reports of incomplete lines.


@endnode

@node "Large Files" "diff.guide/Large Files"
@next "Ignoring Changes"
@prev "Arbitrary Limits"
@toc "Shortcomings"

Handling Files that Do Not Fit in Memory
----------------------------------------

@{b}   diff@{ub} operates by reading both files into memory.  This method fails
if the files are too large, and @{b}diff@{ub} should have a fallback.

   One way to do this is to scan the files sequentially to compute hash
codes of the lines and put the lines in equivalence classes based only
on hash code.  Then compare the files normally.  This does produce some
false matches.

   Then scan the two files sequentially again, checking each match to
see whether it is real.  When a match is not real, mark both the
"matching" lines as changed.  Then build an edit script as usual.

   The output routines would have to be changed to scan the files
sequentially looking for the text to print.


@endnode

@node "Ignoring Changes" "diff.guide/Ignoring Changes"
@prev "Large Files"
@toc "Shortcomings"

Ignoring Certain Changes
------------------------

   It would be nice to have a feature for specifying two strings, one in
FROM-FILE and one in TO-FILE, which should be considered to match.
Thus, if the two strings are @{b}foo@{ub} and @{b}bar@{ub}, then if two lines differ only
in that @{b}foo@{ub} in file 1 corresponds to @{b}bar@{ub} in file 2, the lines are
treated as identical.

   It is not clear how general this feature can or should be, or what
syntax should be used for it.


@endnode

@node "Bugs" "diff.guide/Bugs"
@prev "Shortcomings"
@toc "Projects"

Reporting Bugs
==============

   If you think you have found a bug in GNU @{b}cmp@{ub}, @{b}diff@{ub}, @{b}diff3@{ub}, @{b}sdiff@{ub}, or
@{b}patch@{ub}, please report it by electronic mail to
@{b}bug-gnu-utils@prep.ai.mit.edu@{ub}.  Send as precise a description of the
problem as you can, including sample input files that produce the bug,
if applicable.

   Because Larry Wall has not released a new version of @{b}patch@{ub} since mid
1988 and the GNU version of @{b}patch@{ub} has been changed since then, please
send bug reports for @{b}patch@{ub} by electronic mail to both
@{b}bug-gnu-utils@prep.ai.mit.edu@{ub} and @{b}lwall@netlabs.com@{ub}.


@endnode

@node "Concept Index" "diff.guide/Concept Index"
@prev "Projects"
@toc "Main"

Concept Index
*************

@index "Concept Index"



 @{" ! output format                          " link "Context"}   Context
 @{" +- output format                         " link "Unified Format"}   Unified Format
 @{" < output format                          " link "Normal"}   Normal
 @{" <<<<<<< for marking conflicts            " link "Marking Conflicts"}   Marking Conflicts
 @{" aligning tabstops                        " link "Tabs"}   Tabs
 @{" alternate file names                     " link "Alternate Names"}   Alternate Names
 @{" backup file names                        " link "Backups"}   Backups
 @{" binary file diff                         " link "Binary"}   Binary
 @{" binary file patching                     " link "Arbitrary Limits"}   Arbitrary Limits
 @{" blank and tab difference suppression     " link "White Space"}   White Space
 @{" blank line difference suppression        " link "Blank Lines"}   Blank Lines
 @{" brief difference reports                 " link "Brief"}   Brief
 @{" bug reports                              " link "Bugs"}   Bugs
 @{" C function headings                      " link "C Function Headings"}   C Function Headings
 @{" C if-then-else output format             " link "If-then-else"}   If-then-else
 @{" case difference suppression              " link "Case Folding"}   Case Folding
 @{" cmp invocation                           " link "Invoking cmp"}   Invoking cmp
 @{" cmp options                              " link "cmp Options"}   cmp Options
 @{" columnar output                          " link "Side by Side"}   Side by Side
 @{" comparing three files                    " link "Comparing Three Files"}   Comparing Three Files
 @{" conflict                                 " link "diff3 Merging"}   diff3 Merging
 @{" conflict marking                         " link "Marking Conflicts"}   Marking Conflicts
 @{" context output format                    " link "Context"}   Context
 @{" diagnostics from patch                   " link "patch Messages"}   patch Messages
 @{" diff invocation                          " link "Invoking diff"}   Invoking diff
 @{" diff merging                             " link "Interactive Merging"}   Interactive Merging
 @{" diff options                             " link "diff Options"}   diff Options
 @{" diff sample input                        " link "Sample diff Input"}   Sample diff Input
 @{" diff3 hunks                              " link "diff3 Hunks"}   diff3 Hunks
 @{" diff3 invocation                         " link "Invoking diff3"}   Invoking diff3
 @{" diff3 options                            " link "diff3 Options"}   diff3 Options
 @{" diff3 sample input                       " link "Sample diff3 Input"}   Sample diff3 Input
 @{" directories and patch                    " link "patch Directories"}   patch Directories
 @{" directory structure changes              " link "Changing Structure"}   Changing Structure
 @{" ed script output format                  " link "ed Scripts"}   ed Scripts
 @{" empty files, removing                    " link "Empty Files"}   Empty Files
 @{" file name alternates                     " link "Alternate Names"}   Alternate Names
 @{" file names with unusual characters       " link "Unusual File Names"}   Unusual File Names
 @{" format of diff output                    " link "Output Formats"}   Output Formats
 @{" format of diff3 output                   " link "Comparing Three Files"}   Comparing Three Files
 @{" formats for if-then-else line groups     " link "Line Group Formats"}   Line Group Formats
 @{" forward ed script output format          " link "Forward ed"}   Forward ed
 @{" full lines                               " link "Incomplete Lines"}   Incomplete Lines
 @{" function headings, C                     " link "C Function Headings"}   C Function Headings
 @{" fuzz factor when patching                " link "Inexact"}   Inexact
 @{" headings                                 " link "Sections"}   Sections
 @{" hunks                                    " link "Hunks"}   Hunks
 @{" hunks for diff3                          " link "diff3 Hunks"}   diff3 Hunks
 @{" if-then-else output format               " link "If-then-else"}   If-then-else
 @{" ifdef output format                      " link "If-then-else"}   If-then-else
 @{" imperfect patch application              " link "Imperfect"}   Imperfect
 @{" incomplete line merging                  " link "Merging Incomplete Lines"}   Merging Incomplete Lines
 @{" incomplete lines                         " link "Incomplete Lines"}   Incomplete Lines
 @{" inexact patches                          " link "Inexact"}   Inexact
 @{" interactive merging                      " link "Interactive Merging"}   Interactive Merging
 @{" introduction                             " link "Comparison"}   Comparison
 @{" invoking cmp                             " link "Invoking cmp"}   Invoking cmp
 @{" invoking diff                            " link "Invoking diff"}   Invoking diff
 @{" invoking diff3                           " link "Invoking diff3"}   Invoking diff3
 @{" invoking patch                           " link "Invoking patch"}   Invoking patch
 @{" invoking sdiff                           " link "Invoking sdiff"}   Invoking sdiff
 @{" large files                              " link "Large Files"}   Large Files
 @{" line formats                             " link "Line Formats"}   Line Formats
 @{" line group formats                       " link "Line Group Formats"}   Line Group Formats
 @{" merge commands                           " link "Merge Commands"}   Merge Commands
 @{" merged diff3 format                      " link "Bypassing ed"}   Bypassing ed
 @{" merged output format                     " link "If-then-else"}   If-then-else
 @{" merging from a common ancestor           " link "diff3 Merging"}   diff3 Merging
 @{" merging interactively                    " link "Merge Commands"}   Merge Commands
 @{" messages from patch                      " link "patch Messages"}   patch Messages
 @{" multiple patches                         " link "Multiple Patches"}   Multiple Patches
 @{" newline treatment by diff                " link "Incomplete Lines"}   Incomplete Lines
 @{" normal output format                     " link "Normal"}   Normal
 @{" options for cmp                          " link "cmp Options"}   cmp Options
 @{" options for diff                         " link "diff Options"}   diff Options
 @{" options for diff3                        " link "diff3 Options"}   diff3 Options
 @{" options for patch                        " link "patch Options"}   patch Options
 @{" options for sdiff                        " link "sdiff Options"}   sdiff Options
 @{" output formats                           " link "Output Formats"}   Output Formats
 @{" overlap                                  " link "diff3 Merging"}   diff3 Merging
 @{" overlapping change, selection of         " link "Which Changes"}   Which Changes
 @{" overview of diff and patch               " link "Overview"}   Overview
 @{" paginating diff output                   " link "Pagination"}   Pagination
 @{" patch input format                       " link "patch Input"}   patch Input
 @{" patch invocation                         " link "Invoking patch"}   Invoking patch
 @{" patch making tips                        " link "Making Patches"}   Making Patches
 @{" patch messages and questions             " link "patch Messages"}   patch Messages
 @{" patch options                            " link "patch Options"}   patch Options
 @{" patching directories                     " link "patch Directories"}   patch Directories
 @{" performance of diff                      " link "diff Performance"}   diff Performance
 @{" projects for directories                 " link "Shortcomings"}   Shortcomings
 @{" RCS script output format                 " link "RCS"}   RCS
 @{" regular expression matching headings     " link "Specified Headings"}   Specified Headings
 @{" regular expression suppression           " link "Specified Folding"}   Specified Folding
 @{" reject file names                        " link "Rejects"}   Rejects
 @{" removing empty files                     " link "Empty Files"}   Empty Files
 @{" reporting bugs                           " link "Bugs"}   Bugs
 @{" reversed patches                         " link "Reversed Patches"}   Reversed Patches
 @{" sample input for diff                    " link "Sample diff Input"}   Sample diff Input
 @{" sample input for diff3                   " link "Sample diff3 Input"}   Sample diff3 Input
 @{" script output formats                    " link "Scripts"}   Scripts
 @{" sdiff invocation                         " link "Invoking sdiff"}   Invoking sdiff
 @{" sdiff options                            " link "sdiff Options"}   sdiff Options
 @{" sdiff output format                      " link "sdiff Option Summary"}   sdiff Option Summary
 @{" section headings                         " link "Sections"}   Sections
 @{" side by side                             " link "Side by Side"}   Side by Side
 @{" side by side format                      " link "Side by Side Format"}   Side by Side Format
 @{" special files                            " link "Special Files"}   Special Files
 @{" specified headings                       " link "Specified Headings"}   Specified Headings
 @{" summarizing which files differ           " link "Brief"}   Brief
 @{" System V diff3 compatibility             " link "Saving the Changed File"}   Saving the Changed File
 @{" tab and blank difference suppression     " link "White Space"}   White Space
 @{" tabstop alignment                        " link "Tabs"}   Tabs
 @{" text versus binary diff                  " link "Binary"}   Binary
 @{" tips for patch making                    " link "Making Patches"}   Making Patches
 @{" two-column output                        " link "Side by Side"}   Side by Side
 @{" unified output format                    " link "Unified Format"}   Unified Format
 @{" unmerged change                          " link "Which Changes"}   Which Changes
 @{" white space in patches                   " link "Changed White Space"}   Changed White Space

@endnode

