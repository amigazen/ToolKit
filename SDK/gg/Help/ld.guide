@database ld.guide

@Master /gg-src/gg/fsf/binutils/ld/ld.texinfo

@Width 72


This is the AmigaGuide®  file ld.guide, produced by Makeinfo-1.68 from 
the input file /gg-src/gg/fsf/binutils/ld/ld.texinfo.

START-INFO-DIR-ENTRY
* Ld: (ld).                       The GNU linker.
END-INFO-DIR-ENTRY

   This file documents the GNU linker LD.

   Copyright (C) 1991, 92, 93, 94, 95, 96, 1997 Free Software
Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the entire resulting derived work is distributed under the terms
of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.

@node Main "ld.guide"
@next "Overview"

Using ld
********

   This file documents the GNU linker ld.


 @{" Overview                   " link "Overview"}  Overview
 @{" Invocation                 " link "Invocation"}  Invocation
 @{" Commands                   " link "Commands"}  Command Language

 @{" Machine Dependent          " link "Machine Dependent"}  Machine Dependent Features

 @{" BFD                        " link "BFD"}  BFD

 @{" Reporting Bugs             " link "Reporting Bugs"}  Reporting Bugs
 @{" MRI                        " link "MRI"}  MRI Compatible Script Files
 @{" Index                      " link "Index"}  Index


@endnode

@node "Overview" "ld.guide/Overview"
@next "Invocation"
@prev "Main"
@toc "Main"

Overview
********

@{b}   ld@{ub} combines a number of object and archive files, relocates their
data and ties up symbol references. Usually the last step in compiling
a program is to run @{b}ld@{ub}.

@{b}   ld@{ub} accepts Linker Command Language files written in a superset of
AT&T's Link Editor Command Language syntax, to provide explicit and
total control over the linking process.

   This version of @{b}ld@{ub} uses the general purpose BFD libraries to operate
on object files. This allows @{b}ld@{ub} to read, combine, and write object
files in many different formats--for example, COFF or @{b}a.out@{ub}.  Different
formats may be linked together to produce any available kind of object
file.  See @{"BFD" link "BFD"}, for more information.

   Aside from its flexibility, the GNU linker is more helpful than other
linkers in providing diagnostic information.  Many linkers abandon
execution immediately upon encountering an error; whenever possible, @{b}ld@{ub}
continues executing, allowing you to identify other errors (or, in some
cases, to get an output file in spite of the error).


@endnode

@node "Invocation" "ld.guide/Invocation"
@next "Commands"
@prev "Overview"
@toc "Main"

Invocation
**********

   The GNU linker @{b}ld@{ub} is meant to cover a broad range of situations, and
to be as compatible as possible with other linkers.  As a result, you
have many choices to control its behavior.


 @{" Options                    " link "Options"}  Command Line Options
 @{" Environment                " link "Environment"}  Environment Variables


@endnode

@node "Options" "ld.guide/Options"
@next "Environment"
@toc "Invocation"

Command Line Options
====================

   The linker supports a plethora of command-line options, but in actual
practice few of them are used in any particular context.  For instance,
a frequent use of @{b}ld@{ub} is to link standard Unix object files on a
standard, supported Unix system.  On such a system, to link a file
@{b}hello.o@{ub}:

     ld -o OUTPUT /lib/crt0.o hello.o -lc

   This tells @{b}ld@{ub} to produce a file called OUTPUT as the result of
linking the file @{b}/lib/crt0.o@{ub} with @{b}hello.o@{ub} and the library @{b}libc.a@{ub}, which
will come from the standard search directories.  (See the discussion of
the @{b}-l@{ub} option below.)

   The command-line options to @{b}ld@{ub} may be specified in any order, and
may be repeated at will.  Repeating most options with a different
argument will either have no further effect, or override prior
occurrences (those further to the left on the command line) of that
option.  Options which may be meaningfully specified more than once are
noted in the descriptions below.

   Non-option arguments are objects files which are to be linked
together.  They may follow, precede, or be mixed in with command-line
options, except that an object file argument may not be placed between
an option and its argument.

   Usually the linker is invoked with at least one object file, but you
can specify other forms of binary input files using @{b}-l@{ub}, @{b}-R@{ub}, and the
script command language.  If @{i}no@{ui} binary input files at all are
specified, the linker does not produce any output, and issues the
message @{b}No input files@{ub}.

   If the linker can not recognize the format of an object file, it will
assume that it is a linker script.  A script specified in this way
augments the main linker script used for the link (either the default
linker script or the one specified by using @{b}-T@{ub}).  This feature permits
the linker to link against a file which appears to be an object or an
archive, but actually merely defines some symbol values, or uses @{b}INPUT@{ub}
or @{b}GROUP@{ub} to load other objects.  Note that specifying a script in this
way should only be used to augment the main linker script; if you want
to use some command that logically can only appear once, such as the
@{b}SECTIONS@{ub} or @{b}MEMORY@{ub} command, you must replace the default linker script
using the @{b}-T@{ub} option.  See @{"Commands" link "Commands"}.

   For options whose names are a single letter, option arguments must
either follow the option letter without intervening whitespace, or be
given as separate arguments immediately following the option that
requires them.

   For options whose names are multiple letters, either one dash or two
can precede the option name; for example, @{b}--oformat@{ub} and @{b}--oformat@{ub} are
equivalent.  Arguments to multiple-letter options must either be
separated from the option name by an equals sign, or be given as
separate arguments immediately following the option that requires them.
For example, @{b}--oformat srec@{ub} and @{b}--oformat=srec@{ub} are equivalent.  Unique
abbreviations of the names of multiple-letter options are accepted.

@{b}-aKEYWORD@{ub}
     This option is supported for HP/UX compatibility.  The KEYWORD
     argument must be one of the strings @{b}archive@{ub}, @{b}shared@{ub}, or @{b}default@{ub}.
     @{b}-aarchive@{ub} is functionally equivalent to @{b}-Bstatic@{ub}, and the other
     two keywords are functionally equivalent to @{b}-Bdynamic@{ub}.  This
     option may be used any number of times.

@{b}-AARCHITECTURE@{ub}
@{b}--architecture=ARCHITECTURE@{ub}
     In the current release of @{b}ld@{ub}, this option is useful only for the
     Intel 960 family of architectures.  In that @{b}ld@{ub} configuration, the
     ARCHITECTURE argument identifies the particular architecture in
     the 960 family, enabling some safeguards and modifying the
     archive-library search path.  See @{"ld and the Intel 960 family" link "i960"},
     for details.

     Future releases of @{b}ld@{ub} may support similar functionality for other
     architecture families.

@{b}-b INPUT-FORMAT@{ub}
@{b}--format=INPUT-FORMAT@{ub}
@{b}     ld@{ub} may be configured to support more than one kind of object file.
     If your @{b}ld@{ub} is configured this way, you can use the @{b}-b@{ub} option to
     specify the binary format for input object files that follow this
     option on the command line.  Even when @{b}ld@{ub} is configured to support
     alternative object formats, you don't usually need to specify
     this, as @{b}ld@{ub} should be configured to expect as a default input
     format the most usual format on each machine.  INPUT-FORMAT is a
     text string, the name of a particular format supported by the BFD
     libraries.  (You can list the available binary formats with
     @{b}objdump -i@{ub}.)  See @{"BFD" link "BFD"}.

     You may want to use this option if you are linking files with an
     unusual binary format.  You can also use @{b}-b@{ub} to switch formats
     explicitly (when linking object files of different formats), by
     including @{b}-b INPUT-FORMAT@{ub} before each group of object files in a
     particular format.

     The default format is taken from the environment variable
     @{b}GNUTARGET@{ub}.  See @{"Environment" link "Environment"}.  You can also define the input
     format from a script, using the command @{b}TARGET@{ub}; see
     @{"Option Commands" link "Option Commands"}.

@{b}-c MRI-COMMANDFILE@{ub}
@{b}--mri-script=MRI-COMMANDFILE@{ub}
     For compatibility with linkers produced by MRI, @{b}ld@{ub} accepts script
     files written in an alternate, restricted command language,
     described in @{"MRI Compatible Script Files" link "MRI"}.  Introduce MRI script
     files with the option @{b}-c@{ub}; use the @{b}-T@{ub} option to run linker scripts
     written in the general-purpose @{b}ld@{ub} scripting language.  If
     MRI-CMDFILE does not exist, @{b}ld@{ub} looks for it in the directories
     specified by any @{b}-L@{ub} options.

@{b}-d@{ub}
@{b}-dc@{ub}
@{b}-dp@{ub}
     These three options are equivalent; multiple forms are supported
     for compatibility with other linkers.  They assign space to common
     symbols even if a relocatable output file is specified (with @{b}-r@{ub}).
     The script command @{b}FORCE_COMMON_ALLOCATION@{ub} has the same effect.
     See @{"Option Commands" link "Option Commands"}.

@{b}-e ENTRY@{ub}
@{b}--entry=ENTRY@{ub}
     Use ENTRY as the explicit symbol for beginning execution of your
     program, rather than the default entry point. See @{"Entry Point" link "Entry Point"},
     for a discussion of defaults and other ways of specifying the
     entry point.

@{b}-E@{ub}
@{b}--export-dynamic@{ub}
     When creating a dynamically linked executable, add all symbols to
     the dynamic symbol table.  Normally, the dynamic symbol table
     contains only symbols which are used by a dynamic object.  This
     option is needed for some uses of @{b}dlopen@{ub}.

@{b}-f@{ub}
@{b}--auxiliary NAME@{ub}
     When creating an ELF shared object, set the internal DT_AUXILIARY
     field to the specified name.  This tells the dynamic linker that
     the symbol table of the shared object should be used as an
     auxiliary filter on the symbol table of the shared object NAME.

     If you later link a program against this filter object, then, when
     you run the program, the dynamic linker will see the DT_AUXILIARY
     field.  If the dynamic linker resolves any symbols from the filter
     object, it will first check whether there is a definition in the
     shared object NAME.  If there is one, it will be used instead of
     the definition in the filter object.  The shared object NAME need
     not exist.  Thus the shared object NAME may be used to provide an
     alternative implementation of certain functions, perhaps for
     debugging or for machine specific performance.

     This option may be specified more than once.  The DT_AUXILIARY
     entries will be created in the order in which they appear on the
     command line.

@{b}-F NAME@{ub}
@{b}--filter NAME@{ub}
     When creating an ELF shared object, set the internal DT_FILTER
     field to the specified name.  This tells the dynamic linker that
     the symbol table of the shared object which is being created
     should be used as a filter on the symbol table of the shared
     object NAME.

     If you later link a program against this filter object, then, when
     you run the program, the dynamic linker will see the DT_FILTER
     field.  The dynamic linker will resolve symbols according to the
     symbol table of the filter object as usual, but it will actually
     link to the definitions found in the shared object NAME.  Thus the
     filter object can be used to select a subset of the symbols
     provided by the object NAME.

     Some older linkers used the @{b}-F@{ub} option throughout a compilation
     toolchain for specifying object-file format for both input and
     output object files.  The GNU linker uses other mechanisms for this
     purpose: the @{b}-b@{ub}, @{b}--format@{ub}, @{b}--oformat@{ub} options, the @{b}TARGET@{ub} command
     in linker scripts, and the @{b}GNUTARGET@{ub} environment variable.  The
     GNU linker will ignore the @{b}-F@{ub} option when not creating an ELF
     shared object.

@{b}--force-exe-suffix@{ub}
     Make sure that an output file has a .exe suffix.

     If a successfully built fully linked output file does not have a
     @{b}.exe@{ub} or @{b}.dll@{ub} suffix, this option forces the linker to copy the
     output file to one of the same name with a @{b}.exe@{ub} suffix. This
     option is useful when using unmodified Unix makefiles on a
     Microsoft Windows host, since some versions of Windows won't run
     an image unless it ends in a @{b}.exe@{ub} suffix.

@{b}-g@{ub}
     Ignored.  Provided for compatibility with other tools.

@{b}-GVALUE@{ub}
@{b}--gpsize=VALUE@{ub}
     Set the maximum size of objects to be optimized using the GP
     register to SIZE.  This is only meaningful for object file formats
     such as MIPS ECOFF which supports putting large and small objects
     into different sections.  This is ignored for other object file
     formats.

@{b}-hNAME@{ub}
@{b}-soname=NAME@{ub}
     When creating an ELF shared object, set the internal DT_SONAME
     field to the specified name.  When an executable is linked with a
     shared object which has a DT_SONAME field, then when the
     executable is run the dynamic linker will attempt to load the
     shared object specified by the DT_SONAME field rather than the
     using the file name given to the linker.

@{b}-i@{ub}
     Perform an incremental link (same as option @{b}-r@{ub}).

@{b}-lARCHIVE@{ub}
@{b}--library=ARCHIVE@{ub}
     Add archive file ARCHIVE to the list of files to link.  This
     option may be used any number of times.  @{b}ld@{ub} will search its
     path-list for occurrences of @{b}libARCHIVE.a@{ub} for every ARCHIVE
     specified.

     On systems which support shared libraries, @{b}ld@{ub} may also search for
     libraries with extensions other than @{b}.a@{ub}.  Specifically, on ELF and
     SunOS systems, @{b}ld@{ub} will search a directory for a library with an
     extension of @{b}.so@{ub} before searching for one with an extension of @{b}.a@{ub}.
     By convention, a @{b}.so@{ub} extension indicates a shared library.

     The linker will search an archive only once, at the location where
     it is specified on the command line.  If the archive defines a
     symbol which was undefined in some object which appeared before
     the archive on the command line, the linker will include the
     appropriate file(s) from the archive.  However, an undefined
     symbol in an object appearing later on the command line will not
     cause the linker to search the archive again.

     See the @{b}-(@{ub} option for a way to force the linker to search archives
     multiple times.

     You may list the same archive multiple times on the command line.

     This type of archive searching is standard for Unix linkers.
     However, if you are using @{b}ld@{ub} on AIX, note that it is different
     from the behaviour of the AIX linker.

@{b}-LSEARCHDIR@{ub}
@{b}--library-path=SEARCHDIR@{ub}
     Add path SEARCHDIR to the list of paths that @{b}ld@{ub} will search for
     archive libraries and @{b}ld@{ub} control scripts.  You may use this option
     any number of times.  The directories are searched in the order in
     which they are specified on the command line.  Directories
     specified on the command line are searched before the default
     directories.  All @{b}-L@{ub} options apply to all @{b}-l@{ub} options, regardless
     of the order in which the options appear.

     The default set of paths searched (without being specified with
     @{b}-L@{ub}) depends on which emulation mode @{b}ld@{ub} is using, and in some cases
     also on how it was configured.  See @{"Environment" link "Environment"}.

     The paths can also be specified in a link script with the
     @{b}SEARCH_DIR@{ub} command.  Directories specified this way are searched
     at the point in which the linker script appears in the command
     line.

@{b}-mEMULATION@{ub}
     Emulate the EMULATION linker.  You can list the available
     emulations with the @{b}--verbose@{ub} or @{b}-V@{ub} options.  The default depends
     on how your @{b}ld@{ub} was configured.

@{b}-M@{ub}
@{b}--print-map@{ub}
     Print (to the standard output) a link map--diagnostic information
     about where symbols are mapped by @{b}ld@{ub}, and information on global
     common storage allocation.

@{b}-n@{ub}
@{b}--nmagic@{ub}
     Set the text segment to be read only, and mark the output as
     @{b}NMAGIC@{ub} if possible.

@{b}-N@{ub}
@{b}--omagic@{ub}
     Set the text and data sections to be readable and writable.  Also,
     do not page-align the data segment.  If the output format supports
     Unix style magic numbers, mark the output as @{b}OMAGIC@{ub}.

@{b}-o OUTPUT@{ub}
@{b}--output=OUTPUT@{ub}
     Use OUTPUT as the name for the program produced by @{b}ld@{ub}; if this
     option is not specified, the name @{b}a.out@{ub} is used by default.  The
     script command @{b}OUTPUT@{ub} can also specify the output file name.

@{b}-r@{ub}
@{b}--relocateable@{ub}
     Generate relocatable output--i.e., generate an output file that
     can in turn serve as input to @{b}ld@{ub}.  This is often called @{i}partial
     linking@{ui}.  As a side effect, in environments that support standard
     Unix magic numbers, this option also sets the output file's magic
     number to @{b}OMAGIC@{ub}.  If this option is not specified, an absolute
     file is produced.  When linking C++ programs, this option @{i}will not@{ui}
     resolve references to constructors; to do that, use @{b}-Ur@{ub}.

     This option does the same thing as @{b}-i@{ub}.

@{b}-R FILENAME@{ub}
@{b}--just-symbols=FILENAME@{ub}
     Read symbol names and their addresses from FILENAME, but do not
     relocate it or include it in the output.  This allows your output
     file to refer symbolically to absolute locations of memory defined
     in other programs.  You may use this option more than once.

     For compatibility with other ELF linkers, if the @{b}-R@{ub} option is
     followed by a directory name, rather than a file name, it is
     treated as the @{b}-rpath@{ub} option.

@{b}-s@{ub}
@{b}--strip-all@{ub}
     Omit all symbol information from the output file.

@{b}-S@{ub}
@{b}--strip-debug@{ub}
     Omit debugger symbol information (but not all symbols) from the
     output file.

@{b}-t@{ub}
@{b}--trace@{ub}
     Print the names of the input files as @{b}ld@{ub} processes them.

@{b}-T COMMANDFILE@{ub}
@{b}--script=COMMANDFILE@{ub}
     Read link commands from the file COMMANDFILE.  These commands
     replace @{b}ld@{ub}'s default link script (rather than adding to it), so
     COMMANDFILE must specify everything necessary to describe the
     target format.  You must use this option if you want to use a
     command which can only appear once in a linker script, such as the
     @{b}SECTIONS@{ub} or @{b}MEMORY@{ub} command.  See @{"Commands" link "Commands"}.  If COMMANDFILE does
     not exist, @{b}ld@{ub} looks for it in the directories specified by any
     preceding @{b}-L@{ub} options.  Multiple @{b}-T@{ub} options accumulate.

@{b}-u SYMBOL@{ub}
@{b}--undefined=SYMBOL@{ub}
     Force SYMBOL to be entered in the output file as an undefined
     symbol.  Doing this may, for example, trigger linking of
     additional modules from standard libraries.  @{b}-u@{ub} may be repeated
     with different option arguments to enter additional undefined
     symbols.

@{b}-v@{ub}
@{b}--version@{ub}
@{b}-V@{ub}
     Display the version number for @{b}ld@{ub}.  The @{b}-V@{ub} option also lists the
     supported emulations.

@{b}-x@{ub}
@{b}--discard-all@{ub}
     Delete all local symbols.

@{b}-X@{ub}
@{b}--discard-locals@{ub}
     Delete all temporary local symbols.  For most targets, this is all
     local symbols whose names begin with @{b}L@{ub}.

@{b}-y SYMBOL@{ub}
@{b}--trace-symbol=SYMBOL@{ub}
     Print the name of each linked file in which SYMBOL appears.  This
     option may be given any number of times.  On many systems it is
     necessary to prepend an underscore.

     This option is useful when you have an undefined symbol in your
     link but don't know where the reference is coming from.

@{b}-Y PATH@{ub}
     Add PATH to the default library search path.  This option exists
     for Solaris compatibility.

@{b}-z KEYWORD@{ub}
     This option is ignored for Solaris compatibility.

@{b}-( ARCHIVES -)@{ub}
@{b}--start-group ARCHIVES --end-group@{ub}
     The ARCHIVES should be a list of archive files.  They may be
     either explicit file names, or @{b}-l@{ub} options.

     The specified archives are searched repeatedly until no new
     undefined references are created.  Normally, an archive is
     searched only once in the order that it is specified on the
     command line.  If a symbol in that archive is needed to resolve an
     undefined symbol referred to by an object in an archive that
     appears later on the command line, the linker would not be able to
     resolve that reference.  By grouping the archives, they all be
     searched repeatedly until all possible references are resolved.

     Using this option has a significant performance cost.  It is best
     to use it only when there are unavoidable circular references
     between two or more archives.

@{b}-assert KEYWORD@{ub}
     This option is ignored for SunOS compatibility.

@{b}-Bdynamic@{ub}
@{b}-dy@{ub}
@{b}-call_shared@{ub}
     Link against dynamic libraries.  This is only meaningful on
     platforms for which shared libraries are supported.  This option
     is normally the default on such platforms.  The different variants
     of this option are for compatibility with various systems.  You
     may use this option multiple times on the command line: it affects
     library searching for @{b}-l@{ub} options which follow it.

@{b}-Bstatic@{ub}
@{b}-dn@{ub}
@{b}-non_shared@{ub}
@{b}-static@{ub}
     Do not link against shared libraries.  This is only meaningful on
     platforms for which shared libraries are supported.  The different
     variants of this option are for compatibility with various
     systems.  You may use this option multiple times on the command
     line: it affects library searching for @{b}-l@{ub} options which follow it.

@{b}-Bsymbolic@{ub}
     When creating a shared library, bind references to global symbols
     to the definition within the shared library, if any.  Normally, it
     is possible for a program linked against a shared library to
     override the definition within the shared library.  This option is
     only meaningful on ELF platforms which support shared libraries.

@{b}--cref@{ub}
     Output a cross reference table.  If a linker map file is being
     generated, the cross reference table is printed to the map file.
     Otherwise, it is printed on the standard output.

     The format of the table is intentionally simple, so that it may be
     easily processed by a script if necessary.  The symbols are
     printed out, sorted by name.  For each symbol, a list of file
     names is given.  If the symbol is defined, the first file listed
     is the location of the definition.  The remaining files contain
     references to the symbol.

@{b}--defsym SYMBOL=EXPRESSION@{ub}
     Create a global symbol in the output file, containing the absolute
     address given by EXPRESSION.  You may use this option as many
     times as necessary to define multiple symbols in the command line.
     A limited form of arithmetic is supported for the EXPRESSION in
     this context: you may give a hexadecimal constant or the name of
     an existing symbol, or use @{b}+@{ub} and @{b}-@{ub} to add or subtract hexadecimal
     constants or symbols.  If you need more elaborate expressions,
     consider using the linker command language from a script (see
     @{"Assignment: Symbol Definitions" link "Assignment"}).  @{i}Note:@{ui}  there should be no
     white space between SYMBOL, the equals sign ("<=>"), and
     EXPRESSION.

@{b}--dynamic-linker FILE@{ub}
     Set the name of the dynamic linker.  This is only meaningful when
     generating dynamically linked ELF executables.  The default dynamic
     linker is normally correct; don't use this unless you know what
     you are doing.

@{b}-EB@{ub}
     Link big-endian objects.  This affects the default output format.

@{b}-EL@{ub}
     Link little-endian objects.  This affects the default output
     format.

@{b}--embedded-relocs@{ub}
     This option is only meaningful when linking MIPS embedded PIC code,
     generated by the -membedded-pic option to the GNU compiler and
     assembler.  It causes the linker to create a table which may be
     used at runtime to relocate any data which was statically
     initialized to pointer values.  See the code in testsuite/ld-empic
     for details.

@{b}--help@{ub}
     Print a summary of the command-line options on the standard output
     and exit.

@{b}-Map MAPFILE@{ub}
     Print to the file MAPFILE a link map--diagnostic information about
     where symbols are mapped by @{b}ld@{ub}, and information on global common
     storage allocation.

@{b}--no-keep-memory@{ub}
@{b}     ld@{ub} normally optimizes for speed over memory usage by caching the
     symbol tables of input files in memory.  This option tells @{b}ld@{ub} to
     instead optimize for memory usage, by rereading the symbol tables
     as necessary.  This may be required if @{b}ld@{ub} runs out of memory space
     while linking a large executable.

@{b}--no-whole-archive@{ub}
     Turn off the effect of the @{b}--whole-archive@{ub} option for subsequent
     archive files.

@{b}--noinhibit-exec@{ub}
     Retain the executable output file whenever it is still usable.
     Normally, the linker will not produce an output file if it
     encounters errors during the link process; it exits without
     writing an output file when it issues any error whatsoever.

@{b}--oformat OUTPUT-FORMAT@{ub}
@{b}     ld@{ub} may be configured to support more than one kind of object file.
     If your @{b}ld@{ub} is configured this way, you can use the @{b}--oformat@{ub}
     option to specify the binary format for the output object file.
     Even when @{b}ld@{ub} is configured to support alternative object formats,
     you don't usually need to specify this, as @{b}ld@{ub} should be configured
     to produce as a default output format the most usual format on
     each machine.  OUTPUT-FORMAT is a text string, the name of a
     particular format supported by the BFD libraries.  (You can list
     the available binary formats with @{b}objdump -i@{ub}.)  The script command
     @{b}OUTPUT_FORMAT@{ub} can also specify the output format, but this option
     overrides it.  See @{"BFD" link "BFD"}.

@{b}-qmagic@{ub}
     This option is ignored for Linux compatibility.

@{b}-Qy@{ub}
     This option is ignored for SVR4 compatibility.

@{b}--relax@{ub}
     An option with machine dependent effects.  This option is only
     supported on a few targets.  See @{"ld and the H8/300" link "H8-300"}.  See
     @{"ld and the Intel 960 family" link "i960"}.

     On some platforms, the @{b}--relax@{ub} option performs global
     optimizations that become possible when the linker resolves
     addressing in the program, such as relaxing address modes and
     synthesizing new instructions in the output object file.

     On platforms where this is not supported, @{b}--relax@{ub} is accepted, but
     ignored.

@{b}--retain-symbols-file FILENAME@{ub}
     Retain @{i}only@{ui} the symbols listed in the file FILENAME, discarding
     all others.  FILENAME is simply a flat file, with one symbol name
     per line.  This option is especially useful in environments (such
     as VxWorks) where a large global symbol table is accumulated
     gradually, to conserve run-time memory.

@{b}     --retain-symbols-file@{ub} does @{i}not@{ui} discard undefined symbols, or
     symbols needed for relocations.

     You may only specify @{b}--retain-symbols-file@{ub} once in the command
     line.  It overrides @{b}-s@{ub} and @{b}-S@{ub}.

@{b}-rpath DIR@{ub}
     Add a directory to the runtime library search path.  This is used
     when linking an ELF executable with shared objects.  All @{b}-rpath@{ub}
     arguments are concatenated and passed to the runtime linker, which
     uses them to locate shared objects at runtime.  The @{b}-rpath@{ub} option
     is also used when locating shared objects which are needed by
     shared objects explicitly included in the link; see the
     description of the @{b}-rpath-link@{ub} option.  If @{b}-rpath@{ub} is not used when
     linking an ELF executable, the contents of the environment variable
     @{b}LD_RUN_PATH@{ub} will be used if it is defined.

     The @{b}-rpath@{ub} option may also be used on SunOS.  By default, on
     SunOS, the linker will form a runtime search patch out of all the
     @{b}-L@{ub} options it is given.  If a @{b}-rpath@{ub} option is used, the runtime
     search path will be formed exclusively using the @{b}-rpath@{ub} options,
     ignoring the @{b}-L@{ub} options.  This can be useful when using gcc, which
     adds many @{b}-L@{ub} options which may be on NFS mounted filesystems.

     For compatibility with other ELF linkers, if the @{b}-R@{ub} option is
     followed by a directory name, rather than a file name, it is
     treated as the @{b}-rpath@{ub} option.

@{b}-rpath-link DIR@{ub}
     When using ELF or SunOS, one shared library may require another.
     This happens when an @{b}ld -shared@{ub} link includes a shared library as
     one of the input files.

     When the linker encounters such a dependency when doing a
     non-shared, non-relocateable link, it will automatically try to
     locate the required shared library and include it in the link, if
     it is not included explicitly.  In such a case, the @{b}-rpath-link@{ub}
     option specifies the first set of directories to search.  The
     @{b}-rpath-link@{ub} option may specify a sequence of directory names
     either by specifying a list of names separated by colons, or by
     appearing multiple times.

     The linker uses the following search paths to locate required
     shared libraries.
       1. Any directories specified by @{b}-rpath-link@{ub} options.

       2. Any directories specified by @{b}-rpath@{ub} options.  The difference
          between @{b}-rpath@{ub} and @{b}-rpath-link@{ub} is that directories specified
          by @{b}-rpath@{ub} options are included in the executable and used at
          runtime, whereas the @{b}-rpath-link@{ub} option is only effective at
          link time.

       3. On an ELF system, if the @{b}-rpath@{ub} and @{b}rpath-link@{ub} options were
          not used, search the contents of the environment variable
          @{b}LD_RUN_PATH@{ub}.

       4. On SunOS, if the @{b}-rpath@{ub} option was not used, search any
          directories specified using @{b}-L@{ub} options.

       5. For a native linker, the contents of the environment variable
          @{b}LD_LIBRARY_PATH@{ub}.

       6. The default directories, normally @{b}/lib@{ub} and @{b}/usr/lib@{ub}.

     If the required shared library is not found, the linker will issue
     a warning and continue with the link.

@{b}-shared@{ub}
@{b}-Bshareable@{ub}
     Create a shared library.  This is currently only supported on ELF,
     XCOFF and SunOS platforms.  On SunOS, the linker will
     automatically create a shared library if the @{b}-e@{ub} option is not used
     and there are undefined symbols in the link.

@{b}--sort-common@{ub}
     This option tells @{b}ld@{ub} to sort the common symbols by size when it
     places them in the appropriate output sections.  First come all
     the one byte symbols, then all the two bytes, then all the four
     bytes, and then everything else.  This is to prevent gaps between
     symbols due to alignment constraints.

@{b}--split-by-file@{ub}
     Similar to @{b}--split-by-reloc@{ub} but creates a new output section for
     each input file.

@{b}--split-by-reloc COUNT@{ub}
     Trys to creates extra sections in the output file so that no single
     output section in the file contains more than COUNT relocations.
     This is useful when generating huge relocatable for downloading
     into certain real time kernels with the COFF object file format;
     since COFF cannot represent more than 65535 relocations in a
     single section.  Note that this will fail to work with object file
     formats which do not support arbitrary sections.  The linker will
     not split up individual input sections for redistribution, so if a
     single input section contains more than COUNT relocations one
     output section will contain that many relocations.

@{b}--stats@{ub}
     Compute and display statistics about the operation of the linker,
     such as execution time and memory usage.

@{b}--traditional-format@{ub}
     For some targets, the output of @{b}ld@{ub} is different in some ways from
     the output of some existing linker.  This switch requests @{b}ld@{ub} to
     use the traditional format instead.

     For example, on SunOS, @{b}ld@{ub} combines duplicate entries in the symbol
     string table.  This can reduce the size of an output file with
     full debugging information by over 30 percent.  Unfortunately, the
     SunOS @{b}dbx@{ub} program can not read the resulting program (@{b}gdb@{ub} has no
     trouble).  The @{b}--traditional-format@{ub} switch tells @{b}ld@{ub} to not combine
     duplicate entries.

@{b}-Tbss ORG@{ub}
@{b}-Tdata ORG@{ub}
@{b}-Ttext ORG@{ub}
     Use ORG as the starting address for--respectively--the @{b}bss@{ub}, @{b}data@{ub},
     or the @{b}text@{ub} segment of the output file.  ORG must be a single
     hexadecimal integer; for compatibility with other linkers, you may
     omit the leading @{b}0x@{ub} usually associated with hexadecimal values.

@{b}-Ur@{ub}
     For anything other than C++ programs, this option is equivalent to
     @{b}-r@{ub}: it generates relocatable output--i.e., an output file that can
     in turn serve as input to @{b}ld@{ub}.  When linking C++ programs, @{b}-Ur@{ub} @{i}does@{ui}
     resolve references to constructors, unlike @{b}-r@{ub}.  It does not work
     to use @{b}-Ur@{ub} on files that were themselves linked with @{b}-Ur@{ub}; once the
     constructor table has been built, it cannot be added to.  Use @{b}-Ur@{ub}
     only for the last partial link, and @{b}-r@{ub} for the others.

@{b}--verbose@{ub}
     Display the version number for @{b}ld@{ub} and list the linker emulations
     supported.  Display which input files can and cannot be opened.
     Display the linker script if using a default builtin script.

@{b}--version-script=VERSION-SCRIPTFILE@{ub}
     Specify the name of a version script to the linker.  This is
     typically used when creating shared libraries to specify
     additional information about the version heirarchy for the library
     being created.  This option is only meaningful on ELF platforms
     which support shared libraries.  See @{"Version Script" link "Version Script"}.

@{b}--warn-common@{ub}
     Warn when a common symbol is combined with another common symbol
     or with a symbol definition.  Unix linkers allow this somewhat
     sloppy practice, but linkers on some other operating systems do
     not.  This option allows you to find potential problems from
     combining global symbols.  Unfortunately, some C libraries use
     this practice, so you may get some warnings about symbols in the
     libraries as well as in your programs.

     There are three kinds of global symbols, illustrated here by C
     examples:

    @{b}int i = 1;@{ub}
          A definition, which goes in the initialized data section of
          the output file.

    @{b}extern int i;@{ub}
          An undefined reference, which does not allocate space.  There
          must be either a definition or a common symbol for the
          variable somewhere.

    @{b}int i;@{ub}
          A common symbol.  If there are only (one or more) common
          symbols for a variable, it goes in the uninitialized data
          area of the output file.  The linker merges multiple common
          symbols for the same variable into a single symbol.  If they
          are of different sizes, it picks the largest size.  The
          linker turns a common symbol into a declaration, if there is
          a definition of the same variable.

     The @{b}--warn-common@{ub} option can produce five kinds of warnings.  Each
     warning consists of a pair of lines: the first describes the symbol
     just encountered, and the second describes the previous symbol
     encountered with the same name.  One or both of the two symbols
     will be a common symbol.

       1. Turning a common symbol into a reference, because there is
          already a definition for the symbol.
               FILE(SECTION): warning: common of `SYMBOL'
                  overridden by definition
               FILE(SECTION): warning: defined here

       2. Turning a common symbol into a reference, because a later
          definition for the symbol is encountered.  This is the same
          as the previous case, except that the symbols are encountered
          in a different order.
               FILE(SECTION): warning: definition of `SYMBOL'
                  overriding common
               FILE(SECTION): warning: common is here

       3. Merging a common symbol with a previous same-sized common
          symbol.
               FILE(SECTION): warning: multiple common
                  of `SYMBOL'
               FILE(SECTION): warning: previous common is here

       4. Merging a common symbol with a previous larger common symbol.
               FILE(SECTION): warning: common of `SYMBOL'
                  overridden by larger common
               FILE(SECTION): warning: larger common is here

       5. Merging a common symbol with a previous smaller common
          symbol.  This is the same as the previous case, except that
          the symbols are encountered in a different order.
               FILE(SECTION): warning: common of `SYMBOL'
                  overriding smaller common
               FILE(SECTION): warning: smaller common is here

@{b}--warn-constructors@{ub}
     Warn if any global constructors are used.  This is only useful for
     a few object file formats.  For formats like COFF or ELF, the
     linker can not detect the use of global constructors.

@{b}--warn-multiple-gp@{ub}
     Warn if multiple global pointer values are required in the output
     file.  This is only meaningful for certain processors, such as the
     Alpha.  Specifically, some processors put large-valued constants
     in a special section.  A special register (the global pointer)
     points into the middle of this section, so that constants can be
     loaded efficiently via a base-register relative addressing mode.
     Since the offset in base-register relative mode is fixed and
     relatively small (e.g., 16 bits), this limits the maximum size of
     the constant pool.  Thus, in large programs, it is often necessary
     to use multiple global pointer values in order to be able to
     address all possible constants.  This option causes a warning to
     be issued whenever this case occurs.

@{b}--warn-once@{ub}
     Only warn once for each undefined symbol, rather than once per
     module which refers to it.

@{b}--warn-section-align@{ub}
     Warn if the address of an output section is changed because of
     alignment.  Typically, the alignment will be set by an input
     section.  The address will only be changed if it not explicitly
     specified; that is, if the @{b}SECTIONS@{ub} command does not specify a
     start address for the section (see @{"SECTIONS" link "SECTIONS"}).

@{b}--whole-archive@{ub}
     For each archive mentioned on the command line after the
     @{b}--whole-archive@{ub} option, include every object file in the archive
     in the link, rather than searching the archive for the required
     object files.  This is normally used to turn an archive file into
     a shared library, forcing every object to be included in the
     resulting shared library.  This option may be used more than once.

@{b}--wrap SYMBOL@{ub}
     Use a wrapper function for SYMBOL.  Any undefined reference to
     SYMBOL will be resolved to @{b}__wrap_SYMBOL@{ub}.  Any undefined reference
     to @{b}__real_SYMBOL@{ub} will be resolved to SYMBOL.

     This can be used to provide a wrapper for a system function.  The
     wrapper function should be called @{b}__wrap_SYMBOL@{ub}.  If it wishes to
     call the system function, it should call @{b}__real_SYMBOL@{ub}.

     Here is a trivial example:

          void *
          __wrap_malloc (int c)
          {
            printf ("malloc called with %ld\\n", c);
            return __real_malloc (c);
          }

     If you link other code with this file using @{b}--wrap malloc@{ub}, then
     all calls to @{b}malloc@{ub} will call the function @{b}__wrap_malloc@{ub} instead.
     The call to @{b}__real_malloc@{ub} in @{b}__wrap_malloc@{ub} will call the real
     @{b}malloc@{ub} function.

     You may wish to provide a @{b}__real_malloc@{ub} function as well, so that
     links without the @{b}--wrap@{ub} option will succeed.  If you do this, you
     should not put the definition of @{b}__real_malloc@{ub} in the same file as
     @{b}__wrap_malloc@{ub}; if you do, the assembler may resolve the call
     before the linker has a chance to wrap it to @{b}malloc@{ub}.


@endnode

@node "Environment" "ld.guide/Environment"
@prev "Options"
@toc "Invocation"

Environment Variables
=====================

   You can change the behavior of @{b}ld@{ub} with the environment variable
@{b}GNUTARGET@{ub}.

@{b}   GNUTARGET@{ub} determines the input-file object format if you don't use
@{b}-b@{ub} (or its synonym @{b}--format@{ub}).  Its value should be one of the BFD names
for an input format (see @{"BFD" link "BFD"}).  If there is no @{b}GNUTARGET@{ub} in the
environment, @{b}ld@{ub} uses the natural format of the target. If @{b}GNUTARGET@{ub} is
set to @{b}default@{ub} then BFD attempts to discover the input format by
examining binary input files; this method often succeeds, but there are
potential ambiguities, since there is no method of ensuring that the
magic number used to specify object-file formats is unique.  However,
the configuration procedure for BFD on each system places the
conventional format for that system first in the search-list, so
ambiguities are resolved in favor of convention.


@endnode

@node "Commands" "ld.guide/Commands"
@next "Machine Dependent"
@prev "Invocation"
@toc "Main"

Command Language
****************

   The command language provides explicit control over the link process,
allowing complete specification of the mapping between the linker's
input files and its output.  It controls:
   * input files

   * file formats

   * output file layout

   * addresses of sections

   * placement of common blocks

   You may supply a command file (also known as a linker script) to the
linker either explicitly through the @{b}-T@{ub} option, or implicitly as an
ordinary file.  Normally you should use the @{b}-T@{ub} option.  An implicit
linker script should only be used when you want to augment, rather than
replace, the default linker script; typically an implicit linker script
would consist only of @{b}INPUT@{ub} or @{b}GROUP@{ub} commands.

   If the linker opens a file which it cannot recognize as a supported
object or archive format, nor as a linker script, it reports an error.


 @{" Scripts                    " link "Scripts"}  Linker Scripts
 @{" Expressions                " link "Expressions"}  Expressions
 @{" MEMORY                     " link "MEMORY"}  MEMORY Command
 @{" SECTIONS                   " link "SECTIONS"}  SECTIONS Command
 @{" PHDRS                      " link "PHDRS"}  PHDRS Command
 @{" Entry Point                " link "Entry Point"}  The Entry Point
 @{" Version Script             " link "Version Script"}  Version Script
 @{" Option Commands            " link "Option Commands"}  Option Commands


@endnode

@node "Scripts" "ld.guide/Scripts"
@next "Expressions"
@toc "Commands"

Linker Scripts
==============

   The @{b}ld@{ub} command language is a collection of statements; some are
simple keywords setting a particular option, some are used to select and
group input files or name output files; and two statement types have a
fundamental and pervasive impact on the linking process.

   The most fundamental command of the @{b}ld@{ub} command language is the
@{b}SECTIONS@{ub} command (see @{"SECTIONS" link "SECTIONS"}).  Every meaningful command script must
have a @{b}SECTIONS@{ub} command: it specifies a "picture" of the output file's
layout, in varying degrees of detail.  No other command is required in
all cases.

   The @{b}MEMORY@{ub} command complements @{b}SECTIONS@{ub} by describing the available
memory in the target architecture.  This command is optional; if you
don't use a @{b}MEMORY@{ub} command, @{b}ld@{ub} assumes sufficient memory is available
in a contiguous block for all output.  See @{"MEMORY" link "MEMORY"}.

   You may include comments in linker scripts just as in C: delimited
by @{b}/*@{ub} and @{b}*/@{ub}.  As in C, comments are syntactically equivalent to
whitespace.


@endnode

@node "Expressions" "ld.guide/Expressions"
@next "MEMORY"
@prev "Scripts"
@toc "Commands"

Expressions
===========

   Many useful commands involve arithmetic expressions.  The syntax for
expressions in the command language is identical to that of C
expressions, with the following features:
   * All expressions evaluated as integers and are of "long" or
     "unsigned long" type.

   * All constants are integers.

   * All of the C arithmetic operators are provided.

   * You may reference, define, and create global variables.

   * You may call special purpose built-in functions.


 @{" Integers                   " link "Integers"}  Integers
 @{" Symbols                    " link "Symbols"}  Symbol Names
 @{" Location Counter           " link "Location Counter"}  The Location Counter
 @{" Operators                  " link "Operators"}  Operators
 @{" Evaluation                 " link "Evaluation"}  Evaluation
 @{" Assignment                 " link "Assignment"}  Assignment: Defining Symbols
 @{" Arithmetic Functions       " link "Arithmetic Functions"}  Built-In Functions
 @{" Semicolons                 " link "Semicolons"}  Semicolon Usage


@endnode

@node "Integers" "ld.guide/Integers"
@next "Symbols"
@toc "Expressions"

Integers
--------

   An octal integer is @{b}0@{ub} followed by zero or more of the octal digits
(@{b}01234567@{ub}).
     _as_octal = 0157255;

   A decimal integer starts with a non-zero digit followed by zero or
more digits (@{b}0123456789@{ub}).
     _as_decimal = 57005;

   A hexadecimal integer is @{b}0x@{ub} or @{b}0X@{ub} followed by one or more
hexadecimal digits chosen from @{b}0123456789abcdefABCDEF@{ub}.
     _as_hex = 0xdead;

   To write a negative integer, use the prefix operator @{b}-@{ub} (see
@{"Operators" link "Operators"}).
     _as_neg = -57005;

   Additionally the suffixes @{b}K@{ub} and @{b}M@{ub} may be used to scale a constant by
@{b}1024@{ub} or @{b}1024*1024@{ub} respectively. For example, the following all refer to
the same quantity:

             _fourk_1 = 4K;
             _fourk_2 = 4096;
             _fourk_3 = 0x1000;


@endnode

@node "Symbols" "ld.guide/Symbols"
@next "Location Counter"
@prev "Integers"
@toc "Expressions"

Symbol Names
------------

   Unless quoted, symbol names start with a letter, underscore, or point
and may include any letters, underscores, digits, points, and hyphens.
Unquoted symbol names must not conflict with any keywords.  You can
specify a symbol which contains odd characters or has the same name as
a keyword, by surrounding the symbol name in double quotes:
             "SECTION" = 9;
             "with a space" = "also with a space" + 10;

   Since symbols can contain many non-alphabetic characters, it is
safest to delimit symbols with spaces.  For example, @{b}A-B@{ub} is one symbol,
whereas @{b}A - B@{ub} is an expression involving subtraction.


@endnode

@node "Location Counter" "ld.guide/Location Counter"
@next "Operators"
@prev "Symbols"
@toc "Expressions"

The Location Counter
--------------------

   The special linker variable @{i}dot@{ui} @{b}.@{ub} always contains the current output
location counter. Since the @{b}.@{ub} always refers to a location in an output
section, it must always appear in an expression within a @{b}SECTIONS@{ub}
command. The @{b}.@{ub} symbol may appear anywhere that an ordinary symbol is
allowed in an expression, but its assignments have a side effect.
Assigning a value to the @{b}.@{ub} symbol will cause the location counter to be
moved.  This may be used to create holes in the output section.  The
location counter may never be moved backwards.
     SECTIONS
     {
       output :
       {
       file1(.text)
       . = . + 1000;
       file2(.text)
       . += 1000;
       file3(.text)
       } = 0x1234;
     }

In the previous example, @{b}file1@{ub} is located at the beginning of the
output section, then there is a 1000 byte gap.  Then @{b}file2@{ub} appears,
also with a 1000 byte gap following before @{b}file3@{ub} is loaded.  The
notation @{b}= 0x1234@{ub} specifies what data to write in the gaps (see
@{"Section Options" link "Section Options"}).


@endnode

@node "Operators" "ld.guide/Operators"
@next "Evaluation"
@prev "Location Counter"
@toc "Expressions"

Operators
---------

   The linker recognizes  the standard C set of arithmetic operators,
with the standard bindings and precedence levels:
     precedence      associativity   Operators                Notes
     (highest)
     1               left            !  -  ~                  (1)
     2               left            *  /  %
     3               left            +  -
     4               left            >>  <<
     5               left            ==  !=  >  <  <=  >=
     6               left            &
     7               left            |
     8               left            &&
     9               left            ||
     10              right           ? :
     11              right           &=  +=  -=  *=  /=       (2)
     (lowest)
   Notes: (1) Prefix operators (2) See @{"Assignment" link "Assignment"}.


@endnode

@node "Evaluation" "ld.guide/Evaluation"
@next "Assignment"
@prev "Operators"
@toc "Expressions"

Evaluation
----------

   The linker uses "lazy evaluation" for expressions; it only calculates
an expression when absolutely necessary.  The linker needs the value of
the start address, and the lengths of memory regions, in order to do any
linking at all; these values are computed as soon as possible when the
linker reads in the command file.  However, other values (such as symbol
values) are not known or needed until after storage allocation.  Such
values are evaluated later, when other information (such as the sizes of
output sections) is available for use in the symbol assignment
expression.


@endnode

@node "Assignment" "ld.guide/Assignment"
@next "Arithmetic Functions"
@prev "Evaluation"
@toc "Expressions"

Assignment: Defining Symbols
----------------------------

   You may create global symbols, and assign values (addresses) to
global symbols, using any of the C assignment operators:

@{b}SYMBOL  = EXPRESSION ;@{ub}
@{b}SYMBOL &= EXPRESSION ;@{ub}
@{b}SYMBOL += EXPRESSION ;@{ub}
@{b}SYMBOL -= EXPRESSION ;@{ub}
@{b}SYMBOL *= EXPRESSION ;@{ub}
@{b}SYMBOL /= EXPRESSION ;@{ub}
   Two things distinguish assignment from other operators in @{b}ld@{ub}
expressions.
   * Assignment may only be used at the root of an expression; @{b}a=b+3;@{ub}
     is allowed, but @{b}a+b=3;@{ub} is an error.

   * You must place a trailing semicolon ("<;>") at the end of an
     assignment statement.

   Assignment statements may appear:
   * as commands in their own right in an @{b}ld@{ub} script; or

   * as independent statements within a @{b}SECTIONS@{ub} command; or

   * as part of the contents of a section definition in a @{b}SECTIONS@{ub}
     command.

   The first two cases are equivalent in effect--both define a symbol
with an absolute address.  The last case defines a symbol whose address
is relative to a particular section (see @{"SECTIONS" link "SECTIONS"}).

   When a linker expression is evaluated and assigned to a variable, it
is given either an absolute or a relocatable type. An absolute
expression type is one in which the symbol contains the value that it
will have in the output file; a relocatable expression type is one in
which the value is expressed as a fixed offset from the base of a
section.

   The type of the expression is controlled by its position in the
script file.  A symbol assigned within a section definition is created
relative to the base of the section; a symbol assigned in any other
place is created as an absolute symbol. Since a symbol created within a
section definition is relative to the base of the section, it will
remain relocatable if relocatable output is requested.  A symbol may be
created with an absolute value even when assigned to within a section
definition by using the absolute assignment function @{b}ABSOLUTE@{ub}.  For
example, to create an absolute symbol whose address is the last byte of
an output section named @{b}.data@{ub}:
     SECTIONS{ ...
       .data :
         {
           *(.data)
           _edata = ABSOLUTE(.) ;
         }
     ... }

   The linker tries to put off the evaluation of an assignment until all
the terms in the source expression are known (see @{"Evaluation" link "Evaluation"}).  For
instance, the sizes of sections cannot be known until after allocation,
so assignments dependent upon these are not performed until after
allocation. Some expressions, such as those depending upon the location
counter @{i}dot@{ui}, @{b}.@{ub} must be evaluated during allocation. If the result of an
expression is required, but the value is not available, then an error
results.  For example, a script like the following
     SECTIONS { ...
       text 9+this_isnt_constant :
         { ...
         }
     ... }

will cause the error message "@{b}Non constant expression for initial
address@{ub}".

   In some cases, it is desirable for a linker script to define a symbol
only if it is referenced, and only if it is not defined by any object
included in the link.  For example, traditional linkers defined the
symbol @{b}etext@{ub}.  However, ANSI C requires that the user be able to use
@{b}etext@{ub} as a function name without encountering an error.  The @{b}PROVIDE@{ub}
keyword may be used to define a symbol, such as @{b}etext@{ub}, only if it is
referenced but not defined.  The syntax is @{b}PROVIDE(SYMBOL = EXPRESSION)@{ub}.


@endnode

@node "Arithmetic Functions" "ld.guide/Arithmetic Functions"
@next "Semicolons"
@prev "Assignment"
@toc "Expressions"

Arithmetic Functions
--------------------

   The command language includes a number of built-in functions for use
in link script expressions.
@{b}ABSOLUTE(EXP)@{ub}
     Return the absolute (non-relocatable, as opposed to non-negative)
     value of the expression EXP.  Primarily useful to assign an
     absolute value to a symbol within a section definition, where
     symbol values are normally section-relative.

@{b}ADDR(SECTION)@{ub}
     Return the absolute address of the named SECTION.  Your script must
     previously have defined the location of that section. In the
     following example, @{b}symbol_1@{ub} and @{b}symbol_2@{ub} are assigned identical
     values:
          SECTIONS{ ...
            .output1 :
              {
              start_of_output_1 = ABSOLUTE(.);
              ...
              }
            .output :
              {
              symbol_1 = ADDR(.output1);
              symbol_2 = start_of_output_1;
              }
          ... }

@{b}LOADADDR(SECTION)@{ub}
     Return the absolute load address of the named SECTION.  This is
     normally the same as @{b}ADDR@{ub}, but it may be different if the @{b}AT@{ub}
     keyword is used in the section definition (see @{"Section Options" link "Section Options"}).

@{b}ALIGN(EXP)@{ub}
     Return the result of the current location counter (@{b}.@{ub}) aligned to
     the next EXP boundary.  EXP must be an expression whose value is a
     power of two.  This is equivalent to
          (. + EXP - 1) & ~(EXP - 1)

@{b}     ALIGN@{ub} doesn't change the value of the location counter--it just
     does arithmetic on it.  As an example, to align the output @{b}.data@{ub}
     section to the next @{b}0x2000@{ub} byte boundary after the preceding
     section and to set a variable within the section to the next
     @{b}0x8000@{ub} boundary after the input sections:
          SECTIONS{ ...
            .data ALIGN(0x2000): {
              *(.data)
              variable = ALIGN(0x8000);
            }
          ... }

     The first use of @{b}ALIGN@{ub} in this example specifies the location of a
     section because it is used as the optional START attribute of a
     section definition (see @{"Section Options" link "Section Options"}).  The second use simply
     defines the value of a variable.

     The built-in @{b}NEXT@{ub} is closely related to @{b}ALIGN@{ub}.

@{b}DEFINED(SYMBOL)@{ub}
     Return 1 if SYMBOL is in the linker global symbol table and is
     defined, otherwise return 0.  You can use this function to provide
     default values for symbols.  For example, the following
     command-file fragment shows how to set a global symbol @{b}begin@{ub} to
     the first location in the @{b}.text@{ub} section--but if a symbol called
     @{b}begin@{ub} already existed, its value is preserved:

          SECTIONS{ ...
            .text : {
              begin = DEFINED(begin) ? begin : . ;
              ...
            }
          ... }

@{b}NEXT(EXP)@{ub}
     Return the next unallocated address that is a multiple of EXP.
     This function is closely related to @{b}ALIGN(EXP)@{ub}; unless you use the
     @{b}MEMORY@{ub} command to define discontinuous memory for the output file,
     the two functions are equivalent.

@{b}SIZEOF(SECTION)@{ub}
     Return the size in bytes of the named SECTION, if that section has
     been allocated.  In the following example, @{b}symbol_1@{ub} and @{b}symbol_2@{ub}
     are assigned identical values:
          SECTIONS{ ...
            .output {
              .start = . ;
              ...
              .end = . ;
              }
            symbol_1 = .end - .start ;
            symbol_2 = SIZEOF(.output);
          ... }

@{b}SIZEOF_HEADERS@{ub}
@{b}sizeof_headers@{ub}
     Return the size in bytes of the output file's headers.  You can
     use this number as the start address of the first section, if you
     choose, to facilitate paging.

@{b}MAX(EXP1, EXP2)@{ub}
     Returns the maximum of EXP1 and EXP2.

@{b}MIN(EXP1, EXP2)@{ub}
     Returns the minimum of EXP1 and EXP2.


@endnode

@node "Semicolons" "ld.guide/Semicolons"
@prev "Arithmetic Functions"
@toc "Expressions"

Semicolons
----------

   Semicolons ("<;>") are required in the following places.  In all
other places they can appear for aesthetic reasons but are otherwise
ignored.

@{b}Assignment@{ub}
     Semicolons must appear at the end of assignment expressions.  See
     @{"Assignment" link "Assignment"}.

@{b}PHDRS@{ub}
     Semicolons must appear at the end of a @{b}PHDRS@{ub} statement.  See
     @{"PHDRS" link "PHDRS"}.


@endnode

@node "MEMORY" "ld.guide/MEMORY"
@next "SECTIONS"
@prev "Expressions"
@toc "Commands"

Memory Layout
=============

   The linker's default configuration permits allocation of all
available memory.  You can override this configuration by using the
@{b}MEMORY@{ub} command.  The @{b}MEMORY@{ub} command describes the location and size of
blocks of memory in the target.  By using it carefully, you can
describe which memory regions may be used by the linker, and which
memory regions it must avoid.  The linker does not shuffle sections to
fit into the available regions, but does move the requested sections
into the correct regions and issue errors when the regions become too
full.

   A command file may contain at most one use of the @{b}MEMORY@{ub} command;
however, you can define as many blocks of memory within it as you wish.
The syntax is:

     MEMORY
       {
         NAME (ATTR) : ORIGIN = ORIGIN, LENGTH = LEN
         ...
       }

@{b}NAME@{ub}
     is a name used internally by the linker to refer to the region. Any
     symbol name may be used.  The region names are stored in a separate
     name space, and will not conflict with symbols, file names or
     section names.  Use distinct names to specify multiple regions.

@{b}(ATTR)@{ub}
     is an optional list of attributes, permitted for compatibility
     with the AT&T linker but not used by @{b}ld@{ub} beyond checking that the
     attribute list is valid.  Valid attribute lists must be made up of
     the characters "@{b}LIRWX@{ub}".  If you omit the attribute list, you may
     omit the parentheses around it as well.

@{b}ORIGIN@{ub}
     is the start address of the region in physical memory.  It is an
     expression that must evaluate to a constant before memory
     allocation is performed. The keyword @{b}ORIGIN@{ub} may be abbreviated to
     @{b}org@{ub} or @{b}o@{ub} (but not, for example, @{b}ORG@{ub}).

@{b}LEN@{ub}
     is the size in bytes of the region (an expression).  The keyword
     @{b}LENGTH@{ub} may be abbreviated to @{b}len@{ub} or @{b}l@{ub}.

   For example, to specify that memory has two regions available for
allocation--one starting at 0 for 256 kilobytes, and the other starting
at @{b}0x40000000@{ub} for four megabytes:

     MEMORY
       {
       rom : ORIGIN = 0, LENGTH = 256K
       ram : org = 0x40000000, l = 4M
       }

   Once you have defined a region of memory named MEM, you can direct
specific output sections there by using a command ending in @{b}>MEM@{ub} within
the @{b}SECTIONS@{ub} command (see @{"Section Options" link "Section Options"}).  If the combined output
sections directed to a region are too big for the region, the linker
will issue an error message.


@endnode

@node "SECTIONS" "ld.guide/SECTIONS"
@next "PHDRS"
@prev "MEMORY"
@toc "Commands"

Specifying Output Sections
==========================

   The @{b}SECTIONS@{ub} command controls exactly where input sections are
placed into output sections, their order in the output file, and to
which output sections they are allocated.

   You may use at most one @{b}SECTIONS@{ub} command in a script file, but you
can have as many statements within it as you wish.  Statements within
the @{b}SECTIONS@{ub} command can do one of three things:

   * define the entry point;

   * assign a value to a symbol;

   * describe the placement of a named output section, and which input
     sections go into it.

   You can also use the first two operations--defining the entry point
and defining symbols--outside the @{b}SECTIONS@{ub} command: see @{"Entry Point" link "Entry Point"},
and @{"Assignment" link "Assignment"}.  They are permitted here as well for your convenience
in reading the script, so that symbols and the entry point can be
defined at meaningful points in your output-file layout.

   If you do not use a @{b}SECTIONS@{ub} command, the linker places each input
section into an identically named output section in the order that the
sections are first encountered in the input files.  If all input
sections are present in the first file, for example, the order of
sections in the output file will match the order in the first input
file.


 @{" Section Definition         " link "Section Definition"}  Section Definitions
 @{" Section Placement          " link "Section Placement"}  Section Placement
 @{" Section Data Expressions   " link "Section Data Expressions"}  Section Data Expressions
 @{" Section Options            " link "Section Options"}  Optional Section Attributes
 @{" Overlays                   " link "Overlays"}  Overlays


@endnode

@node "Section Definition" "ld.guide/Section Definition"
@next "Section Placement"
@toc "SECTIONS"

Section Definitions
-------------------

   The most frequently used statement in the @{b}SECTIONS@{ub} command is the
@{i}section definition@{ui}, which specifies the properties of an output
section: its location, alignment, contents, fill pattern, and target
memory region.  Most of these specifications are optional; the simplest
form of a section definition is
     SECTIONS { ...
       SECNAME : {
         CONTENTS
       }
     ... }

SECNAME is the name of the output section, and CONTENTS a specification
of what goes there--for example, a list of input files or sections of
input files (see @{"Section Placement" link "Section Placement"}).  As you might assume, the
whitespace shown is optional.  You do need the colon @{b}:@{ub} and the braces
@{b}{}@{ub}, however.

   SECNAME must meet the constraints of your output format.  In formats
which only support a limited number of sections, such as @{b}a.out@{ub}, the
name must be one of the names supported by the format (@{b}a.out@{ub}, for
example, allows only @{b}.text@{ub}, @{b}.data@{ub} or @{b}.bss@{ub}). If the output format
supports any number of sections, but with numbers and not names (as is
the case for Oasys), the name should be supplied as a quoted numeric
string.  A section name may consist of any sequence of characters, but
any name which does not conform to the standard @{b}ld@{ub} symbol name syntax
must be quoted.  See @{"Symbol Names" link "Symbols"}.

   The special SECNAME @{b}/DISCARD/@{ub} may be used to discard input sections.
Any sections which are assigned to an output section named @{b}/DISCARD/@{ub}
are not included in the final link output.

   The linker will not create output sections which do not have any
contents.  This is for convenience when referring to input sections that
may or may not exist.  For example,
     .foo { *(.foo) }
   will only create a @{b}.foo@{ub} section in the output file if there is a
@{b}.foo@{ub} section in at least one input file.


@endnode

@node "Section Placement" "ld.guide/Section Placement"
@next "Section Data Expressions"
@prev "Section Definition"
@toc "SECTIONS"

Section Placement
-----------------

   In a section definition, you can specify the contents of an output
section by listing particular input files, by listing particular
input-file sections, or by a combination of the two.  You can also place
arbitrary data in the section, and define symbols relative to the
beginning of the section.

   The CONTENTS of a section definition may include any of the
following kinds of statement.  You can include as many of these as you
like in a single section definition, separated from one another by
whitespace.

@{b}FILENAME@{ub}
     You may simply name a particular input file to be placed in the
     current output section; @{i}all@{ui} sections from that file are placed in
     the current section definition.  If the file name has already been
     mentioned in another section definition, with an explicit section
     name list, then only those sections which have not yet been
     allocated are used.

     To specify a list of particular files by name:
          .data : { afile.o bfile.o cfile.o }

     The example also illustrates that multiple statements can be
     included in the contents of a section definition, since each file
     name is a separate statement.

@{b}FILENAME( SECTION )@{ub}
@{b}FILENAME( SECTION , SECTION, ... )@{ub}
@{b}FILENAME( SECTION SECTION ... )@{ub}
     You can name one or more sections from your input files, for
     insertion in the current output section.  If you wish to specify a
     list of input-file sections inside the parentheses, you may
     separate the section names by either commas or whitespace.

@{b}* (SECTION)@{ub}
@{b}* (SECTION, SECTION, ...)@{ub}
@{b}* (SECTION SECTION ...)@{ub}
     Instead of explicitly naming particular input files in a link
     control script, you can refer to @{i}all@{ui} files from the @{b}ld@{ub} command
     line: use @{b}*@{ub} instead of a particular file name before the
     parenthesized input-file section list.

     If you have already explicitly included some files by name, @{b}*@{ub}
     refers to all @{i}remaining@{ui} files--those whose places in the output
     file have not yet been defined.

     For example, to copy sections @{b}1@{ub} through @{b}4@{ub} from an Oasys file into
     the @{b}.text@{ub} section of an @{b}a.out@{ub} file, and sections @{b}13@{ub} and @{b}14@{ub} into
     the @{b}.data@{ub} section:
          SECTIONS {
            .text :{
              *("1" "2" "3" "4")
            }
          
            .data :{
              *("13" "14")
            }
          }

@{b}     [ SECTION ... ]@{ub} used to be accepted as an alternate way to specify
     named sections from all unallocated input files.  Because some
     operating systems (VMS) allow brackets in file names, that notation
     is no longer supported.

@{b}FILENAME@{b}( COMMON )@{ub}@{ub}
@{b}*( COMMON )@{ub}
     Specify where in your output file to place uninitialized data with
     this notation.  @{b}*(COMMON)@{ub} by itself refers to all uninitialized
     data from all input files (so far as it is not yet allocated);
     FILENAME@{b}(COMMON)@{ub} refers to uninitialized data from a particular
     file.  Both are special cases of the general mechanisms for
     specifying where to place input-file sections: @{b}ld@{ub} permits you to
     refer to uninitialized data as if it were in an input-file section
     named @{b}COMMON@{ub}, regardless of the input file's format.

   In any place where you may use a specific file or section name, you
may also use a wildcard pattern.  The linker handles wildcards much as
the Unix shell does.  A @{b}*@{ub} character matches any number of characters.
A @{b}?@{ub} character matches any single character.  The sequence @{b}[CHARS]@{ub} will
match a single instance of any of the CHARS; the @{b}-@{ub} character may be
used to specify a range of characters, as in @{b}[a-z]@{ub} to match any lower
case letter.  A @{b}\\ @{ub} character may be used to quote the following
character.

   When a file name is matched with a wildcard, the wildcard characters
will not match a @{b}/@{ub} character (used to separate directory names on
Unix).  A pattern consisting of a single @{b}*@{ub} character is an exception;
it will always match any file name.  In a section name, the wildcard
characters will match a @{b}/@{ub} character.

   Wildcards only match files which are explicitly specified on the
command line.  The linker does not search directories to expand
wildcards.  However, if you specify a simple file name--a name with no
wildcard characters--in a linker script, and the file name is not also
specified on the command line, the linker will attempt to open the file
as though it appeared on the command line.

   In the following example, the command script arranges the output file
into three consecutive sections, named @{b}.text@{ub}, @{b}.data@{ub}, and @{b}.bss@{ub}, taking
the input for each from the correspondingly named sections of all the
input files:

     SECTIONS {
       .text : { *(.text) }
       .data : { *(.data) }
       .bss :  { *(.bss)  *(COMMON) }
     }

   The following example reads all of the sections from file @{b}all.o@{ub} and
places them at the start of output section @{b}outputa@{ub} which starts at
location @{b}0x10000@{ub}. All of section @{b}.input1@{ub} from file @{b}foo.o@{ub} follows
immediately, in the same output section.  All of section @{b}.input2@{ub} from
@{b}foo.o@{ub} goes into output section @{b}outputb@{ub}, followed by section @{b}.input1@{ub}
from @{b}foo1.o@{ub}.  All of the remaining @{b}.input1@{ub} and @{b}.input2@{ub} sections from any
files are written to output section @{b}outputc@{ub}.

     SECTIONS {
       outputa 0x10000 :
         {
         all.o
         foo.o (.input1)
         }
       outputb :
         {
         foo.o (.input2)
         foo1.o (.input1)
         }
       outputc :
         {
         *(.input1)
         *(.input2)
         }
     }

   This example shows how wildcard patterns might be used to partition
files.  All @{b}.text@{ub} sections are placed in @{b}.text@{ub}, and all @{b}.bss@{ub} sections
are placed in @{b}.bss@{ub}.  For all files beginning with an upper case
character, the @{b}.data@{ub} section is placed into @{b}.DATA@{ub}; for all other files,
the @{b}.data@{ub} section is placed into @{b}.data@{ub}.

     SECTIONS {
       .text : { *(.text) }
       .DATA : { [A-Z]*(.data) }
       .data : { *(.data) }
       .bss : { *(.bss) }
     }


@endnode

@node "Section Data Expressions" "ld.guide/Section Data Expressions"
@next "Section Options"
@prev "Section Placement"
@toc "SECTIONS"

Section Data Expressions
------------------------

   The foregoing statements arrange, in your output file, data
originating from your input files.  You can also place data directly in
an output section from the link command script.  Most of these
additional statements involve expressions (see @{"Expressions" link "Expressions"}).  Although
these statements are shown separately here for ease of presentation, no
such segregation is needed within a section definition in the @{b}SECTIONS@{ub}
command; you can intermix them freely with any of the statements we've
just described.

@{b}CREATE_OBJECT_SYMBOLS@{ub}
     Create a symbol for each input file in the current section, set to
     the address of the first byte of data written from that input
     file.  For instance, with @{b}a.out@{ub} files it is conventional to have a
     symbol for each input file.  You can accomplish this by defining
     the output @{b}.text@{ub} section as follows:
          SECTIONS {
            .text 0x2020 :
               {
              CREATE_OBJECT_SYMBOLS
              *(.text)
              _etext = ALIGN(0x2000);
              }
            ...
          }

     If @{b}sample.ld@{ub} is a file containing this script, and @{b}a.o@{ub}, @{b}b.o@{ub}, @{b}c.o@{ub},
     and @{b}d.o@{ub} are four input files with contents like the following--
          /* a.c */
          
          afunction() { }
          int adata=1;
          int abss;

@{b}     ld -M -T sample.ld a.o b.o c.o d.o@{ub} would create a map like this,
     containing symbols matching the object file names:
          00000000 A __DYNAMIC
          00004020 B _abss
          00004000 D _adata
          00002020 T _afunction
          00004024 B _bbss
          00004008 D _bdata
          00002038 T _bfunction
          00004028 B _cbss
          00004010 D _cdata
          00002050 T _cfunction
          0000402c B _dbss
          00004018 D _ddata
          00002068 T _dfunction
          00004020 D _edata
          00004030 B _end
          00004000 T _etext
          00002020 t a.o
          00002038 t b.o
          00002050 t c.o
          00002068 t d.o

@{b}SYMBOL = EXPRESSION ;@{ub}
@{b}SYMBOL F= EXPRESSION ;@{ub}
     SYMBOL is any symbol name (see @{"Symbols" link "Symbols"}).  "F=" refers to any of
     the operators @{b}&= += -= *= /=@{ub} which combine arithmetic and
     assignment.

     When you assign a value to a symbol within a particular section
     definition, the value is relative to the beginning of the section
     (see @{"Assignment" link "Assignment"}).  If you write

          SECTIONS {
            abs = 14 ;
            ...
            .data : { ... rel = 14 ; ... }
            abs2 = 14 + ADDR(.data);
            ...
          }

@{b}     abs@{ub} and @{b}rel@{ub} do not have the same value; @{b}rel@{ub} has the same value as
     @{b}abs2@{ub}.

@{b}BYTE(EXPRESSION)@{ub}
@{b}SHORT(EXPRESSION)@{ub}
@{b}LONG(EXPRESSION)@{ub}
@{b}QUAD(EXPRESSION)@{ub}
     By including one of these four statements in a section definition,
     you can explicitly place one, two, four, or eight bytes
     (respectively) at the current address of that section.  @{b}QUAD@{ub} is
     only supported when using a 64 bit host or target.

     Multiple-byte quantities are represented in whatever byte order is
     appropriate for the output file format (see @{"BFD" link "BFD"}).

@{b}FILL(EXPRESSION)@{ub}
     Specify the "fill pattern" for the current section.  Any otherwise
     unspecified regions of memory within the section (for example,
     regions you skip over by assigning a new value to the location
     counter @{b}.@{ub}) are filled with the two least significant bytes from the
     EXPRESSION argument.  A @{b}FILL@{ub} statement covers memory locations
     @{i}after@{ui} the point it occurs in the section definition; by including
     more than one @{b}FILL@{ub} statement, you can have different fill patterns
     in different parts of an output section.


@endnode

@node "Section Options" "ld.guide/Section Options"
@next "Overlays"
@prev "Section Data Expressions"
@toc "SECTIONS"

Optional Section Attributes
---------------------------

   Here is the full syntax of a section definition, including all the
optional portions:

     SECTIONS {
     ...
     SECNAME START BLOCK(ALIGN) (NOLOAD) : AT ( LDADR )
       { CONTENTS } >REGION :PHDR =FILL
     ...
     }

   SECNAME and CONTENTS are required.  See @{"Section Definition" link "Section Definition"}, and
@{"Section Placement" link "Section Placement"}, for details on CONTENTS.  The remaining
elements--START, @{b}BLOCK(ALIGN)@{ub}, @{b}(NOLOAD)@{ub}, @{b}AT ( LDADR )@{ub}, @{b}>REGION@{ub}, @{b}:PHDR@{ub},
and @{b}=FILL@{ub}--are all optional.

@{b}START@{ub}
     You can force the output section to be loaded at a specified
     address by specifying START immediately following the section name.
     START can be represented as any expression. The following example
     generates section OUTPUT at location @{b}0x40000000@{ub}:

          SECTIONS {
            ...
            output 0x40000000: {
              ...
              }
            ...
          }

@{b}BLOCK(ALIGN)@{ub}
     You can include @{b}BLOCK()@{ub} specification to advance the location
     counter @{b}.@{ub} prior to the beginning of the section, so that the
     section will begin at the specified alignment.  ALIGN is an
     expression.

@{b}(NOLOAD)@{ub}
     Use @{b}(NOLOAD)@{ub} to prevent a section from being loaded into memory
     each time it is accessed.  For example, in the script sample
     below, the @{b}ROM@{ub} segment is addressed at memory location @{b}0@{ub} and does
     not need to be loaded into each object file:

          SECTIONS {
            ROM  0  (NOLOAD)  : { ... }
            ...
          }

@{b}AT ( LDADR )@{ub}
     The expression LDADR that follows the @{b}AT@{ub} keyword specifies the
     load address of the section.  The default (if you do not use the
     @{b}AT@{ub} keyword) is to make the load address the same as the relocation
     address.  This feature is designed to make it easy to build a ROM
     image.  For example, this @{b}SECTIONS@{ub} definition creates two output
     sections: one called @{b}.text@{ub}, which starts at @{b}0x1000@{ub}, and one called
     @{b}.mdata@{ub}, which is loaded at the end of the @{b}.text@{ub} section even
     though its relocation address is @{b}0x2000@{ub}.  The symbol @{b}_data@{ub} is
     defined with the value @{b}0x2000@{ub}:

          SECTIONS
            {
            .text 0x1000 : { *(.text) _etext = . ; }
            .mdata 0x2000 :
              AT ( ADDR(.text) + SIZEOF ( .text ) )
              { _data = . ; *(.data); _edata = . ;  }
            .bss 0x3000 :
              { _bstart = . ;  *(.bss) *(COMMON) ; _bend = . ;}
          }

     The run-time initialization code (for C programs, usually @{b}crt0@{ub})
     for use with a ROM generated this way has to include something like
     the following, to copy the initialized data from the ROM image to
     its runtime address:

          char *src = _etext;
          char *dst = _data;
          
          /* ROM has data at end of text; copy it. */
          while (dst < _edata) {
            *dst++ = *src++;
          }
          
          /* Zero bss */
          for (dst = _bstart; dst< _bend; dst++)
            *dst = 0;

@{b}>REGION@{ub}
     Assign this section to a previously defined region of memory.  See
     @{"MEMORY" link "MEMORY"}.

@{b}:PHDR@{ub}
     Assign this section to a segment described by a program header.
     See @{"PHDRS" link "PHDRS"}.  If a section is assigned to one or more segments, then
     all subsequent allocated sections will be assigned to those
     segments as well, unless they use an explicitly @{b}:PHDR@{ub} modifier.  To
     prevent a section from being assigned to a segment when it would
     normally default to one, use @{b}:NONE@{ub}.

@{b}=FILL@{ub}
     Including @{b}=FILL@{ub} in a section definition specifies the initial fill
     value for that section.  You may use any expression to specify
     FILL.  Any unallocated holes in the current output section when
     written to the output file will be filled with the two least
     significant bytes of the value, repeated as necessary.  You can
     also change the fill value with a @{b}FILL@{ub} statement in the CONTENTS
     of a section definition.


@endnode

@node "Overlays" "ld.guide/Overlays"
@prev "Section Options"
@toc "SECTIONS"

Overlays
--------

   The @{b}OVERLAY@{ub} command provides an easy way to describe sections which
are to be loaded as part of a single memory image but are to be run at
the same memory address.  At run time, some sort of overlay manager
will copy the overlaid sections in and out of the runtime memory
address as required, perhaps by simply manipulating addressing bits.
This approach can be useful, for example, when a certain region of
memory is faster than another.

   The @{b}OVERLAY@{ub} command is used within a @{b}SECTIONS@{ub} command.  It appears
as follows:
     OVERLAY START : [ NOCROSSREFS ] AT ( LDADDR )
        {
          SECNAME1 { CONTENTS } :PHDR =FILL
          SECNAME2 { CONTENTS } :PHDR =FILL
          ...
        } >REGION :PHDR =FILL

   Everything is optional except @{b}OVERLAY@{ub} (a keyword), and each section
must have a name (SECNAME1 and SECNAME2 above).  The section
definitions within the @{b}OVERLAY@{ub} construct are identical to those within
the general @{b}SECTIONS@{ub} contruct (see @{"SECTIONS" link "SECTIONS"}), except that no addresses
and no memory regions may be defined for sections within an @{b}OVERLAY@{ub}.

   The sections are all defined with the same starting address.  The
load addresses of the sections are arranged such that they are
consecutive in memory starting at the load address used for the @{b}OVERLAY@{ub}
as a whole (as with normal section definitions, the load address is
optional, and defaults to the start address; the start address is also
optional, and defaults to @{b}.@{ub}).

   If the @{b}NOCROSSREFS@{ub} keyword is used, and there any references among
the sections, the linker will report an error.  Since the sections all
run at the same address, it normally does not make sense for one
section to refer directly to another.  See @{"NOCROSSREFS" link "Option Commands"}.

   For each section within the @{b}OVERLAY@{ub}, the linker automatically
defines two symbols.  The symbol @{b}__load_start_SECNAME@{ub} is defined as the
starting load address of the section.  The symbol @{b}__load_stop_SECNAME@{ub}
is defined as the final load address of the section.  Any characters
within SECNAME which are not legal within C identifiers are removed.  C
(or assembler) code may use these symbols to move the overlaid sections
around as necessary.

   At the end of the overlay, the value of @{b}.@{ub} is set to the start
address of the overlay plus the size of the largest section.

   Here is an example.  Remember that this would appear inside a
@{b}SECTIONS@{ub} construct.

     OVERLAY 0x1000 : AT (0x4000)
        {
          .text0 { o1/*.o(.text) }
          .text1 { o2/*.o(.text) }
        }

   This will define both @{b}.text0@{ub} and @{b}.text1@{ub} to start at address 0x1000.
@{b}.text0@{ub} will be loaded at address 0x4000, and @{b}.text1@{ub} will be loaded
immediately after @{b}.text0@{ub}.  The following symbols will be defined:
@{b}__load_start_text0@{ub}, @{b}__load_stop_text0@{ub}, @{b}__load_start_text1@{ub},
@{b}__load_stop_text1@{ub}.

   C code to copy overlay @{b}.text1@{ub} into the overlay area might look like
the following.

     extern char __load_start_text1, __load_stop_text1;
       memcpy ((char *) 0x1000, &__load_start_text1,
               &__load_stop_text1 - &__load_start_text1);

   Note that the @{b}OVERLAY@{ub} command is just syntactic sugar, since
everything it does can be done using the more basic commands.  The above
example could have been written identically as follows.

     .text0 0x1000 : AT (0x4000) { o1/*.o(.text) }
       __load_start_text0 = LOADADDR (.text0);
       __load_stop_text0 = LOADADDR (.text0) + SIZEOF (.text0);
       .text1 0x1000 : AT (0x4000 + SIZEOF (.text0)) { o2/*.o(.text) }
       __load_start_text1 = LOADADDR (.text1);
       __load_stop_text1 = LOADADDR (.text1) + SIZEOF (.text1);
       . = 0x1000 + MAX (SIZEOF (.text0), SIZEOF (.text1));


@endnode

@node "PHDRS" "ld.guide/PHDRS"
@next "Entry Point"
@prev "SECTIONS"
@toc "Commands"

ELF Program Headers
===================

   The ELF object file format uses @{i}program headers@{ui}, which are read by
the system loader and describe how the program should be loaded into
memory.  These program headers must be set correctly in order to run the
program on a native ELF system.  The linker will create reasonable
program headers by default.  However, in some cases, it is desirable to
specify the program headers more precisely; the @{b}PHDRS@{ub} command may be
used for this purpose.  When the @{b}PHDRS@{ub} command is used, the linker will
not generate any program headers itself.

   The @{b}PHDRS@{ub} command is only meaningful when generating an ELF output
file.  It is ignored in other cases.  This manual does not describe the
details of how the system loader interprets program headers; for more
information, see the ELF ABI.  The program headers of an ELF file may
be displayed using the @{b}-p@{ub} option of the @{b}objdump@{ub} command.

   This is the syntax of the @{b}PHDRS@{ub} command.  The words @{b}PHDRS@{ub}, @{b}FILEHDR@{ub},
@{b}AT@{ub}, and @{b}FLAGS@{ub} are keywords.

     PHDRS
     {
       NAME TYPE [ FILEHDR ] [ PHDRS ] [ AT ( ADDRESS ) ]
             [ FLAGS ( FLAGS ) ] ;
     }

   The NAME is used only for reference in the @{b}SECTIONS@{ub} command of the
linker script.  It does not get put into the output file.

   Certain program header types describe segments of memory which are
loaded from the file by the system loader.  In the linker script, the
contents of these segments are specified by directing allocated output
sections to be placed in the segment.  To do this, the command
describing the output section in the @{b}SECTIONS@{ub} command should use @{b}:NAME@{ub},
where NAME is the name of the program header as it appears in the @{b}PHDRS@{ub}
command.  See @{"Section Options" link "Section Options"}.

   It is normal for certain sections to appear in more than one segment.
This merely implies that one segment of memory contains another.  This
is specified by repeating @{b}:NAME@{ub}, using it once for each program header
in which the section is to appear.

   If a section is placed in one or more segments using @{b}:NAME@{ub}, then all
subsequent allocated sections which do not specify @{b}:NAME@{ub} are placed in
the same segments.  This is for convenience, since generally a whole
set of contiguous sections will be placed in a single segment.  To
prevent a section from being assigned to a segment when it would
normally default to one, use @{b}:NONE@{ub}.

   The @{b}FILEHDR@{ub} and @{b}PHDRS@{ub} keywords which may appear after the program
header type also indicate contents of the segment of memory.  The
@{b}FILEHDR@{ub} keyword means that the segment should include the ELF file
header.  The @{b}PHDRS@{ub} keyword means that the segment should include the
ELF program headers themselves.

   The TYPE may be one of the following.  The numbers indicate the
value of the keyword.

@{b}PT_NULL@{ub} (0)
     Indicates an unused program header.

@{b}PT_LOAD@{ub} (1)
     Indicates that this program header describes a segment to be
     loaded from the file.

@{b}PT_DYNAMIC@{ub} (2)
     Indicates a segment where dynamic linking information can be found.

@{b}PT_INTERP@{ub} (3)
     Indicates a segment where the name of the program interpreter may
     be found.

@{b}PT_NOTE@{ub} (4)
     Indicates a segment holding note information.

@{b}PT_SHLIB@{ub} (5)
     A reserved program header type, defined but not specified by the
     ELF ABI.

@{b}PT_PHDR@{ub} (6)
     Indicates a segment where the program headers may be found.

EXPRESSION
     An expression giving the numeric type of the program header.  This
     may be used for types not defined above.

   It is possible to specify that a segment should be loaded at a
particular address in memory.  This is done using an @{b}AT@{ub} expression.
This is identical to the @{b}AT@{ub} command used in the @{b}SECTIONS@{ub} command (see
@{"Section Options" link "Section Options"}).  Using the @{b}AT@{ub} command for a program header
overrides any information in the @{b}SECTIONS@{ub} command.

   Normally the segment flags are set based on the sections.  The @{b}FLAGS@{ub}
keyword may be used to explicitly specify the segment flags.  The value
of FLAGS must be an integer.  It is used to set the @{b}p_flags@{ub} field of
the program header.

   Here is an example of the use of @{b}PHDRS@{ub}.  This shows a typical set of
program headers used on a native ELF system.

     PHDRS
     {
       headers PT_PHDR PHDRS ;
       interp PT_INTERP ;
       text PT_LOAD FILEHDR PHDRS ;
       data PT_LOAD ;
       dynamic PT_DYNAMIC ;
     }
     
     SECTIONS
     {
       . = SIZEOF_HEADERS;
       .interp : { *(.interp) } :text :interp
       .text : { *(.text) } :text
       .rodata : { *(.rodata) } /* defaults to :text */
       ...
       . = . + 0x1000; /* move to a new page in memory */
       .data : { *(.data) } :data
       .dynamic : { *(.dynamic) } :data :dynamic
       ...
     }


@endnode

@node "Entry Point" "ld.guide/Entry Point"
@next "Version Script"
@prev "PHDRS"
@toc "Commands"

The Entry Point
===============

   The linker command language includes a command specifically for
defining the first executable instruction in an output file (its @{i}entry
point@{ui}).  Its argument is a symbol name:
     ENTRY(SYMBOL)

   Like symbol assignments, the @{b}ENTRY@{ub} command may be placed either as
an independent command in the command file, or among the section
definitions within the @{b}SECTIONS@{ub} command--whatever makes the most sense
for your layout.

@{b}   ENTRY@{ub} is only one of several ways of choosing the entry point.  You
may indicate it in any of the following ways (shown in descending order
of priority: methods higher in the list override methods lower down).
   * the @{b}-e@{ub} ENTRY command-line option;

   * the @{b}ENTRY(SYMBOL)@{ub} command in a linker control script;

   * the value of the symbol @{b}start@{ub}, if present;

   * the address of the first byte of the @{b}.text@{ub} section, if present;

   * The address @{b}0@{ub}.

   For example, you can use these rules to generate an entry point with
an assignment statement: if no symbol @{b}start@{ub} is defined within your
input files, you can simply define it, assigning it an appropriate
value--

     start = 0x2020;

The example shows an absolute address, but you can use any expression.
For example, if your input object files use some other symbol-name
convention for the entry point, you can just assign the value of
whatever symbol contains the start address to @{b}start@{ub}:

     start = other_symbol ;


@endnode

@node "Version Script" "ld.guide/Version Script"
@next "Option Commands"
@prev "Entry Point"
@toc "Commands"

Version Script
==============

   The linker command script includes a command specifically for
specifying a version script, and is only meaningful for ELF platforms
that support shared libraries.  A version script can be build directly
into the linker script that you are using, or you can supply the
version script as just another input file to the linker at the time
that you link.  The command script syntax is:
     VERSION { version script contents }
   The version script can also be specified to the linker by means of
the @{b}--version-script@{ub} linker command line option.  Version scripts are
only meaningful when creating shared libraries.

   The format of the version script itself is identical to that used by
Sun's linker in Solaris 2.5.  Versioning is done by defining a tree of
version nodes with the names and interdependencies specified in the
version script.  The version script can specify which symbols are bound
to which version nodes, and it can reduce a specified set of symbols to
local scope so that they are not globally visible outside of the shared
library.

   The easiest way to demonstrate the version script language is with a
few examples.

     VERS_1.1 {
     	 global:
     		 foo1;
     	 local:
     		 old*;
     		 original*;
     		 new*;
     };
     
     VERS_1.2 {
     		 foo2;
     } VERS_1.1;
     
     VERS_2.0 {
     		 bar1; bar2;
     } VERS_1.2;

   In this example, three version nodes are defined.  @{b}VERS_1.1@{ub} is the
first version node defined, and has no other dependencies.  The symbol
@{b}foo1@{ub} is bound to this version node, and a number of symbols that have
appeared within various object files are reduced in scope to local so
that they are not visible outside of the shared library.

   Next, the node @{b}VERS_1.2@{ub} is defined.  It depends upon @{b}VERS_1.1@{ub}.  The
symbol @{b}foo2@{ub} is bound to this version node.

   Finally, the node @{b}VERS_2.0@{ub} is defined.  It depends upon @{b}VERS_1.2@{ub}.
The symbols @{b}bar1@{ub} and @{b}bar2@{ub} are bound to this version node.

   Symbols defined in the library which aren't specifically bound to a
version node are effectively bound to an unspecified base version of the
library.  It is possible to bind all otherwise unspecified symbols to a
given version node using @{b}global: *@{ub} somewhere in the version script.

   Lexically the names of the version nodes have no specific meaning
other than what they might suggest to the person reading them.  The @{b}2.0@{ub}
version could just as well have appeared in between @{b}1.1@{ub} and @{b}1.2@{ub}.
However, this would be a confusing way to write a version script.

   When you link an application against a shared library that has
versioned symbols, the application itself knows which version of each
symbol it requires, and it also knows which version nodes it needs from
each shared library it is linked against.  Thus at runtime, the dynamic
loader can make a quick check to make sure that the libraries you have
linked against do in fact supply all of the version nodes that the
application will need to resolve all of the dynamic symbols.  In this
way it is possible for the dynamic linker to know with certainty that
all external symbols that it needs will be resolvable without having to
search for each symbol reference.

   The symbol versioning is in effect a much more sophisticated way of
doing minor version checking that SunOS does.  The fundamental problem
that is being addressed here is that typically references to external
functions are bound on an as-needed basis, and are not all bound when
the application starts up.  If a shared library is out of date, a
required interface may be missing; when the application tries to use
that interface, it may suddenly and unexpectedly fail.  With symbol
versioning, the user will get a warning when they start their program if
the libraries being used with the application are too old.

   There are several GNU extensions to Sun's versioning approach.  The
first of these is the ability to bind a symbol to a version node in the
source file where the symbol is defined instead of in the versioning
script.  This was done mainly to reduce the burden on the library
maintainer.  This can be done by putting something like:

     __asm__(".symver original_foo,foo@VERS_1.1");

   in the C source file.  This renamed the function @{b}original_foo@{ub} to be
an alias for @{b}foo@{ub} bound to the version node @{b}VERS_1.1@{ub}.  The @{b}local:@{ub}
directive can be used to prevent the symbol @{b}original_foo@{ub} from being
exported.

   The second GNU extension is to allow multiple versions of the same
function to appear in a given shared library.  In this way an
incompatible change to an interface can take place without increasing
the major version number of the shared library, while still allowing
applications linked against the old interface to continue to function.

   This can only be accomplished by using multiple @{b}.symver@{ub} directives
in the assembler.  An example of this would be:

     __asm__(".symver original_foo,foo@");
     __asm__(".symver old_foo,foo@VERS_1.1");
     __asm__(".symver old_foo1,foo@VERS_1.2");
     __asm__(".symver new_foo,foo@@VERS_2.0");

   In this example, @{b}foo@@{ub} represents the symbol @{b}foo@{ub} bound to the
unspecified base version of the symbol.  The source file that contains
this example would define 4 C functions: @{b}original_foo@{ub}, @{b}old_foo@{ub},
@{b}old_foo1@{ub}, and @{b}new_foo@{ub}.

   When you have multiple definitions of a given symbol, there needs to
be some way to specify a default version to which external references to
this symbol will be bound.  This can be accomplished with the
@{b}foo@@VERS_2.0@{ub} type of @{b}.symver@{ub} directive.  Only one version of a symbol
can be declared 'default' in this manner - otherwise you would
effectively have multiple definitions of the same symbol.

   If you wish to bind a reference to a specific version of the symbol
within the shared library, you can use the aliases of convenience (i.e.
@{b}old_foo@{ub}), or you can use the @{b}.symver@{ub} directive to specifically bind to
an external version of the function in question.


@endnode

@node "Option Commands" "ld.guide/Option Commands"
@prev "Version Script"
@toc "Commands"

Option Commands
===============

   The command language includes a number of other commands that you can
use for specialized purposes.  They are similar in purpose to
command-line options.

@{b}CONSTRUCTORS@{ub}
     When linking using the @{b}a.out@{ub} object file format, the linker uses
     an unusual set construct to support C++ global constructors and
     destructors.  When linking object file formats which do not support
     arbitrary sections, such as @{b}ECOFF@{ub} and @{b}XCOFF@{ub}, the linker will
     automatically recognize C++ global constructors and destructors by
     name.  For these object file formats, the @{b}CONSTRUCTORS@{ub} command
     tells the linker where this information should be placed.  The
     @{b}CONSTRUCTORS@{ub} command is ignored for other object file formats.

     The symbol @{b}__CTOR_LIST__@{ub} marks the start of the global
     constructors, and the symbol @{b}__DTOR_LIST@{ub} marks the end.  The first
     word in the list is the number of entries, followed by the address
     of each constructor or destructor, followed by a zero word.  The
     compiler must arrange to actually run the code.  For these object
     file formats GNU C++ calls constructors from a subroutine @{b}__main@{ub};
     a call to @{b}__main@{ub} is automatically inserted into the startup code
     for @{b}main@{ub}.  GNU C++ runs destructors either by using @{b}atexit@{ub}, or
     directly from the function @{b}exit@{ub}.

     For object file formats such as @{b}COFF@{ub} or @{b}ELF@{ub} which support multiple
     sections, GNU C++ will normally arrange to put the addresses of
     global constructors and destructors into the @{b}.ctors@{ub} and @{b}.dtors@{ub}
     sections.  Placing the following sequence into your linker script
     will build the sort of table which the GNU C++ runtime code
     expects to see.

                __CTOR_LIST__ = .;
                LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)
                *(.ctors)
                LONG(0)
                __CTOR_END__ = .;
                __DTOR_LIST__ = .;
                LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)
                *(.dtors)
                LONG(0)
                __DTOR_END__ = .;

     Normally the compiler and linker will handle these issues
     automatically, and you will not need to concern yourself with
     them.  However, you may need to consider this if you are using C++
     and writing your own linker scripts.

@{b}FLOAT@{ub}
@{b}NOFLOAT@{ub}
     These keywords were used in some older linkers to request a
     particular math subroutine library.  @{b}ld@{ub} doesn't use the keywords,
     assuming instead that any necessary subroutines are in libraries
     specified using the general mechanisms for linking to archives;
     but to permit the use of scripts that were written for the older
     linkers, the keywords @{b}FLOAT@{ub} and @{b}NOFLOAT@{ub} are accepted and ignored.

@{b}FORCE_COMMON_ALLOCATION@{ub}
     This command has the same effect as the @{b}-d@{ub} command-line option: to
     make @{b}ld@{ub} assign space to common symbols even if a relocatable
     output file is specified (@{b}-r@{ub}).

@{b}INCLUDE FILENAME@{ub}
     Include the linker script FILENAME at this point.  The file will
     be searched for in the current directory, and in any directory
     specified with the @{b}-L@{ub} option.  You can nest calls to @{b}INCLUDE@{ub} up to
     10 levels deep.

@{b}INPUT ( FILE, FILE, ... )@{ub}
@{b}INPUT ( FILE FILE ... )@{ub}
     Use this command to include binary input files in the link, without
     including them in a particular section definition.  Specify the
     full name for each FILE, including @{b}.a@{ub} if required.

@{b}     ld@{ub} searches for each FILE through the archive-library search path,
     just as for files you specify on the command line.  See the
     description of @{b}-L@{ub} in @{"Command Line Options" link "Options"}.

     If you use @{b}-lFILE@{ub}, @{b}ld@{ub} will transform the name to @{b}libFILE.a@{ub} as with
     the command line argument @{b}-l@{ub}.

@{b}GROUP ( FILE, FILE, ... )@{ub}
@{b}GROUP ( FILE FILE ... )@{ub}
     This command is like @{b}INPUT@{ub}, except that the named files should all
     be archives, and they are searched repeatedly until no new
     undefined references are created.  See the description of @{b}-(@{ub} in
     @{"Command Line Options" link "Options"}.

@{b}OUTPUT ( FILENAME )@{ub}
     Use this command to name the link output file FILENAME.  The
     effect of @{b}OUTPUT(FILENAME)@{ub} is identical to the effect of
     @{b}-o FILENAME@{ub}, which overrides it.  You can use this command to
     supply a default output-file name other than @{b}a.out@{ub}.

@{b}OUTPUT_ARCH ( BFDNAME )@{ub}
     Specify a particular output machine architecture, with one of the
     names used by the BFD back-end routines (see @{"BFD" link "BFD"}).  This command
     is often unnecessary; the architecture is most often set
     implicitly by either the system BFD configuration or as a side
     effect of the @{b}OUTPUT_FORMAT@{ub} command.

@{b}OUTPUT_FORMAT ( BFDNAME )@{ub}
     When @{b}ld@{ub} is configured to support multiple object code formats, you
     can use this command to specify a particular output format.
     BFDNAME is one of the names used by the BFD back-end routines (see
     @{"BFD" link "BFD"}).  The effect is identical to the effect of the @{b}--oformat@{ub}
     command-line option.  This selection affects only the output file;
     the related command @{b}TARGET@{ub} affects primarily input files.

@{b}SEARCH_DIR ( PATH )@{ub}
     Add PATH to the list of paths where @{b}ld@{ub} looks for archive
     libraries.  @{b}SEARCH_DIR(PATH)@{ub} has the same effect as @{b}-LPATH@{ub} on the
     command line.

@{b}STARTUP ( FILENAME )@{ub}
     Ensure that FILENAME is the first input file used in the link
     process.

@{b}TARGET ( FORMAT )@{ub}
     When @{b}ld@{ub} is configured to support multiple object code formats, you
     can use this command to change the input-file object code format
     (like the command-line option @{b}-b@{ub} or its synonym @{b}--format@{ub}).  The
     argument FORMAT is one of the strings used by BFD to name binary
     formats.  If @{b}TARGET@{ub} is specified but @{b}OUTPUT_FORMAT@{ub} is not, the
     last @{b}TARGET@{ub} argument is also used as the default format for the @{b}ld@{ub}
     output file.  See @{"BFD" link "BFD"}.

     If you don't use the @{b}TARGET@{ub} command, @{b}ld@{ub} uses the value of the
     environment variable @{b}GNUTARGET@{ub}, if available, to select the output
     file format.  If that variable is also absent, @{b}ld@{ub} uses the default
     format configured for your machine in the BFD libraries.

@{b}NOCROSSREFS ( SECTION SECTION ... )@{ub}
     This command may be used to tell @{b}ld@{ub} to issue an error about any
     references among certain sections.

     In certain types of programs, particularly on embedded systems,
     when one section is loaded into memory, another section will not
     be.  Any direct references between the two sections would be
     errors.  For example, it would be an error if code in one section
     called a function defined in the other section.

     The @{b}NOCROSSREFS@{ub} command takes a list of section names.  If @{b}ld@{ub}
     detects any cross references between the sections, it reports an
     error and returns a non-zero exit status.  The @{b}NOCROSSREFS@{ub} command
     uses output section names, defined in the @{b}SECTIONS@{ub} command.  It
     does not use the names of input sections.


@endnode

@node "Machine Dependent" "ld.guide/Machine Dependent"
@next "BFD"
@prev "Commands"
@toc "Main"

Machine Dependent Features
**************************

@{b}   ld@{ub} has additional features on some platforms; the following sections
describe them.  Machines where @{b}ld@{ub} has no additional functionality are
not listed.


 @{" H8-300                     " link "H8-300"}  @{b}ld@{ub} and the H8/300
 @{" i960                       " link "i960"}  @{b}ld@{ub} and the Intel 960 family


@endnode

@node "H8-300" "ld.guide/H8-300"
@next "i960"
@toc "Machine Dependent"

@{b}ld@{ub} and the H8/300
=================

   For the H8/300, @{b}ld@{ub} can perform these global optimizations when you
specify the @{b}--relax@{ub} command-line option.

@{i}relaxing address modes@{ui}
@{b}     ld@{ub} finds all @{b}jsr@{ub} and @{b}jmp@{ub} instructions whose targets are within
     eight bits, and turns them into eight-bit program-counter relative
     @{b}bsr@{ub} and @{b}bra@{ub} instructions, respectively.

@{i}synthesizing instructions@{ui}
@{b}     ld@{ub} finds all @{b}mov.b@{ub} instructions which use the sixteen-bit absolute
     address form, but refer to the top page of memory, and changes
     them to use the eight-bit address form.  (That is: the linker
     turns @{b}mov.b @{b}\@@{ub}AA:16@{ub} into @{b}mov.b @{b}\@@{ub}AA:8@{ub} whenever the address AA is in the
     top page of memory).


@endnode

@node "i960" "ld.guide/i960"
@prev "H8-300"
@toc "Machine Dependent"

@{b}ld@{ub} and the Intel 960 family
===========================

   You can use the @{b}-AARCHITECTURE@{ub} command line option to specify one of
the two-letter names identifying members of the 960 family; the option
specifies the desired output target, and warns of any incompatible
instructions in the input files.  It also modifies the linker's search
strategy for archive libraries, to support the use of libraries
specific to each particular architecture, by including in the search
loop names suffixed with the string identifying the architecture.

   For example, if your @{b}ld@{ub} command line included @{b}-ACA@{ub} as well as @{b}-ltry@{ub},
the linker would look (in its built-in search paths, and in any paths
you specify with @{b}-L@{ub}) for a library with the names

     try
     libtry.a
     tryca
     libtryca.a

The first two possibilities would be considered in any event; the last
two are due to the use of @{b}-ACA@{ub}.

   You can meaningfully use @{b}-A@{ub} more than once on a command line, since
the 960 architecture family allows combination of target architectures;
each use will add another pair of name variants to search for when @{b}-l@{ub}
specifies a library.

@{b}   ld@{ub} supports the @{b}--relax@{ub} option for the i960 family.  If you specify
@{b}--relax@{ub}, @{b}ld@{ub} finds all @{b}balx@{ub} and @{b}calx@{ub} instructions whose targets are
within 24 bits, and turns them into 24-bit program-counter relative @{b}bal@{ub}
and @{b}cal@{ub} instructions, respectively.  @{b}ld@{ub} also turns @{b}cal@{ub} instructions
into @{b}bal@{ub} instructions when it determines that the target subroutine is
a leaf routine (that is, the target subroutine does not itself call any
subroutines).


@endnode

@node "BFD" "ld.guide/BFD"
@next "Reporting Bugs"
@prev "Machine Dependent"
@toc "Main"

BFD
***

   The linker accesses object and archive files using the BFD libraries.
These libraries allow the linker to use the same routines to operate on
object files whatever the object file format.  A different object file
format can be supported simply by creating a new BFD back end and adding
it to the library.  To conserve runtime memory, however, the linker and
associated tools are usually configured to support only a subset of the
object file formats available.  You can use @{b}objdump -i@{ub} (see @{"objdump" link "binutils.guide/objdump"}) to
list all the formats available for your configuration.

   As with most implementations, BFD is a compromise between several
conflicting requirements. The major factor influencing BFD design was
efficiency: any time used converting between formats is time which
would not have been spent had BFD not been involved. This is partly
offset by abstraction payback; since BFD simplifies applications and
back ends, more time and care may be spent optimizing algorithms for a
greater speed.

   One minor artifact of the BFD solution which you should bear in mind
is the potential for information loss.  There are two places where
useful information can be lost using the BFD mechanism: during
conversion and during output. See @{"BFD information loss" link "BFD information loss"}.


 @{" BFD outline                " link "BFD outline"}  How it works: an outline of BFD


@endnode

@node "BFD outline" "ld.guide/BFD outline"
@toc "BFD"

How it works: an outline of BFD
===============================

   When an object file is opened, BFD subroutines automatically
determine the format of the input object file.  They then build a
descriptor in memory with pointers to routines that will be used to
access elements of the object file's data structures.

   As different information from the the object files is required, BFD
reads from different sections of the file and processes them.  For
example, a very common operation for the linker is processing symbol
tables.  Each BFD back end provides a routine for converting between
the object file's representation of symbols and an internal canonical
format. When the linker asks for the symbol table of an object file, it
calls through a memory pointer to the routine from the relevant BFD
back end which reads and converts the table into a canonical form.  The
linker then operates upon the canonical form. When the link is finished
and the linker writes the output file's symbol table, another BFD back
end routine is called to take the newly created symbol table and
convert it into the chosen output format.


 @{" BFD information loss       " link "BFD information loss"}  Information Loss
 @{" Canonical format           " link "Canonical format"}  The BFD	canonical object-file format


@endnode

@node "BFD information loss" "ld.guide/BFD information loss"
@next "Canonical format"
@toc "BFD outline"

Information Loss
----------------

@{i}   Information can be lost during output.@{ui} The output formats supported
by BFD do not provide identical facilities, and information which can
be described in one form has nowhere to go in another format. One
example of this is alignment information in @{b}b.out@{ub}. There is nowhere in
an @{b}a.out@{ub} format file to store alignment information on the contained
data, so when a file is linked from @{b}b.out@{ub} and an @{b}a.out@{ub} image is
produced, alignment information will not propagate to the output file.
(The linker will still use the alignment information internally, so the
link is performed correctly).

   Another example is COFF section names. COFF files may contain an
unlimited number of sections, each one with a textual section name. If
the target of the link is a format which does not have many sections
(e.g., @{b}a.out@{ub}) or has sections without names (e.g., the Oasys format),
the link cannot be done simply. You can circumvent this problem by
describing the desired input-to-output section mapping with the linker
command language.

@{i}   Information can be lost during canonicalization.@{ui} The BFD internal
canonical form of the external formats is not exhaustive; there are
structures in input formats for which there is no direct representation
internally.  This means that the BFD back ends cannot maintain all
possible data richness through the transformation between external to
internal and back to external formats.

   This limitation is only a problem when an application reads one
format and writes another.  Each BFD back end is responsible for
maintaining as much data as possible, and the internal BFD canonical
form has structures which are opaque to the BFD core, and exported only
to the back ends. When a file is read in one format, the canonical form
is generated for BFD and the application. At the same time, the back
end saves away any information which may otherwise be lost. If the data
is then written back in the same format, the back end routine will be
able to use the canonical form provided by the BFD core as well as the
information it prepared earlier.  Since there is a great deal of
commonality between back ends, there is no information lost when
linking or copying big endian COFF to little endian COFF, or @{b}a.out@{ub} to
@{b}b.out@{ub}.  When a mixture of formats is linked, the information is only
lost from the files whose format differs from the destination.


@endnode

@node "Canonical format" "ld.guide/Canonical format"
@prev "BFD information loss"
@toc "BFD outline"

The BFD canonical object-file format
------------------------------------

   The greatest potential for loss of information occurs when there is
the least overlap between the information provided by the source
format, that stored by the canonical format, and that needed by the
destination format. A brief description of the canonical form may help
you understand which kinds of data you can count on preserving across
conversions.

@{i}files@{ui}
     Information stored on a per-file basis includes target machine
     architecture, particular implementation format type, a demand
     pageable bit, and a write protected bit.  Information like Unix
     magic numbers is not stored here--only the magic numbers' meaning,
     so a @{b}ZMAGIC@{ub} file would have both the demand pageable bit and the
     write protected text bit set.  The byte order of the target is
     stored on a per-file basis, so that big- and little-endian object
     files may be used with one another.

@{i}sections@{ui}
     Each section in the input file contains the name of the section,
     the section's original address in the object file, size and
     alignment information, various flags, and pointers into other BFD
     data structures.

@{i}symbols@{ui}
     Each symbol contains a pointer to the information for the object
     file which originally defined it, its name, its value, and various
     flag bits.  When a BFD back end reads in a symbol table, it
     relocates all symbols to make them relative to the base of the
     section where they were defined.  Doing this ensures that each
     symbol points to its containing section.  Each symbol also has a
     varying amount of hidden private data for the BFD back end.  Since
     the symbol points to the original file, the private data format
     for that symbol is accessible.  @{b}ld@{ub} can operate on a collection of
     symbols of wildly different formats without problems.

     Normal global and simple local symbols are maintained on output,
     so an output file (no matter its format) will retain symbols
     pointing to functions and to global, static, and common variables.
     Some symbol information is not worth retaining; in @{b}a.out@{ub}, type
     information is stored in the symbol table as long symbol names.
     This information would be useless to most COFF debuggers; the
     linker has command line switches to allow users to throw it away.

     There is one word of type information within the symbol, so if the
     format supports symbol type information within symbols (for
     example, COFF, IEEE, Oasys) and the type is simple enough to fit
     within one word (nearly everything but aggregates), the
     information will be preserved.

@{i}relocation level@{ui}
     Each canonical BFD relocation record contains a pointer to the
     symbol to relocate to, the offset of the data to relocate, the
     section the data is in, and a pointer to a relocation type
     descriptor. Relocation is performed by passing messages through
     the relocation type descriptor and the symbol pointer. Therefore,
     relocations can be performed on output data using a relocation
     method that is only available in one of the input formats. For
     instance, Oasys provides a byte relocation format.  A relocation
     record requesting this relocation type would point indirectly to a
     routine to perform this, so the relocation may be performed on a
     byte being written to a 68k COFF file, even though 68k COFF has no
     such relocation type.

@{i}line numbers@{ui}
     Object formats can contain, for debugging purposes, some form of
     mapping between symbols, source line numbers, and addresses in the
     output file.  These addresses have to be relocated along with the
     symbol information.  Each symbol with an associated list of line
     number records points to the first record of the list.  The head
     of a line number list consists of a pointer to the symbol, which
     allows finding out the address of the function whose line number
     is being described. The rest of the list is made up of pairs:
     offsets into the section and line numbers. Any format which can
     simply derive this information can pass it successfully between
     formats (COFF, IEEE and Oasys).


@endnode

@node "Reporting Bugs" "ld.guide/Reporting Bugs"
@next "MRI"
@prev "BFD"
@toc "Main"

Reporting Bugs
**************

   Your bug reports play an essential role in making @{b}ld@{ub} reliable.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  But in any case the principal function of a bug report
is to help the entire community by making the next version of @{b}ld@{ub} work
better.  Bug reports are your contribution to the maintenance of @{b}ld@{ub}.

   In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.


 @{" Bug Criteria               " link "Bug Criteria"}  Have you found a bug?
 @{" Bug Reporting              " link "Bug Reporting"}  How to report bugs


@endnode

@node "Bug Criteria" "ld.guide/Bug Criteria"
@next "Bug Reporting"
@toc "Reporting Bugs"

Have you found a bug?
=====================

   If you are not sure whether you have found a bug, here are some
guidelines:

   * If the linker gets a fatal signal, for any input whatever, that is
     a @{b}ld@{ub} bug.  Reliable linkers never crash.

   * If @{b}ld@{ub} produces an error message for valid input, that is a bug.

   * If @{b}ld@{ub} does not produce an error message for invalid input, that
     may be a bug.  In the general case, the linker can not verify that
     object files are correct.

   * If you are an experienced user of linkers, your suggestions for
     improvement of @{b}ld@{ub} are welcome in any case.


@endnode

@node "Bug Reporting" "ld.guide/Bug Reporting"
@prev "Bug Criteria"
@toc "Reporting Bugs"

How to report bugs
==================

   A number of companies and individuals offer support for GNU
products.  If you obtained @{b}ld@{ub} from a support organization, we recommend
you contact that organization first.

   You can find contact information for many support companies and
individuals in the file @{b}etc/SERVICE@{ub} in the GNU Emacs distribution.

   In any event, we also recommend that you send bug reports for @{b}ld@{ub} to
@{b}bug-gnu-utils@prep.ai.mit.edu@{ub}.

   The fundamental principle of reporting bugs usefully is this: @{b}report
all the facts@{ub}.  If you are not sure whether to state a fact or leave it
out, state it!

   Often people omit facts because they think they know what causes the
problem and assume that some details do not matter.  Thus, you might
assume that the name of a symbol you use in an example does not matter.
Well, probably it does not, but one cannot be sure.  Perhaps the bug is
a stray memory reference which happens to fetch from the location where
that name is stored in memory; perhaps, if the name were different, the
contents of that location would fool the linker into doing the right
thing despite the bug.  Play it safe and give a specific, complete
example.  That is the easiest thing for you to do, and the most helpful.

   Keep in mind that the purpose of a bug report is to enable us to fix
the bug if it is new to us.  Therefore, always write your bug reports
on the assumption that the bug has not been reported previously.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  Those bug reports are useless, and we urge everyone to @{i}refuse
to respond to them@{ui} except to chide the sender to report bugs properly.

   To enable us to fix the bug, you should include all these things:

   * The version of @{b}ld@{ub}.  @{b}ld@{ub} announces it if you start it with the
     @{b}--version@{ub} argument.

     Without this, we will not know whether there is any point in
     looking for the bug in the current version of @{b}ld@{ub}.

   * Any patches you may have applied to the @{b}ld@{ub} source, including any
     patches made to the @{b}BFD@{ub} library.

   * The type of machine you are using, and the operating system name
     and version number.

   * What compiler (and its version) was used to compile @{b}ld@{ub}--e.g.
     "@{b}gcc-2.7@{ub}".

   * The command arguments you gave the linker to link your example and
     observe the bug.  To guarantee you will not omit something
     important, list them all.  A copy of the Makefile (or the output
     from make) is sufficient.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we might not encounter the bug.

   * A complete input file, or set of input files, that will reproduce
     the bug.  It is generally most helpful to send the actual object
     files, uuencoded if necessary to get them through the mail system.
     Making them available for anonymous FTP is not as good, but may
     be the only reasonable choice for large object files.

     If the source files were assembled using @{b}gas@{ub} or compiled using
     @{b}gcc@{ub}, then it may be OK to send the source files rather than the
     object files.  In this case, be sure to say exactly what version of
     @{b}gas@{ub} or @{b}gcc@{ub} was used to produce the object files.  Also say how @{b}gas@{ub}
     or @{b}gcc@{ub} were configured.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "It gets a fatal signal."

     Of course, if the bug is that @{b}ld@{ub} gets a fatal signal, then we will
     certainly notice it.  But if the bug is incorrect output, we might
     not notice unless it is glaringly wrong.  You might as well not
     give us a chance to make a mistake.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of @{b}ld@{ub} is out of synch, or you have encountered
     a bug in the C library on your system.  (This has happened!)  Your
     copy might crash and ours would not.  If you told us to expect a
     crash, then when ours fails to crash, we would know that the bug
     was not happening for us.  If you had not told us to expect a
     crash, then we would not be able to draw any conclusion from our
     observations.

   * If you wish to suggest changes to the @{b}ld@{ub} source, send us context
     diffs, as generated by @{b}diff@{ub} with the @{b}-u@{ub}, @{b}-c@{ub}, or @{b}-p@{ub} option.  Always
     send diffs from the old file to the new file.  If you even discuss
     something in the @{b}ld@{ub} source, refer to it by context, not by line
     number.

     The line numbers in our development sources will not match those
     in your sources.  Your line numbers would convey no useful
     information to us.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  We recommend that you save your time for something else.

     Of course, if you can find a simpler example to report @{i}instead@{ui} of
     the original one, that is a convenience for us.  Errors in the
     output will be easier to spot, running under the debugger will take
     less time, and so on.

     However, simplification is not vital; if you do not want to do
     this, report the bug anyway and send us the entire test case you
     used.

   * A patch for the bug.

     A patch for the bug does help us if it is a good one.  But do not
     omit the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems
     with your patch and decide to fix the problem another way, or we
     might not understand it at all.

     Sometimes with a program as complicated as @{b}ld@{ub} it is very hard to
     construct an example that will make the program follow a certain
     path through the code.  If you do not send us the example, we will
     not be able to construct one, so we will not be able to verify
     that the bug is fixed.

     And if we cannot understand what bug you are trying to fix, or why
     your patch should be an improvement, we will not install it.  A
     test case will help us to understand.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even we cannot guess right about
     such things without first using the debugger to find the facts.


@endnode

@node "MRI" "ld.guide/MRI"
@next "Index"
@prev "Reporting Bugs"
@toc "Main"

MRI Compatible Script Files
***************************

   To aid users making the transition to GNU @{b}ld@{ub} from the MRI linker, @{b}ld@{ub}
can use MRI compatible linker scripts as an alternative to the more
general-purpose linker scripting language described in
@{"Command Language" link "Commands"}.  MRI compatible linker scripts have a much simpler
command set than the scripting language otherwise used with @{b}ld@{ub}.  GNU @{b}ld@{ub}
supports the most commonly used MRI linker commands; these commands are
described here.

   In general, MRI scripts aren't of much use with the @{b}a.out@{ub} object
file format, since it only has three sections and MRI scripts lack some
features to make use of them.

   You can specify a file containing an MRI-compatible script using the
@{b}-c@{ub} command-line option.

   Each command in an MRI-compatible script occupies its own line; each
command line starts with the keyword that identifies the command (though
blank lines are also allowed for punctuation).  If a line of an
MRI-compatible script begins with an unrecognized keyword, @{b}ld@{ub} issues a
warning message, but continues processing the script.

   Lines beginning with @{b}*@{ub} are comments.

   You can write these commands using all upper-case letters, or all
lower case; for example, @{b}chip@{ub} is the same as @{b}CHIP@{ub}.  The following list
shows only the upper-case form of each command.

@{b}ABSOLUTE SECNAME@{ub}
@{b}ABSOLUTE SECNAME, SECNAME, ... SECNAME@{ub}
     Normally, @{b}ld@{ub} includes in the output file all sections from all the
     input files.  However, in an MRI-compatible script, you can use the
     @{b}ABSOLUTE@{ub} command to restrict the sections that will be present in
     your output program.  If the @{b}ABSOLUTE@{ub} command is used at all in a
     script, then only the sections named explicitly in @{b}ABSOLUTE@{ub}
     commands will appear in the linker output.  You can still use other
     input sections (whatever you select on the command line, or using
     @{b}LOAD@{ub}) to resolve addresses in the output file.

@{b}ALIAS OUT-SECNAME, IN-SECNAME@{ub}
     Use this command to place the data from input section IN-SECNAME
     in a section called OUT-SECNAME in the linker output file.

     IN-SECNAME may be an integer.

@{b}ALIGN SECNAME = EXPRESSION@{ub}
     Align the section called SECNAME to EXPRESSION.  The EXPRESSION
     should be a power of two.

@{b}BASE EXPRESSION@{ub}
     Use the value of EXPRESSION as the lowest address (other than
     absolute addresses) in the output file.

@{b}CHIP EXPRESSION@{ub}
@{b}CHIP EXPRESSION, EXPRESSION@{ub}
     This command does nothing; it is accepted only for compatibility.

@{b}END@{ub}
     This command does nothing whatever; it's only accepted for
     compatibility.

@{b}FORMAT OUTPUT-FORMAT@{ub}
     Similar to the @{b}OUTPUT_FORMAT@{ub} command in the more general linker
     language, but restricted to one of these output formats:

       1. S-records, if OUTPUT-FORMAT is @{b}S@{ub}

       2. IEEE, if OUTPUT-FORMAT is @{b}IEEE@{ub}

       3. COFF (the @{b}coff-m68k@{ub} variant in BFD), if OUTPUT-FORMAT is @{b}COFF@{ub}

@{b}LIST ANYTHING...@{ub}
     Print (to the standard output file) a link map, as produced by the
     @{b}ld@{ub} command-line option @{b}-M@{ub}.

     The keyword @{b}LIST@{ub} may be followed by anything on the same line,
     with no change in its effect.

@{b}LOAD FILENAME@{ub}
@{b}LOAD FILENAME, FILENAME, ... FILENAME@{ub}
     Include one or more object file FILENAME in the link; this has the
     same effect as specifying FILENAME directly on the @{b}ld@{ub} command line.

@{b}NAME OUTPUT-NAME@{ub}
     OUTPUT-NAME is the name for the program produced by @{b}ld@{ub}; the
     MRI-compatible command @{b}NAME@{ub} is equivalent to the command-line
     option @{b}-o@{ub} or the general script language command @{b}OUTPUT@{ub}.

@{b}ORDER SECNAME, SECNAME, ... SECNAME@{ub}
@{b}ORDER SECNAME SECNAME SECNAME@{ub}
     Normally, @{b}ld@{ub} orders the sections in its output file in the order
     in which they first appear in the input files.  In an
     MRI-compatible script, you can override this ordering with the
     @{b}ORDER@{ub} command.  The sections you list with @{b}ORDER@{ub} will appear first
     in your output file, in the order specified.

@{b}PUBLIC NAME=EXPRESSION@{ub}
@{b}PUBLIC NAME,EXPRESSION@{ub}
@{b}PUBLIC NAME EXPRESSION@{ub}
     Supply a value (EXPRESSION) for external symbol NAME used in the
     linker input files.

@{b}SECT SECNAME, EXPRESSION@{ub}
@{b}SECT SECNAME=EXPRESSION@{ub}
@{b}SECT SECNAME EXPRESSION@{ub}
     You can use any of these three forms of the @{b}SECT@{ub} command to
     specify the start address (EXPRESSION) for section SECNAME.  If
     you have more than one @{b}SECT@{ub} statement for the same SECNAME, only
     the @{i}first@{ui} sets the start address.


@endnode

@node "Index" "ld.guide/Index"
@prev "MRI"
@toc "Main"

Index
*****

@index "Index"



 @{" `                                        " link "Symbols"}   Symbols
 @{" *( COMMON )                              " link "Section Placement"}   Section Placement
 @{" *(SECTION)                               " link "Section Placement"}   Section Placement
 @{" -(                                       " link "Options"}   Options
 @{" -AARCH                                   " link "Options"}   Options
 @{" -aKEYWORD                                " link "Options"}   Options
 @{" -architecture=ARCH                       " link "Options"}   Options
 @{" -assert KEYWORD                          " link "Options"}   Options
 @{" -auxiliary                               " link "Options"}   Options
 @{" -b FORMAT                                " link "Options"}   Options
 @{" -Bdynamic                                " link "Options"}   Options
 @{" -Bshareable                              " link "Options"}   Options
 @{" -Bstatic                                 " link "Options"}   Options
 @{" -Bsymbolic                               " link "Options"}   Options
 @{" -c MRI-CMDFILE                           " link "Options"}   Options
 @{" -call_shared                             " link "Options"}   Options
 @{" -cref                                    " link "Options"}   Options
 @{" -d                                       " link "Options"}   Options
 @{" -dc                                      " link "Options"}   Options
 @{" -defsym SYMBOL=EXP                       " link "Options"}   Options
 @{" -discard-all                             " link "Options"}   Options
 @{" -discard-locals                          " link "Options"}   Options
 @{" -dn                                      " link "Options"}   Options
 @{" -dp                                      " link "Options"}   Options
 @{" -dy                                      " link "Options"}   Options
 @{" -dynamic-linker FILE                     " link "Options"}   Options
 @{" -E                                       " link "Options"}   Options
 @{" -e ENTRY                                 " link "Options"}   Options
 @{" -EB                                      " link "Options"}   Options
 @{" -EL                                      " link "Options"}   Options
 @{" -embedded-relocs                         " link "Options"}   Options
 @{" -entry=ENTRY                             " link "Options"}   Options
 @{" -export-dynamic                          " link "Options"}   Options
 @{" -f                                       " link "Options"}   Options
 @{" -F                                       " link "Options"}   Options
 @{" -filter                                  " link "Options"}   Options
 @{" -force-exe-suffix                        " link "Options"}   Options
 @{" -format=FORMAT                           " link "Options"}   Options
 @{" -G                                       " link "Options"}   Options
 @{" -g                                       " link "Options"}   Options
 @{" -gpsize                                  " link "Options"}   Options
 @{" -help                                    " link "Options"}   Options
 @{" -hNAME                                   " link "Options"}   Options
 @{" -i                                       " link "Options"}   Options
 @{" -just-symbols=FILE                       " link "Options"}   Options
 @{" -lARCHIVE                                " link "Options"}   Options
 @{" -LDIR                                    " link "Options"}   Options
 @{" -library-path=DIR                        " link "Options"}   Options
 @{" -library=ARCHIVE                         " link "Options"}   Options
 @{" -M                                       " link "Options"}   Options
 @{" -m EMULATION                             " link "Options"}   Options
 @{" -Map                                     " link "Options"}   Options
 @{" -mri-script=MRI-CMDFILE                  " link "Options"}   Options
 @{" -N                                       " link "Options"}   Options
 @{" -n                                       " link "Options"}   Options
 @{" -nmagic                                  " link "Options"}   Options
 @{" -no-keep-memory                          " link "Options"}   Options
 @{" -no-whole-archive                        " link "Options"}   Options
 @{" -noinhibit-exec                          " link "Options"}   Options
 @{" -non_shared                              " link "Options"}   Options
 @{" -o OUTPUT                                " link "Options"}   Options
 @{" -oformat                                 " link "Options"}   Options
 @{" -omagic                                  " link "Options"}   Options
 @{" -output=OUTPUT                           " link "Options"}   Options
 @{" -print-map                               " link "Options"}   Options
 @{" -qmagic                                  " link "Options"}   Options
 @{" -Qy                                      " link "Options"}   Options
 @{" -r                                       " link "Options"}   Options
 @{" -R FILE                                  " link "Options"}   Options
 @{" -relax                                   " link "Options"}   Options
 @{" -relax on i960                           " link "i960"}   i960
 @{" -relocateable                            " link "Options"}   Options
 @{" -rpath                                   " link "Options"}   Options
 @{" -rpath-link                              " link "Options"}   Options
 @{" -S                                       " link "Options"}   Options
 @{" -s                                       " link "Options"}   Options
 @{" -script=SCRIPT                           " link "Options"}   Options
 @{" -shared                                  " link "Options"}   Options
 @{" -soname=NAME                             " link "Options"}   Options
 @{" -sort-common                             " link "Options"}   Options
 @{" -split-by-file                           " link "Options"}   Options
 @{" -split-by-reloc                          " link "Options"}   Options
 @{" -static                                  " link "Options"}   Options
 @{" -stats                                   " link "Options"}   Options
 @{" -strip-all                               " link "Options"}   Options
 @{" -strip-debug                             " link "Options"}   Options
 @{" -t                                       " link "Options"}   Options
 @{" -T SCRIPT                                " link "Options"}   Options
 @{" -Tbss ORG                                " link "Options"}   Options
 @{" -Tdata ORG                               " link "Options"}   Options
 @{" -trace                                   " link "Options"}   Options
 @{" -trace-symbol=SYMBOL                     " link "Options"}   Options
 @{" -traditional-format                      " link "Options"}   Options
 @{" -Ttext ORG                               " link "Options"}   Options
 @{" -u SYMBOL                                " link "Options"}   Options
 @{" -undefined=SYMBOL                        " link "Options"}   Options
 @{" -Ur                                      " link "Options"}   Options
 @{" -V                                       " link "Options"}   Options
 @{" -v                                       " link "Options"}   Options
 @{" -verbose                                 " link "Options"}   Options
 @{" -version                                 " link "Options"}   Options
 @{" -version-script=VERSION-SCRIPTFILE       " link "Options"}   Options
 @{" -warn-comon                              " link "Options"}   Options
 @{" -warn-constructors                       " link "Options"}   Options
 @{" -warn-multiple-gp                        " link "Options"}   Options
 @{" -warn-once                               " link "Options"}   Options
 @{" -warn-section-align                      " link "Options"}   Options
 @{" -whole-archive                           " link "Options"}   Options
 @{" -wrap                                    " link "Options"}   Options
 @{" -X                                       " link "Options"}   Options
 @{" -x                                       " link "Options"}   Options
 @{" -Y PATH                                  " link "Options"}   Options
 @{" -y SYMBOL                                " link "Options"}   Options
 @{" -z KEYWORD                               " link "Options"}   Options
 @{" .                                        " link "Location Counter"}   Location Counter
 @{" 0x                                       " link "Integers"}   Integers
 @{" :PHDR                                    " link "Section Options"}   Section Options
 @{" ;                                        " link "Assignment"}   Assignment
 @{" =FILL                                    " link "Section Options"}   Section Options
 @{" >REGION                                  " link "Section Options"}   Section Options
 @{" [SECTION...], not supported              " link "Section Placement"}   Section Placement
 @{" ABSOLUTE (MRI)                           " link "MRI"}   MRI
 @{" absolute and relocatable symbols         " link "Assignment"}   Assignment
 @{" ABSOLUTE(EXP)                            " link "Arithmetic Functions"}   Arithmetic Functions
 @{" ADDR(SECTION)                            " link "Arithmetic Functions"}   Arithmetic Functions
 @{" ALIAS (MRI)                              " link "MRI"}   MRI
 @{" ALIGN (MRI)                              " link "MRI"}   MRI
 @{" ALIGN(EXP)                               " link "Arithmetic Functions"}   Arithmetic Functions
 @{" aligning sections                        " link "Section Options"}   Section Options
 @{" allocating memory                        " link "MEMORY"}   MEMORY
 @{" architectures                            " link "Options"}   Options
 @{" archive files, from cmd line             " link "Options"}   Options
 @{" arithmetic                               " link "Expressions"}   Expressions
 @{" arithmetic operators                     " link "Operators"}   Operators
 @{" assignment in scripts                    " link "Assignment"}   Assignment
 @{" assignment, in section defn              " link "Section Data Expressions"}   Section Data Expressions
 @{" AT ( LDADR )                             " link "Section Options"}   Section Options
 @{" back end                                 " link "BFD"}   BFD
 @{" BASE (MRI)                               " link "MRI"}   MRI
 @{" BFD canonical format                     " link "Canonical format"}   Canonical format
 @{" BFD requirements                         " link "BFD"}   BFD
 @{" big-endian objects                       " link "Options"}   Options
 @{" binary input files                       " link "Option Commands"}   Option Commands
 @{" binary input format                      " link "Options"}   Options
 @{" BLOCK(ALIGN)                             " link "Section Options"}   Section Options
 @{" bug criteria                             " link "Bug Criteria"}   Bug Criteria
 @{" bug reports                              " link "Bug Reporting"}   Bug Reporting
 @{" bugs in ld                               " link "Reporting Bugs"}   Reporting Bugs
 @{" BYTE(EXPRESSION)                         " link "Section Data Expressions"}   Section Data Expressions
 @{" C++ constructors, arranging in link      " link "Option Commands"}   Option Commands
 @{" CHIP (MRI)                               " link "MRI"}   MRI
 @{" combining symbols, warnings on           " link "Options"}   Options
 @{" command files                            " link "Commands"}   Commands
 @{" command line                             " link "Options"}   Options
 @{" commands, fundamental                    " link "Scripts"}   Scripts
 @{" comments                                 " link "Scripts"}   Scripts
 @{" common allocation <1>                    " link "Option Commands"}   Option Commands
 @{" common allocation                        " link "Options"}   Options
 @{" commons in output                        " link "Section Placement"}   Section Placement
 @{" compatibility, MRI                       " link "Options"}   Options
 @{" CONSTRUCTORS                             " link "Option Commands"}   Option Commands
 @{" constructors                             " link "Options"}   Options
 @{" constructors, arranging in link          " link "Option Commands"}   Option Commands
 @{" contents of a section                    " link "Section Placement"}   Section Placement
 @{" crash of linker                          " link "Bug Criteria"}   Bug Criteria
 @{" CREATE_OBJECT_SYMBOLS                    " link "Section Data Expressions"}   Section Data Expressions
 @{" cross reference table                    " link "Options"}   Options
 @{" cross references                         " link "Option Commands"}   Option Commands
 @{" current output location                  " link "Location Counter"}   Location Counter
 @{" dbx                                      " link "Options"}   Options
 @{" decimal integers                         " link "Integers"}   Integers
 @{" default input format                     " link "Environment"}   Environment
 @{" DEFINED(SYMBOL)                          " link "Arithmetic Functions"}   Arithmetic Functions
 @{" deleting local symbols                   " link "Options"}   Options
 @{" direct output                            " link "Section Data Expressions"}   Section Data Expressions
 @{" discontinuous memory                     " link "MEMORY"}   MEMORY
 @{" dot                                      " link "Location Counter"}   Location Counter
 @{" dynamic linker, from command line        " link "Options"}   Options
 @{" dynamic symbol table                     " link "Options"}   Options
 @{" ELF program headers                      " link "PHDRS"}   PHDRS
 @{" emulation                                " link "Options"}   Options
 @{" END (MRI)                                " link "MRI"}   MRI
 @{" endianness                               " link "Options"}   Options
 @{" entry point, defaults                    " link "Entry Point"}   Entry Point
 @{" entry point, from command line           " link "Options"}   Options
 @{" ENTRY(SYMBOL)                            " link "Entry Point"}   Entry Point
 @{" error on valid input                     " link "Bug Criteria"}   Bug Criteria
 @{" expression evaluation order              " link "Evaluation"}   Evaluation
 @{" expression syntax                        " link "Expressions"}   Expressions
 @{" expression, absolute                     " link "Arithmetic Functions"}   Arithmetic Functions
 @{" expressions in a section                 " link "Section Data Expressions"}   Section Data Expressions
 @{" fatal signal                             " link "Bug Criteria"}   Bug Criteria
 @{" FILENAME                                 " link "Section Placement"}   Section Placement
 @{" filename symbols                         " link "Section Data Expressions"}   Section Data Expressions
 @{" FILENAME(SECTION)                        " link "Section Placement"}   Section Placement
 @{" files and sections, section defn         " link "Section Placement"}   Section Placement
 @{" files, including in output sections      " link "Section Placement"}   Section Placement
 @{" fill pattern, entire section             " link "Section Options"}   Section Options
 @{" FILL(EXPRESSION)                         " link "Section Data Expressions"}   Section Data Expressions
 @{" first input file                         " link "Option Commands"}   Option Commands
 @{" first instruction                        " link "Entry Point"}   Entry Point
 @{" FLOAT                                    " link "Option Commands"}   Option Commands
 @{" FORCE_COMMON_ALLOCATION                  " link "Option Commands"}   Option Commands
 @{" FORMAT (MRI)                             " link "MRI"}   MRI
 @{" format, output file                      " link "Option Commands"}   Option Commands
 @{" functions in expression language         " link "Arithmetic Functions"}   Arithmetic Functions
 @{" fundamental script commands              " link "Scripts"}   Scripts
 @{" GNU linker                               " link "Overview"}   Overview
 @{" GNUTARGET <1>                            " link "Option Commands"}   Option Commands
 @{" GNUTARGET                                " link "Environment"}   Environment
 @{" GROUP ( FILES )                          " link "Option Commands"}   Option Commands
 @{" grouping input files                     " link "Option Commands"}   Option Commands
 @{" groups of archives                       " link "Options"}   Options
 @{" H8-300 support                           " link "H8-300"}   H8-300
 @{" header size                              " link "Arithmetic Functions"}   Arithmetic Functions
 @{" help                                     " link "Options"}   Options
 @{" hexadecimal integers                     " link "Integers"}   Integers
 @{" holes                                    " link "Location Counter"}   Location Counter
 @{" holes, filling                           " link "Section Data Expressions"}   Section Data Expressions
 @{" i960 support                             " link "i960"}   i960
 @{" INCLUDE FILENAME                         " link "Option Commands"}   Option Commands
 @{" including a linker script                " link "Option Commands"}   Option Commands
 @{" including an entire archive              " link "Options"}   Options
 @{" incremental link                         " link "Options"}   Options
 @{" INPUT ( FILES )                          " link "Option Commands"}   Option Commands
 @{" input file format                        " link "Option Commands"}   Option Commands
 @{" input filename symbols                   " link "Section Data Expressions"}   Section Data Expressions
 @{" input files, displaying                  " link "Options"}   Options
 @{" input files, section defn                " link "Section Placement"}   Section Placement
 @{" input format                             " link "Options"}   Options
 @{" input sections to output section         " link "Section Placement"}   Section Placement
 @{" integer notation                         " link "Integers"}   Integers
 @{" integer suffixes                         " link "Integers"}   Integers
 @{" internal object-file format              " link "Canonical format"}   Canonical format
 @{" invalid input                            " link "Bug Criteria"}   Bug Criteria
 @{" K and M integer suffixes                 " link "Integers"}   Integers
 @{" l =                                      " link "MEMORY"}   MEMORY
 @{" L, deleting symbols beginning            " link "Options"}   Options
 @{" layout of output file                    " link "Scripts"}   Scripts
 @{" lazy evaluation                          " link "Evaluation"}   Evaluation
 @{" ld bugs, reporting                       " link "Bug Reporting"}   Bug Reporting
 @{" len =                                    " link "MEMORY"}   MEMORY
 @{" LENGTH =                                 " link "MEMORY"}   MEMORY
 @{" link map                                 " link "Options"}   Options
 @{" link-time runtime library search path    " link "Options"}   Options
 @{" linker crash                             " link "Bug Criteria"}   Bug Criteria
 @{" LIST (MRI)                               " link "MRI"}   MRI
 @{" little-endian objects                    " link "Options"}   Options
 @{" LOAD (MRI)                               " link "MRI"}   MRI
 @{" load address, specifying                 " link "Section Options"}   Section Options
 @{" LOADADDR(SECTION)                        " link "Arithmetic Functions"}   Arithmetic Functions
 @{" loading, preventing                      " link "Section Options"}   Section Options
 @{" local symbols, deleting                  " link "Options"}   Options
 @{" location counter                         " link "Location Counter"}   Location Counter
 @{" LONG(EXPRESSION)                         " link "Section Data Expressions"}   Section Data Expressions
 @{" M and K integer suffixes                 " link "Integers"}   Integers
 @{" machine architecture, output             " link "Option Commands"}   Option Commands
 @{" machine dependencies                     " link "Machine Dependent"}   Machine Dependent
 @{" MAX                                      " link "Arithmetic Functions"}   Arithmetic Functions
 @{" MEMORY                                   " link "MEMORY"}   MEMORY
 @{" memory region attributes                 " link "MEMORY"}   MEMORY
 @{" memory regions and sections              " link "Section Options"}   Section Options
 @{" memory usage                             " link "Options"}   Options
 @{" MIN                                      " link "Arithmetic Functions"}   Arithmetic Functions
 @{" MIPS embedded PIC code                   " link "Options"}   Options
 @{" MRI compatibility                        " link "MRI"}   MRI
 @{" NAME (MRI)                               " link "MRI"}   MRI
 @{" names                                    " link "Symbols"}   Symbols
 @{" naming memory regions                    " link "MEMORY"}   MEMORY
 @{" naming output sections                   " link "Section Definition"}   Section Definition
 @{" naming the output file <1>               " link "Options"}   Options
 @{" naming the output file                   " link "Option Commands"}   Option Commands
 @{" negative integers                        " link "Integers"}   Integers
 @{" NEXT(EXP)                                " link "Arithmetic Functions"}   Arithmetic Functions
 @{" NMAGIC                                   " link "Options"}   Options
 @{" NOCROSSREFS ( SECTIONS )                 " link "Option Commands"}   Option Commands
 @{" NOFLOAT                                  " link "Option Commands"}   Option Commands
 @{" NOLOAD                                   " link "Section Options"}   Section Options
 @{" Non constant expression                  " link "Assignment"}   Assignment
 @{" o =                                      " link "MEMORY"}   MEMORY
 @{" objdump -i                               " link "BFD"}   BFD
 @{" object file management                   " link "BFD"}   BFD
 @{" object files                             " link "Options"}   Options
 @{" object formats available                 " link "BFD"}   BFD
 @{" object size                              " link "Options"}   Options
 @{" octal integers                           " link "Integers"}   Integers
 @{" OMAGIC                                   " link "Options"}   Options
 @{" opening object files                     " link "BFD outline"}   BFD outline
 @{" Operators for arithmetic                 " link "Operators"}   Operators
 @{" options                                  " link "Options"}   Options
 @{" ORDER (MRI)                              " link "MRI"}   MRI
 @{" org =                                    " link "MEMORY"}   MEMORY
 @{" ORIGIN =                                 " link "MEMORY"}   MEMORY
 @{" OUTPUT ( FILENAME )                      " link "Option Commands"}   Option Commands
 @{" output file after errors                 " link "Options"}   Options
 @{" output file layout                       " link "Scripts"}   Scripts
 @{" OUTPUT_ARCH ( BFDNAME )                  " link "Option Commands"}   Option Commands
 @{" OUTPUT_FORMAT ( BFDNAME )                " link "Option Commands"}   Option Commands
 @{" OVERLAY                                  " link "Overlays"}   Overlays
 @{" overlays                                 " link "Overlays"}   Overlays
 @{" partial link                             " link "Options"}   Options
 @{" path for libraries                       " link "Option Commands"}   Option Commands
 @{" PHDRS                                    " link "PHDRS"}   PHDRS
 @{" precedence in expressions                " link "Operators"}   Operators
 @{" prevent unnecessary loading              " link "Section Options"}   Section Options
 @{" program headers                          " link "PHDRS"}   PHDRS
 @{" program headers and sections             " link "Section Options"}   Section Options
 @{" provide                                  " link "Assignment"}   Assignment
 @{" PUBLIC (MRI)                             " link "MRI"}   MRI
 @{" QUAD(EXPRESSION)                         " link "Section Data Expressions"}   Section Data Expressions
 @{" quoted symbol names                      " link "Symbols"}   Symbols
 @{" read-only text                           " link "Options"}   Options
 @{" read-write from cmd line                 " link "Options"}   Options
 @{" regions of memory                        " link "MEMORY"}   MEMORY
 @{" relaxing addressing modes                " link "Options"}   Options
 @{" relaxing on H8-300                       " link "H8-300"}   H8-300
 @{" relaxing on i960                         " link "i960"}   i960
 @{" relocatable and absolute symbols         " link "Assignment"}   Assignment
 @{" relocatable output                       " link "Options"}   Options
 @{" reporting bugs in ld                     " link "Reporting Bugs"}   Reporting Bugs
 @{" requirements for BFD                     " link "BFD"}   BFD
 @{" retaining specified symbols              " link "Options"}   Options
 @{" rounding up location counter             " link "Arithmetic Functions"}   Arithmetic Functions
 @{" runtime library name                     " link "Options"}   Options
 @{" runtime library search path              " link "Options"}   Options
 @{" scaled integers                          " link "Integers"}   Integers
 @{" script files                             " link "Options"}   Options
 @{" search directory, from cmd line          " link "Options"}   Options
 @{" search path, libraries                   " link "Option Commands"}   Option Commands
 @{" SEARCH_DIR ( PATH )                      " link "Option Commands"}   Option Commands
 @{" SECT (MRI)                               " link "MRI"}   MRI
 @{" section address <1>                      " link "Arithmetic Functions"}   Arithmetic Functions
 @{" section address                          " link "Section Options"}   Section Options
 @{" section alignment                        " link "Section Options"}   Section Options
 @{" section alignment, warnings on           " link "Options"}   Options
 @{" section definition                       " link "Section Definition"}   Section Definition
 @{" section defn, full syntax                " link "Section Options"}   Section Options
 @{" section fill pattern                     " link "Section Options"}   Section Options
 @{" section load address                     " link "Arithmetic Functions"}   Arithmetic Functions
 @{" section size                             " link "Arithmetic Functions"}   Arithmetic Functions
 @{" section start                            " link "Section Options"}   Section Options
 @{" section, assigning to memory region      " link "Section Options"}   Section Options
 @{" section, assigning to program header     " link "Section Options"}   Section Options
 @{" SECTIONS                                 " link "SECTIONS"}   SECTIONS
 @{" segment origins, cmd line                " link "Options"}   Options
 @{" semicolon                                " link "Assignment"}   Assignment
 @{" shared libraries                         " link "Options"}   Options
 @{" SHORT(EXPRESSION)                        " link "Section Data Expressions"}   Section Data Expressions
 @{" SIZEOF(SECTION)                          " link "Arithmetic Functions"}   Arithmetic Functions
 @{" SIZEOF_HEADERS                           " link "Arithmetic Functions"}   Arithmetic Functions
 @{" sizeof_headers                           " link "Arithmetic Functions"}   Arithmetic Functions
 @{" specify load address                     " link "Section Options"}   Section Options
 @{" standard Unix system                     " link "Options"}   Options
 @{" start address, section                   " link "Section Options"}   Section Options
 @{" start of execution                       " link "Entry Point"}   Entry Point
 @{" STARTUP ( FILENAME )                     " link "Option Commands"}   Option Commands
 @{" strip all symbols                        " link "Options"}   Options
 @{" strip debugger symbols                   " link "Options"}   Options
 @{" stripping all but some symbols           " link "Options"}   Options
 @{" suffixes for integers                    " link "Integers"}   Integers
 @{" SYMBOL = EXPRESSION ;                    " link "Section Data Expressions"}   Section Data Expressions
 @{" symbol defaults                          " link "Arithmetic Functions"}   Arithmetic Functions
 @{" symbol definition, scripts               " link "Assignment"}   Assignment
 @{" SYMBOL F= EXPRESSION ;                   " link "Section Data Expressions"}   Section Data Expressions
 @{" symbol names                             " link "Symbols"}   Symbols
 @{" symbol tracing                           " link "Options"}   Options
 @{" symbol versions                          " link "Version Script"}   Version Script
 @{" symbol-only input                        " link "Options"}   Options
 @{" symbols, from command line               " link "Options"}   Options
 @{" symbols, relocatable and absolute        " link "Assignment"}   Assignment
 @{" symbols, retaining selectively           " link "Options"}   Options
 @{" synthesizing linker                      " link "Options"}   Options
 @{" synthesizing on H8-300                   " link "H8-300"}   H8-300
 @{" TARGET ( FORMAT )                        " link "Option Commands"}   Option Commands
 @{" traditional format                       " link "Options"}   Options
 @{" unallocated address, next                " link "Arithmetic Functions"}   Arithmetic Functions
 @{" undefined symbol                         " link "Options"}   Options
 @{" undefined symbols, warnings on           " link "Options"}   Options
 @{" uninitialized data                       " link "Section Placement"}   Section Placement
 @{" unspecified memory                       " link "Section Data Expressions"}   Section Data Expressions
 @{" usage                                    " link "Options"}   Options
 @{" variables, defining                      " link "Assignment"}   Assignment
 @{" verbose                                  " link "Options"}   Options
 @{" version                                  " link "Options"}   Options
 @{" version script                           " link "Version Script"}   Version Script
 @{" version script, symbol versions          " link "Options"}   Options
 @{" VERSION {script text}                    " link "Version Script"}   Version Script
 @{" versions of symbols                      " link "Version Script"}   Version Script
 @{" warnings, on combining symbols           " link "Options"}   Options
 @{" warnings, on section alignment           " link "Options"}   Options
 @{" warnings, on undefined symbols           " link "Options"}   Options
 @{" what is this?                            " link "Overview"}   Overview

@endnode

