@database gcc.guide

@Master /gg-src/gg/egcs/gcc/gcc.texi

@Width 72


This is the AmigaGuide®  file gcc.guide, produced by Makeinfo-1.68 from 
the input file /gg-src/gg/egcs/gcc/gcc.texi.

INFO-DIR-SECTION Programming
START-INFO-DIR-ENTRY
* gcc: (gcc).                  The GNU C compiler.
END-INFO-DIR-ENTRY
   This file documents the use and the internals of the GNU compiler.

   Published by the Free Software Foundation 59 Temple Place - Suite 330
Boston, MA 02111-1307 USA

   Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998
Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "GNU General Public License" and "Funding
for Free Software" are included exactly as in the original, and
provided that the entire resulting derived work is distributed under
the terms of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "GNU General Public
License" and "Funding for Free Software", and this permission notice,
may be included in translations approved by the Free Software Foundation
instead of in the original English.

@node Main "gcc.guide"
@next "G++ and GCC"

Introduction
************

   This manual documents how to run, install and port the GNU compiler,
as well as its new features and incompatibilities, and how to report
bugs.  It corresponds to EGCS version 1.1.2.



 @{" G++ and GCC    " link "G++ and GCC"}  You can compile C or C++ programs.
 @{" Invoking GCC   " link "Invoking GCC"}  Command options supported by @{b}gcc@{ub}.
 @{" Installation   " link "Installation"}  How to configure, compile and install GNU CC.
 @{" C Extensions   " link "C Extensions"}  GNU extensions to the C language family.
 @{" C++ Extensions " link "C++ Extensions"}  GNU extensions to the C++ language.
 @{" Gcov           " link "Gcov"}  gcov: a GNU CC test coverage program.
 @{" Trouble        " link "Trouble"}  If you have trouble installing GNU CC.
 @{" Bugs           " link "Bugs"}  How, why and where to report bugs.
 @{" Service        " link "Service"}  How to find suppliers of support for GNU CC.
 @{" Contributing   " link "Contributing"}  How to contribute to testing and developing GNU CC.
 @{" VMS            " link "VMS"}  Using GNU CC on VMS.

 @{" Portability    " link "Portability"}  Goals of GNU CC's portability features.
 @{" Interface      " link "Interface"}  Function-call interface of GNU CC output.
 @{" Passes         " link "Passes"}  Order of passes, what they do, and what each file is for.
 @{" RTL            " link "RTL"}  The intermediate representation that most passes work on.
 @{" Machine Desc   " link "Machine Desc"}  How to write machine description instruction patterns.
 @{" Target Macros  " link "Target Macros"}  How to write the machine description C macros.
 @{" Config         " link "Config"}  Writing the @{b}xm-MACHINE.h@{ub} file.
 @{" Fragments      " link "Fragments"}  Writing the @{b}t-TARGET@{ub} and @{b}x-HOST@{ub} files.

 @{" Funding        " link "Funding"}  How to help assure funding for free software.
 @{" GNU-Linux      " link "GNU-Linux"}  Linux and the GNU Project

 @{" Copying        " link "Copying"}  GNU General Public License says
                     how you can copy and share GNU CC.
 @{" Contributors   " link "Contributors"}  People who have contributed to GNU CC.

 @{" Index          " link "Index"}  Index of concepts and symbol names.


@endnode

@node "G++ and GCC" "gcc.guide/G++ and GCC"
@next "Invoking GCC"
@prev "Main"
@toc "Main"

Compile C, C++, or Objective C
******************************

   The C, C++, and Objective C versions of the compiler are integrated;
the GNU C compiler can compile programs written in C, C++, or Objective
C.

   "GCC" is a common shorthand term for the GNU C compiler.  This is
both the most general name for the compiler, and the name used when the
emphasis is on compiling C programs.

   When referring to C++ compilation, it is usual to call the compiler
"G++".  Since there is only one compiler, it is also accurate to call
it "GCC" no matter what the language context; however, the term "G++"
is more useful when the emphasis is on compiling C++ programs.

   We use the name "GNU CC" to refer to the compilation system as a
whole, and more specifically to the language-independent part of the
compiler.  For example, we refer to the optimization options as
affecting the behavior of "GNU CC" or sometimes just "the compiler".

   Front ends for other languages, such as Ada 9X, Fortran, Modula-3,
and Pascal, are under development.  These front-ends, like that for
C++, are built in subdirectories of GNU CC and link to it.  The result
is an integrated compiler that can compile programs written in C, C++,
Objective C, or any of the languages for which you have installed front
ends.

   In this manual, we only discuss the options for the C, Objective-C,
and C++ compilers and those of the GNU CC core.  Consult the
documentation of the other front ends for the options to use when
compiling programs written in other languages.

   G++ is a @{i}compiler@{ui}, not merely a preprocessor.  G++ builds object
code directly from your C++ program source.  There is no intermediate C
version of the program.  (By contrast, for example, some other
implementations use a program that generates a C program from your C++
source.)  Avoiding an intermediate C representation of the program means
that you get better object code, and better debugging information.  The
GNU debugger, GDB, works with this information in the object code to
give you comprehensive C++ source-level editing capabilities (see
@{"C and C++" link "gdb.guide/C"}).


@endnode

@node "Invoking GCC" "gcc.guide/Invoking GCC"
@next "Installation"
@prev "G++ and GCC"
@toc "Main"

GNU CC Command Options
**********************

   When you invoke GNU CC, it normally does preprocessing, compilation,
assembly and linking.  The "overall options" allow you to stop this
process at an intermediate stage.  For example, the @{b}-c@{ub} option says not
to run the linker.  Then the output consists of object files output by
the assembler.

   Other options are passed on to one stage of processing.  Some options
control the preprocessor and others the compiler itself.  Yet other
options control the assembler and linker; most of these are not
documented here, since you rarely need to use any of them.

   Most of the command line options that you can use with GNU CC are
useful for C programs; when an option is only useful with another
language (usually C++), the explanation says so explicitly.  If the
description for a particular option does not mention a source language,
you can use that option with all supported languages.

   See @{"Compiling C++ Programs" link "Invoking G++"}, for a summary of special options for
compiling C++ programs.

   The @{b}gcc@{ub} program accepts options and file names as operands.  Many
options have multiletter names; therefore multiple single-letter options
may @{i}not@{ui} be grouped: @{b}-dr@{ub} is very different from @{b}-d -r@{ub}.

   You can mix options and other arguments.  For the most part, the
order you use doesn't matter.  Order does matter when you use several
options of the same kind; for example, if you specify @{b}-L@{ub} more than once,
the directories are searched in the order specified.

   Many options have long names starting with @{b}-f@{ub} or with @{b}-W@{ub}--for
example, @{b}-fforce-mem@{ub}, @{b}-fstrength-reduce@{ub}, @{b}-Wformat@{ub} and so on.  Most of
these have both positive and negative forms; the negative form of @{b}-ffoo@{ub}
would be @{b}-fno-foo@{ub}.  This manual documents only one of these two forms,
whichever one is not the default.


 @{" Option Summary     " link "Option Summary"}  Brief list of all options, without explanations.
 @{" Overall Options    " link "Overall Options"}  Controlling the kind of output:
                        an executable, object files, assembler files,
                        or preprocessed source.
 @{" Invoking G++       " link "Invoking G++"}  Compiling C++ programs.
 @{" C Dialect Options  " link "C Dialect Options"}  Controlling the variant of C language compiled.
 @{" C++ Dialect Options " link "C++ Dialect Options"}  Variations on C++.
 @{" Warning Options    " link "Warning Options"}  How picky should the compiler be?
 @{" Debugging Options  " link "Debugging Options"}  Symbol tables, measurements, and debugging dumps.
 @{" Optimize Options   " link "Optimize Options"}  How much optimization?
 @{" Preprocessor Options " link "Preprocessor Options"}  Controlling header files and macro definitions.
                         Also, getting dependency information for Make.
 @{" Assembler Options  " link "Assembler Options"}  Passing options to the assembler.
 @{" Link Options       " link "Link Options"}  Specifying libraries and so on.
 @{" Directory Options  " link "Directory Options"}  Where to find header files and libraries.
                        Where to find the compiler executable files.
 @{" Target Options     " link "Target Options"}  Running a cross-compiler, or an old version of GNU CC.
 @{" Submodel Options   " link "Submodel Options"}  Specifying minor hardware or convention variations,
                        such as 68010 vs 68020.
 @{" Code Gen Options   " link "Code Gen Options"}  Specifying conventions for function calls, data layout
                        and register usage.
 @{" Environment Variables " link "Environment Variables"}  Env vars that affect GNU CC.
 @{" Running Protoize   " link "Running Protoize"}  Automatically adding or removing function prototypes.


@endnode

@node "Option Summary" "gcc.guide/Option Summary"
@next "Overall Options"
@toc "Invoking GCC"

Option Summary
==============

   Here is a summary of all the options, grouped by type.  Explanations
are in the following sections.

@{i}Overall Options@{ui}
     See @{"Options Controlling the Kind of Output" link "Overall Options"}.
          -c  -S  -E  -o FILE  -pipe  -v  -x LANGUAGE

@{i}C Language Options@{ui}
     See @{"Options Controlling C Dialect" link "C Dialect Options"}.
          -ansi  -fallow-single-precision  -fcond-mismatch  -fno-asm
          -fno-builtin  -ffreestanding  -fhosted  -fsigned-bitfields  -fsigned-char
          -funsigned-bitfields  -funsigned-char  -fwritable-strings
          -traditional  -traditional-cpp  -trigraphs

@{i}C++ Language Options@{ui}
     See @{"Options Controlling C++ Dialect" link "C++ Dialect Options"}.
          -fall-virtual  -fdollars-in-identifiers  -felide-constructors
          -fenum-int-equiv  -fexternal-templates  -ffor-scope
          -fno-for-scope  -fhandle-signatures  -fmemoize-lookups
          -fname-mangling-version-N  -fno-default-inline
          -fno-gnu-keywords -fnonnull-objects -fguiding-decls
          -foperator-names  -fno-optional-diags -fstrict-prototype  -fthis-is-variable
          -ftemplate-depth-N  -nostdinc++  -traditional  +eN

@{i}Warning Options@{ui}
     See @{"Options to Request or Suppress Warnings" link "Warning Options"}.
          -fsyntax-only  -pedantic  -pedantic-errors
          -w  -W  -Wall  -Waggregate-return  -Wbad-function-cast
          -Wcast-align  -Wcast-qual  -Wchar-subscript  -Wcomment
          -Wconversion  -Werror  -Wformat
          -Wid-clash-LEN  -Wimplicit -Wimplicit-int
          -Wimplicit-function-declaration  -Wimport
          -Werror-implicit-function-declaration  -Winline
          -Wlarger-than-LEN  -Wlong-long
          -Wmain  -Wmissing-declarations
          -Wmissing-prototypes  -Wmultichar  -Wnested-externs  -Wno-import
          -Wold-style-cast  -Woverloaded-virtual  -Wparentheses
          -Wpointer-arith  -Wredundant-decls  -Wreorder  -Wreturn-type
          -Wshadow  -Wsign-compare  -Wstrict-prototypes  -Wswitch
          -Wsynth  -Wtemplate-debugging  -Wtraditional  -Wtrigraphs
          -Wundef  -Wuninitialized  -Wunused  -Wwrite-strings
          -Wunknown-pragmas

@{i}Debugging Options@{ui}
     See @{"Options for Debugging Your Program or GCC" link "Debugging Options"}.
          -a  -ax  -dLETTERS  -fpretend-float
          -fprofile-arcs  -ftest-coverage
          -g  -gLEVEL  -gcoff  -gdwarf  -gdwarf-1  -gdwarf-1+  -gdwarf-2
          -ggdb  -gstabs  -gstabs+  -gxcoff  -gxcoff+
          -p  -pg  -print-file-name=LIBRARY  -print-libgcc-file-name
          -print-prog-name=PROGRAM  -print-search-dirs  -save-temps

@{i}Optimization Options@{ui}
     See @{"Options that Control Optimization" link "Optimize Options"}.
          -fbranch-probabilities  -foptimize-register-moves
          -fcaller-saves  -fcse-follow-jumps  -fcse-skip-blocks
          -fdelayed-branch   -fexpensive-optimizations
          -ffast-math  -ffloat-store  -fforce-addr  -fforce-mem
          -ffunction-sections  -fgcse -finline-functions
          -fkeep-inline-functions  -fno-default-inline
          -fno-defer-pop  -fno-function-cse
          -fno-inline  -fno-peephole  -fomit-frame-pointer -fregmove
          -frerun-cse-after-loop  -frerun-loop-opt -fschedule-insns
          -fschedule-insns2  -fstrength-reduce  -fthread-jumps
          -funroll-all-loops  -funroll-loops
          -fmove-all-movables  -freduce-all-givs -fstrict-aliasing
          -fstructure-noalias
          -O  -O0  -O1  -O2  -O3 -Os

@{i}Preprocessor Options@{ui}
     See @{"Options Controlling the Preprocessor" link "Preprocessor Options"}.
          -AQUESTION(ANSWER)  -C  -dD  -dM  -dN
          -DMACRO[=DEFN]  -E  -H
          -idirafter DIR
          -include FILE  -imacros FILE
          -iprefix FILE  -iwithprefix DIR
          -iwithprefixbefore DIR  -isystem DIR
          -M  -MD  -MM  -MMD  -MG  -nostdinc  -P  -trigraphs
          -undef  -UMACRO  -Wp,OPTION

@{i}Assembler Option@{ui}
     See @{"Passing Options to the Assembler" link "Assembler Options"}.
          -Wa,OPTION

@{i}Linker Options@{ui}
     See @{"Options for Linking" link "Link Options"}.
          OBJECT-FILE-NAME  -lLIBRARY
          -nostartfiles  -nodefaultlibs  -nostdlib
          -s  -static  -shared  -symbolic
          -Wl,OPTION  -Xlinker OPTION
          -u SYMBOL

@{i}Directory Options@{ui}
     See @{"Options for Directory Search" link "Directory Options"}.
          -BPREFIX  -IDIR  -I-  -LDIR  -specs=FILE

@{i}Target Options@{ui}
     See @{"Target Options" link "Target Options"}.
          -b MACHINE  -V VERSION

@{i}Machine Dependent Options@{ui}
     See @{"Hardware Models and Configurations" link "Submodel Options"}.
@{i}          M680x0 Options@{ui}
          -m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040
          -m68060  -mcpu32 -m5200  -m68881  -mbitfield  -mc68000  -mc68020
          -mfpa -mnobitfield  -mrtd  -mshort  -msoft-float
          -malign-int
          
          @{i}VAX Options@{ui}
          -mg  -mgnu  -munix
          
          @{i}SPARC Options@{ui}
          -mcpu=CPU TYPE
          -mtune=CPU TYPE
          -mcmodel=CODE MODEL
          -malign-jumps=NUM  -malign-loops=NUM
          -malign-functions=NUM
          -m32  -m64
          -mapp-regs  -mbroken-saverestore  -mcypress  -mepilogue
          -mflat  -mfpu  -mhard-float  -mhard-quad-float
          -mimpure-text  -mlive-g0  -mno-app-regs  -mno-epilogue
          -mno-flat  -mno-fpu  -mno-impure-text
          -mno-stack-bias  -mno-unaligned-doubles
          -msoft-float  -msoft-quad-float  -msparclite  -mstack-bias
          -msupersparc  -munaligned-doubles  -mv8
          
          @{i}Convex Options@{ui}
          -mc1  -mc2  -mc32  -mc34  -mc38
          -margcount  -mnoargcount
          -mlong32  -mlong64
          -mvolatile-cache  -mvolatile-nocache
          
          @{i}AMD29K Options@{ui}
          -m29000  -m29050  -mbw  -mnbw  -mdw  -mndw
          -mlarge  -mnormal  -msmall
          -mkernel-registers  -mno-reuse-arg-regs
          -mno-stack-check  -mno-storem-bug
          -mreuse-arg-regs  -msoft-float  -mstack-check
          -mstorem-bug  -muser-registers
          
          @{i}ARM Options@{ui}
          -mapcs-frame -mno-apcs-frame
          -mapcs-26 -mapcs-32
          -mapcs-stack-check -mno-apcs-stack-check
          -mapcs-float -mno-apcs-float
          -mapcs-reentrant -mno-apcs-reentrant
          -msched-prolog -mno-sched-prolog
          -mlittle-endian -mbig-endian -mwords-little-endian
          -mshort-load-bytes -mno-short-load-bytes -mshort-load-words -mno-short-load-words
          -msoft-float -mhard-float -mfpe
          -mthumb-interwork -mno-thumb-interwork
          -mcpu= -march= -mfpe=
          -mstructure-size-boundary=
          -mbsd -mxopen -mno-symrename
          
          @{i}Thumb Options@{ui}
          -mtpcs-frame -mno-tpcs-frame
          -mtpcs-leaf-frame -mno-tpcs-leaf-frame
          -mlittle-endian  -mbig-endian
          -mthumb-interwork -mno-thumb-interwork
          -mstructure-size-boundary=
          
          @{i}MN10200 Options@{ui}
          -mrelax
          
          @{i}MN10300 Options@{ui}
          -mmult-bug
          -mno-mult-bug
          -mrelax
          
          @{i}M32R/D Options@{ui}
          -mcode-model=MODEL TYPE  -msdata=SDATA TYPE
          -G NUM
          
          @{i}M88K Options@{ui}
          -m88000  -m88100  -m88110  -mbig-pic
          -mcheck-zero-division  -mhandle-large-shift
          -midentify-revision  -mno-check-zero-division
          -mno-ocs-debug-info  -mno-ocs-frame-position
          -mno-optimize-arg-area  -mno-serialize-volatile
          -mno-underscores  -mocs-debug-info
          -mocs-frame-position  -moptimize-arg-area
          -mserialize-volatile  -mshort-data-NUM  -msvr3
          -msvr4  -mtrap-large-shift  -muse-div-instruction
          -mversion-03.00  -mwarn-passed-structs
          
          @{i}RS/6000 and PowerPC Options@{ui}
          -mcpu=CPU TYPE
          -mtune=CPU TYPE
          -mpower  -mno-power  -mpower2  -mno-power2
          -mpowerpc  -mno-powerpc
          -mpowerpc-gpopt  -mno-powerpc-gpopt
          -mpowerpc-gfxopt  -mno-powerpc-gfxopt
          -mnew-mnemonics  -mno-new-mnemonics
          -mfull-toc   -mminimal-toc  -mno-fop-in-toc  -mno-sum-in-toc
          -maix64  -maix32  -mxl-call  -mno-xl-call  -mthreads  -mpe
          -msoft-float  -mhard-float  -mmultiple  -mno-multiple
          -mstring  -mno-string  -mupdate  -mno-update
          -mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align
          -mstrict-align  -mno-strict-align  -mrelocatable
          -mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib
          -mtoc  -mno-toc -mlittle  -mlittle-endian  -mbig  -mbig-endian
          -mcall-aix  -mcall-sysv  -mprototype  -mno-prototype
          -msim  -mmvme  -mads  -myellowknife  -memb -msdata
          -msdata=OPT  -G NUM
          
          @{i}RT Options@{ui}
          -mcall-lib-mul  -mfp-arg-in-fpregs  -mfp-arg-in-gregs
          -mfull-fp-blocks  -mhc-struct-return  -min-line-mul
          -mminimum-fp-blocks  -mnohc-struct-return
          
          @{i}MIPS Options@{ui}
          -mabicalls  -mcpu=CPU TYPE  -membedded-data
          -membedded-pic  -mfp32  -mfp64  -mgas  -mgp32  -mgp64
          -mgpopt  -mhalf-pic  -mhard-float  -mint64  -mips1
          -mips2  -mips3 -mips4 -mlong64  -mlong-calls  -mmemcpy
          -mmips-as  -mmips-tfile  -mno-abicalls
          -mno-embedded-data  -mno-embedded-pic
          -mno-gpopt  -mno-long-calls
          -mno-memcpy  -mno-mips-tfile  -mno-rnames  -mno-stats
          -mrnames  -msoft-float
          -m4650  -msingle-float  -mmad
          -mstats  -EL  -EB  -G NUM  -nocpp
          -mabi=32 -mabi=n32 -mabi=64 -mabi=eabi
          
          @{i}i386 Options@{ui}
          -mcpu=CPU TYPE
          -march=CPU TYPE
          -mieee-fp  -mno-fancy-math-387
          -mno-fp-ret-in-387  -msoft-float  -msvr3-shlib
          -mno-wide-multiply  -mrtd  -malign-double
          -mreg-alloc=LIST  -mregparm=NUM
          -malign-jumps=NUM  -malign-loops=NUM
          -malign-functions=NUM
          
          @{i}HPPA Options@{ui}
          -mbig-switch  -mdisable-fpregs  -mdisable-indexing
          -mfast-indirect-calls -mgas  -mjump-in-delay
          -mlong-load-store  -mno-big-switch  -mno-disable-fpregs
          -mno-disable-indexing  -mno-fast-indirect-calls  -mno-gas
          -mno-jump-in-delay  -mno-long-load-store
          -mno-portable-runtime  -mno-soft-float  -mno-space
          -mno-space-regs  -msoft-float  -mpa-risc-1-0
          -mpa-risc-1-1  -mportable-runtime
          -mschedule=LIST  -mspace  -mspace-regs
          
          @{i}Intel 960 Options@{ui}
          -mCPU TYPE  -masm-compat  -mclean-linkage
          -mcode-align  -mcomplex-addr  -mleaf-procedures
          -mic-compat  -mic2.0-compat  -mic3.0-compat
          -mintel-asm  -mno-clean-linkage  -mno-code-align
          -mno-complex-addr  -mno-leaf-procedures
          -mno-old-align  -mno-strict-align  -mno-tail-call
          -mnumerics  -mold-align  -msoft-float  -mstrict-align
          -mtail-call
          
          @{i}DEC Alpha Options@{ui}
          -mfp-regs  -mno-fp-regs -mno-soft-float  -msoft-float
          -malpha-as -mgas
          -mieee  -mieee-with-inexact  -mieee-conformant
          -mfp-trap-mode=MODE  -mfp-rounding-mode=MODE
          -mtrap-precision=MODE  -mbuild-constants
          -mcpu=CPU TYPE
          -mbwx -mno-bwx -mcix -mno-cix -mmax -mno-max
          -mmemory-latency=TIME
          
          @{i}Clipper Options@{ui}
          -mc300  -mc400
          
          @{i}H8/300 Options@{ui}
          -mrelax  -mh -ms -mint32  -malign-300
          
          @{i}SH Options@{ui}
          -m1  -m2  -m3  -m3e  -mb  -ml  -mdalign -mrelax
          
          @{i}System V Options@{ui}
          -Qy  -Qn  -YP,PATHS  -Ym,DIR
          
          @{i}ARC Options@{ui}
          -EB  -EL
          -mmangle-cpu  -mcpu=CPU  -mtext=TEXT SECTION
          -mdata=DATA SECTION  -mrodata=READONLY DATA SECTION
          
          @{i}V850 Options@{ui}
          -mlong-calls -mno-long-calls -mep -mno-ep
          -mprolog-function -mno-prolog-function -mspace
          -mtda=N -msda=N -mzda=N
          -mv850 -mbig-switch

@{i}Code Generation Options@{ui}
     See @{"Options for Code Generation Conventions" link "Code Gen Options"}.
          -fcall-saved-REG  -fcall-used-REG
          -fexceptions -ffixed-REG  -finhibit-size-directive
          -fcheck-memory-usage  -fprefix-function-name
          -fno-common  -fno-ident  -fno-gnu-linker
          -fpcc-struct-return  -fpic  -fPIC
          -freg-struct-return  -fshared-data  -fshort-enums
          -fshort-double  -fvolatile  -fvolatile-global
          -fverbose-asm -fpack-struct  -fstack-check  +e0  +e1
          -fargument-alias  -fargument-noalias
          -fargument-noalias-global


 @{" Overall Options    " link "Overall Options"}  Controlling the kind of output:
                        an executable, object files, assembler files,
                        or preprocessed source.
 @{" C Dialect Options  " link "C Dialect Options"}  Controlling the variant of C language compiled.
 @{" C++ Dialect Options " link "C++ Dialect Options"}  Variations on C++.
 @{" Warning Options    " link "Warning Options"}  How picky should the compiler be?
 @{" Debugging Options  " link "Debugging Options"}  Symbol tables, measurements, and debugging dumps.
 @{" Optimize Options   " link "Optimize Options"}  How much optimization?
 @{" Preprocessor Options " link "Preprocessor Options"}  Controlling header files and macro definitions.
                         Also, getting dependency information for Make.
 @{" Assembler Options  " link "Assembler Options"}  Passing options to the assembler.
 @{" Link Options       " link "Link Options"}  Specifying libraries and so on.
 @{" Directory Options  " link "Directory Options"}  Where to find header files and libraries.
                        Where to find the compiler executable files.
 @{" Target Options     " link "Target Options"}  Running a cross-compiler, or an old version of GNU CC.


@endnode

@node "Overall Options" "gcc.guide/Overall Options"
@next "Invoking G++"
@prev "Option Summary"
@toc "Invoking GCC"

Options Controlling the Kind of Output
======================================

   Compilation can involve up to four stages: preprocessing, compilation
proper, assembly and linking, always in that order.  The first three
stages apply to an individual source file, and end by producing an
object file; linking combines all the object files (those newly
compiled, and those specified as input) into an executable file.

   For any given input file, the file name suffix determines what kind
of compilation is done:

@{b}FILE.c@{ub}
     C source code which must be preprocessed.

@{b}FILE.i@{ub}
     C source code which should not be preprocessed.

@{b}FILE.ii@{ub}
     C++ source code which should not be preprocessed.

@{b}FILE.m@{ub}
     Objective-C source code.  Note that you must link with the library
     @{b}libobjc.a@{ub} to make an Objective-C program work.

@{b}FILE.h@{ub}
     C header file (not to be compiled or linked).

@{b}FILE.cc@{ub}
@{b}FILE.cxx@{ub}
@{b}FILE.cpp@{ub}
@{b}FILE.C@{ub}
     C++ source code which must be preprocessed.  Note that in @{b}.cxx@{ub},
     the last two letters must both be literally @{b}x@{ub}.  Likewise, @{b}.C@{ub}
     refers to a literal capital C.

@{b}FILE.s@{ub}
     Assembler code.

@{b}FILE.S@{ub}
     Assembler code which must be preprocessed.

@{b}OTHER@{ub}
     An object file to be fed straight into linking.  Any file name
     with no recognized suffix is treated this way.

   You can specify the input language explicitly with the @{b}-x@{ub} option:

@{b}-x LANGUAGE@{ub}
     Specify explicitly the LANGUAGE for the following input files
     (rather than letting the compiler choose a default based on the
     file name suffix).  This option applies to all following input
     files until the next @{b}-x@{ub} option.  Possible values for LANGUAGE are:
          c  objective-c  c++
          c-header  cpp-output  c++-cpp-output
          assembler  assembler-with-cpp

@{b}-x none@{ub}
     Turn off any specification of a language, so that subsequent files
     are handled according to their file name suffixes (as they are if
     @{b}-x@{ub} has not been used at all).

   If you only want some of the stages of compilation, you can use @{b}-x@{ub}
(or filename suffixes) to tell @{b}gcc@{ub} where to start, and one of the
options @{b}-c@{ub}, @{b}-S@{ub}, or @{b}-E@{ub} to say where @{b}gcc@{ub} is to stop.  Note that some
combinations (for example, @{b}-x cpp-output -E@{ub} instruct @{b}gcc@{ub} to do nothing
at all.

@{b}-c@{ub}
     Compile or assemble the source files, but do not link.  The linking
     stage simply is not done.  The ultimate output is in the form of an
     object file for each source file.

     By default, the object file name for a source file is made by
     replacing the suffix @{b}.c@{ub}, @{b}.i@{ub}, @{b}.s@{ub}, etc., with @{b}.o@{ub}.

     Unrecognized input files, not requiring compilation or assembly,
     are ignored.

@{b}-S@{ub}
     Stop after the stage of compilation proper; do not assemble.  The
     output is in the form of an assembler code file for each
     non-assembler input file specified.

     By default, the assembler file name for a source file is made by
     replacing the suffix @{b}.c@{ub}, @{b}.i@{ub}, etc., with @{b}.s@{ub}.

     Input files that don't require compilation are ignored.

@{b}-E@{ub}
     Stop after the preprocessing stage; do not run the compiler
     proper.  The output is in the form of preprocessed source code,
     which is sent to the standard output.

     Input files which don't require preprocessing are ignored.

@{b}-o FILE@{ub}
     Place output in file FILE.  This applies regardless to whatever
     sort of output is being produced, whether it be an executable file,
     an object file, an assembler file or preprocessed C code.

     Since only one output file can be specified, it does not make
     sense to use @{b}-o@{ub} when compiling more than one input file, unless
     you are producing an executable file as output.

     If @{b}-o@{ub} is not specified, the default is to put an executable file
     in @{b}a.out@{ub}, the object file for @{b}SOURCE.SUFFIX@{ub} in @{b}SOURCE.o@{ub}, its
     assembler file in @{b}SOURCE.s@{ub}, and all preprocessed C source on
     standard output.

@{b}-v@{ub}
     Print (on standard error output) the commands executed to run the
     stages of compilation.  Also print the version number of the
     compiler driver program and of the preprocessor and the compiler
     proper.

@{b}-pipe@{ub}
     Use pipes rather than temporary files for communication between the
     various stages of compilation.  This fails to work on some systems
     where the assembler is unable to read from a pipe; but the GNU
     assembler has no trouble.


@endnode

@node "Invoking G++" "gcc.guide/Invoking G++"
@next "C Dialect Options"
@prev "Overall Options"
@toc "Invoking GCC"

Compiling C++ Programs
======================

   C++ source files conventionally use one of the suffixes @{b}.C@{ub}, @{b}.cc@{ub},
@{b}cpp@{ub}, or @{b}.cxx@{ub}; preprocessed C++ files use the suffix @{b}.ii@{ub}.  GNU CC
recognizes files with these names and compiles them as C++ programs
even if you call the compiler the same way as for compiling C programs
(usually with the name @{b}gcc@{ub}).

   However, C++ programs often require class libraries as well as a
compiler that understands the C++ language--and under some
circumstances, you might want to compile programs from standard input,
or otherwise without a suffix that flags them as C++ programs.  @{b}g++@{ub} is
a program that calls GNU CC with the default language set to C++, and
automatically specifies linking against the C++ library.  (1) On many
systems, the script @{b}g++@{ub} is also installed with the name @{b}c++@{ub}.

   When you compile C++ programs, you may specify many of the same
command-line options that you use for compiling programs in any
language; or command-line options meaningful for C and related
languages; or options that are meaningful only for C++ programs.  See
@{"Options Controlling C Dialect" link "C Dialect Options"}, for explanations of options for
languages related to C.  See @{"Options Controlling C++ Dialect" link "C++ Dialect Options"}, for
explanations of options that are meaningful only for C++ programs.

   ---------- Footnotes ----------

   (1) Prior to release 2 of the compiler, there was a separate @{b}g++@{ub}
compiler.  That version was based on GNU CC, but not integrated with
it.  Versions of @{b}g++@{ub} with a @{b}1.XX@{ub} version number--for example, @{b}g++@{ub}
version 1.37 or 1.42--are much less reliable than the versions
integrated with GCC 2.  Moreover, combining G++ @{b}1.XX@{ub} with a version 2
GCC will simply not work.


@endnode

@node "C Dialect Options" "gcc.guide/C Dialect Options"
@next "C++ Dialect Options"
@prev "Invoking G++"
@toc "Invoking GCC"

Options Controlling C Dialect
=============================

   The following options control the dialect of C (or languages derived
from C, such as C++ and Objective C) that the compiler accepts:

@{b}-ansi@{ub}
     Support all ANSI standard C programs.

     This turns off certain features of GNU C that are incompatible
     with ANSI C, such as the @{b}asm@{ub}, @{b}inline@{ub} and @{b}typeof@{ub} keywords, and
     predefined macros such as @{b}unix@{ub} and @{b}vax@{ub} that identify the type of
     system you are using.  It also enables the undesirable and rarely
     used ANSI trigraph feature, and it disables recognition of C++
     style @{b}//@{ub} comments.

     The alternate keywords @{b}__asm__@{ub}, @{b}__extension__@{ub}, @{b}__inline__@{ub} and
     @{b}__typeof__@{ub} continue to work despite @{b}-ansi@{ub}.  You would not want to
     use them in an ANSI C program, of course, but it is useful to put
     them in header files that might be included in compilations done
     with @{b}-ansi@{ub}.  Alternate predefined macros such as @{b}__unix__@{ub} and
     @{b}__vax__@{ub} are also available, with or without @{b}-ansi@{ub}.

     The @{b}-ansi@{ub} option does not cause non-ANSI programs to be rejected
     gratuitously.  For that, @{b}-pedantic@{ub} is required in addition to
     @{b}-ansi@{ub}.  See @{"Warning Options" link "Warning Options"}.

     The macro @{b}__STRICT_ANSI__@{ub} is predefined when the @{b}-ansi@{ub} option is
     used.  Some header files may notice this macro and refrain from
     declaring certain functions or defining certain macros that the
     ANSI standard doesn't call for; this is to avoid interfering with
     any programs that might use these names for other things.

     The functions @{b}alloca@{ub}, @{b}abort@{ub}, @{b}exit@{ub}, and @{b}_exit@{ub} are not builtin
     functions when @{b}-ansi@{ub} is used.

@{b}-fno-asm@{ub}
     Do not recognize @{b}asm@{ub}, @{b}inline@{ub} or @{b}typeof@{ub} as a keyword, so that code
     can use these words as identifiers.  You can use the keywords
     @{b}__asm__@{ub}, @{b}__inline__@{ub} and @{b}__typeof__@{ub} instead.  @{b}-ansi@{ub} implies
     @{b}-fno-asm@{ub}.

     In C++, this switch only affects the @{b}typeof@{ub} keyword, since @{b}asm@{ub} and
     @{b}inline@{ub} are standard keywords.  You may want to use the
     @{b}-fno-gnu-keywords@{ub} flag instead, as it also disables the other,
     C++-specific, extension keywords such as @{b}headof@{ub}.

@{b}-fno-builtin@{ub}
     Don't recognize builtin functions that do not begin with
     `__builtin_' as prefix.  Currently, the functions affected include
     @{b}abort@{ub}, @{b}abs@{ub}, @{b}alloca@{ub}, @{b}cos@{ub}, @{b}exit@{ub}, @{b}fabs@{ub}, @{b}ffs@{ub}, @{b}labs@{ub}, @{b}memcmp@{ub}, @{b}memcpy@{ub},
     @{b}sin@{ub}, @{b}sqrt@{ub}, @{b}strcmp@{ub}, @{b}strcpy@{ub}, and @{b}strlen@{ub}.

     GCC normally generates special code to handle certain builtin
     functions more efficiently; for instance, calls to @{b}alloca@{ub} may
     become single instructions that adjust the stack directly, and
     calls to @{b}memcpy@{ub} may become inline copy loops.  The resulting code
     is often both smaller and faster, but since the function calls no
     longer appear as such, you cannot set a breakpoint on those calls,
     nor can you change the behavior of the functions by linking with a
     different library.

     The @{b}-ansi@{ub} option prevents @{b}alloca@{ub} and @{b}ffs@{ub} from being builtin
     functions, since these functions do not have an ANSI standard
     meaning.

@{b}-fhosted@{ub}
     Assert that compilation takes place in a hosted environment.  This
     implies @{b}-fbuiltin@{ub}.  A hosted environment is one in which the
     entire standard library is available, and in which @{b}main@{ub} has a
     return type of @{b}int@{ub}.  Examples are nearly everything except a
     kernel.  This is equivalent to @{b}-fno-freestanding@{ub}.

@{b}-ffreestanding@{ub}
     Assert that compilation takes place in a freestanding environment.
     This implies @{b}-fno-builtin@{ub}.  A freestanding environment is one in
     which the standard library may not exist, and program startup may
     not necessarily be at @{b}main@{ub}.  The most obvious example is an OS
     kernel.  This is equivalent to @{b}-fno-hosted@{ub}.

@{b}-trigraphs@{ub}
     Support ANSI C trigraphs.  You don't want to know about this
     brain-damage.  The @{b}-ansi@{ub} option implies @{b}-trigraphs@{ub}.

@{b}-traditional@{ub}
     Attempt to support some aspects of traditional C compilers.
     Specifically:

        * All @{b}extern@{ub} declarations take effect globally even if they are
          written inside of a function definition.  This includes
          implicit declarations of functions.

        * The newer keywords @{b}typeof@{ub}, @{b}inline@{ub}, @{b}signed@{ub}, @{b}const@{ub} and @{b}volatile@{ub}
          are not recognized.  (You can still use the alternative
          keywords such as @{b}__typeof__@{ub}, @{b}__inline__@{ub}, and so on.)

        * Comparisons between pointers and integers are always allowed.

        * Integer types @{b}unsigned short@{ub} and @{b}unsigned char@{ub} promote to
          @{b}unsigned int@{ub}.

        * Out-of-range floating point literals are not an error.

        * Certain constructs which ANSI regards as a single invalid
          preprocessing number, such as @{b}0xe-0xd@{ub}, are treated as
          expressions instead.

        * String "constants" are not necessarily constant; they are
          stored in writable space, and identical looking constants are
          allocated separately.  (This is the same as the effect of
          @{b}-fwritable-strings@{ub}.)

        * All automatic variables not declared @{b}register@{ub} are preserved by
          @{b}longjmp@{ub}.  Ordinarily, GNU C follows ANSI C: automatic
          variables not declared @{b}volatile@{ub} may be clobbered.

        * The character escape sequences @{b}\\x@{ub} and @{b}\\a@{ub} evaluate as the
          literal characters @{b}x@{ub} and @{b}a@{ub} respectively.  Without
          @{b}-traditional@{ub}, @{b}\\x@{ub} is a prefix for the hexadecimal
          representation of a character, and @{b}\\a@{ub} produces a bell.

        * In C++ programs, assignment to @{b}this@{ub} is permitted with
          @{b}-traditional@{ub}.  (The option @{b}-fthis-is-variable@{ub} also has this
          effect.)

     You may wish to use @{b}-fno-builtin@{ub} as well as @{b}-traditional@{ub} if your
     program uses names that are normally GNU C builtin functions for
     other purposes of its own.

     You cannot use @{b}-traditional@{ub} if you include any header files that
     rely on ANSI C features.  Some vendors are starting to ship
     systems with ANSI C header files and you cannot use @{b}-traditional@{ub}
     on such systems to compile files that include any system headers.

     The @{b}-traditional@{ub} option also enables @{b}-traditional-cpp@{ub}, which is
     described next.

@{b}-traditional-cpp@{ub}
     Attempt to support some aspects of traditional C preprocessors.
     Specifically:

        * Comments convert to nothing at all, rather than to a space.
          This allows traditional token concatenation.

        * In a preprocessing directive, the @{b}#@{ub} symbol must appear as the
          first character of a line.

        * Macro arguments are recognized within string constants in a
          macro definition (and their values are stringified, though
          without additional quote marks, when they appear in such a
          context).  The preprocessor always considers a string
          constant to end at a newline.

        * The predefined macro @{b}__STDC__@{ub} is not defined when you use
          @{b}-traditional@{ub}, but @{b}__GNUC__@{ub} is (since the GNU extensions which
          @{b}__GNUC__@{ub} indicates are not affected by @{b}-traditional@{ub}).  If you
          need to write header files that work differently depending on
          whether @{b}-traditional@{ub} is in use, by testing both of these
          predefined macros you can distinguish four situations: GNU C,
          traditional GNU C, other ANSI C compilers, and other old C
          compilers.  The predefined macro @{b}__STDC_VERSION__@{ub} is also not
          defined when you use @{b}-traditional@{ub}.  See
          @{"Standard Predefined Macros" link "cpp.guide/Standard Predefined"}, for more discussion of these
          and other predefined macros.

        * The preprocessor considers a string constant to end at a
          newline (unless the newline is escaped with @{b}\\ @{ub}).  (Without
          @{b}-traditional@{ub}, string constants can contain the newline
          character as typed.)

@{b}-fcond-mismatch@{ub}
     Allow conditional expressions with mismatched types in the second
     and third arguments.  The value of such an expression is void.

@{b}-funsigned-char@{ub}
     Let the type @{b}char@{ub} be unsigned, like @{b}unsigned char@{ub}.

     Each kind of machine has a default for what @{b}char@{ub} should be.  It is
     either like @{b}unsigned char@{ub} by default or like @{b}signed char@{ub} by
     default.

     Ideally, a portable program should always use @{b}signed char@{ub} or
     @{b}unsigned char@{ub} when it depends on the signedness of an object.  But
     many programs have been written to use plain @{b}char@{ub} and expect it to
     be signed, or expect it to be unsigned, depending on the machines
     they were written for.  This option, and its inverse, let you make
     such a program work with the opposite default.

     The type @{b}char@{ub} is always a distinct type from each of @{b}signed char@{ub}
     or @{b}unsigned char@{ub}, even though its behavior is always just like one
     of those two.

@{b}-fsigned-char@{ub}
     Let the type @{b}char@{ub} be signed, like @{b}signed char@{ub}.

     Note that this is equivalent to @{b}-fno-unsigned-char@{ub}, which is the
     negative form of @{b}-funsigned-char@{ub}.  Likewise, the option
     @{b}-fno-signed-char@{ub} is equivalent to @{b}-funsigned-char@{ub}.

     You may wish to use @{b}-fno-builtin@{ub} as well as @{b}-traditional@{ub} if your
     program uses names that are normally GNU C builtin functions for
     other purposes of its own.

     You cannot use @{b}-traditional@{ub} if you include any header files that
     rely on ANSI C features.  Some vendors are starting to ship
     systems with ANSI C header files and you cannot use @{b}-traditional@{ub}
     on such systems to compile files that include any system headers.

@{b}-fsigned-bitfields@{ub}
@{b}-funsigned-bitfields@{ub}
@{b}-fno-signed-bitfields@{ub}
@{b}-fno-unsigned-bitfields@{ub}
     These options control whether a bitfield is signed or unsigned,
     when the declaration does not use either @{b}signed@{ub} or @{b}unsigned@{ub}.  By
     default, such a bitfield is signed, because this is consistent: the
     basic integer types such as @{b}int@{ub} are signed types.

     However, when @{b}-traditional@{ub} is used, bitfields are all unsigned no
     matter what.

@{b}-fwritable-strings@{ub}
     Store string constants in the writable data segment and don't
     uniquize them.  This is for compatibility with old programs which
     assume they can write into string constants.  The option
     @{b}-traditional@{ub} also has this effect.

     Writing into string constants is a very bad idea; "constants"
     should be constant.

@{b}-fallow-single-precision@{ub}
     Do not promote single precision math operations to double
     precision, even when compiling with @{b}-traditional@{ub}.

     Traditional K&R C promotes all floating point operations to double
     precision, regardless of the sizes of the operands.   On the
     architecture for which you are compiling, single precision may be
     faster than double precision.   If you must use @{b}-traditional@{ub}, but
     want to use single precision operations when the operands are
     single precision, use this option.   This option has no effect
     when compiling with ANSI or GNU C conventions (the default).


@endnode

@node "C++ Dialect Options" "gcc.guide/C++ Dialect Options"
@next "Warning Options"
@prev "C Dialect Options"
@toc "Invoking GCC"

Options Controlling C++ Dialect
===============================

   This section describes the command-line options that are only
meaningful for C++ programs; but you can also use most of the GNU
compiler options regardless of what language your program is in.  For
example, you might compile a file @{b}firstClass.C@{ub} like this:

     g++ -g -felide-constructors -O -c firstClass.C

In this example, only @{b}-felide-constructors@{ub} is an option meant only for
C++ programs; you can use the other options with any language supported
by GNU CC.

   Here is a list of options that are @{i}only@{ui} for compiling C++ programs:

@{b}-fno-access-control@{ub}
     Turn off all access checking.  This switch is mainly useful for
     working around bugs in the access control code.

@{b}-fall-virtual@{ub}
     Treat all possible member functions as virtual, implicitly.  All
     member functions (except for constructor functions and @{b}new@{ub} or
     @{b}delete@{ub} member operators) are treated as virtual functions of the
     class where they appear.

     This does not mean that all calls to these member functions will
     be made through the internal table of virtual functions.  Under
     some circumstances, the compiler can determine that a call to a
     given virtual function can be made directly; in these cases the
     calls are direct in any case.

@{b}-fcheck-new@{ub}
     Check that the pointer returned by @{b}operator new@{ub} is non-null before
     attempting to modify the storage allocated.  The current Working
     Paper requires that @{b}operator new@{ub} never return a null pointer, so
     this check is normally unnecessary.

@{b}-fconserve-space@{ub}
     Put uninitialized or runtime-initialized global variables into the
     common segment, as C does.  This saves space in the executable at
     the cost of not diagnosing duplicate definitions.  If you compile
     with this flag and your program mysteriously crashes after @{b}main()@{ub}
     has completed, you may have an object that is being destroyed
     twice because two definitions were merged.

@{b}-fdollars-in-identifiers@{ub}
     Accept @{b}$@{ub} in identifiers.  You can also explicitly prohibit use of
     @{b}$@{ub} with the option @{b}-fno-dollars-in-identifiers@{ub}.  (GNU C allows @{b}$@{ub} by
     default on most target systems, but there are a few exceptions.)
     Traditional C allowed the character @{b}$@{ub} to form part of identifiers.
     However, ANSI C and C++ forbid @{b}$@{ub} in identifiers.

@{b}-fenum-int-equiv@{ub}
     Anachronistically permit implicit conversion of @{b}int@{ub} to enumeration
     types.  Current C++ allows conversion of @{b}enum@{ub} to @{b}int@{ub}, but not the
     other way around.

@{b}-fexternal-templates@{ub}
     Cause template instantiations to obey @{b}#pragma interface@{ub} and
     @{b}implementation@{ub}; template instances are emitted or not according to
     the location of the template definition.  See
     @{"Template Instantiation" link "Template Instantiation"}, for more information.

     This option is deprecated.

@{b}-falt-external-templates@{ub}
     Similar to -fexternal-templates, but template instances are
     emitted or not according to the place where they are first
     instantiated.  See @{"Template Instantiation" link "Template Instantiation"}, for more information.

     This option is deprecated.

@{b}-ffor-scope@{ub}
@{b}-fno-for-scope@{ub}
     If -ffor-scope is specified, the scope of variables declared in a
     @{i}for-init-statement@{ui} is limited to the @{b}for@{ub} loop itself, as specified
     by the draft C++ standard.  If -fno-for-scope is specified, the
     scope of variables declared in a @{i}for-init-statement@{ui} extends to the
     end of the enclosing scope, as was the case in old versions of
     gcc, and other (traditional) implementations of C++.

     The default if neither flag is given to follow the standard, but
     to allow and give a warning for old-style code that would
     otherwise be invalid, or have different behavior.

@{b}-fno-gnu-keywords@{ub}
     Do not recognize @{b}classof@{ub}, @{b}headof@{ub}, @{b}signature@{ub}, @{b}sigof@{ub} or @{b}typeof@{ub} as a
     keyword, so that code can use these words as identifiers.  You can
     use the keywords @{b}__classof__@{ub}, @{b}__headof__@{ub}, @{b}__signature__@{ub},
     @{b}__sigof__@{ub}, and @{b}__typeof__@{ub} instead.  @{b}-ansi@{ub} implies
     @{b}-fno-gnu-keywords@{ub}.

@{b}-fguiding-decls@{ub}
     Treat a function declaration with the same type as a potential
     function template instantiation as though it declares that
     instantiation, not a normal function.  If a definition is given
     for the function later in the translation unit (or another
     translation unit if the target supports weak symbols), that
     definition will be used; otherwise the template will be
     instantiated.  This behavior reflects the C++ language prior to
     September 1996, when guiding declarations were removed.

     This option implies @{b}-fname-mangling-version-0@{ub}, and will not work
     with other name mangling versions.

@{b}-fno-implicit-templates@{ub}
     Never emit code for templates which are instantiated implicitly
     (i.e. by use); only emit code for explicit instantiations.  See
     @{"Template Instantiation" link "Template Instantiation"}, for more information.

@{b}-fhandle-signatures@{ub}
     Recognize the @{b}signature@{ub} and @{b}sigof@{ub} keywords for specifying abstract
     types.  The default (@{b}-fno-handle-signatures@{ub}) is not to recognize
     them.  See @{"Type Abstraction using Signatures" link "C++ Signatures"}.

@{b}-fhuge-objects@{ub}
     Support virtual function calls for objects that exceed the size
     representable by a @{b}short int@{ub}.  Users should not use this flag by
     default; if you need to use it, the compiler will tell you so.  If
     you compile any of your code with this flag, you must compile @{i}all@{ui}
     of your code with this flag (including the C++ library, if you use
     it).

     This flag is not useful when compiling with -fvtable-thunks.

@{b}-fno-implement-inlines@{ub}
     To save space, do not emit out-of-line copies of inline functions
     controlled by @{b}#pragma implementation@{ub}.  This will cause linker
     errors if these functions are not inlined everywhere they are
     called.

@{b}-fmemoize-lookups@{ub}
@{b}-fsave-memoized@{ub}
     Use heuristics to compile faster.  These heuristics are not
     enabled by default, since they are only effective for certain
     input files.  Other input files compile more slowly.

     The first time the compiler must build a call to a member function
     (or reference to a data member), it must (1) determine whether the
     class implements member functions of that name; (2) resolve which
     member function to call (which involves figuring out what sorts of
     type conversions need to be made); and (3) check the visibility of
     the member function to the caller.  All of this adds up to slower
     compilation.  Normally, the second time a call is made to that
     member function (or reference to that data member), it must go
     through the same lengthy process again.  This means that code like
     this:

          cout << "This " << p << " has " << n << " legs.\\n";

     makes six passes through all three steps.  By using a software
     cache, a "hit" significantly reduces this cost.  Unfortunately,
     using the cache introduces another layer of mechanisms which must
     be implemented, and so incurs its own overhead.  @{b}-fmemoize-lookups@{ub}
     enables the software cache.

     Because access privileges (visibility) to members and member
     functions may differ from one function context to the next, G++
     may need to flush the cache.  With the @{b}-fmemoize-lookups@{ub} flag, the
     cache is flushed after every function that is compiled.  The
     @{b}-fsave-memoized@{ub} flag enables the same software cache, but when the
     compiler determines that the context of the last function compiled
     would yield the same access privileges of the next function to
     compile, it preserves the cache.  This is most helpful when
     defining many member functions for the same class: with the
     exception of member functions which are friends of other classes,
     each member function has exactly the same access privileges as
     every other, and the cache need not be flushed.

     The code that implements these flags has rotted; you should
     probably avoid using them.

@{b}-fstrict-prototype@{ub}
     Within an @{b}extern "C"@{ub} linkage specification, treat a function
     declaration with no arguments, such as @{b}int foo ();@{ub}, as declaring
     the function to take no arguments.  Normally, such a declaration
     means that the function @{b}foo@{ub} can take any combination of arguments,
     as in C.  @{b}-pedantic@{ub} implies @{b}-fstrict-prototype@{ub} unless overridden
     with @{b}-fno-strict-prototype@{ub}.

     This flag no longer affects declarations with C++ linkage.

@{b}-fname-mangling-version-N@{ub}
     Control the way in which names are mangled.  Version 0 is
     compatible with versions of g++ before 2.8.  Version 1 is the
     default.  Version 1 will allow correct mangling of function
     templates.  For example, version 0 mangling does not mangle
     foo<int, double> and foo<int, char> given this declaration:

          template <class T, class U> void foo(T t);

@{b}-fno-nonnull-objects@{ub}
     Don't assume that a reference is initialized to refer to a valid
     object.  Although the current C++ Working Paper prohibits null
     references, some old code may rely on them, and you can use
     @{b}-fno-nonnull-objects@{ub} to turn on checking.

     At the moment, the compiler only does this checking for
     conversions to virtual base classes.

@{b}-foperator-names@{ub}
     Recognize the operator name keywords @{b}and@{ub}, @{b}bitand@{ub}, @{b}bitor@{ub}, @{b}compl@{ub},
     @{b}not@{ub}, @{b}or@{ub} and @{b}xor@{ub} as synonyms for the symbols they refer to.  @{b}-ansi@{ub}
     implies @{b}-foperator-names@{ub}.

@{b}-fno-optional-diags@{ub}
     Disable diagnostics that the standard says a compiler does not
     need to issue.  Currently, this means the diagnostic for a name
     having multiple meanings within a class.

@{b}-frepo@{ub}
     Enable automatic template instantiation.  This option also implies
     @{b}-fno-implicit-templates@{ub}.  See @{"Template Instantiation" link "Template Instantiation"}, for more
     information.

@{b}-fsquangle@{ub}
@{b}-fno-squangle@{ub}
@{b}     -fsquangle@{ub} will enable a compressed form of name mangling for
     identifiers. In particular, it helps to shorten very long names by
     recognizing types and class names which occur more than once,
     replacing them with special short ID codes.  This option also
     requires any C++ libraries being used to be compiled with this
     option as well.  The compiler has this disabled (the equivalent of
     @{b}-fno-squangle@{ub}) by default.

@{b}-fthis-is-variable@{ub}
     Permit assignment to @{b}this@{ub}.  The incorporation of user-defined free
     store management into C++ has made assignment to @{b}this@{ub} an
     anachronism.  Therefore, by default it is invalid to assign to
     @{b}this@{ub} within a class member function; that is, GNU C++ treats @{b}this@{ub}
     in a member function of class @{b}X@{ub} as a non-lvalue of type @{b}X *@{ub}.
     However, for backwards compatibility, you can make it valid with
     @{b}-fthis-is-variable@{ub}.

@{b}-fvtable-thunks@{ub}
     Use @{b}thunks@{ub} to implement the virtual function dispatch table
     (@{b}vtable@{ub}).  The traditional (cfront-style) approach to implementing
     vtables was to store a pointer to the function and two offsets for
     adjusting the @{b}this@{ub} pointer at the call site.  Newer
     implementations store a single pointer to a @{b}thunk@{ub} function which
     does any necessary adjustment and then calls the target function.

     This option also enables a heuristic for controlling emission of
     vtables; if a class has any non-inline virtual functions, the
     vtable will be emitted in the translation unit containing the
     first one of those.

@{b}-ftemplate-depth-N@{ub}
     Set the maximum instantiation depth for template classes to N.  A
     limit on the template instantiation depth is needed to detect
     endless recursions during template class instantiation. ANSI/ISO
     C++ conforming programs must not rely on a maximum depth greater
     than 17.

@{b}-nostdinc++@{ub}
     Do not search for header files in the standard directories
     specific to C++, but do still search the other standard
     directories.  (This option is used when building the C++ library.)

@{b}-traditional@{ub}
     For C++ programs (in addition to the effects that apply to both C
     and C++), this has the same effect as @{b}-fthis-is-variable@{ub}.  See
     @{"Options Controlling C Dialect" link "C Dialect Options"}.

   In addition, these optimization, warning, and code generation options
have meanings only for C++ programs:

@{b}-fno-default-inline@{ub}
     Do not assume @{b}inline@{ub} for functions defined inside a class scope.
     See @{"Options That Control Optimization" link "Optimize Options"}.

@{b}-Wold-style-cast@{ub}
@{b}-Woverloaded-virtual@{ub}
@{b}-Wtemplate-debugging@{ub}
     Warnings that apply only to C++ programs.  See
     @{"Options to Request or Suppress Warnings" link "Warning Options"}.

@{b}-Weffc++@{ub}
     Warn about violation of some style rules from Effective C++ by
     Scott Myers.

@{b}+eN@{ub}
     Control how virtual function definitions are used, in a fashion
     compatible with @{b}cfront@{ub} 1.x.  See
     @{"Options for Code Generation Conventions" link "Code Gen Options"}.


@endnode

@node "Warning Options" "gcc.guide/Warning Options"
@next "Debugging Options"
@prev "C++ Dialect Options"
@toc "Invoking GCC"

Options to Request or Suppress Warnings
=======================================

   Warnings are diagnostic messages that report constructions which are
not inherently erroneous but which are risky or suggest there may have
been an error.

   You can request many specific warnings with options beginning @{b}-W@{ub},
for example @{b}-Wimplicit@{ub} to request warnings on implicit declarations.
Each of these specific warning options also has a negative form
beginning @{b}-Wno-@{ub} to turn off warnings; for example, @{b}-Wno-implicit@{ub}.  This
manual lists only one of the two forms, whichever is not the default.

   These options control the amount and kinds of warnings produced by
GNU CC:

@{b}-fsyntax-only@{ub}
     Check the code for syntax errors, but don't do anything beyond
     that.

@{b}-pedantic@{ub}
     Issue all the warnings demanded by strict ANSI C and ISO C++;
     reject all programs that use forbidden extensions.

     Valid ANSI C and ISO C++ programs should compile properly with or
     without this option (though a rare few will require @{b}-ansi@{ub}).
     However, without this option, certain GNU extensions and
     traditional C and C++ features are supported as well.  With this
     option, they are rejected.

@{b}     -pedantic@{ub} does not cause warning messages for use of the alternate
     keywords whose names begin and end with @{b}__@{ub}.  Pedantic warnings are
     also disabled in the expression that follows @{b}__extension__@{ub}.
     However, only system header files should use these escape routes;
     application programs should avoid them.  See @{"Alternate Keywords" link "Alternate Keywords"}.

     This option is not intended to be @{i}useful@{ui}; it exists only to satisfy
     pedants who would otherwise claim that GNU CC fails to support the
     ANSI standard.

     Some users try to use @{b}-pedantic@{ub} to check programs for strict ANSI
     C conformance.  They soon find that it does not do quite what they
     want: it finds some non-ANSI practices, but not all--only those
     for which ANSI C @{i}requires@{ui} a diagnostic.

     A feature to report any failure to conform to ANSI C might be
     useful in some instances, but would require considerable
     additional work and would be quite different from @{b}-pedantic@{ub}.  We
     recommend, rather, that users take advantage of the extensions of
     GNU C and disregard the limitations of other compilers.  Aside
     from certain supercomputers and obsolete small machines, there is
     less and less reason ever to use any other C compiler other than
     for bootstrapping GNU CC.

@{b}-pedantic-errors@{ub}
     Like @{b}-pedantic@{ub}, except that errors are produced rather than
     warnings.

@{b}-w@{ub}
     Inhibit all warning messages.

@{b}-Wno-import@{ub}
     Inhibit warning messages about the use of @{b}#import@{ub}.

@{b}-Wchar-subscripts@{ub}
     Warn if an array subscript has type @{b}char@{ub}.  This is a common cause
     of error, as programmers often forget that this type is signed on
     some machines.

@{b}-Wcomment@{ub}
     Warn whenever a comment-start sequence @{b}/*@{ub} appears in a @{b}/*@{ub} comment,
     or whenever a Backslash-Newline appears in a @{b}//@{ub} comment.

@{b}-Wformat@{ub}
     Check calls to @{b}printf@{ub} and @{b}scanf@{ub}, etc., to make sure that the
     arguments supplied have types appropriate to the format string
     specified.

@{b}-Wimplicit-int@{ub}
     Warn when a declaration does not specify a type.

@{b}-Wimplicit-function-declaration@{ub}
@{b}-Werror-implicit-function-declaration@{ub}
     Give a warning (or error) whenever a function is used before being
     declared.

@{b}-Wimplicit@{ub}
     Same as @{b}-Wimplicit-int@{ub} and @{b}-Wimplicit-function-@{ub}
@{b}     declaration@{ub}.

@{b}-Wmain@{ub}
     Warn if the type of @{b}main@{ub} is suspicious.  @{b}main@{ub} should be a function
     with external linkage, returning int, taking either zero
     arguments, two, or three arguments of appropriate types.

@{b}-Wmultichar@{ub}
     Warn if a multicharacter constant (@{b}'FOOF'@{ub}) is used.  Usually they
     indicate a typo in the user's code, as they have
     implementation-defined values, and should not be used in portable
     code.

@{b}-Wparentheses@{ub}
     Warn if parentheses are omitted in certain contexts, such as when
     there is an assignment in a context where a truth value is
     expected, or when operators are nested whose precedence people
     often get confused about.

     Also warn about constructions where there may be confusion to which
     @{b}if@{ub} statement an @{b}else@{ub} branch belongs.  Here is an example of such a
     case:

          {
            if (a)
              if (b)
                foo ();
            else
              bar ();
          }

     In C, every @{b}else@{ub} branch belongs to the innermost possible @{b}if@{ub}
     statement, which in this example is @{b}if (b)@{ub}.  This is often not
     what the programmer expected, as illustrated in the above example
     by indentation the programmer chose.  When there is the potential
     for this confusion, GNU C will issue a warning when this flag is
     specified.  To eliminate the warning, add explicit braces around
     the innermost @{b}if@{ub} statement so there is no way the @{b}else@{ub} could
     belong to the enclosing @{b}if@{ub}.  The resulting code would look like
     this:

          {
            if (a)
              {
                if (b)
                  foo ();
                else
                  bar ();
              }
          }

@{b}-Wreturn-type@{ub}
     Warn whenever a function is defined with a return-type that
     defaults to @{b}int@{ub}.  Also warn about any @{b}return@{ub} statement with no
     return-value in a function whose return-type is not @{b}void@{ub}.

@{b}-Wswitch@{ub}
     Warn whenever a @{b}switch@{ub} statement has an index of enumeral type and
     lacks a @{b}case@{ub} for one or more of the named codes of that
     enumeration.  (The presence of a @{b}default@{ub} label prevents this
     warning.)  @{b}case@{ub} labels outside the enumeration range also provoke
     warnings when this option is used.

@{b}-Wtrigraphs@{ub}
     Warn if any trigraphs are encountered (assuming they are enabled).

@{b}-Wunused@{ub}
     Warn whenever a variable is unused aside from its declaration,
     whenever a function is declared static but never defined, whenever
     a label is declared but not used, and whenever a statement
     computes a result that is explicitly not used.

     In order to get a warning about an unused function parameter, you
     must specify both @{b}-W@{ub} and @{b}-Wunused@{ub}.

     To suppress this warning for an expression, simply cast it to
     void.  For unused variables and parameters, use the @{b}unused@{ub}
     attribute (see @{"Variable Attributes" link "Variable Attributes"}).

@{b}-Wuninitialized@{ub}
     An automatic variable is used without first being initialized.

     These warnings are possible only in optimizing compilation,
     because they require data flow information that is computed only
     when optimizing.  If you don't specify @{b}-O@{ub}, you simply won't get
     these warnings.

     These warnings occur only for variables that are candidates for
     register allocation.  Therefore, they do not occur for a variable
     that is declared @{b}volatile@{ub}, or whose address is taken, or whose size
     is other than 1, 2, 4 or 8 bytes.  Also, they do not occur for
     structures, unions or arrays, even when they are in registers.

     Note that there may be no warning about a variable that is used
     only to compute a value that itself is never used, because such
     computations may be deleted by data flow analysis before the
     warnings are printed.

     These warnings are made optional because GNU CC is not smart
     enough to see all the reasons why the code might be correct
     despite appearing to have an error.  Here is one example of how
     this can happen:

          {
            int x;
            switch (y)
              {
              case 1: x = 1;
                break;
              case 2: x = 4;
                break;
              case 3: x = 5;
              }
            foo (x);
          }

     If the value of @{b}y@{ub} is always 1, 2 or 3, then @{b}x@{ub} is always
     initialized, but GNU CC doesn't know this.  Here is another common
     case:

          {
            int save_y;
            if (change_y) save_y = y, y = new_y;
            ...
            if (change_y) y = save_y;
          }

     This has no bug because @{b}save_y@{ub} is used only if it is set.

     Some spurious warnings can be avoided if you declare all the
     functions you use that never return as @{b}noreturn@{ub}.  See
     @{"Function Attributes" link "Function Attributes"}.

@{b}-Wreorder (C++ only)@{ub}
     Warn when the order of member initializers given in the code does
     not match the order in which they must be executed.  For instance:

          struct A {
            int i;
            int j;
            A(): j (0), i (1) { }
          };

     Here the compiler will warn that the member initializers for @{b}i@{ub} and
     @{b}j@{ub} will be rearranged to match the declaration order of the members.

@{b}-Wtemplate-debugging@{ub}
     When using templates in a C++ program, warn if debugging is not yet
     fully available (C++ only).

@{b}-Wunknown-pragmas@{ub}
     Warn when a #pragma directive is encountered which is not
     understood by GCC.  If this command line option is used, warnings
     will even be issued for unknown pragmas in system header files.
     This is not the case if the warnings were only enabled by the
     @{b}-Wall@{ub} command line option.

@{b}-Wall@{ub}
     All of the above @{b}-W@{ub} options combined.  This enables all the
     warnings about constructions that some users consider
     questionable, and that are easy to avoid (or modify to prevent the
     warning), even in conjunction with macros.

   The following @{b}-W...@{ub} options are not implied by @{b}-Wall@{ub}.  Some of them
warn about constructions that users generally do not consider
questionable, but which occasionally you might wish to check for;
others warn about constructions that are necessary or hard to avoid in
some cases, and there is no simple way to modify the code to suppress
the warning.

@{b}-W@{ub}
     Print extra warning messages for these events:

        * A nonvolatile automatic variable might be changed by a call to
          @{b}longjmp@{ub}.  These warnings as well are possible only in
          optimizing compilation.

          The compiler sees only the calls to @{b}setjmp@{ub}.  It cannot know
          where @{b}longjmp@{ub} will be called; in fact, a signal handler could
          call it at any point in the code.  As a result, you may get a
          warning even when there is in fact no problem because @{b}longjmp@{ub}
          cannot in fact be called at the place which would cause a
          problem.

        * A function can return either with or without a value.
          (Falling off the end of the function body is considered
          returning without a value.)  For example, this function would
          evoke such a warning:

               foo (a)
               {
                 if (a > 0)
                   return a;
               }

        * An expression-statement or the left-hand side of a comma
          expression contains no side effects.  To suppress the
          warning, cast the unused expression to void.  For example, an
          expression such as @{b}x[i,j]@{ub} will cause a warning, but
          @{b}x[(void)i,j]@{ub} will not.

        * An unsigned value is compared against zero with @{b}<@{ub} or @{b}<=@{ub}.

        * A comparison like @{b}x<=y<=z@{ub} appears; this is equivalent to
          @{b}(x<=y ? 1 : 0) <= z@{ub}, which is a different interpretation from
          that of ordinary mathematical notation.

        * Storage-class specifiers like @{b}static@{ub} are not the first things
          in a declaration.  According to the C Standard, this usage is
          obsolescent.

        * If @{b}-Wall@{ub} or @{b}-Wunused@{ub} is also specified, warn about unused
          arguments.

        * A comparison between signed and unsigned values could produce
          an incorrect result when the signed value is converted to
          unsigned.  (But don't warn if @{b}-Wno-sign-compare@{ub} is also
          specified.)

        * An aggregate has a partly bracketed initializer.  For
          example, the following code would evoke such a warning,
          because braces are missing around the initializer for @{b}x.h@{ub}:

               struct s { int f, g; };
               struct t { struct s h; int i; };
               struct t x = { 1, 2, 3 };

        * An aggregate has an initializer which does not initialize all
          members.  For example, the following code would cause such a
          warning, because @{b}x.h@{ub} would be implicitly initialized to zero:

               struct s { int f, g, h; };
               struct s x = { 3, 4 };

@{b}-Wtraditional@{ub}
     Warn about certain constructs that behave differently in
     traditional and ANSI C.

        * Macro arguments occurring within string constants in the
          macro body.  These would substitute the argument in
          traditional C, but are part of the constant in ANSI C.

        * A function declared external in one block and then used after
          the end of the block.

        * A @{b}switch@{ub} statement has an operand of type @{b}long@{ub}.

@{b}-Wundef@{ub}
     Warn if an undefined identifier is evaluated in an @{b}#if@{ub} directive.

@{b}-Wshadow@{ub}
     Warn whenever a local variable shadows another local variable.

@{b}-Wid-clash-LEN@{ub}
     Warn whenever two distinct identifiers match in the first LEN
     characters.  This may help you prepare a program that will compile
     with certain obsolete, brain-damaged compilers.

@{b}-Wlarger-than-LEN@{ub}
     Warn whenever an object of larger than LEN bytes is defined.

@{b}-Wpointer-arith@{ub}
     Warn about anything that depends on the "size of" a function type
     or of @{b}void@{ub}.  GNU C assigns these types a size of 1, for
     convenience in calculations with @{b}void *@{ub} pointers and pointers to
     functions.

@{b}-Wbad-function-cast@{ub}
     Warn whenever a function call is cast to a non-matching type.  For
     example, warn if @{b}int malloc()@{ub} is cast to @{b}anything *@{ub}.

@{b}-Wcast-qual@{ub}
     Warn whenever a pointer is cast so as to remove a type qualifier
     from the target type.  For example, warn if a @{b}const char *@{ub} is cast
     to an ordinary @{b}char *@{ub}.

@{b}-Wcast-align@{ub}
     Warn whenever a pointer is cast such that the required alignment
     of the target is increased.  For example, warn if a @{b}char *@{ub} is cast
     to an @{b}int *@{ub} on machines where integers can only be accessed at
     two- or four-byte boundaries.

@{b}-Wwrite-strings@{ub}
     Give string constants the type @{b}const char[LENGTH]@{ub} so that copying
     the address of one into a non-@{b}const@{ub} @{b}char *@{ub} pointer will get a
     warning.  These warnings will help you find at compile time code
     that can try to write into a string constant, but only if you have
     been very careful about using @{b}const@{ub} in declarations and
     prototypes.  Otherwise, it will just be a nuisance; this is why we
     did not make @{b}-Wall@{ub} request these warnings.

@{b}-Wconversion@{ub}
     Warn if a prototype causes a type conversion that is different
     from what would happen to the same argument in the absence of a
     prototype.  This includes conversions of fixed point to floating
     and vice versa, and conversions changing the width or signedness
     of a fixed point argument except when the same as the default
     promotion.

     Also, warn if a negative integer constant expression is implicitly
     converted to an unsigned type.  For example, warn about the
     assignment @{b}x = -1@{ub} if @{b}x@{ub} is unsigned.  But do not warn about explicit
     casts like @{b}(unsigned) -1@{ub}.

@{b}-Wsign-compare@{ub}
     Warn when a comparison between signed and unsigned values could
     produce an incorrect result when the signed value is converted to
     unsigned.  This warning is also enabled by @{b}-W@{ub}; to get the other
     warnings of @{b}-W@{ub} without this warning, use @{b}-W -Wno-sign-compare@{ub}.

@{b}-Waggregate-return@{ub}
     Warn if any functions that return structures or unions are defined
     or called.  (In languages where you can return an array, this also
     elicits a warning.)

@{b}-Wstrict-prototypes@{ub}
     Warn if a function is declared or defined without specifying the
     argument types.  (An old-style function definition is permitted
     without a warning if preceded by a declaration which specifies the
     argument types.)

@{b}-Wmissing-prototypes@{ub}
     Warn if a global function is defined without a previous prototype
     declaration.  This warning is issued even if the definition itself
     provides a prototype.  The aim is to detect global functions that
     fail to be declared in header files.

@{b}-Wmissing-declarations@{ub}
     Warn if a global function is defined without a previous
     declaration.  Do so even if the definition itself provides a
     prototype.  Use this option to detect global functions that are
     not declared in header files.

@{b}-Wredundant-decls@{ub}
     Warn if anything is declared more than once in the same scope,
     even in cases where multiple declaration is valid and changes
     nothing.

@{b}-Wnested-externs@{ub}
     Warn if an @{b}extern@{ub} declaration is encountered within an function.

@{b}-Winline@{ub}
     Warn if a function can not be inlined, and either it was declared
     as inline, or else the @{b}-finline-functions@{ub} option was given.

@{b}-Wold-style-cast@{ub}
     Warn if an old-style (C-style) cast is used within a program.

@{b}-Woverloaded-virtual@{ub}
     Warn when a derived class function declaration may be an error in
     defining a virtual function (C++ only).  In a derived class, the
     definitions of virtual functions must match the type signature of a
     virtual function declared in the base class.  With this option, the
     compiler warns when you define a function with the same name as a
     virtual function, but with a type signature that does not match any
     declarations from the base class.

@{b}-Wsynth (C++ only)@{ub}
     Warn when g++'s synthesis behavior does not match that of cfront.
     For instance:

          struct A {
            operator int ();
            A& operator = (int);
          };
          
          main ()
          {
            A a,b;
            a = b;
          }

     In this example, g++ will synthesize a default @{b}A& operator =
     (const A&);@{ub}, while cfront will use the user-defined @{b}operator =@{ub}.

@{b}-Wlong-long@{ub}
     Warn if @{b}long long@{ub} type is used.  This is default.  To inhibit the
     warning messages, use @{b}-Wno-long-long@{ub}.  Flags @{b}-Wlong-long@{ub} and
     @{b}-Wno-long-long@{ub} are taken into account only when @{b}-pedantic@{ub} flag is
     used.

@{b}-Werror@{ub}
     Make all warnings into errors.


@endnode

@node "Debugging Options" "gcc.guide/Debugging Options"
@next "Optimize Options"
@prev "Warning Options"
@toc "Invoking GCC"

Options for Debugging Your Program or GNU CC
============================================

   GNU CC has various special options that are used for debugging
either your program or GCC:

@{b}-g@{ub}
     Produce debugging information in the operating system's native
     format (stabs, COFF, XCOFF, or DWARF).  GDB can work with this
     debugging information.

     On most systems that use stabs format, @{b}-g@{ub} enables use of extra
     debugging information that only GDB can use; this extra information
     makes debugging work better in GDB but will probably make other
     debuggers crash or refuse to read the program.  If you want to
     control for certain whether to generate the extra information, use
     @{b}-gstabs+@{ub}, @{b}-gstabs@{ub}, @{b}-gxcoff+@{ub}, @{b}-gxcoff@{ub}, @{b}-gdwarf-1+@{ub}, or @{b}-gdwarf-1@{ub}
     (see below).

     Unlike most other C compilers, GNU CC allows you to use @{b}-g@{ub} with
     @{b}-O@{ub}.  The shortcuts taken by optimized code may occasionally
     produce surprising results: some variables you declared may not
     exist at all; flow of control may briefly move where you did not
     expect it; some statements may not be executed because they
     compute constant results or their values were already at hand;
     some statements may execute in different places because they were
     moved out of loops.

     Nevertheless it proves possible to debug optimized output.  This
     makes it reasonable to use the optimizer for programs that might
     have bugs.

     The following options are useful when GNU CC is generated with the
     capability for more than one debugging format.

@{b}-ggdb@{ub}
     Produce debugging information for use by GDB.  This means to use
     the most expressive format available (DWARF 2, stabs, or the
     native format if neither of those are supported), including GDB
     extensions if at all possible.

@{b}-gstabs@{ub}
     Produce debugging information in stabs format (if that is
     supported), without GDB extensions.  This is the format used by
     DBX on most BSD systems.  On MIPS, Alpha and System V Release 4
     systems this option produces stabs debugging output which is not
     understood by DBX or SDB.  On System V Release 4 systems this
     option requires the GNU assembler.

@{b}-gstabs+@{ub}
     Produce debugging information in stabs format (if that is
     supported), using GNU extensions understood only by the GNU
     debugger (GDB).  The use of these extensions is likely to make
     other debuggers crash or refuse to read the program.

@{b}-gcoff@{ub}
     Produce debugging information in COFF format (if that is
     supported).  This is the format used by SDB on most System V
     systems prior to System V Release 4.

@{b}-gxcoff@{ub}
     Produce debugging information in XCOFF format (if that is
     supported).  This is the format used by the DBX debugger on IBM
     RS/6000 systems.

@{b}-gxcoff+@{ub}
     Produce debugging information in XCOFF format (if that is
     supported), using GNU extensions understood only by the GNU
     debugger (GDB).  The use of these extensions is likely to make
     other debuggers crash or refuse to read the program, and may cause
     assemblers other than the GNU assembler (GAS) to fail with an
     error.

@{b}-gdwarf@{ub}
     Produce debugging information in DWARF version 1 format (if that is
     supported).  This is the format used by SDB on most System V
     Release 4 systems.

@{b}-gdwarf+@{ub}
     Produce debugging information in DWARF version 1 format (if that is
     supported), using GNU extensions understood only by the GNU
     debugger (GDB).  The use of these extensions is likely to make
     other debuggers crash or refuse to read the program.

@{b}-gdwarf-2@{ub}
     Produce debugging information in DWARF version 2 format (if that is
     supported).  This is the format used by DBX on IRIX 6.

@{b}-gLEVEL@{ub}
@{b}-ggdbLEVEL@{ub}
@{b}-gstabsLEVEL@{ub}
@{b}-gcoffLEVEL@{ub}
@{b}-gxcoffLEVEL@{ub}
@{b}-gdwarfLEVEL@{ub}
@{b}-gdwarf-2LEVEL@{ub}
     Request debugging information and also use LEVEL to specify how
     much information.  The default level is 2.

     Level 1 produces minimal information, enough for making backtraces
     in parts of the program that you don't plan to debug.  This
     includes descriptions of functions and external variables, but no
     information about local variables and no line numbers.

     Level 3 includes extra information, such as all the macro
     definitions present in the program.  Some debuggers support macro
     expansion when you use @{b}-g3@{ub}.

@{b}-p@{ub}
     Generate extra code to write profile information suitable for the
     analysis program @{b}prof@{ub}.  You must use this option when compiling
     the source files you want data about, and you must also use it when
     linking.

@{b}-pg@{ub}
     Generate extra code to write profile information suitable for the
     analysis program @{b}gprof@{ub}.  You must use this option when compiling
     the source files you want data about, and you must also use it when
     linking.

@{b}-a@{ub}
     Generate extra code to write profile information for basic blocks,
     which will record the number of times each basic block is
     executed, the basic block start address, and the function name
     containing the basic block.  If @{b}-g@{ub} is used, the line number and
     filename of the start of the basic block will also be recorded.
     If not overridden by the machine description, the default action is
     to append to the text file @{b}bb.out@{ub}.

     This data could be analyzed by a program like @{b}tcov@{ub}.  Note,
     however, that the format of the data is not what @{b}tcov@{ub} expects.
     Eventually GNU @{b}gprof@{ub} should be extended to process this data.

@{b}-Q@{ub}
     Makes the compiler print out each function name as it is compiled,
     and print some statistics about each pass when it finishes.

@{b}-ax@{ub}
     Generate extra code to profile basic blocks.  Your executable will
     produce output that is a superset of that produced when @{b}-a@{ub} is
     used.  Additional output is the source and target address of the
     basic blocks where a jump takes place, the number of times a jump
     is executed, and (optionally) the complete sequence of basic
     blocks being executed.  The output is appended to file @{b}bb.out@{ub}.

     You can examine different profiling aspects without recompilation.
     Your executable will read a list of function names from file
     @{b}bb.in@{ub}.  Profiling starts when a function on the list is entered
     and stops when that invocation is exited.  To exclude a function
     from profiling, prefix its name with `-'.  If a function name is
     not unique, you can disambiguate it by writing it in the form
     @{b}/path/filename.d:functionname@{ub}.  Your executable will write the
     available paths and filenames in file @{b}bb.out@{ub}.

     Several function names have a special meaning:
    @{b}__bb_jumps__@{ub}
          Write source, target and frequency of jumps to file @{b}bb.out@{ub}.

    @{b}__bb_hidecall__@{ub}
          Exclude function calls from frequency count.

    @{b}__bb_showret__@{ub}
          Include function returns in frequency count.

    @{b}__bb_trace__@{ub}
          Write the sequence of basic blocks executed to file
          @{b}bbtrace.gz@{ub}.  The file will be compressed using the program
          @{b}gzip@{ub}, which must exist in your @{b}PATH@{ub}.  On systems without the
          @{b}popen@{ub} function, the file will be named @{b}bbtrace@{ub} and will not be
          compressed.  @{b}Profiling for even a few seconds on these systems
          will produce a very large file.@{ub}  Note: @{b}__bb_hidecall__@{ub} and
          @{b}__bb_showret__@{ub} will not affect the sequence written to
          @{b}bbtrace.gz@{ub}.

     Here's a short example using different profiling parameters in
     file @{b}bb.in@{ub}.  Assume function @{b}foo@{ub} consists of basic blocks 1 and 2
     and is called twice from block 3 of function @{b}main@{ub}.  After the
     calls, block 3 transfers control to block 4 of @{b}main@{ub}.

     With @{b}__bb_trace__@{ub} and @{b}main@{ub} contained in file @{b}bb.in@{ub}, the following
     sequence of blocks is written to file @{b}bbtrace.gz@{ub}: 0 3 1 2 1 2 4.
     The return from block 2 to block 3 is not shown, because the
     return is to a point inside the block and not to the top.  The
     block address 0 always indicates, that control is transferred to
     the trace from somewhere outside the observed functions.  With
     @{b}-foo@{ub} added to @{b}bb.in@{ub}, the blocks of function @{b}foo@{ub} are removed from
     the trace, so only 0 3 4 remains.

     With @{b}__bb_jumps__@{ub} and @{b}main@{ub} contained in file @{b}bb.in@{ub}, jump
     frequencies will be written to file @{b}bb.out@{ub}.  The frequencies are
     obtained by constructing a trace of blocks and incrementing a
     counter for every neighbouring pair of blocks in the trace.  The
     trace 0 3 1 2 1 2 4 displays the following frequencies:

          Jump from block 0x0 to block 0x3 executed 1 time(s)
          Jump from block 0x3 to block 0x1 executed 1 time(s)
          Jump from block 0x1 to block 0x2 executed 2 time(s)
          Jump from block 0x2 to block 0x1 executed 1 time(s)
          Jump from block 0x2 to block 0x4 executed 1 time(s)

     With @{b}__bb_hidecall__@{ub}, control transfer due to call instructions is
     removed from the trace, that is the trace is cut into three parts:
     0 3 4, 0 1 2 and 0 1 2.  With @{b}__bb_showret__@{ub}, control transfer due
     to return instructions is added to the trace.  The trace becomes:
     0 3 1 2 3 1 2 3 4.  Note, that this trace is not the same, as the
     sequence written to @{b}bbtrace.gz@{ub}.  It is solely used for counting
     jump frequencies.

@{b}-fprofile-arcs@{ub}
     Instrument @{i}arcs@{ui} during compilation.  For each function of your
     program, GNU CC creates a program flow graph, then finds a
     spanning tree for the graph.  Only arcs that are not on the
     spanning tree have to be instrumented: the compiler adds code to
     count the number of times that these arcs are executed.  When an
     arc is the only exit or only entrance to a block, the
     instrumentation code can be added to the block; otherwise, a new
     basic block must be created to hold the instrumentation code.

     Since not every arc in the program must be instrumented, programs
     compiled with this option run faster than programs compiled with
     @{b}-a@{ub}, which adds instrumentation code to every basic block in the
     program.  The tradeoff: since @{b}gcov@{ub} does not have execution counts
     for all branches, it must start with the execution counts for the
     instrumented branches, and then iterate over the program flow
     graph until the entire graph has been solved.  Hence, @{b}gcov@{ub} runs a
     little more slowly than a program which uses information from @{b}-a@{ub}.

@{b}     -fprofile-arcs@{ub} also makes it possible to estimate branch
     probabilities, and to calculate basic block execution counts.  In
     general, basic block execution counts do not give enough
     information to estimate all branch probabilities.  When the
     compiled program exits, it saves the arc execution counts to a
     file called @{b}SOURCENAME.da@{ub}.  Use the compiler option
     @{b}-fbranch-probabilities@{ub} (see @{"Options that Control Optimization" link "Optimize Options"})
     when recompiling, to optimize using estimated branch probabilities.

@{b}-ftest-coverage@{ub}
     Create data files for the @{b}gcov@{ub} code-coverage utility (see
     @{"gcov: a GNU CC Test Coverage Program" link "Gcov"}).  The data file names
     begin with the name of your source file:

    @{b}SOURCENAME.bb@{ub}
          A mapping from basic blocks to line numbers, which @{b}gcov@{ub} uses
          to associate basic block execution counts with line numbers.

    @{b}SOURCENAME.bbg@{ub}
          A list of all arcs in the program flow graph.  This allows
          @{b}gcov@{ub} to reconstruct the program flow graph, so that it can
          compute all basic block and arc execution counts from the
          information in the @{b}SOURCENAME.da@{ub} file (this last file is the
          output from @{b}-fprofile-arcs@{ub}).

@{b}-Q@{ub}
     Makes the compiler print out each function name as it is compiled,
     and print some statistics about each pass when it finishes.

@{b}-dLETTERS@{ub}
     Says to make debugging dumps during compilation at times specified
     by LETTERS.  This is used for debugging the compiler.  The file
     names for most of the dumps are made by appending a word to the
     source file name (e.g.  @{b}foo.c.rtl@{ub} or @{b}foo.c.jump@{ub}).  Here are the
     possible letters for use in LETTERS, and their meanings:

    @{b}b@{ub}
          Dump after computing branch probabilities, to @{b}FILE.bp@{ub}.

    @{b}c@{ub}
          Dump after instruction combination, to the file @{b}FILE.combine@{ub}.

    @{b}d@{ub}
          Dump after delayed branch scheduling, to @{b}FILE.dbr@{ub}.

    @{b}D@{ub}
          Dump all macro definitions, at the end of preprocessing, in
          addition to normal output.

    @{b}y@{ub}
          Dump debugging information during parsing, to standard error.

    @{b}r@{ub}
          Dump after RTL generation, to @{b}FILE.rtl@{ub}.

    @{b}x@{ub}
          Just generate RTL for a function instead of compiling it.
          Usually used with @{b}r@{ub}.

    @{b}j@{ub}
          Dump after first jump optimization, to @{b}FILE.jump@{ub}.

    @{b}s@{ub}
          Dump after CSE (including the jump optimization that sometimes
          follows CSE), to @{b}FILE.cse@{ub}.

    @{b}F@{ub}
          Dump after purging ADDRESSOF, to @{b}FILE.addressof@{ub}.

    @{b}f@{ub}
          Dump after flow analysis, to @{b}FILE.flow@{ub}.

    @{b}g@{ub}
          Dump after global register allocation, to @{b}FILE.greg@{ub}.

    @{b}G@{ub}
          Dump after GCSE, to @{b}FILE.gcse@{ub}.

    @{b}j@{ub}
          Dump after first jump optimization, to @{b}FILE.jump@{ub}.

    @{b}J@{ub}
          Dump after last jump optimization, to @{b}FILE.jump2@{ub}.

    @{b}k@{ub}
          Dump after conversion from registers to stack, to @{b}FILE.stack@{ub}.

    @{b}l@{ub}
          Dump after local register allocation, to @{b}FILE.lreg@{ub}.

    @{b}L@{ub}
          Dump after loop optimization, to @{b}FILE.loop@{ub}.

    @{b}M@{ub}
          Dump after performing the machine dependent reorganisation
          pass, to @{b}FILE.mach@{ub}.

    @{b}N@{ub}
          Dump after the register move pass, to @{b}FILE.regmove@{ub}.

    @{b}r@{ub}
          Dump after RTL generation, to @{b}FILE.rtl@{ub}.

    @{b}R@{ub}
          Dump after the second instruction scheduling pass, to
          @{b}FILE.sched2@{ub}.

    @{b}s@{ub}
          Dump after CSE (including the jump optimization that
          sometimes follows CSE), to @{b}FILE.cse@{ub}.

    @{b}S@{ub}
          Dump after the first instruction scheduling pass, to
          @{b}FILE.sched@{ub}.

    @{b}t@{ub}
          Dump after the second CSE pass (including the jump
          optimization that sometimes follows CSE), to @{b}FILE.cse2@{ub}.

    @{b}x@{ub}
          Just generate RTL for a function instead of compiling it.
          Usually used with @{b}r@{ub}.

    @{b}a@{ub}
          Produce all the dumps listed above.

    @{b}m@{ub}
          Print statistics on memory usage, at the end of the run, to
          standard error.

    @{b}p@{ub}
          Annotate the assembler output with a comment indicating which
          pattern and alternative was used.

    @{b}y@{ub}
          Dump debugging information during parsing, to standard error.

    @{b}A@{ub}
          Annotate the assembler output with miscellaneous debugging
          information.

@{b}-fpretend-float@{ub}
     When running a cross-compiler, pretend that the target machine
     uses the same floating point format as the host machine.  This
     causes incorrect output of the actual floating constants, but the
     actual instruction sequence will probably be the same as GNU CC
     would make when running on the target machine.

@{b}-save-temps@{ub}
     Store the usual "temporary" intermediate files permanently; place
     them in the current directory and name them based on the source
     file.  Thus, compiling @{b}foo.c@{ub} with @{b}-c -save-temps@{ub} would produce
     files @{b}foo.i@{ub} and @{b}foo.s@{ub}, as well as @{b}foo.o@{ub}.

@{b}-print-file-name=LIBRARY@{ub}
     Print the full absolute name of the library file LIBRARY that
     would be used when linking--and don't do anything else.  With this
     option, GNU CC does not compile or link anything; it just prints
     the file name.

@{b}-print-prog-name=PROGRAM@{ub}
     Like @{b}-print-file-name@{ub}, but searches for a program such as @{b}cpp@{ub}.

@{b}-print-libgcc-file-name@{ub}
     Same as @{b}-print-file-name=libgcc.a@{ub}.

     This is useful when you use @{b}-nostdlib@{ub} or @{b}-nodefaultlibs@{ub} but you do
     want to link with @{b}libgcc.a@{ub}.  You can do

          gcc -nostdlib FILES... `gcc -print-libgcc-file-name`

@{b}-print-search-dirs@{ub}
     Print the name of the configured installation directory and a list
     of program and library directories gcc will search--and don't do
     anything else.

     This is useful when gcc prints the error message @{b}installation
     problem, cannot exec cpp: No such file or directory@{ub}.  To resolve
     this you either need to put @{b}cpp@{ub} and the other compiler components
     where gcc expects to find them, or you can set the environment
     variable @{b}GCC_EXEC_PREFIX@{ub} to the directory where you installed them.
     Don't forget the trailing '/'.  See @{"Environment Variables" link "Environment Variables"}.


@endnode

@node "Optimize Options" "gcc.guide/Optimize Options"
@next "Preprocessor Options"
@prev "Debugging Options"
@toc "Invoking GCC"

Options That Control Optimization
=================================

   These options control various sorts of optimizations:

@{b}-O@{ub}
@{b}-O1@{ub}
     Optimize.  Optimizing compilation takes somewhat more time, and a
     lot more memory for a large function.

     Without @{b}-O@{ub}, the compiler's goal is to reduce the cost of
     compilation and to make debugging produce the expected results.
     Statements are independent: if you stop the program with a
     breakpoint between statements, you can then assign a new value to
     any variable or change the program counter to any other statement
     in the function and get exactly the results you would expect from
     the source code.

     Without @{b}-O@{ub}, the compiler only allocates variables declared
     @{b}register@{ub} in registers.  The resulting compiled code is a little
     worse than produced by PCC without @{b}-O@{ub}.

     With @{b}-O@{ub}, the compiler tries to reduce code size and execution time.

     When you specify @{b}-O@{ub}, the compiler turns on @{b}-fthread-jumps@{ub} and
     @{b}-fdefer-pop@{ub} on all machines.  The compiler turns on
     @{b}-fdelayed-branch@{ub} on machines that have delay slots, and
     @{b}-fomit-frame-pointer@{ub} on machines that can support debugging even
     without a frame pointer.  On some machines the compiler also turns
     on other flags.

@{b}-O2@{ub}
     Optimize even more.  GNU CC performs nearly all supported
     optimizations that do not involve a space-speed tradeoff.  The
     compiler does not perform loop unrolling or function inlining when
     you specify @{b}-O2@{ub}.  As compared to @{b}-O@{ub}, this option increases both
     compilation time and the performance of the generated code.

@{b}     -O2@{ub} turns on all optional optimizations except for loop unrolling
     and function inlining.  It also turns on the @{b}-fforce-mem@{ub} option on
     all machines and frame pointer elimination on machines where doing
     so does not interfere with debugging.

@{b}-O3@{ub}
     Optimize yet more.  @{b}-O3@{ub} turns on all optimizations specified by
     @{b}-O2@{ub} and also turns on the @{b}inline-functions@{ub} option.

@{b}-O0@{ub}
     Do not optimize.

@{b}-Os@{ub}
     Optimize for size.  @{b}-Os@{ub} enables all @{b}-O2@{ub} optimizations that do not
     typically increase code size.  It also performs further
     optimizations designed to reduce code size.

     If you use multiple @{b}-O@{ub} options, with or without level numbers, the
     last such option is the one that is effective.

   Options of the form @{b}-fFLAG@{ub} specify machine-independent flags.  Most
flags have both positive and negative forms; the negative form of @{b}-ffoo@{ub}
would be @{b}-fno-foo@{ub}.  In the table below, only one of the forms is
listed--the one which is not the default.  You can figure out the other
form by either removing @{b}no-@{ub} or adding it.

@{b}-ffloat-store@{ub}
     Do not store floating point variables in registers, and inhibit
     other options that might change whether a floating point value is
     taken from a register or memory.

     This option prevents undesirable excess precision on machines such
     as the 68000 where the floating registers (of the 68881) keep more
     precision than a @{b}double@{ub} is supposed to have.  Similarly for the
     x86 architecture.  For most programs, the excess precision does
     only good, but a few programs rely on the precise definition of
     IEEE floating point.  Use @{b}-ffloat-store@{ub} for such programs.

@{b}-fno-default-inline@{ub}
     Do not make member functions inline by default merely because they
     are defined inside the class scope (C++ only).  Otherwise, when
     you specify @{b}-O@{ub}, member functions defined inside class scope are
     compiled inline by default; i.e., you don't need to add @{b}inline@{ub} in
     front of the member function name.

@{b}-fno-defer-pop@{ub}
     Always pop the arguments to each function call as soon as that
     function returns.  For machines which must pop arguments after a
     function call, the compiler normally lets arguments accumulate on
     the stack for several function calls and pops them all at once.

@{b}-fforce-mem@{ub}
     Force memory operands to be copied into registers before doing
     arithmetic on them.  This produces better code by making all memory
     references potential common subexpressions.  When they are not
     common subexpressions, instruction combination should eliminate
     the separate register-load.  The @{b}-O2@{ub} option turns on this option.

@{b}-fforce-addr@{ub}
     Force memory address constants to be copied into registers before
     doing arithmetic on them.  This may produce better code just as
     @{b}-fforce-mem@{ub} may.

@{b}-fomit-frame-pointer@{ub}
     Don't keep the frame pointer in a register for functions that
     don't need one.  This avoids the instructions to save, set up and
     restore frame pointers; it also makes an extra register available
     in many functions.  @{b}It also makes debugging impossible on some
     machines.@{ub}

     On some machines, such as the Vax, this flag has no effect, because
     the standard calling sequence automatically handles the frame
     pointer and nothing is saved by pretending it doesn't exist.  The
     machine-description macro @{b}FRAME_POINTER_REQUIRED@{ub} controls whether
     a target machine supports this flag.  See @{"Registers" link "Registers"}.

@{b}-fno-inline@{ub}
     Don't pay attention to the @{b}inline@{ub} keyword.  Normally this option
     is used to keep the compiler from expanding any functions inline.
     Note that if you are not optimizing, no functions can be expanded
     inline.

@{b}-finline-functions@{ub}
     Integrate all simple functions into their callers.  The compiler
     heuristically decides which functions are simple enough to be worth
     integrating in this way.

     If all calls to a given function are integrated, and the function
     is declared @{b}static@{ub}, then the function is normally not output as
     assembler code in its own right.

@{b}-fkeep-inline-functions@{ub}
     Even if all calls to a given function are integrated, and the
     function is declared @{b}static@{ub}, nevertheless output a separate
     run-time callable version of the function.  This switch does not
     affect @{b}extern inline@{ub} functions.

@{b}-fkeep-static-consts@{ub}
     Emit variables declared @{b}static const@{ub} when optimization isn't turned
     on, even if the variables aren't referenced.

     GNU CC enables this option by default.  If you want to force the
     compiler to check if the variable was referenced, regardless of
     whether or not optimization is turned on, use the
     @{b}-fno-keep-static-consts@{ub} option.

@{b}-fno-function-cse@{ub}
     Do not put function addresses in registers; make each instruction
     that calls a constant function contain the function's address
     explicitly.

     This option results in less efficient code, but some strange hacks
     that alter the assembler output may be confused by the
     optimizations performed when this option is not used.

@{b}-ffast-math@{ub}
     This option allows GCC to violate some ANSI or IEEE rules and/or
     specifications in the interest of optimizing code for speed.  For
     example, it allows the compiler to assume arguments to the @{b}sqrt@{ub}
     function are non-negative numbers and that no floating-point values
     are NaNs.

     This option should never be turned on by any @{b}-O@{ub} option since it
     can result in incorrect output for programs which depend on an
     exact implementation of IEEE or ANSI rules/specifications for math
     functions.

   The following options control specific optimizations.  The @{b}-O2@{ub}
option turns on all of these optimizations except @{b}-funroll-loops@{ub} and
@{b}-funroll-all-loops@{ub}.  On most machines, the @{b}-O@{ub} option turns on the
@{b}-fthread-jumps@{ub} and @{b}-fdelayed-branch@{ub} options, but specific machines may
handle it differently.

   You can use the following flags in the rare cases when "fine-tuning"
of optimizations to be performed is desired.

@{b}-fstrength-reduce@{ub}
     Perform the optimizations of loop strength reduction and
     elimination of iteration variables.

@{b}-fthread-jumps@{ub}
     Perform optimizations where we check to see if a jump branches to a
     location where another comparison subsumed by the first is found.
     If so, the first branch is redirected to either the destination of
     the second branch or a point immediately following it, depending
     on whether the condition is known to be true or false.

@{b}-fcse-follow-jumps@{ub}
     In common subexpression elimination, scan through jump instructions
     when the target of the jump is not reached by any other path.  For
     example, when CSE encounters an @{b}if@{ub} statement with an @{b}else@{ub} clause,
     CSE will follow the jump when the condition tested is false.

@{b}-fcse-skip-blocks@{ub}
     This is similar to @{b}-fcse-follow-jumps@{ub}, but causes CSE to follow
     jumps which conditionally skip over blocks.  When CSE encounters a
     simple @{b}if@{ub} statement with no else clause, @{b}-fcse-skip-blocks@{ub} causes
     CSE to follow the jump around the body of the @{b}if@{ub}.

@{b}-frerun-cse-after-loop@{ub}
     Re-run common subexpression elimination after loop optimizations
     has been performed.

@{b}-frerun-loop-opt@{ub}
     Run the loop optimizer twice.

@{b}-fgcse@{ub}
     Perform a global common subexpression elimination pass.  This pass
     also performs global constant and copy propagation.

@{b}-fexpensive-optimizations@{ub}
     Perform a number of minor optimizations that are relatively
     expensive.

@{b}-foptimize-register-moves@{ub}

@{b}-fregmove@{ub}
     Attempt to reassign register numbers in move instructions and as
     operands of other simple instructions in order to maximize the
     amount of register tying.  This is especially helpful on machines
     with two-operand instructions.  GNU CC enables this optimization
     by default with @{b}-O2@{ub} or higher.

     Note @{b}-fregmove@{ub} and @{b}-foptimize-register-moves@{ub} are the same
     optimization.

@{b}-fdelayed-branch@{ub}
     If supported for the target machine, attempt to reorder
     instructions to exploit instruction slots available after delayed
     branch instructions.

@{b}-fschedule-insns@{ub}
     If supported for the target machine, attempt to reorder
     instructions to eliminate execution stalls due to required data
     being unavailable.  This helps machines that have slow floating
     point or memory load instructions by allowing other instructions
     to be issued until the result of the load or floating point
     instruction is required.

@{b}-fschedule-insns2@{ub}
     Similar to @{b}-fschedule-insns@{ub}, but requests an additional pass of
     instruction scheduling after register allocation has been done.
     This is especially useful on machines with a relatively small
     number of registers and where memory load instructions take more
     than one cycle.

@{b}-ffunction-sections@{ub}
     Place each function into its own section in the output file if the
     target supports arbitrary sections.  The function's name determines
     the section's name in the output file.

     Use this option on systems where the linker can perform
     optimizations to improve locality of reference in the instruction
     space.  HPPA processors running HP-UX and Sparc processors running
     Solaris 2 have linkers with such optimizations.  Other systems
     using the ELF object format as well as AIX may have these
     optimizations in the future.

     Only use this option when there are significant benefits from doing
     so.  When you specify this option, the assembler and linker will
     create larger object and executable files and will also be slower.
     You will not be able to use @{b}gprof@{ub} on all systems if you specify
     this option and you may have problems with debugging if you
     specify both this option and @{b}-g@{ub}.

@{b}-fcaller-saves@{ub}
     Enable values to be allocated in registers that will be clobbered
     by function calls, by emitting extra instructions to save and
     restore the registers around such calls.  Such allocation is done
     only when it seems to result in better code than would otherwise
     be produced.

     This option is enabled by default on certain machines, usually
     those which have no call-preserved registers to use instead.

@{b}-funroll-loops@{ub}
     Perform the optimization of loop unrolling.  This is only done for
     loops whose number of iterations can be determined at compile time
     or run time.  @{b}-funroll-loop@{ub} implies both @{b}-fstrength-reduce@{ub} and
     @{b}-frerun-cse-after-loop@{ub}.

@{b}-funroll-all-loops@{ub}
     Perform the optimization of loop unrolling.  This is done for all
     loops and usually makes programs run more slowly.
     @{b}-funroll-all-loops@{ub} implies @{b}-fstrength-reduce@{ub} as well as
     @{b}-frerun-cse-after-loop@{ub}.

@{b}-fmove-all-movables@{ub}
     Forces all invariant computations in loops to be moved outside the
     loop.

@{b}-freduce-all-givs@{ub}
     Forces all general-induction variables in loops to be
     strength-reduced.

@{i}     Note:@{ui} When compiling programs written in Fortran,
     @{b}-fmove-all-moveables@{ub} and @{b}-freduce-all-givs@{ub} are enabled by default
     when you use the optimizer.

     These options may generate better or worse code; results are highly
     dependent on the structure of loops within the source code.

     These two options are intended to be removed someday, once they
     have helped determine the efficacy of various approaches to
     improving loop optimizations.

     Please let us (@{b}egcs@egcs.cygnus.com@{ub} and @{b}fortran@gnu.org@{ub}) know how
     use of these options affects the performance of your production
     code.  We're very interested in code that runs @{i}slower@{ui} when these
     options are @{i}enabled@{ui}.

@{b}-fno-peephole@{ub}
     Disable any machine-specific peephole optimizations.

@{b}-fbranch-probabilities@{ub}
     After running a program compiled with @{b}-fprofile-arcs@{ub} (see
     @{"Options for Debugging Your Program or gcc" link "Debugging Options"}), you can compile it a
     second time using @{b}-fbranch-probabilities@{ub}, to improve optimizations
     based on guessing the path a branch might take.

     With @{b}-fbranch-probabilities@{ub}, GCC puts a @{b}REG_EXEC_COUNT@{ub} note on the
     first instruction of each basic block, and a @{b}REG_BR_PROB@{ub} note on
     each @{b}JUMP_INSN@{ub} and @{b}CALL_INSN@{ub}.  These can be used to improve
     optimization.  Currently, they are only used in one place: in
     @{b}reorg.c@{ub}, instead of guessing which path a branch is mostly to
     take, the @{b}REG_BR_PROB@{ub} values are used to exactly determine which
     path is taken more often.

@{b}-fstrict-aliasing@{ub}
     Allows the compiler to assume the strictest aliasing rules
     applicable to the language being compiled.  For C (and C++), this
     activates optimizations based on the type of expressions.  In
     particular, an object of one type is assumed never to reside at
     the same address as an object of a different type, unless the
     types are almost the same.  For example, an @{b}unsigned int@{ub} can alias
     an @{b}int@{ub}, but not a @{b}void*@{ub} or a @{b}double@{ub}.  A character type may alias
     any other type.

     Pay special attention to code like this:
          union a_union {
            int i;
            double d;
          };
          
          int f() {
            a_union t;
            t.d = 3.0;
            return t.i;
          }
     The practice of reading from a different union member than the one
     most recently written to (called "type-punning") is common.  Even
     with @{b}-fstrict-aliasing@{ub}, type-punning is allowed, provided the
     memory is accessed through the union type.  So, the code above
     will work as expected.  However, this code might not:
          int f() {
            a_union t;
            int* ip;
            t.d = 3.0;
            ip = &t.i;
            return *ip;
          }

     This option is not enabled by default at any optimization level
     because it is new and has yet to be subjected to thorough testing.
     You may of course enable it manually with @{b}-fstrict-aliasing@{ub}.

     Every language that wishes to perform language-specific alias
     analysis should define a function that computes, given an @{b}tree@{ub}
     node, an alias set for the node.  Nodes in different alias sets
     are not allowed to alias.  For an example, see the C front-end
     function @{b}c_get_alias_set@{ub}.

@{b}-fstructure-noalias@{ub}
     Allows the compiler to assume that structure / varying array
     references do not alias fixed scalars.

     Although this optimization is safe, GCC can occasionally lose track
     of which references refer to scalars and which to structures,
     leading it to perform unsafe transformations.  Release 1.2 of EGCS
     will incorporate changes which allow GCC to track the
     scalar/structure distinction safely.  Thus, the optimization will
     always be same, and this option will likely be removed or will have
     no effect.


@endnode

@node "Preprocessor Options" "gcc.guide/Preprocessor Options"
@next "Assembler Options"
@prev "Optimize Options"
@toc "Invoking GCC"

Options Controlling the Preprocessor
====================================

   These options control the C preprocessor, which is run on each C
source file before actual compilation.

   If you use the @{b}-E@{ub} option, nothing is done except preprocessing.
Some of these options make sense only together with @{b}-E@{ub} because they
cause the preprocessor output to be unsuitable for actual compilation.

@{b}-include FILE@{ub}
     Process FILE as input before processing the regular input file.
     In effect, the contents of FILE are compiled first.  Any @{b}-D@{ub} and @{b}-U@{ub}
     options on the command line are always processed before @{b}-include
     FILE@{ub}, regardless of the order in which they are written.  All the
     @{b}-include@{ub} and @{b}-imacros@{ub} options are processed in the order in which
     they are written.

@{b}-imacros FILE@{ub}
     Process FILE as input, discarding the resulting output, before
     processing the regular input file.  Because the output generated
     from FILE is discarded, the only effect of @{b}-imacros FILE@{ub} is to
     make the macros defined in FILE available for use in the main
     input.

     Any @{b}-D@{ub} and @{b}-U@{ub} options on the command line are always processed
     before @{b}-imacros FILE@{ub}, regardless of the order in which they are
     written.  All the @{b}-include@{ub} and @{b}-imacros@{ub} options are processed in
     the order in which they are written.

@{b}-idirafter DIR@{ub}
     Add the directory DIR to the second include path.  The directories
     on the second include path are searched when a header file is not
     found in any of the directories in the main include path (the one
     that @{b}-I@{ub} adds to).

@{b}-iprefix PREFIX@{ub}
     Specify PREFIX as the prefix for subsequent @{b}-iwithprefix@{ub} options.

@{b}-iwithprefix DIR@{ub}
     Add a directory to the second include path.  The directory's name
     is made by concatenating PREFIX and DIR, where PREFIX was
     specified previously with @{b}-iprefix@{ub}.  If you have not specified a
     prefix yet, the directory containing the installed passes of the
     compiler is used as the default.

@{b}-iwithprefixbefore DIR@{ub}
     Add a directory to the main include path.  The directory's name is
     made by concatenating PREFIX and DIR, as in the case of
     @{b}-iwithprefix@{ub}.

@{b}-isystem DIR@{ub}
     Add a directory to the beginning of the second include path,
     marking it as a system directory, so that it gets the same special
     treatment as is applied to the standard system directories.

@{b}-nostdinc@{ub}
     Do not search the standard system directories for header files.
     Only the directories you have specified with @{b}-I@{ub} options (and the
     current directory, if appropriate) are searched.  See
     @{"Directory Options" link "Directory Options"}, for information on @{b}-I@{ub}.

     By using both @{b}-nostdinc@{ub} and @{b}-I-@{ub}, you can limit the include-file
     search path to only those directories you specify explicitly.

@{b}-undef@{ub}
     Do not predefine any nonstandard macros.  (Including architecture
     flags).

@{b}-E@{ub}
     Run only the C preprocessor.  Preprocess all the C source files
     specified and output the results to standard output or to the
     specified output file.

@{b}-C@{ub}
     Tell the preprocessor not to discard comments.  Used with the @{b}-E@{ub}
     option.

@{b}-P@{ub}
     Tell the preprocessor not to generate @{b}#line@{ub} directives.  Used with
     the @{b}-E@{ub} option.

@{b}-M@{ub}
     Tell the preprocessor to output a rule suitable for @{b}make@{ub}
     describing the dependencies of each object file.  For each source
     file, the preprocessor outputs one @{b}make@{ub}-rule whose target is the
     object file name for that source file and whose dependencies are
     all the @{b}#include@{ub} header files it uses.  This rule may be a single
     line or may be continued with @{b}\\ @{ub}-newline if it is long.  The list
     of rules is printed on standard output instead of the preprocessed
     C program.

@{b}     -M@{ub} implies @{b}-E@{ub}.

     Another way to specify output of a @{b}make@{ub} rule is by setting the
     environment variable @{b}DEPENDENCIES_OUTPUT@{ub} (see
     @{"Environment Variables" link "Environment Variables"}).

@{b}-MM@{ub}
     Like @{b}-M@{ub} but the output mentions only the user header files
     included with @{b}#include "FILE"@{ub}.  System header files included with
     @{b}#include <FILE>@{ub} are omitted.

@{b}-MD@{ub}
     Like @{b}-M@{ub} but the dependency information is written to a file made by
     replacing ".c" with ".d" at the end of the input file names.  This
     is in addition to compiling the file as specified--@{b}-MD@{ub} does not
     inhibit ordinary compilation the way @{b}-M@{ub} does.

     In Mach, you can use the utility @{b}md@{ub} to merge multiple dependency
     files into a single dependency file suitable for using with the
     @{b}make@{ub} command.

@{b}-MMD@{ub}
     Like @{b}-MD@{ub} except mention only user header files, not system header
     files.

@{b}-MG@{ub}
     Treat missing header files as generated files and assume they live
     in the same directory as the source file.  If you specify @{b}-MG@{ub}, you
     must also specify either @{b}-M@{ub} or @{b}-MM@{ub}.  @{b}-MG@{ub} is not supported with @{b}-MD@{ub}
     or @{b}-MMD@{ub}.

@{b}-H@{ub}
     Print the name of each header file used, in addition to other
     normal activities.

@{b}-AQUESTION(ANSWER)@{ub}
     Assert the answer ANSWER for QUESTION, in case it is tested with a
     preprocessing conditional such as @{b}#if #QUESTION(ANSWER)@{ub}.  @{b}-A-@{ub}
     disables the standard assertions that normally describe the target
     machine.

@{b}-DMACRO@{ub}
     Define macro MACRO with the string @{b}1@{ub} as its definition.

@{b}-DMACRO=DEFN@{ub}
     Define macro MACRO as DEFN.  All instances of @{b}-D@{ub} on the command
     line are processed before any @{b}-U@{ub} options.

@{b}-UMACRO@{ub}
     Undefine macro MACRO.  @{b}-U@{ub} options are evaluated after all @{b}-D@{ub}
     options, but before any @{b}-include@{ub} and @{b}-imacros@{ub} options.

@{b}-dM@{ub}
     Tell the preprocessor to output only a list of the macro
     definitions that are in effect at the end of preprocessing.  Used
     with the @{b}-E@{ub} option.

@{b}-dD@{ub}
     Tell the preprocessing to pass all macro definitions into the
     output, in their proper sequence in the rest of the output.

@{b}-dN@{ub}
     Like @{b}-dD@{ub} except that the macro arguments and contents are omitted.
     Only @{b}#define NAME@{ub} is included in the output.

@{b}-trigraphs@{ub}
     Support ANSI C trigraphs.  The @{b}-ansi@{ub} option also has this effect.

@{b}-Wp,OPTION@{ub}
     Pass OPTION as an option to the preprocessor.  If OPTION contains
     commas, it is split into multiple options at the commas.


@endnode

@node "Assembler Options" "gcc.guide/Assembler Options"
@next "Link Options"
@prev "Preprocessor Options"
@toc "Invoking GCC"

Passing Options to the Assembler
================================

   You can pass options to the assembler.

@{b}-Wa,OPTION@{ub}
     Pass OPTION as an option to the assembler.  If OPTION contains
     commas, it is split into multiple options at the commas.


@endnode

@node "Link Options" "gcc.guide/Link Options"
@next "Directory Options"
@prev "Assembler Options"
@toc "Invoking GCC"

Options for Linking
===================

   These options come into play when the compiler links object files
into an executable output file.  They are meaningless if the compiler is
not doing a link step.

@{b}OBJECT-FILE-NAME@{ub}
     A file name that does not end in a special recognized suffix is
     considered to name an object file or library.  (Object files are
     distinguished from libraries by the linker according to the file
     contents.)  If linking is done, these object files are used as
     input to the linker.

@{b}-c@{ub}
@{b}-S@{ub}
@{b}-E@{ub}
     If any of these options is used, then the linker is not run, and
     object file names should not be used as arguments.  See
     @{"Overall Options" link "Overall Options"}.

@{b}-lLIBRARY@{ub}
     Search the library named LIBRARY when linking.

     It makes a difference where in the command you write this option;
     the linker searches processes libraries and object files in the
     order they are specified.  Thus, @{b}foo.o -lz bar.o@{ub} searches library @{b}z@{ub}
     after file @{b}foo.o@{ub} but before @{b}bar.o@{ub}.  If @{b}bar.o@{ub} refers to functions
     in @{b}z@{ub}, those functions may not be loaded.

     The linker searches a standard list of directories for the library,
     which is actually a file named @{b}libLIBRARY.a@{ub}.  The linker then uses
     this file as if it had been specified precisely by name.

     The directories searched include several standard system
     directories plus any that you specify with @{b}-L@{ub}.

     Normally the files found this way are library files--archive files
     whose members are object files.  The linker handles an archive
     file by scanning through it for members which define symbols that
     have so far been referenced but not defined.  But if the file that
     is found is an ordinary object file, it is linked in the usual
     fashion.  The only difference between using an @{b}-l@{ub} option and
     specifying a file name is that @{b}-l@{ub} surrounds LIBRARY with @{b}lib@{ub} and @{b}.a@{ub}
     and searches several directories.

@{b}-lobjc@{ub}
     You need this special case of the @{b}-l@{ub} option in order to link an
     Objective C program.

@{b}-nostartfiles@{ub}
     Do not use the standard system startup files when linking.  The
     standard system libraries are used normally, unless @{b}-nostdlib@{ub} or
     @{b}-nodefaultlibs@{ub} is used.

@{b}-nodefaultlibs@{ub}
     Do not use the standard system libraries when linking.  Only the
     libraries you specify will be passed to the linker.  The standard
     startup files are used normally, unless @{b}-nostartfiles@{ub} is used.
     The compiler may generate calls to memcmp, memset, and memcpy for
     System V (and ANSI C) environments or to bcopy and bzero for BSD
     environments.  These entries are usually resolved by entries in
     libc.  These entry points should be supplied through some other
     mechanism when this option is specified.

@{b}-nostdlib@{ub}
     Do not use the standard system startup files or libraries when
     linking.  No startup files and only the libraries you specify will
     be passed to the linker. The compiler may generate calls to
     memcmp, memset, and memcpy for System V (and ANSI C) environments
     or to bcopy and bzero for BSD environments.  These entries are
     usually resolved by entries in libc.  These entry points should be
     supplied through some other mechanism when this option is
     specified.

     One of the standard libraries bypassed by @{b}-nostdlib@{ub} and
     @{b}-nodefaultlibs@{ub} is @{b}libgcc.a@{ub}, a library of internal subroutines that
     GNU CC uses to overcome shortcomings of particular machines, or
     special needs for some languages.  (See
     @{"Interfacing to GNU CC Output" link "Interface"}, for more discussion of @{b}libgcc.a@{ub}.)
     In most cases, you need @{b}libgcc.a@{ub} even when you want to avoid other
     standard libraries.  In other words, when you specify @{b}-nostdlib@{ub} or
     @{b}-nodefaultlibs@{ub} you should usually specify @{b}-lgcc@{ub} as well.  This
     ensures that you have no unresolved references to internal GNU CC
     library subroutines.  (For example, @{b}__main@{ub}, used to ensure C++
     constructors will be called; see @{"collect2" link "Collect2"}.)

@{b}-s@{ub}
     Remove all symbol table and relocation information from the
     executable.

@{b}-static@{ub}
     On systems that support dynamic linking, this prevents linking
     with the shared libraries.  On other systems, this option has no
     effect.

@{b}-shared@{ub}
     Produce a shared object which can then be linked with other
     objects to form an executable.  Not all systems support this
     option.  You must also specify @{b}-fpic@{ub} or @{b}-fPIC@{ub} on some systems when
     you specify this option.

@{b}-symbolic@{ub}
     Bind references to global symbols when building a shared object.
     Warn about any unresolved references (unless overridden by the
     link editor option @{b}-Xlinker -z -Xlinker defs@{ub}).  Only a few systems
     support this option.

@{b}-Xlinker OPTION@{ub}
     Pass OPTION as an option to the linker.  You can use this to
     supply system-specific linker options which GNU CC does not know
     how to recognize.

     If you want to pass an option that takes an argument, you must use
     @{b}-Xlinker@{ub} twice, once for the option and once for the argument.
     For example, to pass @{b}-assert definitions@{ub}, you must write @{b}-Xlinker
     -assert -Xlinker definitions@{ub}.  It does not work to write @{b}-Xlinker
     "-assert definitions"@{ub}, because this passes the entire string as a
     single argument, which is not what the linker expects.

@{b}-Wl,OPTION@{ub}
     Pass OPTION as an option to the linker.  If OPTION contains
     commas, it is split into multiple options at the commas.

@{b}-u SYMBOL@{ub}
     Pretend the symbol SYMBOL is undefined, to force linking of
     library modules to define it.  You can use @{b}-u@{ub} multiple times with
     different symbols to force loading of additional library modules.


@endnode

@node "Directory Options" "gcc.guide/Directory Options"
@next "Target Options"
@prev "Link Options"
@toc "Invoking GCC"

Options for Directory Search
============================

   These options specify directories to search for header files, for
libraries and for parts of the compiler:

@{b}-IDIR@{ub}
     Add the directory DIR to the head of the list of directories to be
     searched for header files.  This can be used to override a system
     header file, substituting your own version, since these
     directories are searched before the system header file
     directories.  If you use more than one @{b}-I@{ub} option, the directories
     are scanned in left-to-right order; the standard system
     directories come after.

@{b}-I-@{ub}
     Any directories you specify with @{b}-I@{ub} options before the @{b}-I-@{ub} option
     are searched only for the case of @{b}#include "FILE"@{ub}; they are not
     searched for @{b}#include <FILE>@{ub}.

     If additional directories are specified with @{b}-I@{ub} options after the
     @{b}-I-@{ub}, these directories are searched for all @{b}#include@{ub} directives.
     (Ordinarily @{i}all@{ui} @{b}-I@{ub} directories are used this way.)

     In addition, the @{b}-I-@{ub} option inhibits the use of the current
     directory (where the current input file came from) as the first
     search directory for @{b}#include "FILE"@{ub}.  There is no way to override
     this effect of @{b}-I-@{ub}.  With @{b}-I.@{ub} you can specify searching the
     directory which was current when the compiler was invoked.  That
     is not exactly the same as what the preprocessor does by default,
     but it is often satisfactory.

@{b}     -I-@{ub} does not inhibit the use of the standard system directories
     for header files.  Thus, @{b}-I-@{ub} and @{b}-nostdinc@{ub} are independent.

@{b}-LDIR@{ub}
     Add directory DIR to the list of directories to be searched for @{b}-l@{ub}.

@{b}-BPREFIX@{ub}
     This option specifies where to find the executables, libraries,
     include files, and data files of the compiler itself.

     The compiler driver program runs one or more of the subprograms
     @{b}cpp@{ub}, @{b}cc1@{ub}, @{b}as@{ub} and @{b}ld@{ub}.  It tries PREFIX as a prefix for each program
     it tries to run, both with and without @{b}MACHINE/VERSION/@{ub} (see
     @{"Target Options" link "Target Options"}).

     For each subprogram to be run, the compiler driver first tries the
     @{b}-B@{ub} prefix, if any.  If that name is not found, or if @{b}-B@{ub} was not
     specified, the driver tries two standard prefixes, which are
     @{b}/usr/lib/gcc/@{ub} and @{b}/usr/local/lib/gcc-lib/@{ub}.  If neither of those
     results in a file name that is found, the unmodified program name
     is searched for using the directories specified in your @{b}PATH@{ub}
     environment variable.

@{b}     -B@{ub} prefixes that effectively specify directory names also apply to
     libraries in the linker, because the compiler translates these
     options into @{b}-L@{ub} options for the linker.  They also apply to
     includes files in the preprocessor, because the compiler
     translates these options into @{b}-isystem@{ub} options for the
     preprocessor.  In this case, the compiler appends @{b}include@{ub} to the
     prefix.

     The run-time support file @{b}libgcc.a@{ub} can also be searched for using
     the @{b}-B@{ub} prefix, if needed.  If it is not found there, the two
     standard prefixes above are tried, and that is all.  The file is
     left out of the link if it is not found by those means.

     Another way to specify a prefix much like the @{b}-B@{ub} prefix is to use
     the environment variable @{b}GCC_EXEC_PREFIX@{ub}.  See
     @{"Environment Variables" link "Environment Variables"}.

@{b}-specs=FILE@{ub}
     Process FILE after the compiler reads in the standard @{b}specs@{ub} file,
     in order to override the defaults that the @{b}gcc@{ub} driver program uses
     when determining what switches to pass to @{b}cc1@{ub}, @{b}cc1plus@{ub}, @{b}as@{ub}, @{b}ld@{ub},
     etc.  More than one @{b}-specs=@{ub}FILE can be specified on the command
     line, and they are processed in order, from left to right.


@endnode

@node "Target Options" "gcc.guide/Target Options"
@next "Submodel Options"
@prev "Directory Options"
@toc "Invoking GCC"

Specifying Target Machine and Compiler Version
==============================================

   By default, GNU CC compiles code for the same type of machine that
you are using.  However, it can also be installed as a cross-compiler,
to compile for some other type of machine.  In fact, several different
configurations of GNU CC, for different target machines, can be
installed side by side.  Then you specify which one to use with the @{b}-b@{ub}
option.

   In addition, older and newer versions of GNU CC can be installed side
by side.  One of them (probably the newest) will be the default, but
you may sometimes wish to use another.

@{b}-b MACHINE@{ub}
     The argument MACHINE specifies the target machine for compilation.
     This is useful when you have installed GNU CC as a cross-compiler.

     The value to use for MACHINE is the same as was specified as the
     machine type when configuring GNU CC as a cross-compiler.  For
     example, if a cross-compiler was configured with @{b}configure i386v@{ub},
     meaning to compile for an 80386 running System V, then you would
     specify @{b}-b i386v@{ub} to run that cross compiler.

     When you do not specify @{b}-b@{ub}, it normally means to compile for the
     same type of machine that you are using.

@{b}-V VERSION@{ub}
     The argument VERSION specifies which version of GNU CC to run.
     This is useful when multiple versions are installed.  For example,
     VERSION might be @{b}2.0@{ub}, meaning to run GNU CC version 2.0.

     The default version, when you do not specify @{b}-V@{ub}, is the last
     version of GNU CC that you installed.

   The @{b}-b@{ub} and @{b}-V@{ub} options actually work by controlling part of the file
name used for the executable files and libraries used for compilation.
A given version of GNU CC, for a given target machine, is normally kept
in the directory @{b}/usr/local/lib/gcc-lib/MACHINE/VERSION@{ub}.

   Thus, sites can customize the effect of @{b}-b@{ub} or @{b}-V@{ub} either by changing
the names of these directories or adding alternate names (or symbolic
links).  If in directory @{b}/usr/local/lib/gcc-lib/@{ub} the file @{b}80386@{ub} is a
link to the file @{b}i386v@{ub}, then @{b}-b 80386@{ub} becomes an alias for @{b}-b i386v@{ub}.

   In one respect, the @{b}-b@{ub} or @{b}-V@{ub} do not completely change to a different
compiler: the top-level driver program @{b}gcc@{ub} that you originally invoked
continues to run and invoke the other executables (preprocessor,
compiler per se, assembler and linker) that do the real work.  However,
since no real work is done in the driver program, it usually does not
matter that the driver program in use is not the one for the specified
target and version.

   The only way that the driver program depends on the target machine is
in the parsing and handling of special machine-specific options.
However, this is controlled by a file which is found, along with the
other executables, in the directory for the specified version and
target machine.  As a result, a single installed driver program adapts
to any specified target machine and compiler version.

   The driver program executable does control one significant thing,
however: the default version and target machine.  Therefore, you can
install different instances of the driver program, compiled for
different targets or versions, under different names.

   For example, if the driver for version 2.0 is installed as @{b}ogcc@{ub} and
that for version 2.1 is installed as @{b}gcc@{ub}, then the command @{b}gcc@{ub} will use
version 2.1 by default, while @{b}ogcc@{ub} will use 2.0 by default.  However,
you can choose either version with either command with the @{b}-V@{ub} option.


@endnode

@node "Submodel Options" "gcc.guide/Submodel Options"
@next "Code Gen Options"
@prev "Target Options"
@toc "Invoking GCC"

Hardware Models and Configurations
==================================

   Earlier we discussed the standard option @{b}-b@{ub} which chooses among
different installed compilers for completely different target machines,
such as Vax vs. 68000 vs. 80386.

   In addition, each of these target machine types can have its own
special options, starting with @{b}-m@{ub}, to choose among various hardware
models or configurations--for example, 68010 vs 68020, floating
coprocessor or none.  A single installed version of the compiler can
compile for any model or configuration, according to the options
specified.

   Some configurations of the compiler also support additional special
options, usually for compatibility with other compilers on the same
platform.

   These options are defined by the macro @{b}TARGET_SWITCHES@{ub} in the
machine description.  The default for the options is also defined by
that macro, which enables you to change the defaults.


 @{" M680x0 Options " link "M680x0 Options"}  
 @{" VAX Options  " link "VAX Options"}  
 @{" SPARC Options " link "SPARC Options"}  
 @{" Convex Options " link "Convex Options"}  
 @{" AMD29K Options " link "AMD29K Options"}  
 @{" ARM Options  " link "ARM Options"}  
 @{" Thumb Options " link "Thumb Options"}  
 @{" MN10200 Options " link "MN10200 Options"}  
 @{" MN10300 Options " link "MN10300 Options"}  
 @{" M32R-D Options " link "M32R-D Options"}  
 @{" M88K Options " link "M88K Options"}  
 @{" RS-6000 and PowerPC Options " link "RS-6000 and PowerPC Options"}  
 @{" RT Options   " link "RT Options"}  
 @{" MIPS Options " link "MIPS Options"}  
 @{" i386 Options " link "i386 Options"}  
 @{" HPPA Options " link "HPPA Options"}  
 @{" Intel 960 Options " link "Intel 960 Options"}  
 @{" DEC Alpha Options " link "DEC Alpha Options"}  
 @{" Clipper Options " link "Clipper Options"}  
 @{" H8-300 Options " link "H8-300 Options"}  
 @{" SH Options   " link "SH Options"}  
 @{" System V Options " link "System V Options"}  
 @{" V850 Options " link "V850 Options"}  
 @{" ARC Options  " link "ARC Options"}


@endnode

@node "M680x0 Options" "gcc.guide/M680x0 Options"
@next "VAX Options"
@toc "Submodel Options"

M680x0 Options
--------------

   These are the @{b}-m@{ub} options defined for the 68000 series.  The default
values for these options depends on which style of 68000 was selected
when the compiler was configured; the defaults for the most common
choices are given below.

@{b}-m68000@{ub}
@{b}-mc68000@{ub}
     Generate output for a 68000.  This is the default when the
     compiler is configured for 68000-based systems.

     Use this option for microcontrollers with a 68000 or EC000 core,
     including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356.

@{b}-m68020@{ub}
@{b}-mc68020@{ub}
     Generate output for a 68020.  This is the default when the
     compiler is configured for 68020-based systems.

@{b}-m68881@{ub}
     Generate output containing 68881 instructions for floating point.
     This is the default for most 68020 systems unless @{b}-nfp@{ub} was
     specified when the compiler was configured.

@{b}-m68030@{ub}
     Generate output for a 68030.  This is the default when the
     compiler is configured for 68030-based systems.

@{b}-m68040@{ub}
     Generate output for a 68040.  This is the default when the
     compiler is configured for 68040-based systems.

     This option inhibits the use of 68881/68882 instructions that have
     to be emulated by software on the 68040.  Use this option if your
     68040 does not have code to emulate those instructions.

@{b}-m68060@{ub}
     Generate output for a 68060.  This is the default when the
     compiler is configured for 68060-based systems.

     This option inhibits the use of 68020 and 68881/68882 instructions
     that have to be emulated by software on the 68060.  Use this
     option if your 68060 does not have code to emulate those
     instructions.

@{b}-mcpu32@{ub}
     Generate output for a CPU32. This is the default when the compiler
     is configured for CPU32-based systems.

     Use this option for microcontrollers with a CPU32 or CPU32+ core,
     including the 68330, 68331, 68332, 68333, 68334, 68336, 68340,
     68341, 68349 and 68360.

@{b}-m5200@{ub}
     Generate output for a 520X "coldfire" family cpu.  This is the
     default when the compiler is configured for 520X-based systems.

     Use this option for microcontroller with a 5200 core, including
     the MCF5202, MCF5203, MCF5204 and MCF5202.

@{b}-m68020-40@{ub}
     Generate output for a 68040, without using any of the new
     instructions.  This results in code which can run relatively
     efficiently on either a 68020/68881 or a 68030 or a 68040.  The
     generated code does use the 68881 instructions that are emulated
     on the 68040.

@{b}-m68020-60@{ub}
     Generate output for a 68060, without using any of the new
     instructions.  This results in code which can run relatively
     efficiently on either a 68020/68881 or a 68030 or a 68040.  The
     generated code does use the 68881 instructions that are emulated
     on the 68060.

@{b}-mfpa@{ub}
     Generate output containing Sun FPA instructions for floating point.

@{b}-msoft-float@{ub}
     Generate output containing library calls for floating point.
     @{b}Warning:@{ub} the requisite libraries are not available for all m68k
     targets.  Normally the facilities of the machine's usual C
     compiler are used, but this can't be done directly in
     cross-compilation.  You must make your own arrangements to provide
     suitable library functions for cross-compilation.  The embedded
     targets @{b}m68k-*-aout@{ub} and @{b}m68k-*-coff@{ub} do provide software floating
     point support.

@{b}-mshort@{ub}
     Consider type @{b}int@{ub} to be 16 bits wide, like @{b}short int@{ub}.

@{b}-mnobitfield@{ub}
     Do not use the bit-field instructions.  The @{b}-m68000@{ub}, @{b}-mcpu32@{ub} and
     @{b}-m5200@{ub} options imply @{b}-mnobitfield@{ub}.

@{b}-mbitfield@{ub}
     Do use the bit-field instructions.  The @{b}-m68020@{ub} option implies
     @{b}-mbitfield@{ub}.  This is the default if you use a configuration
     designed for a 68020.

@{b}-mrtd@{ub}
     Use a different function-calling convention, in which functions
     that take a fixed number of arguments return with the @{b}rtd@{ub}
     instruction, which pops their arguments while returning.  This
     saves one instruction in the caller since there is no need to pop
     the arguments there.

     This calling convention is incompatible with the one normally used
     on Unix, so you cannot use it if you need to call libraries
     compiled with the Unix compiler.

     Also, you must provide function prototypes for all functions that
     take variable numbers of arguments (including @{b}printf@{ub}); otherwise
     incorrect code will be generated for calls to those functions.

     In addition, seriously incorrect code will result if you call a
     function with too many arguments.  (Normally, extra arguments are
     harmlessly ignored.)

     The @{b}rtd@{ub} instruction is supported by the 68010, 68020, 68030,
     68040, 68060 and CPU32 processors, but not by the 68000 or 5200.

@{b}-malign-int@{ub}
@{b}-mno-align-int@{ub}
     Control whether GNU CC aligns @{b}int@{ub}, @{b}long@{ub}, @{b}long long@{ub}, @{b}float@{ub}, @{b}double@{ub},
     and @{b}long double@{ub} variables on a 32-bit boundary (@{b}-malign-int@{ub}) or a
     16-bit boundary (@{b}-mno-align-int@{ub}).  Aligning variables on 32-bit
     boundaries produces code that runs somewhat faster on processors
     with 32-bit busses at the expense of more memory.

@{b}     Warning:@{ub} if you use the @{b}-malign-int@{ub} switch, GNU CC will align
     structures containing the above types  differently than most
     published application binary interface specifications for the m68k.


@endnode

@node "VAX Options" "gcc.guide/VAX Options"
@next "SPARC Options"
@prev "M680x0 Options"
@toc "Submodel Options"

VAX Options
-----------

   These @{b}-m@{ub} options are defined for the Vax:

@{b}-munix@{ub}
     Do not output certain jump instructions (@{b}aobleq@{ub} and so on) that
     the Unix assembler for the Vax cannot handle across long ranges.

@{b}-mgnu@{ub}
     Do output those jump instructions, on the assumption that you will
     assemble with the GNU assembler.

@{b}-mg@{ub}
     Output code for g-format floating point numbers instead of
     d-format.


@endnode

@node "SPARC Options" "gcc.guide/SPARC Options"
@next "Convex Options"
@prev "VAX Options"
@toc "Submodel Options"

SPARC Options
-------------

   These @{b}-m@{ub} switches are supported on the SPARC:

@{b}-mno-app-regs@{ub}
@{b}-mapp-regs@{ub}
     Specify @{b}-mapp-regs@{ub} to generate output using the global registers 2
     through 4, which the SPARC SVR4 ABI reserves for applications.
     This is the default.

     To be fully SVR4 ABI compliant at the cost of some performance
     loss, specify @{b}-mno-app-regs@{ub}.  You should compile libraries and
     system software with this option.

@{b}-mfpu@{ub}
@{b}-mhard-float@{ub}
     Generate output containing floating point instructions.  This is
     the default.

@{b}-mno-fpu@{ub}
@{b}-msoft-float@{ub}
     Generate output containing library calls for floating point.
     @{b}Warning:@{ub} the requisite libraries are not available for all SPARC
     targets.  Normally the facilities of the machine's usual C
     compiler are used, but this cannot be done directly in
     cross-compilation.  You must make your own arrangements to provide
     suitable library functions for cross-compilation.  The embedded
     targets @{b}sparc-*-aout@{ub} and @{b}sparclite-*-*@{ub} do provide software
     floating point support.

@{b}     -msoft-float@{ub} changes the calling convention in the output file;
     therefore, it is only useful if you compile @{i}all@{ui} of a program with
     this option.  In particular, you need to compile @{b}libgcc.a@{ub}, the
     library that comes with GNU CC, with @{b}-msoft-float@{ub} in order for
     this to work.

@{b}-mhard-quad-float@{ub}
     Generate output containing quad-word (long double) floating point
     instructions.

@{b}-msoft-quad-float@{ub}
     Generate output containing library calls for quad-word (long
     double) floating point instructions.  The functions called are
     those specified in the SPARC ABI.  This is the default.

     As of this writing, there are no sparc implementations that have
     hardware support for the quad-word floating point instructions.
     They all invoke a trap handler for one of these instructions, and
     then the trap handler emulates the effect of the instruction.
     Because of the trap handler overhead, this is much slower than
     calling the ABI library routines.  Thus the @{b}-msoft-quad-float@{ub}
     option is the default.

@{b}-mno-epilogue@{ub}
@{b}-mepilogue@{ub}
     With @{b}-mepilogue@{ub} (the default), the compiler always emits code for
     function exit at the end of each function.  Any function exit in
     the middle of the function (such as a return statement in C) will
     generate a jump to the exit code at the end of the function.

     With @{b}-mno-epilogue@{ub}, the compiler tries to emit exit code inline at
     every function exit.

@{b}-mno-flat@{ub}
@{b}-mflat@{ub}
     With @{b}-mflat@{ub}, the compiler does not generate save/restore
     instructions and will use a "flat" or single register window
     calling convention.  This model uses %i7 as the frame pointer and
     is compatible with the normal register window model.  Code from
     either may be intermixed.  The local registers and the input
     registers (0-5) are still treated as "call saved" registers and
     will be saved on the stack as necessary.

     With @{b}-mno-flat@{ub} (the default), the compiler emits save/restore
     instructions (except for leaf functions) and is the normal mode of
     operation.

@{b}-mno-unaligned-doubles@{ub}
@{b}-munaligned-doubles@{ub}
     Assume that doubles have 8 byte alignment.  This is the default.

     With @{b}-munaligned-doubles@{ub}, GNU CC assumes that doubles have 8 byte
     alignment only if they are contained in another type, or if they
     have an absolute address.  Otherwise, it assumes they have 4 byte
     alignment.  Specifying this option avoids some rare compatibility
     problems with code generated by other compilers.  It is not the
     default because it results in a performance loss, especially for
     floating point code.

@{b}-mv8@{ub}
@{b}-msparclite@{ub}
     These two options select variations on the SPARC architecture.

     By default (unless specifically configured for the Fujitsu
     SPARClite), GCC generates code for the v7 variant of the SPARC
     architecture.

@{b}     -mv8@{ub} will give you SPARC v8 code.  The only difference from v7
     code is that the compiler emits the integer multiply and integer
     divide instructions which exist in SPARC v8 but not in SPARC v7.

@{b}     -msparclite@{ub} will give you SPARClite code.  This adds the integer
     multiply, integer divide step and scan (@{b}ffs@{ub}) instructions which
     exist in SPARClite but not in SPARC v7.

     These options are deprecated and will be deleted in GNU CC 2.9.
     They have been replaced with @{b}-mcpu=xxx@{ub}.

@{b}-mcypress@{ub}
@{b}-msupersparc@{ub}
     These two options select the processor for which the code is
     optimised.

     With @{b}-mcypress@{ub} (the default), the compiler optimizes code for the
     Cypress CY7C602 chip, as used in the SparcStation/SparcServer 3xx
     series.  This is also appropriate for the older SparcStation 1, 2,
     IPX etc.

     With @{b}-msupersparc@{ub} the compiler optimizes code for the SuperSparc
     cpu, as used in the SparcStation 10, 1000 and 2000 series. This
     flag also enables use of the full SPARC v8 instruction set.

     These options are deprecated and will be deleted in GNU CC 2.9.
     They have been replaced with @{b}-mcpu=xxx@{ub}.

@{b}-mcpu=CPU_TYPE@{ub}
     Set the instruction set, register set, and instruction scheduling
     parameters for machine type CPU_TYPE.  Supported values for
     CPU_TYPE are @{b}v7@{ub}, @{b}cypress@{ub}, @{b}v8@{ub}, @{b}supersparc@{ub}, @{b}sparclite@{ub}, @{b}f930@{ub}, @{b}f934@{ub},
     @{b}sparclet@{ub}, @{b}tsc701@{ub}, @{b}v9@{ub}, and @{b}ultrasparc@{ub}.

     Default instruction scheduling parameters are used for values that
     select an architecture and not an implementation.  These are @{b}v7@{ub},
     @{b}v8@{ub}, @{b}sparclite@{ub}, @{b}sparclet@{ub}, @{b}v9@{ub}.

     Here is a list of each supported architecture and their supported
     implementations.

              v7:             cypress
              v8:             supersparc
              sparclite:      f930, f934
              sparclet:       tsc701
              v9:             ultrasparc

@{b}-mtune=CPU_TYPE@{ub}
     Set the instruction scheduling parameters for machine type
     CPU_TYPE, but do not set the instruction set or register set that
     the option @{b}-mcpu=@{ub}CPU_TYPE would.

     The same values for @{b}-mcpu=@{ub}CPU_TYPE are used for @{b}-mtune=@{ub}
     CPU_TYPE, though the only useful values are those that select a
     particular cpu implementation: @{b}cypress@{ub}, @{b}supersparc@{ub}, @{b}f930@{ub}, @{b}f934@{ub},
     @{b}tsc701@{ub}, @{b}ultrasparc@{ub}.

@{b}-malign-loops=NUM@{ub}
     Align loops to a 2 raised to a NUM byte boundary.  If
     @{b}-malign-loops@{ub} is not specified, the default is 2.

@{b}-malign-jumps=NUM@{ub}
     Align instructions that are only jumped to to a 2 raised to a NUM
     byte boundary.  If @{b}-malign-jumps@{ub} is not specified, the default is
     2.

@{b}-malign-functions=NUM@{ub}
     Align the start of functions to a 2 raised to NUM byte boundary.
     If @{b}-malign-functions@{ub} is not specified, the default is 2 if
     compiling for 32 bit sparc, and 5 if compiling for 64 bit sparc.

   These @{b}-m@{ub} switches are supported in addition to the above on the
SPARCLET processor.

@{b}-mlittle-endian@{ub}
     Generate code for a processor running in little-endian mode.

@{b}-mlive-g0@{ub}
     Treat register @{b}%g0@{ub} as a normal register.  GCC will continue to
     clobber it as necessary but will not assume it always reads as 0.

@{b}-mbroken-saverestore@{ub}
     Generate code that does not use non-trivial forms of the @{b}save@{ub} and
     @{b}restore@{ub} instructions.  Early versions of the SPARCLET processor do
     not correctly handle @{b}save@{ub} and @{b}restore@{ub} instructions used with
     arguments.  They correctly handle them used without arguments.  A
     @{b}save@{ub} instruction used without arguments increments the current
     window pointer but does not allocate a new stack frame.  It is
     assumed that the window overflow trap handler will properly handle
     this case as will interrupt handlers.

   These @{b}-m@{ub} switches are supported in addition to the above on SPARC V9
processors in 64 bit environments.

@{b}-mlittle-endian@{ub}
     Generate code for a processor running in little-endian mode.

@{b}-m32@{ub}
@{b}-m64@{ub}
     Generate code for a 32 bit or 64 bit environment.  The 32 bit
     environment sets int, long and pointer to 32 bits.  The 64 bit
     environment sets int to 32 bits and long and pointer to 64 bits.

@{b}-mcmodel=medlow@{ub}
     Generate code for the Medium/Low code model: the program must be
     linked in the low 32 bits of the address space.  Pointers are 64
     bits.  Programs can be statically or dynamically linked.

@{b}-mcmodel=medmid@{ub}
     Generate code for the Medium/Middle code model: the program must
     be linked in the low 44 bits of the address space, the text
     segment must be less than 2G bytes, and data segment must be
     within 2G of the text segment.  Pointers are 64 bits.

@{b}-mcmodel=medany@{ub}
     Generate code for the Medium/Anywhere code model: the program may
     be linked anywhere in the address space, the text segment must be
     less than 2G bytes, and data segment must be within 2G of the text
     segment.  Pointers are 64 bits.

@{b}-mcmodel=embmedany@{ub}
     Generate code for the Medium/Anywhere code model for embedded
     systems: assume a 32 bit text and a 32 bit data segment, both
     starting anywhere (determined at link time).  Register %g4 points
     to the base of the data segment.  Pointers still 64 bits.
     Programs are statically linked, PIC is not supported.

@{b}-mstack-bias@{ub}
@{b}-mno-stack-bias@{ub}
     With @{b}-mstack-bias@{ub}, GNU CC assumes that the stack pointer, and
     frame pointer if present, are offset by -2047 which must be added
     back when making stack frame references.  Otherwise, assume no
     such offset is present.


@endnode

@node "Convex Options" "gcc.guide/Convex Options"
@next "AMD29K Options"
@prev "SPARC Options"
@toc "Submodel Options"

Convex Options
--------------

   These @{b}-m@{ub} options are defined for Convex:

@{b}-mc1@{ub}
     Generate output for C1.  The code will run on any Convex machine.
     The preprocessor symbol @{b}__convex__c1__@{ub} is defined.

@{b}-mc2@{ub}
     Generate output for C2.  Uses instructions not available on C1.
     Scheduling and other optimizations are chosen for max performance
     on C2.  The preprocessor symbol @{b}__convex_c2__@{ub} is defined.

@{b}-mc32@{ub}
     Generate output for C32xx.  Uses instructions not available on C1.
     Scheduling and other optimizations are chosen for max performance
     on C32.  The preprocessor symbol @{b}__convex_c32__@{ub} is defined.

@{b}-mc34@{ub}
     Generate output for C34xx.  Uses instructions not available on C1.
     Scheduling and other optimizations are chosen for max performance
     on C34.  The preprocessor symbol @{b}__convex_c34__@{ub} is defined.

@{b}-mc38@{ub}
     Generate output for C38xx.  Uses instructions not available on C1.
     Scheduling and other optimizations are chosen for max performance
     on C38.  The preprocessor symbol @{b}__convex_c38__@{ub} is defined.

@{b}-margcount@{ub}
     Generate code which puts an argument count in the word preceding
     each argument list.  This is compatible with regular CC, and a few
     programs may need the argument count word.  GDB and other
     source-level debuggers do not need it; this info is in the symbol
     table.

@{b}-mnoargcount@{ub}
     Omit the argument count word.  This is the default.

@{b}-mvolatile-cache@{ub}
     Allow volatile references to be cached.  This is the default.

@{b}-mvolatile-nocache@{ub}
     Volatile references bypass the data cache, going all the way to
     memory.  This is only needed for multi-processor code that does
     not use standard synchronization instructions.  Making
     non-volatile references to volatile locations will not necessarily
     work.

@{b}-mlong32@{ub}
     Type long is 32 bits, the same as type int.  This is the default.

@{b}-mlong64@{ub}
     Type long is 64 bits, the same as type long long.  This option is
     useless, because no library support exists for it.


@endnode

@node "AMD29K Options" "gcc.guide/AMD29K Options"
@next "ARM Options"
@prev "Convex Options"
@toc "Submodel Options"

AMD29K Options
--------------

   These @{b}-m@{ub} options are defined for the AMD Am29000:

@{b}-mdw@{ub}
     Generate code that assumes the @{b}DW@{ub} bit is set, i.e., that byte and
     halfword operations are directly supported by the hardware.  This
     is the default.

@{b}-mndw@{ub}
     Generate code that assumes the @{b}DW@{ub} bit is not set.

@{b}-mbw@{ub}
     Generate code that assumes the system supports byte and halfword
     write operations.  This is the default.

@{b}-mnbw@{ub}
     Generate code that assumes the systems does not support byte and
     halfword write operations.  @{b}-mnbw@{ub} implies @{b}-mndw@{ub}.

@{b}-msmall@{ub}
     Use a small memory model that assumes that all function addresses
     are either within a single 256 KB segment or at an absolute
     address of less than 256k.  This allows the @{b}call@{ub} instruction to be
     used instead of a @{b}const@{ub}, @{b}consth@{ub}, @{b}calli@{ub} sequence.

@{b}-mnormal@{ub}
     Use the normal memory model: Generate @{b}call@{ub} instructions only when
     calling functions in the same file and @{b}calli@{ub} instructions
     otherwise.  This works if each file occupies less than 256 KB but
     allows the entire executable to be larger than 256 KB.  This is
     the default.

@{b}-mlarge@{ub}
     Always use @{b}calli@{ub} instructions.  Specify this option if you expect
     a single file to compile into more than 256 KB of code.

@{b}-m29050@{ub}
     Generate code for the Am29050.

@{b}-m29000@{ub}
     Generate code for the Am29000.  This is the default.

@{b}-mkernel-registers@{ub}
     Generate references to registers @{b}gr64-gr95@{ub} instead of to registers
     @{b}gr96-gr127@{ub}.  This option can be used when compiling kernel code
     that wants a set of global registers disjoint from that used by
     user-mode code.

     Note that when this option is used, register names in @{b}-f@{ub} flags
     must use the normal, user-mode, names.

@{b}-muser-registers@{ub}
     Use the normal set of global registers, @{b}gr96-gr127@{ub}.  This is the
     default.

@{b}-mstack-check@{ub}
@{b}-mno-stack-check@{ub}
     Insert (or do not insert) a call to @{b}__msp_check@{ub} after each stack
     adjustment.  This is often used for kernel code.

@{b}-mstorem-bug@{ub}
@{b}-mno-storem-bug@{ub}
@{b}     -mstorem-bug@{ub} handles 29k processors which cannot handle the
     separation of a mtsrim insn and a storem instruction (most 29000
     chips to date, but not the 29050).

@{b}-mno-reuse-arg-regs@{ub}
@{b}-mreuse-arg-regs@{ub}
@{b}     -mno-reuse-arg-regs@{ub} tells the compiler to only use incoming
     argument registers for copying out arguments.  This helps detect
     calling a function with fewer arguments than it was declared with.

@{b}-mno-impure-text@{ub}
@{b}-mimpure-text@{ub}
@{b}     -mimpure-text@{ub}, used in addition to @{b}-shared@{ub}, tells the compiler to
     not pass @{b}-assert pure-text@{ub} to the linker when linking a shared
     object.

@{b}-msoft-float@{ub}
     Generate output containing library calls for floating point.
     @{b}Warning:@{ub} the requisite libraries are not part of GNU CC.  Normally
     the facilities of the machine's usual C compiler are used, but
     this can't be done directly in cross-compilation.  You must make
     your own arrangements to provide suitable library functions for
     cross-compilation.


@endnode

@node "ARM Options" "gcc.guide/ARM Options"
@next "Thumb Options"
@prev "AMD29K Options"
@toc "Submodel Options"

ARM Options
-----------

   These @{b}-m@{ub} options are defined for Advanced RISC Machines (ARM)
architectures:

@{b}-mapcs-frame@{ub}
     Generate a stack frame that is compliant with the ARM Procedure
     Call Standard for all functions, even if this is not strictly
     necessary for correct execution of the code.  Specifying
     @{b}-fomit-frame-pointer@{ub} with this option will cause the stack frames
     not to be generated for leaf functions.  The default is
     @{b}-mno-apcs-frame@{ub}.

@{b}-mapcs@{ub}
     This is a synonym for @{b}-mapcs-frame@{ub}.

@{b}-mapcs-26@{ub}
     Generate code for a processor running with a 26-bit program
     counter, and conforming to the function calling standards for the
     APCS 26-bit option.  This option replaces the @{b}-m2@{ub} and @{b}-m3@{ub} options
     of previous releases of the compiler.

@{b}-mapcs-32@{ub}
     Generate code for a processor running with a 32-bit program
     counter, and conforming to the function calling standards for the
     APCS 32-bit option.  This option replaces the @{b}-m6@{ub} option of
     previous releases of the compiler.

@{b}-mapcs-stack-check@{ub}
     Generate code to check the amount of stack space available upon
     entry to every function (that actually uses some stack space).  If
     there is insufficient space available then either the function
     @{b}__rt_stkovf_split_small@{ub} or @{b}__rt_stkovf_split_big@{ub} will be called,
     depending upon the amount of stack space required.  The run time
     system is required to provide these functions.  The default is
     @{b}-mno-apcs-stack-check@{ub}, since this produces smaller code.

@{b}-mapcs-float@{ub}
     Pass floating point arguments using the float point registers.
     This is one of the variants of the APCS.  This option is
     reccommended if the target hardware has a floating point unit or
     if a lot of floating point arithmetic is going to be performed by
     the code.  The default is @{b}-mno-apcs-float@{ub}, since integer only code
     is slightly increased in size if @{b}-mapcs-float@{ub} is used.

@{b}-mapcs-reentrant@{ub}
     Generate reentrant, position independent code.  This is the
     equivalent to specifying the @{b}-fpic@{ub} option.  The default is
     @{b}-mno-apcs-reentrant@{ub}.

@{b}-mthumb-interwork@{ub}
     Generate code which supports calling between the ARM and THUMB
     instruction sets.  Without this option the two instruction sets
     cannot be reliably used inside one program.  The default is
     @{b}-mno-thumb-interwork@{ub}, since slightly larger code is generated when
     @{b}-mthumb-interwork@{ub} is specified.

@{b}-mno-sched-prolog@{ub}
     Prevent the reordering of instructions in the function prolog, or
     the merging of those instruction with the instructions in the
     function's body.  This means that all functions will start with a
     recognisable set of instructions (or in fact one of a chioce from
     a small set of different function prologues), and this information
     can be used to locate the start if functions inside an executable
     piece of code.  The default is @{b}-msched-prolog@{ub}.

@{b}-mhard-float@{ub}
     Generate output containing floating point instructions.  This is
     the default.

@{b}-msoft-float@{ub}
     Generate output containing library calls for floating point.
     @{b}Warning:@{ub} the requisite libraries are not available for all ARM
     targets.  Normally the facilities of the machine's usual C
     compiler are used, but this cannot be done directly in
     cross-compilation.  You must make your own arrangements to provide
     suitable library functions for cross-compilation.

@{b}     -msoft-float@{ub} changes the calling convention in the output file;
     therefore, it is only useful if you compile @{i}all@{ui} of a program with
     this option.  In particular, you need to compile @{b}libgcc.a@{ub}, the
     library that comes with GNU CC, with @{b}-msoft-float@{ub} in order for
     this to work.

@{b}-mlittle-endian@{ub}
     Generate code for a processor running in little-endian mode.  This
     is the default for all standard configurations.

@{b}-mbig-endian@{ub}
     Generate code for a processor running in big-endian mode; the
     default is to compile code for a little-endian processor.

@{b}-mwords-little-endian@{ub}
     This option only applies when generating code for big-endian
     processors.  Generate code for a little-endian word order but a
     big-endian byte order.  That is, a byte order of the form
     @{b}32107654@{ub}.  Note: this option should only be used if you require
     compatibility with code for big-endian ARM processors generated by
     versions of the compiler prior to 2.8.

@{b}-mshort-load-bytes@{ub}
     Do not try to load half-words (eg @{b}short@{ub}s) by loading a word from
     an unaligned address.  For some targets the MMU is configured to
     trap unaligned loads; use this option to generate code that is
     safe in these environments.

@{b}-mno-short-load-bytes@{ub}
     Use unaligned word loads to load half-words (eg @{b}short@{ub}s).  This
     option produces more efficient code, but the MMU is sometimes
     configured to trap these instructions.

@{b}-mshort-load-words@{ub}
     This is a synonym for the @{b}-mno-short-load-bytes@{ub}.

@{b}-mno-short-load-words@{ub}
     This is a synonym for the @{b}-mshort-load-bytes@{ub}.

@{b}-mbsd@{ub}
     This option only applies to RISC iX.  Emulate the native BSD-mode
     compiler.  This is the default if @{b}-ansi@{ub} is not specified.

@{b}-mxopen@{ub}
     This option only applies to RISC iX.  Emulate the native
     X/Open-mode compiler.

@{b}-mno-symrename@{ub}
     This option only applies to RISC iX.  Do not run the assembler
     post-processor, @{b}symrename@{ub}, after code has been assembled.
     Normally it is necessary to modify some of the standard symbols in
     preparation for linking with the RISC iX C library; this option
     suppresses this pass.  The post-processor is never run when the
     compiler is built for cross-compilation.

@{b}-mcpu=<name>@{ub}
     This specifies the name of the target ARM processor.  GCC uses
     this name to determine what kind of instructions it can use when
     generating assembly code.  Permissable names are: arm2, arm250,
     arm3, arm6, arm60, arm600, arm610, arm620, arm7, arm7m, arm7d,
     arm7dm, arm7di, arm7dmi, arm70, arm700, arm700i, arm710, arm710c,
     arm7100, arm7500, arm7500fe, arm7tdmi, arm8, strongarm,
     strongarm110

@{b}-march=<name>@{ub}
     This specifies the name of the target ARM architecture.  GCC uses
     this name to determine what kind of instructions it can use when
     generating assembly code.  This option can be used in conjunction
     with or instead of the @{b}-mcpu=@{ub} option.  Permissable names are:
     armv2, armv2a, armv3, armv3m, armv4, armv4t

@{b}-mfpe=<number>@{ub}
     This specifes the version of the floating point emulation
     available on the target.  Permissable values are 2 and 3.

@{b}-mstructure-size-boundary=<n>@{ub}
     The size of all structures and unions will be rounded up to a
     multiple of the number of bits set by this option.  Permissable
     values are 8 and 32.  The default value varies for different
     toolchains.  For the COFF targeted toolchain the default value is
     8.  Specifying the larger number can produced faster, more
     efficient code, but can also increase the size of the program.
     The two values are potentially incompatible.  Code compiled with
     one value cannot necessarily expect to work with code or libraries
     compiled with the other value, if they exchange information using
     structures or unions.  Programmers are encouraged to use the 32
     value as future versions of the toolchain may default to this
     value.


@endnode

@node "Thumb Options" "gcc.guide/Thumb Options"
@next "MN10200 Options"
@prev "ARM Options"
@toc "Submodel Options"

Thumb Options
-------------

@{b}-mthumb-interwork@{ub}
     Generate code which supports calling between the THUMB and ARM
     instruction sets.  Without this option the two instruction sets
     cannot be reliably used inside one program.  The default is
     @{b}-mno-thumb-interwork@{ub}, since slightly smaller code is generated
     with this option.

@{b}-mtpcs-frame@{ub}
     Generate a stack frame that is compliant with the Thumb Procedure
     Call Standard for all non-leaf functions.  (A leaf function is one
     that does not call any other functions).  The default is
     @{b}-mno-apcs-frame@{ub}.

@{b}-mtpcs-leaf-frame@{ub}
     Generate a stack frame that is compliant with the Thumb Procedure
     Call Standard for all leaf functions.  (A leaf function is one
     that does not call any other functions).  The default is
     @{b}-mno-apcs-leaf-frame@{ub}.

@{b}-mlittle-endian@{ub}
     Generate code for a processor running in little-endian mode.  This
     is the default for all standard configurations.

@{b}-mbig-endian@{ub}
     Generate code for a processor running in big-endian mode.

@{b}-mstructure-size-boundary=<n>@{ub}
     The size of all structures and unions will be rounded up to a
     multiple of the number of bits set by this option.  Permissable
     values are 8 and 32.  The default value varies for different
     toolchains.  For the COFF targeted toolchain the default value is
     8.  Specifying the larger number can produced faster, more
     efficient code, but can also increase the size of the program.
     The two values are potentially incompatible.  Code compiled with
     one value cannot necessarily expect to work with code or libraries
     compiled with the other value, if they exchange information using
     structures or unions.  Programmers are encouraged to use the 32
     value as future versions of the toolchain may default to this
     value.


@endnode

@node "MN10200 Options" "gcc.guide/MN10200 Options"
@next "MN10300 Options"
@prev "Thumb Options"
@toc "Submodel Options"

MN10200 Options
---------------

   These @{b}-m@{ub} options are defined for Matsushita MN10200 architectures:
@{b}-mrelax@{ub}
     Indicate to the linker that it should perform a relaxation
     optimization pass to shorten branches, calls and absolute memory
     addresses.  This option only has an effect when used on the
     command line for the final link step.

     This option makes symbolic debugging impossible.


@endnode

@node "MN10300 Options" "gcc.guide/MN10300 Options"
@next "M32R-D Options"
@prev "MN10200 Options"
@toc "Submodel Options"

MN10300 Options
---------------

   These @{b}-m@{ub} options are defined for Matsushita MN10300 architectures:

@{b}-mmult-bug@{ub}
     Generate code to avoid bugs in the multiply instructions for the
     MN10300 processors.  This is the default.

@{b}-mno-mult-bug@{ub}
     Do not generate code to avoid bugs in the multiply instructions
     for the MN10300 processors.

@{b}-mrelax@{ub}
     Indicate to the linker that it should perform a relaxation
     optimization pass to shorten branches, calls and absolute memory
     addresses.  This option only has an effect when used on the
     command line for the final link step.

     This option makes symbolic debugging impossible.


@endnode

@node "M32R-D Options" "gcc.guide/M32R-D Options"
@next "M88K Options"
@prev "MN10300 Options"
@toc "Submodel Options"

M32R/D Options
--------------

   These @{b}-m@{ub} options are defined for Mitsubishi M32R/D architectures:

@{b}-mcode-model=small@{ub}
     Assume all objects live in the lower 16MB of memory (so that their
     addresses can be loaded with the @{b}ld24@{ub} instruction), and assume all
     subroutines are reachable with the @{b}bl@{ub} instruction.  This is the
     default.

     The addressability of a particular object can be set with the
     @{b}model@{ub} attribute.

@{b}-mcode-model=medium@{ub}
     Assume objects may be anywhere in the 32 bit address space (the
     compiler will generate @{b}seth/add3@{ub} instructions to load their
     addresses), and assume all subroutines are reachable with the @{b}bl@{ub}
     instruction.

@{b}-mcode-model=large@{ub}
     Assume objects may be anywhere in the 32 bit address space (the
     compiler will generate @{b}seth/add3@{ub} instructions to load their
     addresses), and assume subroutines may not be reachable with the
     @{b}bl@{ub} instruction (the compiler will generate the much slower
     @{b}seth/add3/jl@{ub} instruction sequence).

@{b}-msdata=none@{ub}
     Disable use of the small data area.  Variables will be put into
     one of @{b}.data@{ub}, @{b}bss@{ub}, or @{b}.rodata@{ub} (unless the @{b}section@{ub} attribute has
     been specified).  This is the default.

     The small data area consists of sections @{b}.sdata@{ub} and @{b}.sbss@{ub}.
     Objects may be explicitly put in the small data area with the
     @{b}section@{ub} attribute using one of these sections.

@{b}-msdata=sdata@{ub}
     Put small global and static data in the small data area, but do not
     generate special code to reference them.

@{b}-msdata=use@{ub}
     Put small global and static data in the small data area, and
     generate special instructions to reference them.

@{b}-G NUM@{ub}
     Put global and static objects less than or equal to NUM bytes into
     the small data or bss sections instead of the normal data or bss
     sections.  The default value of NUM is 8.  The @{b}-msdata@{ub} option must
     be set to one of @{b}sdata@{ub} or @{b}use@{ub} for this option to have any effect.

     All modules should be compiled with the same @{b}-G NUM@{ub} value.
     Compiling with different values of NUM may or may not work; if it
     doesn't the linker will give an error message - incorrect code
     will not be generated.


@endnode

@node "M88K Options" "gcc.guide/M88K Options"
@next "RS-6000 and PowerPC Options"
@prev "M32R-D Options"
@toc "Submodel Options"

M88K Options
------------

   These @{b}-m@{ub} options are defined for Motorola 88k architectures:

@{b}-m88000@{ub}
     Generate code that works well on both the m88100 and the m88110.

@{b}-m88100@{ub}
     Generate code that works best for the m88100, but that also runs
     on the m88110.

@{b}-m88110@{ub}
     Generate code that works best for the m88110, and may not run on
     the m88100.

@{b}-mbig-pic@{ub}
     Obsolete option to be removed from the next revision.  Use @{b}-fPIC@{ub}.

@{b}-midentify-revision@{ub}
     Include an @{b}ident@{ub} directive in the assembler output recording the
     source file name, compiler name and version, timestamp, and
     compilation flags used.

@{b}-mno-underscores@{ub}
     In assembler output, emit symbol names without adding an underscore
     character at the beginning of each name.  The default is to use an
     underscore as prefix on each name.

@{b}-mocs-debug-info@{ub}
@{b}-mno-ocs-debug-info@{ub}
     Include (or omit) additional debugging information (about
     registers used in each stack frame) as specified in the 88open
     Object Compatibility Standard, "OCS".  This extra information
     allows debugging of code that has had the frame pointer
     eliminated.  The default for DG/UX, SVr4, and Delta 88 SVr3.2 is
     to include this information; other 88k configurations omit this
     information by default.

@{b}-mocs-frame-position@{ub}
     When emitting COFF debugging information for automatic variables
     and parameters stored on the stack, use the offset from the
     canonical frame address, which is the stack pointer (register 31)
     on entry to the function.  The DG/UX, SVr4, Delta88 SVr3.2, and
     BCS configurations use @{b}-mocs-frame-position@{ub}; other 88k
     configurations have the default @{b}-mno-ocs-frame-position@{ub}.

@{b}-mno-ocs-frame-position@{ub}
     When emitting COFF debugging information for automatic variables
     and parameters stored on the stack, use the offset from the frame
     pointer register (register 30).  When this option is in effect,
     the frame pointer is not eliminated when debugging information is
     selected by the -g switch.

@{b}-moptimize-arg-area@{ub}
@{b}-mno-optimize-arg-area@{ub}
     Control how function arguments are stored in stack frames.
     @{b}-moptimize-arg-area@{ub} saves space by optimizing them, but this
     conflicts with the 88open specifications.  The opposite
     alternative, @{b}-mno-optimize-arg-area@{ub}, agrees with 88open standards.
     By default GNU CC does not optimize the argument area.

@{b}-mshort-data-NUM@{ub}
     Generate smaller data references by making them relative to @{b}r0@{ub},
     which allows loading a value using a single instruction (rather
     than the usual two).  You control which data references are
     affected by specifying NUM with this option.  For example, if you
     specify @{b}-mshort-data-512@{ub}, then the data references affected are
     those involving displacements of less than 512 bytes.
     @{b}-mshort-data-NUM@{ub} is not effective for NUM greater than 64k.

@{b}-mserialize-volatile@{ub}
@{b}-mno-serialize-volatile@{ub}
     Do, or don't, generate code to guarantee sequential consistency of
     volatile memory references.  By default, consistency is guaranteed.

     The order of memory references made by the MC88110 processor does
     not always match the order of the instructions requesting those
     references.  In particular, a load instruction may execute before
     a preceding store instruction.  Such reordering violates
     sequential consistency of volatile memory references, when there
     are multiple processors.   When consistency must be guaranteed,
     GNU C generates special instructions, as needed, to force
     execution in the proper order.

     The MC88100 processor does not reorder memory references and so
     always provides sequential consistency.  However, by default, GNU
     C generates the special instructions to guarantee consistency even
     when you use @{b}-m88100@{ub}, so that the code may be run on an MC88110
     processor.  If you intend to run your code only on the MC88100
     processor, you may use @{b}-mno-serialize-volatile@{ub}.

     The extra code generated to guarantee consistency may affect the
     performance of your application.  If you know that you can safely
     forgo this guarantee, you may use @{b}-mno-serialize-volatile@{ub}.

@{b}-msvr4@{ub}
@{b}-msvr3@{ub}
     Turn on (@{b}-msvr4@{ub}) or off (@{b}-msvr3@{ub}) compiler extensions related to
     System V release 4 (SVr4).  This controls the following:

       1. Which variant of the assembler syntax to emit.

       2. @{b}-msvr4@{ub} makes the C preprocessor recognize @{b}#pragma weak@{ub} that
          is used on System V release 4.

       3. @{b}-msvr4@{ub} makes GNU CC issue additional declaration directives
          used in SVr4.

@{b}     -msvr4@{ub} is the default for the m88k-motorola-sysv4 and m88k-dg-dgux
     m88k configurations. @{b}-msvr3@{ub} is the default for all other m88k
     configurations.

@{b}-mversion-03.00@{ub}
     This option is obsolete, and is ignored.

@{b}-mno-check-zero-division@{ub}
@{b}-mcheck-zero-division@{ub}
     Do, or don't, generate code to guarantee that integer division by
     zero will be detected.  By default, detection is guaranteed.

     Some models of the MC88100 processor fail to trap upon integer
     division by zero under certain conditions.  By default, when
     compiling code that might be run on such a processor, GNU C
     generates code that explicitly checks for zero-valued divisors and
     traps with exception number 503 when one is detected.  Use of
     mno-check-zero-division suppresses such checking for code
     generated to run on an MC88100 processor.

     GNU C assumes that the MC88110 processor correctly detects all
     instances of integer division by zero.  When @{b}-m88110@{ub} is specified,
     both @{b}-mcheck-zero-division@{ub} and @{b}-mno-check-zero-division@{ub} are
     ignored, and no explicit checks for zero-valued divisors are
     generated.

@{b}-muse-div-instruction@{ub}
     Use the div instruction for signed integer division on the MC88100
     processor.  By default, the div instruction is not used.

     On the MC88100 processor the signed integer division instruction
     div) traps to the operating system on a negative operand.  The
     operating system transparently completes the operation, but at a
     large cost in execution time.  By default, when compiling code
     that might be run on an MC88100 processor, GNU C emulates signed
     integer division using the unsigned integer division instruction
     divu), thereby avoiding the large penalty of a trap to the
     operating system.  Such emulation has its own, smaller, execution
     cost in both time and space.  To the extent that your code's
     important signed integer division operations are performed on two
     nonnegative operands, it may be desirable to use the div
     instruction directly.

     On the MC88110 processor the div instruction (also known as the
     divs instruction) processes negative operands without trapping to
     the operating system.  When @{b}-m88110@{ub} is specified,
     @{b}-muse-div-instruction@{ub} is ignored, and the div instruction is used
     for signed integer division.

     Note that the result of dividing INT_MIN by -1 is undefined.  In
     particular, the behavior of such a division with and without
     @{b}-muse-div-instruction@{ub}  may differ.

@{b}-mtrap-large-shift@{ub}
@{b}-mhandle-large-shift@{ub}
     Include code to detect bit-shifts of more than 31 bits;
     respectively, trap such shifts or emit code to handle them
     properly.  By default GNU CC makes no special provision for large
     bit shifts.

@{b}-mwarn-passed-structs@{ub}
     Warn when a function passes a struct as an argument or result.
     Structure-passing conventions have changed during the evolution of
     the C language, and are often the source of portability problems.
     By default, GNU CC issues no such warning.


@endnode

@node "RS-6000 and PowerPC Options" "gcc.guide/RS-6000 and PowerPC Options"
@next "RT Options"
@prev "M88K Options"
@toc "Submodel Options"

IBM RS/6000 and PowerPC Options
-------------------------------

   These @{b}-m@{ub} options are defined for the IBM RS/6000 and PowerPC:
@{b}-mpower@{ub}
@{b}-mno-power@{ub}
@{b}-mpower2@{ub}
@{b}-mno-power2@{ub}
@{b}-mpowerpc@{ub}
@{b}-mno-powerpc@{ub}
@{b}-mpowerpc-gpopt@{ub}
@{b}-mno-powerpc-gpopt@{ub}
@{b}-mpowerpc-gfxopt@{ub}
@{b}-mno-powerpc-gfxopt@{ub}
@{b}-mpowerpc64@{ub}
@{b}-mno-powerpc64@{ub}
     GNU CC supports two related instruction set architectures for the
     RS/6000 and PowerPC.  The @{i}POWER@{ui} instruction set are those
     instructions supported by the @{b}rios@{ub} chip set used in the original
     RS/6000 systems and the @{i}PowerPC@{ui} instruction set is the
     architecture of the Motorola MPC5xx, MPC6xx, MPC8xx
     microprocessors, and the IBM 4xx microprocessors.

     Neither architecture is a subset of the other.  However there is a
     large common subset of instructions supported by both.  An MQ
     register is included in processors supporting the POWER
     architecture.

     You use these options to specify which instructions are available
     on the processor you are using.  The default value of these
     options is determined when configuring GNU CC.  Specifying the
     @{b}-mcpu=CPU_TYPE@{ub} overrides the specification of these options.  We
     recommend you use the @{b}-mcpu=CPU_TYPE@{ub} option rather than the
     options listed above.

     The @{b}-mpower@{ub} option allows GNU CC to generate instructions that are
     found only in the POWER architecture and to use the MQ register.
     Specifying @{b}-mpower2@{ub} implies @{b}-power@{ub} and also allows GNU CC to
     generate instructions that are present in the POWER2 architecture
     but not the original POWER architecture.

     The @{b}-mpowerpc@{ub} option allows GNU CC to generate instructions that
     are found only in the 32-bit subset of the PowerPC architecture.
     Specifying @{b}-mpowerpc-gpopt@{ub} implies @{b}-mpowerpc@{ub} and also allows GNU
     CC to use the optional PowerPC architecture instructions in the
     General Purpose group, including floating-point square root.
     Specifying @{b}-mpowerpc-gfxopt@{ub} implies @{b}-mpowerpc@{ub} and also allows GNU
     CC to use the optional PowerPC architecture instructions in the
     Graphics group, including floating-point select.

     The @{b}-mpowerpc64@{ub} option allows GNU CC to generate the additional
     64-bit instructions that are found in the full PowerPC64
     architecture and to treat GPRs as 64-bit, doubleword quantities.
     GNU CC defaults to @{b}-mno-powerpc64@{ub}.

     If you specify both @{b}-mno-power@{ub} and @{b}-mno-powerpc@{ub}, GNU CC will use
     only the instructions in the common subset of both architectures
     plus some special AIX common-mode calls, and will not use the MQ
     register.  Specifying both @{b}-mpower@{ub} and @{b}-mpowerpc@{ub} permits GNU CC to
     use any instruction from either architecture and to allow use of
     the MQ register; specify this for the Motorola MPC601.

@{b}-mnew-mnemonics@{ub}
@{b}-mold-mnemonics@{ub}
     Select which mnemonics to use in the generated assembler code.
     @{b}-mnew-mnemonics@{ub} requests output that uses the assembler mnemonics
     defined for the PowerPC architecture, while @{b}-mold-mnemonics@{ub}
     requests the assembler mnemonics defined for the POWER
     architecture.  Instructions defined in only one architecture have
     only one mnemonic; GNU CC uses that mnemonic irrespective of which
     of these options is specified.

     GNU CC defaults to the mnemonics appropriate for the architecture
     in use.  Specifying @{b}-mcpu=CPU_TYPE@{ub} sometimes overrides the value
     of these option.  Unless you are building a cross-compiler, you
     should normally not specify either @{b}-mnew-mnemonics@{ub} or
     @{b}-mold-mnemonics@{ub}, but should instead accept the default.

@{b}-mcpu=CPU_TYPE@{ub}
     Set architecture type, register usage, choice of mnemonics, and
     instruction scheduling parameters for machine type CPU_TYPE.
     Supported values for CPU_TYPE are @{b}rs6000@{ub}, @{b}rios1@{ub}, @{b}rios2@{ub}, @{b}rsc@{ub}, @{b}601@{ub},
     @{b}602@{ub}, @{b}603@{ub}, @{b}603e@{ub}, @{b}604@{ub}, @{b}604e@{ub}, @{b}620@{ub}, @{b}power@{ub}, @{b}power2@{ub}, @{b}powerpc@{ub}, @{b}403@{ub}, @{b}505@{ub},
     @{b}801@{ub}, @{b}821@{ub}, @{b}823@{ub}, and @{b}860@{ub} and @{b}common@{ub}.  @{b}-mcpu=power@{ub}, @{b}-mcpu=power2@{ub}, and
     @{b}-mcpu=powerpc@{ub} specify generic POWER, POWER2 and pure PowerPC
     (i.e., not MPC601) architecture machine types, with an
     appropriate, generic processor model assumed for scheduling
     purposes.

     Specifying any of the following options: @{b}-mcpu=rios1@{ub}, @{b}-mcpu=rios2@{ub},
     @{b}-mcpu=rsc@{ub}, @{b}-mcpu=power@{ub}, or @{b}-mcpu=power2@{ub} enables the @{b}-mpower@{ub} option
     and disables the @{b}-mpowerpc@{ub} option; @{b}-mcpu=601@{ub} enables both the
     @{b}-mpower@{ub} and @{b}-mpowerpc@{ub} options.  All of @{b}-mcpu=602@{ub}, @{b}-mcpu=603@{ub},
     @{b}-mcpu=603e@{ub}, @{b}-mcpu=604@{ub}, @{b}-mcpu=620@{ub}, enable the @{b}-mpowerpc@{ub} option and
     disable the @{b}-mpower@{ub} option.  Exactly similarly, all of @{b}-mcpu=403@{ub},
     @{b}-mcpu=505@{ub}, @{b}-mcpu=821@{ub}, @{b}-mcpu=860@{ub} and @{b}-mcpu=powerpc@{ub} enable the
     @{b}-mpowerpc@{ub} option and disable the @{b}-mpower@{ub} option.  @{b}-mcpu=common@{ub}
     disables both the @{b}-mpower@{ub} and @{b}-mpowerpc@{ub} options.

     AIX versions 4 or greater selects @{b}-mcpu=common@{ub} by default, so that
     code will operate on all members of the RS/6000 and PowerPC
     families.  In that case, GNU CC will use only the instructions in
     the common subset of both architectures plus some special AIX
     common-mode calls, and will not use the MQ register.  GNU CC
     assumes a generic processor model for scheduling purposes.

     Specifying any of the options @{b}-mcpu=rios1@{ub}, @{b}-mcpu=rios2@{ub}, @{b}-mcpu=rsc@{ub},
     @{b}-mcpu=power@{ub}, or @{b}-mcpu=power2@{ub} also disables the @{b}new-mnemonics@{ub}
     option.  Specifying @{b}-mcpu=601@{ub}, @{b}-mcpu=602@{ub}, @{b}-mcpu=603@{ub}, @{b}-mcpu=603e@{ub},
     @{b}-mcpu=604@{ub}, @{b}620@{ub}, @{b}403@{ub}, or @{b}-mcpu=powerpc@{ub} also enables the
     @{b}new-mnemonics@{ub} option.

     Specifying @{b}-mcpu=403@{ub}, @{b}-mcpu=821@{ub}, or @{b}-mcpu=860@{ub} also enables the
     @{b}-msoft-float@{ub} option.

@{b}-mtune=CPU_TYPE@{ub}
     Set the instruction scheduling parameters for machine type
     CPU_TYPE, but do not set the architecture type, register usage,
     choice of mnemonics like @{b}-mcpu=@{ub}CPU_TYPE would.  The same values
     for CPU_TYPE are used for @{b}-mtune=@{ub}CPU_TYPE as for @{b}-mcpu=@{ub}CPU_TYPE.
     The @{b}-mtune=@{ub}CPU_TYPE option overrides the @{b}-mcpu=@{ub}CPU_TYPE option in
     terms of instruction scheduling parameters.

@{b}-mfull-toc@{ub}
@{b}-mno-fp-in-toc@{ub}
@{b}-mno-sum-in-toc@{ub}
@{b}-mminimal-toc@{ub}
     Modify generation of the TOC (Table Of Contents), which is created
     for every executable file.  The @{b}-mfull-toc@{ub} option is selected by
     default.  In that case, GNU CC will allocate at least one TOC
     entry for each unique non-automatic variable reference in your
     program.  GNU CC will also place floating-point constants in the
     TOC.  However, only 16,384 entries are available in the TOC.

     If you receive a linker error message that saying you have
     overflowed the available TOC space, you can reduce the amount of
     TOC space used with the @{b}-mno-fp-in-toc@{ub} and @{b}-mno-sum-in-toc@{ub} options.
     @{b}-mno-fp-in-toc@{ub} prevents GNU CC from putting floating-point
     constants in the TOC and @{b}-mno-sum-in-toc@{ub} forces GNU CC to generate
     code to calculate the sum of an address and a constant at run-time
     instead of putting that sum into the TOC.  You may specify one or
     both of these options.  Each causes GNU CC to produce very slightly
     slower and larger code at the expense of conserving TOC space.

     If you still run out of space in the TOC even when you specify
     both of these options, specify @{b}-mminimal-toc@{ub} instead.  This option
     causes GNU CC to make only one TOC entry for every file.  When you
     specify this option, GNU CC will produce code that is slower and
     larger but which uses extremely little TOC space.  You may wish to
     use this option only on files that contain less frequently
     executed code.

@{b}-maix64@{ub}
@{b}-maix32@{ub}
     Enable AIX 64-bit ABI and calling convention: 64-bit pointers,
     64-bit @{b}long@{ub} type, and the infrastructure needed to support them.
     Specifying @{b}-maix64@{ub} implies @{b}-mpowerpc64@{ub} and @{b}-mpowerpc@{ub}, while
     @{b}-maix32@{ub} disables the 64-bit ABI and implies @{b}-mno-powerpc64@{ub}.  GNU
     CC defaults to @{b}-maix32@{ub}.

@{b}-mxl-call@{ub}
@{b}-mno-xl-call@{ub}
     On AIX, pass floating-point arguments to prototyped functions
     beyond the register save area (RSA) on the stack in addition to
     argument FPRs.  The AIX calling convention was extended but not
     initially documented to handle an obscure K&R C case of calling a
     function that takes the address of its arguments with fewer
     arguments than declared.  AIX XL compilers access floating point
     arguments which do not fit in the RSA from the stack when a
     subroutine is compiled without optimization.  Because always
     storing floating-point arguments on the stack is inefficient and
     rarely needed, this option is not enabled by default and only is
     necessary when calling subroutines compiled by AIX XL compilers
     without optimization.

@{b}-mthreads@{ub}
     Support @{i}AIX Threads@{ui}.  Link an application written to use @{i}pthreads@{ui}
     with special libraries and startup code to enable the application
     to run.

@{b}-mpe@{ub}
     Support @{i}IBM RS/6000 SP@{ui} @{i}Parallel Environment@{ui} (PE).  Link an
     application written to use message passing with special startup
     code to enable the application to run.  The system must have PE
     installed in the standard location (@{b}/usr/lpp/ppe.poe/@{ub}), or the
     @{b}specs@{ub} file must be overridden with the @{b}-specs=@{ub} option to specify
     the appropriate directory location.  The Parallel Environment does
     not support threads, so the @{b}-mpe@{ub} option and the @{b}-mthreads@{ub} option
     are incompatible.

@{b}-msoft-float@{ub}
@{b}-mhard-float@{ub}
     Generate code that does not use (uses) the floating-point register
     set.  Software floating point emulation is provided if you use the
     @{b}-msoft-float@{ub} option, and pass the option to GNU CC when linking.

@{b}-mmultiple@{ub}
@{b}-mno-multiple@{ub}
     Generate code that uses (does not use) the load multiple word
     instructions and the store multiple word instructions.  These
     instructions are generated by default on POWER systems, and not
     generated on PowerPC systems.  Do not use @{b}-mmultiple@{ub} on little
     endian PowerPC systems, since those instructions do not work when
     the processor is in little endian mode.

@{b}-mstring@{ub}
@{b}-mno-string@{ub}
     Generate code that uses (does not use) the load string
     instructions and the store string word instructions to save
     multiple registers and do small block moves.  These instructions
     are generated by default on POWER systems, and not generated on
     PowerPC systems.  Do not use @{b}-mstring@{ub} on little endian PowerPC
     systems, since those instructions do not work when the processor
     is in little endian mode.

@{b}-mupdate@{ub}
@{b}-mno-update@{ub}
     Generate code that uses (does not use) the load or store
     instructions that update the base register to the address of the
     calculated memory location.  These instructions are generated by
     default.  If you use @{b}-mno-update@{ub}, there is a small window between
     the time that the stack pointer is updated and the address of the
     previous frame is stored, which means code that walks the stack
     frame across interrupts or signals may get corrupted data.

@{b}-mfused-madd@{ub}
@{b}-mno-fused-madd@{ub}
     Generate code that uses (does not use) the floating point multiply
     and accumulate instructions.  These instructions are generated by
     default if hardware floating is used.

@{b}-mno-bit-align@{ub}
@{b}-mbit-align@{ub}
     On System V.4 and embedded PowerPC systems do not (do) force
     structures and unions that contain bit fields to be aligned to the
     base type of the bit field.

     For example, by default a structure containing nothing but 8
     @{b}unsigned@{ub} bitfields of length 1 would be aligned to a 4 byte
     boundary and have a size of 4 bytes.  By using @{b}-mno-bit-align@{ub}, the
     structure would be aligned to a 1 byte boundary and be one byte in
     size.

@{b}-mno-strict-align@{ub}
@{b}-mstrict-align@{ub}
     On System V.4 and embedded PowerPC systems do not (do) assume that
     unaligned memory references will be handled by the system.

@{b}-mrelocatable@{ub}
@{b}-mno-relocatable@{ub}
     On embedded PowerPC systems generate code that allows (does not
     allow) the program to be relocated to a different address at
     runtime.  If you use @{b}-mrelocatable@{ub} on any module, all objects
     linked together must be compiled with @{b}-mrelocatable@{ub} or
     @{b}-mrelocatable-lib@{ub}.

@{b}-mrelocatable-lib@{ub}
@{b}-mno-relocatable-lib@{ub}
     On embedded PowerPC systems generate code that allows (does not
     allow) the program to be relocated to a different address at
     runtime.  Modules compiled with @{b}-mrelocatable-lib@{ub} can be linked
     with either modules compiled without @{b}-mrelocatable@{ub} and
     @{b}-mrelocatable-lib@{ub} or with modules compiled with the @{b}-mrelocatable@{ub}
     options.

@{b}-mno-toc@{ub}
@{b}-mtoc@{ub}
     On System V.4 and embedded PowerPC systems do not (do) assume that
     register 2 contains a pointer to a global area pointing to the
     addresses used in the program.

@{b}-mlittle@{ub}
@{b}-mlittle-endian@{ub}
     On System V.4 and embedded PowerPC systems compile code for the
     processor in little endian mode.  The @{b}-mlittle-endian@{ub} option is
     the same as @{b}-mlittle@{ub}.

@{b}-mbig@{ub}
@{b}-mbig-endian@{ub}
     On System V.4 and embedded PowerPC systems compile code for the
     processor in big endian mode.  The @{b}-mbig-endian@{ub} option is the same
     as @{b}-mbig@{ub}.

@{b}-mcall-sysv@{ub}
     On System V.4 and embedded PowerPC systems compile code using
     calling conventions that adheres to the March 1995 draft of the
     System V Application Binary Interface, PowerPC processor
     supplement.  This is the default unless you configured GCC using
     @{b}powerpc-*-eabiaix@{ub}.

@{b}-mcall-sysv-eabi@{ub}
     Specify both @{b}-mcall-sysv@{ub} and @{b}-meabi@{ub} options.

@{b}-mcall-sysv-noeabi@{ub}
     Specify both @{b}-mcall-sysv@{ub} and @{b}-mno-eabi@{ub} options.

@{b}-mcall-aix@{ub}
     On System V.4 and embedded PowerPC systems compile code using
     calling conventions that are similar to those used on AIX.  This
     is the default if you configured GCC using @{b}powerpc-*-eabiaix@{ub}.

@{b}-mcall-solaris@{ub}
     On System V.4 and embedded PowerPC systems compile code for the
     Solaris operating system.

@{b}-mcall-linux@{ub}
     On System V.4 and embedded PowerPC systems compile code for the
     Linux-based GNU system.

@{b}-mprototype@{ub}
@{b}-mno-prototype@{ub}
     On System V.4 and embedded PowerPC systems assume that all calls to
     variable argument functions are properly prototyped.  Otherwise,
     the compiler must insert an instruction before every non
     prototyped call to set or clear bit 6 of the condition code
     register (CR) to indicate whether floating point values were
     passed in the floating point registers in case the function takes
     a variable arguments.  With @{b}-mprototype@{ub}, only calls to prototyped
     variable argument functions will set or clear the bit.

@{b}-msim@{ub}
     On embedded PowerPC systems, assume that the startup module is
     called @{b}sim-crt0.o@{ub} and that the standard C libraries are @{b}libsim.a@{ub}
     and @{b}libc.a@{ub}.  This is the default for @{b}powerpc-*-eabisim@{ub}.
     configurations.

@{b}-mmvme@{ub}
     On embedded PowerPC systems, assume that the startup module is
     called @{b}crt0.o@{ub} and the standard C libraries are @{b}libmvme.a@{ub} and
     @{b}libc.a@{ub}.

@{b}-mads@{ub}
     On embedded PowerPC systems, assume that the startup module is
     called @{b}crt0.o@{ub} and the standard C libraries are @{b}libads.a@{ub} and @{b}libc.a@{ub}.

@{b}-myellowknife@{ub}
     On embedded PowerPC systems, assume that the startup module is
     called @{b}crt0.o@{ub} and the standard C libraries are @{b}libyk.a@{ub} and @{b}libc.a@{ub}.

@{b}-memb@{ub}
     On embedded PowerPC systems, set the PPC_EMB bit in the ELF flags
     header to indicate that @{b}eabi@{ub} extended relocations are used.

@{b}-meabi@{ub}
@{b}-mno-eabi@{ub}
     On System V.4 and embedded PowerPC systems do (do not) adhere to
     the Embedded Applications Binary Interface (eabi) which is a set of
     modifications to the System V.4 specifications.  Selecting @{b}-meabi@{ub}
     means that the stack is aligned to an 8 byte boundary, a function
     @{b}__eabi@{ub} is called to from @{b}main@{ub} to set up the eabi environment, and
     the @{b}-msdata@{ub} option can use both @{b}r2@{ub} and @{b}r13@{ub} to point to two
     separate small data areas.  Selecting @{b}-mno-eabi@{ub} means that the
     stack is aligned to a 16 byte boundary, do not call an
     initialization function from @{b}main@{ub}, and the @{b}-msdata@{ub} option will
     only use @{b}r13@{ub} to point to a single small data area.  The @{b}-meabi@{ub}
     option is on by default if you configured GCC using one of the
     @{b}powerpc*-*-eabi*@{ub} options.

@{b}-msdata=eabi@{ub}
     On System V.4 and embedded PowerPC systems, put small initialized
     @{b}const@{ub} global and static data in the @{b}.sdata2@{ub} section, which is
     pointed to by register @{b}r2@{ub}.  Put small initialized non-@{b}const@{ub} global
     and static data in the @{b}.sdata@{ub} section, which is pointed to by
     register @{b}r13@{ub}.  Put small uninitialized global and static data in
     the @{b}.sbss@{ub} section, which is adjacent to the @{b}.sdata@{ub} section.  The
     @{b}-msdata=eabi@{ub} option is incompatible with the @{b}-mrelocatable@{ub} option.
     The @{b}-msdata=eabi@{ub} option also sets the @{b}-memb@{ub} option.

@{b}-msdata=sysv@{ub}
     On System V.4 and embedded PowerPC systems, put small global and
     static data in the @{b}.sdata@{ub} section, which is pointed to by register
     @{b}r13@{ub}.  Put small uninitialized global and static data in the @{b}.sbss@{ub}
     section, which is adjacent to the @{b}.sdata@{ub} section.  The
     @{b}-msdata=sysv@{ub} option is incompatible with the @{b}-mrelocatable@{ub} option.

@{b}-msdata=default@{ub}
@{b}-msdata@{ub}
     On System V.4 and embedded PowerPC systems, if @{b}-meabi@{ub} is used,
     compile code the same as @{b}-msdata=eabi@{ub}, otherwise compile code the
     same as @{b}-msdata=sysv@{ub}.

@{b}-msdata-data@{ub}
     On System V.4 and embedded PowerPC systems, put small global and
     static data in the @{b}.sdata@{ub} section.  Put small uninitialized global
     and static data in the @{b}.sbss@{ub} section.  Do not use register @{b}r13@{ub} to
     address small data however.  This is the default behavior unless
     other @{b}-msdata@{ub} options are used.

@{b}-msdata=none@{ub}
@{b}-mno-sdata@{ub}
     On embedded PowerPC systems, put all initialized global and static
     data in the @{b}.data@{ub} section, and all uninitialized data in the @{b}.bss@{ub}
     section.

@{b}-G NUM@{ub}
     On embedded PowerPC systems, put global and static items less than
     or equal to NUM bytes into the small data or bss sections instead
     of the normal data or bss section.  By default, NUM is 8.  The @{b}-G
     NUM@{ub} switch is also passed to the linker.  All modules should be
     compiled with the same @{b}-G NUM@{ub} value.

@{b}-mregnames@{ub}
@{b}-mno-regnames@{ub}
     On System V.4 and embedded PowerPC systems do (do not) emit
     register names in the assembly language output using symbolic
     forms.


@endnode

@node "RT Options" "gcc.guide/RT Options"
@next "MIPS Options"
@prev "RS-6000 and PowerPC Options"
@toc "Submodel Options"

IBM RT Options
--------------

   These @{b}-m@{ub} options are defined for the IBM RT PC:

@{b}-min-line-mul@{ub}
     Use an in-line code sequence for integer multiplies.  This is the
     default.

@{b}-mcall-lib-mul@{ub}
     Call @{b}lmul$$@{ub} for integer multiples.

@{b}-mfull-fp-blocks@{ub}
     Generate full-size floating point data blocks, including the
     minimum amount of scratch space recommended by IBM.  This is the
     default.

@{b}-mminimum-fp-blocks@{ub}
     Do not include extra scratch space in floating point data blocks.
     This results in smaller code, but slower execution, since scratch
     space must be allocated dynamically.

@{b}-mfp-arg-in-fpregs@{ub}
     Use a calling sequence incompatible with the IBM calling
     convention in which floating point arguments are passed in
     floating point registers.  Note that @{b}varargs.h@{ub} and @{b}stdargs.h@{ub} will
     not work with floating point operands if this option is specified.

@{b}-mfp-arg-in-gregs@{ub}
     Use the normal calling convention for floating point arguments.
     This is the default.

@{b}-mhc-struct-return@{ub}
     Return structures of more than one word in memory, rather than in a
     register.  This provides compatibility with the MetaWare HighC (hc)
     compiler.  Use the option @{b}-fpcc-struct-return@{ub} for compatibility
     with the Portable C Compiler (pcc).

@{b}-mnohc-struct-return@{ub}
     Return some structures of more than one word in registers, when
     convenient.  This is the default.  For compatibility with the
     IBM-supplied compilers, use the option @{b}-fpcc-struct-return@{ub} or the
     option @{b}-mhc-struct-return@{ub}.


@endnode

@node "MIPS Options" "gcc.guide/MIPS Options"
@next "i386 Options"
@prev "RT Options"
@toc "Submodel Options"

MIPS Options
------------

   These @{b}-m@{ub} options are defined for the MIPS family of computers:

@{b}-mcpu=CPU TYPE@{ub}
     Assume the defaults for the machine type CPU TYPE when scheduling
     instructions.  The choices for CPU TYPE are @{b}r2000@{ub}, @{b}r3000@{ub}, @{b}r4000@{ub},
     @{b}r4400@{ub}, @{b}r4600@{ub}, and @{b}r6000@{ub}.  While picking a specific CPU TYPE will
     schedule things appropriately for that particular chip, the
     compiler will not generate any code that does not meet level 1 of
     the MIPS ISA (instruction set architecture) without the @{b}-mips2@{ub} or
     @{b}-mips3@{ub} switches being used.

@{b}-mips1@{ub}
     Issue instructions from level 1 of the MIPS ISA.  This is the
     default.  @{b}r3000@{ub} is the default CPU TYPE at this ISA level.

@{b}-mips2@{ub}
     Issue instructions from level 2 of the MIPS ISA (branch likely,
     square root instructions).  @{b}r6000@{ub} is the default CPU TYPE at this
     ISA level.

@{b}-mips3@{ub}
     Issue instructions from level 3 of the MIPS ISA (64 bit
     instructions).  @{b}r4000@{ub} is the default CPU TYPE at this ISA level.
     This option does not change the sizes of any of the C data types.

@{b}-mips4@{ub}
     Issue instructions from level 4 of the MIPS ISA.  @{b}r8000@{ub} is the
     default CPU TYPE at this ISA level.

@{b}-mfp32@{ub}
     Assume that 32 32-bit floating point registers are available.
     This is the default.

@{b}-mfp64@{ub}
     Assume that 32 64-bit floating point registers are available.
     This is the default when the @{b}-mips3@{ub} option is used.

@{b}-mgp32@{ub}
     Assume that 32 32-bit general purpose registers are available.
     This is the default.

@{b}-mgp64@{ub}
     Assume that 32 64-bit general purpose registers are available.
     This is the default when the @{b}-mips3@{ub} option is used.

@{b}-mint64@{ub}
     Types long, int, and pointer are 64 bits.  This works only if
     @{b}-mips3@{ub} is also specified.

@{b}-mlong64@{ub}
     Types long and pointer are 64 bits, and type int is 32 bits.  This
     works only if @{b}-mips3@{ub} is also specified.

@{b}-mabi=32@{ub}
@{b}-mabi=n32@{ub}
@{b}-mabi=64@{ub}
@{b}-mabi=eabi@{ub}
     Generate code for the indicated ABI.

@{b}-mmips-as@{ub}
     Generate code for the MIPS assembler, and invoke @{b}mips-tfile@{ub} to add
     normal debug information.  This is the default for all platforms
     except for the OSF/1 reference platform, using the OSF/rose object
     format.  If the either of the @{b}-gstabs@{ub} or @{b}-gstabs+@{ub} switches are
     used, the @{b}mips-tfile@{ub} program will encapsulate the stabs within
     MIPS ECOFF.

@{b}-mgas@{ub}
     Generate code for the GNU assembler.  This is the default on the
     OSF/1 reference platform, using the OSF/rose object format.  Also,
     this is the default if the configure option @{b}--with-gnu-as@{ub} is used.

@{b}-msplit-addresses@{ub}
@{b}-mno-split-addresses@{ub}
     Generate code to load the high and low parts of address constants
     separately.  This allows @{b}gcc@{ub} to optimize away redundant loads of
     the high order bits of addresses.  This optimization requires GNU
     as and GNU ld.  This optimization is enabled by default for some
     embedded targets where GNU as and GNU ld are standard.

@{b}-mrnames@{ub}
@{b}-mno-rnames@{ub}
     The @{b}-mrnames@{ub} switch says to output code using the MIPS software
     names for the registers, instead of the hardware names (ie, A0
     instead of $4).  The only known assembler that supports this option
     is the Algorithmics assembler.

@{b}-mgpopt@{ub}
@{b}-mno-gpopt@{ub}
     The @{b}-mgpopt@{ub} switch says to write all of the data declarations
     before the instructions in the text section, this allows the MIPS
     assembler to generate one word memory references instead of using
     two words for short global or static data items.  This is on by
     default if optimization is selected.

@{b}-mstats@{ub}
@{b}-mno-stats@{ub}
     For each non-inline function processed, the @{b}-mstats@{ub} switch causes
     the compiler to emit one line to the standard error file to print
     statistics about the program (number of registers saved, stack
     size, etc.).

@{b}-mmemcpy@{ub}
@{b}-mno-memcpy@{ub}
     The @{b}-mmemcpy@{ub} switch makes all block moves call the appropriate
     string function (@{b}memcpy@{ub} or @{b}bcopy@{ub}) instead of possibly generating
     inline code.

@{b}-mmips-tfile@{ub}
@{b}-mno-mips-tfile@{ub}
     The @{b}-mno-mips-tfile@{ub} switch causes the compiler not postprocess the
     object file with the @{b}mips-tfile@{ub} program, after the MIPS assembler
     has generated it to add debug support.  If @{b}mips-tfile@{ub} is not run,
     then no local variables will be available to the debugger.  In
     addition, @{b}stage2@{ub} and @{b}stage3@{ub} objects will have the temporary file
     names passed to the assembler embedded in the object file, which
     means the objects will not compare the same.  The @{b}-mno-mips-tfile@{ub}
     switch should only be used when there are bugs in the @{b}mips-tfile@{ub}
     program that prevents compilation.

@{b}-msoft-float@{ub}
     Generate output containing library calls for floating point.
     @{b}Warning:@{ub} the requisite libraries are not part of GNU CC.  Normally
     the facilities of the machine's usual C compiler are used, but
     this can't be done directly in cross-compilation.  You must make
     your own arrangements to provide suitable library functions for
     cross-compilation.

@{b}-mhard-float@{ub}
     Generate output containing floating point instructions.  This is
     the default if you use the unmodified sources.

@{b}-mabicalls@{ub}
@{b}-mno-abicalls@{ub}
     Emit (or do not emit) the pseudo operations @{b}.abicalls@{ub}, @{b}.cpload@{ub},
     and @{b}.cprestore@{ub} that some System V.4 ports use for position
     independent code.

@{b}-mlong-calls@{ub}
@{b}-mno-long-calls@{ub}
     Do all calls with the @{b}JALR@{ub} instruction, which requires loading up
     a function's address into a register before the call.  You need to
     use this switch, if you call outside of the current 512 megabyte
     segment to functions that are not through pointers.

@{b}-mhalf-pic@{ub}
@{b}-mno-half-pic@{ub}
     Put pointers to extern references into the data section and load
     them up, rather than put the references in the text section.

@{b}-membedded-pic@{ub}
@{b}-mno-embedded-pic@{ub}
     Generate PIC code suitable for some embedded systems.  All calls
     are made using PC relative address, and all data is addressed
     using the $gp register.  No more than 65536 bytes of global data
     may be used.  This requires GNU as and GNU ld which do most of the
     work.  This currently only works on targets which use ECOFF; it
     does not work with ELF.

@{b}-membedded-data@{ub}
@{b}-mno-embedded-data@{ub}
     Allocate variables to the read-only data section first if
     possible, then next in the small data section if possible,
     otherwise in data.  This gives slightly slower code than the
     default, but reduces the amount of RAM required when executing,
     and thus may be preferred for some embedded systems.

@{b}-msingle-float@{ub}
@{b}-mdouble-float@{ub}
     The @{b}-msingle-float@{ub} switch tells gcc to assume that the floating
     point coprocessor only supports single precision operations, as on
     the @{b}r4650@{ub} chip.  The @{b}-mdouble-float@{ub} switch permits gcc to use
     double precision operations.  This is the default.

@{b}-mmad@{ub}
@{b}-mno-mad@{ub}
     Permit use of the @{b}mad@{ub}, @{b}madu@{ub} and @{b}mul@{ub} instructions, as on the @{b}r4650@{ub}
     chip.

@{b}-m4650@{ub}
     Turns on @{b}-msingle-float@{ub}, @{b}-mmad@{ub}, and, at least for now, @{b}-mcpu=r4650@{ub}.

@{b}-EL@{ub}
     Compile code for the processor in little endian mode.  The
     requisite libraries are assumed to exist.

@{b}-EB@{ub}
     Compile code for the processor in big endian mode.  The requisite
     libraries are assumed to exist.

@{b}-G NUM@{ub}
     Put global and static items less than or equal to NUM bytes into
     the small data or bss sections instead of the normal data or bss
     section.  This allows the assembler to emit one word memory
     reference instructions based on the global pointer (GP or $28),
     instead of the normal two words used.  By default, NUM is 8 when
     the MIPS assembler is used, and 0 when the GNU assembler is used.
     The @{b}-G NUM@{ub} switch is also passed to the assembler and linker.  All
     modules should be compiled with the same @{b}-G NUM@{ub} value.

@{b}-nocpp@{ub}
     Tell the MIPS assembler to not run its preprocessor over user
     assembler files (with a @{b}.s@{ub} suffix) when assembling them.

   These options are defined by the macro @{b}TARGET_SWITCHES@{ub} in the
machine description.  The default for the options is also defined by
that macro, which enables you to change the defaults.


@endnode

@node "i386 Options" "gcc.guide/i386 Options"
@next "HPPA Options"
@prev "MIPS Options"
@toc "Submodel Options"

Intel 386 Options
-----------------

   These @{b}-m@{ub} options are defined for the i386 family of computers:

@{b}-mcpu=CPU TYPE@{ub}
     Assume the defaults for the machine type CPU TYPE when scheduling
     instructions.  The choices for CPU TYPE are: @{b}i386@{ub}, @{b}i486@{ub}, @{b}i586@{ub}
     (@{b}pentium@{ub}), @{b}pentium@{ub}, @{b}i686@{ub} (@{b}pentiumpro@{ub}) and @{b}pentiumpro@{ub}. While
     picking a specific CPU TYPE will schedule things appropriately for
     that particular chip, the compiler will not generate any code that
     does not run on the i386 without the @{b}-march=CPU TYPE@{ub} option being
     used.

@{b}-march=CPU TYPE@{ub}
     Generate instructions for the machine type CPU TYPE.  The choices
     for CPU TYPE are: @{b}i386@{ub}, @{b}i486@{ub}, @{b}pentium@{ub}, and @{b}pentiumpro@{ub}.  Specifying
     @{b}-march=CPU TYPE@{ub} implies @{b}-mcpu=CPU TYPE@{ub}.

@{b}-m386@{ub}
@{b}-m486@{ub}
@{b}-mpentium@{ub}
@{b}-mpentiumpro@{ub}
     Synonyms for -mcpu=i386, -mcpu=i486, -mcpu=pentium, and
     -mcpu=pentiumpro respectively.

@{b}-mieee-fp@{ub}
@{b}-mno-ieee-fp@{ub}
     Control whether or not the compiler uses IEEE floating point
     comparisons.  These handle correctly the case where the result of a
     comparison is unordered.

@{b}-msoft-float@{ub}
     Generate output containing library calls for floating point.
     @{b}Warning:@{ub} the requisite libraries are not part of GNU CC.  Normally
     the facilities of the machine's usual C compiler are used, but
     this can't be done directly in cross-compilation.  You must make
     your own arrangements to provide suitable library functions for
     cross-compilation.

     On machines where a function returns floating point results in the
     80387 register stack, some floating point opcodes may be emitted
     even if @{b}-msoft-float@{ub} is used.

@{b}-mno-fp-ret-in-387@{ub}
     Do not use the FPU registers for return values of functions.

     The usual calling convention has functions return values of types
     @{b}float@{ub} and @{b}double@{ub} in an FPU register, even if there is no FPU.  The
     idea is that the operating system should emulate an FPU.

     The option @{b}-mno-fp-ret-in-387@{ub} causes such values to be returned in
     ordinary CPU registers instead.

@{b}-mno-fancy-math-387@{ub}
     Some 387 emulators do not support the @{b}sin@{ub}, @{b}cos@{ub} and @{b}sqrt@{ub}
     instructions for the 387.  Specify this option to avoid generating
     those instructions. This option is the default on FreeBSD.  As of
     revision 2.6.1, these instructions are not generated unless you
     also use the @{b}-ffast-math@{ub} switch.

@{b}-malign-double@{ub}
@{b}-mno-align-double@{ub}
     Control whether GNU CC aligns @{b}double@{ub}, @{b}long double@{ub}, and @{b}long long@{ub}
     variables on a two word boundary or a one word boundary.  Aligning
     @{b}double@{ub} variables on a two word boundary will produce code that
     runs somewhat faster on a @{b}Pentium@{ub} at the expense of more memory.

@{b}     Warning:@{ub} if you use the @{b}-malign-double@{ub} switch, structures
     containing the above types will be aligned differently than the
     published application binary interface specifications for the 386.

@{b}-msvr3-shlib@{ub}
@{b}-mno-svr3-shlib@{ub}
     Control whether GNU CC places uninitialized locals into @{b}bss@{ub} or
     @{b}data@{ub}.  @{b}-msvr3-shlib@{ub} places these locals into @{b}bss@{ub}.  These options
     are meaningful only on System V Release 3.

@{b}-mno-wide-multiply@{ub}
@{b}-mwide-multiply@{ub}
     Control whether GNU CC uses the @{b}mul@{ub} and @{b}imul@{ub} that produce 64 bit
     results in @{b}eax:edx@{ub} from 32 bit operands to do @{b}long long@{ub} multiplies
     and 32-bit division by constants.

@{b}-mrtd@{ub}
     Use a different function-calling convention, in which functions
     that take a fixed number of arguments return with the @{b}ret@{ub} NUM
     instruction, which pops their arguments while returning.  This
     saves one instruction in the caller since there is no need to pop
     the arguments there.

     You can specify that an individual function is called with this
     calling sequence with the function attribute @{b}stdcall@{ub}.  You can also
     override the @{b}-mrtd@{ub} option by using the function attribute @{b}cdecl@{ub}.
     See @{"Function Attributes" link "Function Attributes"}.

@{b}     Warning:@{ub} this calling convention is incompatible with the one
     normally used on Unix, so you cannot use it if you need to call
     libraries compiled with the Unix compiler.

     Also, you must provide function prototypes for all functions that
     take variable numbers of arguments (including @{b}printf@{ub}); otherwise
     incorrect code will be generated for calls to those functions.

     In addition, seriously incorrect code will result if you call a
     function with too many arguments.  (Normally, extra arguments are
     harmlessly ignored.)

@{b}-mreg-alloc=REGS@{ub}
     Control the default allocation order of integer registers.  The
     string REGS is a series of letters specifying a register.  The
     supported letters are: @{b}a@{ub} allocate EAX; @{b}b@{ub} allocate EBX; @{b}c@{ub} allocate
     ECX; @{b}d@{ub} allocate EDX; @{b}S@{ub} allocate ESI; @{b}D@{ub} allocate EDI; @{b}B@{ub} allocate
     EBP.

@{b}-mregparm=NUM@{ub}
     Control how many registers are used to pass integer arguments.  By
     default, no registers are used to pass arguments, and at most 3
     registers can be used.  You can control this behavior for a
     specific function by using the function attribute @{b}regparm@{ub}.  See
     @{"Function Attributes" link "Function Attributes"}.

@{b}     Warning:@{ub} if you use this switch, and NUM is nonzero, then you must
     build all modules with the same value, including any libraries.
     This includes the system libraries and startup modules.

@{b}-malign-loops=NUM@{ub}
     Align loops to a 2 raised to a NUM byte boundary.  If
     @{b}-malign-loops@{ub} is not specified, the default is 2 unless gas 2.8
     (or later) is being used in which case the default is to align the
     loop on a 16 byte boundary if it is less than 8 bytes away.

@{b}-malign-jumps=NUM@{ub}
     Align instructions that are only jumped to to a 2 raised to a NUM
     byte boundary.  If @{b}-malign-jumps@{ub} is not specified, the default is
     2 if optimizing for a 386, and 4 if optimizing for a 486 unless
     gas 2.8 (or later) is being used in which case the default is to
     align the instruction on a 16 byte boundary if it is less than 8
     bytes away.

@{b}-malign-functions=NUM@{ub}
     Align the start of functions to a 2 raised to NUM byte boundary.
     If @{b}-malign-functions@{ub} is not specified, the default is 2 if
     optimizing for a 386, and 4 if optimizing for a 486.


@endnode

@node "HPPA Options" "gcc.guide/HPPA Options"
@next "Intel 960 Options"
@prev "i386 Options"
@toc "Submodel Options"

HPPA Options
------------

   These @{b}-m@{ub} options are defined for the HPPA family of computers:

@{b}-mpa-risc-1-0@{ub}
     Generate code for a PA 1.0 processor.

@{b}-mpa-risc-1-1@{ub}
     Generate code for a PA 1.1 processor.

@{b}-mbig-switch@{ub}
     Generate code suitable for big switch tables.  Use this option
     only if the assembler/linker complain about out of range branches
     within a switch table.

@{b}-mjump-in-delay@{ub}
     Fill delay slots of function calls with unconditional jump
     instructions by modifying the return pointer for the function call
     to be the target of the conditional jump.

@{b}-mdisable-fpregs@{ub}
     Prevent floating point registers from being used in any manner.
     This is necessary for compiling kernels which perform lazy context
     switching of floating point registers.  If you use this option and
     attempt to perform floating point operations, the compiler will
     abort.

@{b}-mdisable-indexing@{ub}
     Prevent the compiler from using indexing address modes.  This
     avoids some rather obscure problems when compiling MIG generated
     code under MACH.

@{b}-mno-space-regs@{ub}
     Generate code that assumes the target has no space registers.
     This allows GCC to generate faster indirect calls and use unscaled
     index address modes.

     Such code is suitable for level 0 PA systems and kernels.

@{b}-mfast-indirect-calls@{ub}
     Generate code that assumes calls never cross space boundaries.
     This allows GCC to emit code which performs faster indirect calls.

     This option will not work in the presense of shared libraries or
     nested functions.

@{b}-mspace@{ub}
     Optimize for space rather than execution time.  Currently this only
     enables out of line function prologues and epilogues.  This option
     is incompatible with PIC code generation and profiling.

@{b}-mlong-load-store@{ub}
     Generate 3-instruction load and store sequences as sometimes
     required by the HP-UX 10 linker.  This is equivalent to the @{b}+k@{ub}
     option to the HP compilers.

@{b}-mportable-runtime@{ub}
     Use the portable calling conventions proposed by HP for ELF
     systems.

@{b}-mgas@{ub}
     Enable the use of assembler directives only GAS understands.

@{b}-mschedule=CPU TYPE@{ub}
     Schedule code according to the constraints for the machine type
     CPU TYPE.  The choices for CPU TYPE are @{b}700@{ub} for 7N0 machines, @{b}7100@{ub}
     for 7N5 machines, and @{b}7100LC@{ub} for 7N2 machines.  @{b}7100@{ub} is the
     default for CPU TYPE.

     Note the @{b}7100LC@{ub} scheduling information is incomplete and using
     @{b}7100LC@{ub} often leads to bad schedules.  For now it's probably best
     to use @{b}7100@{ub} instead of @{b}7100LC@{ub} for the 7N2 machines.

@{b}-mlinker-opt@{ub}
     Enable the optimization pass in the HPUX linker.  Note this makes
     symbolic debugging impossible.  It also triggers a bug in the HPUX
     8 and HPUX 9 linkers in which they give bogus error messages when
     linking some programs.

@{b}-msoft-float@{ub}
     Generate output containing library calls for floating point.
     @{b}Warning:@{ub} the requisite libraries are not available for all HPPA
     targets.  Normally the facilities of the machine's usual C
     compiler are used, but this cannot be done directly in
     cross-compilation.  You must make your own arrangements to provide
     suitable library functions for cross-compilation.  The embedded
     target @{b}hppa1.1-*-pro@{ub} does provide software floating point support.

@{b}     -msoft-float@{ub} changes the calling convention in the output file;
     therefore, it is only useful if you compile @{i}all@{ui} of a program with
     this option.  In particular, you need to compile @{b}libgcc.a@{ub}, the
     library that comes with GNU CC, with @{b}-msoft-float@{ub} in order for
     this to work.


@endnode

@node "Intel 960 Options" "gcc.guide/Intel 960 Options"
@next "DEC Alpha Options"
@prev "HPPA Options"
@toc "Submodel Options"

Intel 960 Options
-----------------

   These @{b}-m@{ub} options are defined for the Intel 960 implementations:

@{b}-mCPU TYPE@{ub}
     Assume the defaults for the machine type CPU TYPE for some of the
     other options, including instruction scheduling, floating point
     support, and addressing modes.  The choices for CPU TYPE are @{b}ka@{ub},
     @{b}kb@{ub}, @{b}mc@{ub}, @{b}ca@{ub}, @{b}cf@{ub}, @{b}sa@{ub}, and @{b}sb@{ub}.  The default is @{b}kb@{ub}.

@{b}-mnumerics@{ub}
@{b}-msoft-float@{ub}
     The @{b}-mnumerics@{ub} option indicates that the processor does support
     floating-point instructions.  The @{b}-msoft-float@{ub} option indicates
     that floating-point support should not be assumed.

@{b}-mleaf-procedures@{ub}
@{b}-mno-leaf-procedures@{ub}
     Do (or do not) attempt to alter leaf procedures to be callable
     with the @{b}bal@{ub} instruction as well as @{b}call@{ub}.  This will result in more
     efficient code for explicit calls when the @{b}bal@{ub} instruction can be
     substituted by the assembler or linker, but less efficient code in
     other cases, such as calls via function pointers, or using a
     linker that doesn't support this optimization.

@{b}-mtail-call@{ub}
@{b}-mno-tail-call@{ub}
     Do (or do not) make additional attempts (beyond those of the
     machine-independent portions of the compiler) to optimize
     tail-recursive calls into branches.  You may not want to do this
     because the detection of cases where this is not valid is not
     totally complete.  The default is @{b}-mno-tail-call@{ub}.

@{b}-mcomplex-addr@{ub}
@{b}-mno-complex-addr@{ub}
     Assume (or do not assume) that the use of a complex addressing
     mode is a win on this implementation of the i960.  Complex
     addressing modes may not be worthwhile on the K-series, but they
     definitely are on the C-series.  The default is currently
     @{b}-mcomplex-addr@{ub} for all processors except the CB and CC.

@{b}-mcode-align@{ub}
@{b}-mno-code-align@{ub}
     Align code to 8-byte boundaries for faster fetching (or don't
     bother).  Currently turned on by default for C-series
     implementations only.

@{b}-mic-compat@{ub}
@{b}-mic2.0-compat@{ub}
@{b}-mic3.0-compat@{ub}
     Enable compatibility with iC960 v2.0 or v3.0.

@{b}-masm-compat@{ub}
@{b}-mintel-asm@{ub}
     Enable compatibility with the iC960 assembler.

@{b}-mstrict-align@{ub}
@{b}-mno-strict-align@{ub}
     Do not permit (do permit) unaligned accesses.

@{b}-mold-align@{ub}
     Enable structure-alignment compatibility with Intel's gcc release
     version 1.3 (based on gcc 1.37).  This option implies
     @{b}-mstrict-align@{ub}.


@endnode

@node "DEC Alpha Options" "gcc.guide/DEC Alpha Options"
@next "Clipper Options"
@prev "Intel 960 Options"
@toc "Submodel Options"

DEC Alpha Options
-----------------

   These @{b}-m@{ub} options are defined for the DEC Alpha implementations:

@{b}-mno-soft-float@{ub}
@{b}-msoft-float@{ub}
     Use (do not use) the hardware floating-point instructions for
     floating-point operations.  When @{b}-msoft-float@{ub} is specified,
     functions in @{b}libgcc1.c@{ub} will be used to perform floating-point
     operations.  Unless they are replaced by routines that emulate the
     floating-point operations, or compiled in such a way as to call
     such emulations routines, these routines will issue floating-point
     operations.   If you are compiling for an Alpha without
     floating-point operations, you must ensure that the library is
     built so as not to call them.

     Note that Alpha implementations without floating-point operations
     are required to have floating-point registers.

@{b}-mfp-reg@{ub}
@{b}-mno-fp-regs@{ub}
     Generate code that uses (does not use) the floating-point register
     set.  @{b}-mno-fp-regs@{ub} implies @{b}-msoft-float@{ub}.  If the floating-point
     register set is not used, floating point operands are passed in
     integer registers as if they were integers and floating-point
     results are passed in $0 instead of $f0.  This is a non-standard
     calling sequence, so any function with a floating-point argument
     or return value called by code compiled with @{b}-mno-fp-regs@{ub} must
     also be compiled with that option.

     A typical use of this option is building a kernel that does not
     use, and hence need not save and restore, any floating-point
     registers.

@{b}-mieee@{ub}
     The Alpha architecture implements floating-point hardware
     optimized for maximum performance.  It is mostly compliant with
     the IEEE floating point standard.  However, for full compliance,
     software assistance is required.  This option generates code fully
     IEEE compliant code @{i}except@{ui} that the INEXACT FLAG is not maintained
     (see below).  If this option is turned on, the CPP macro @{b}_IEEE_FP@{ub}
     is defined during compilation.  The option is a shorthand for:
     @{b}-D_IEEE_FP -mfp-trap-mode=su -mtrap-precision=i -mieee-conformant@{ub}.
     The resulting code is less efficient but is able to correctly
     support denormalized numbers and exceptional IEEE values such as
     not-a-number and plus/minus infinity.  Other Alpha compilers call
     this option @{b}-ieee_with_no_inexact@{ub}.

@{b}-mieee-with-inexact@{ub}
     This is like @{b}-mieee@{ub} except the generated code also maintains the
     IEEE INEXACT FLAG.  Turning on this option causes the generated
     code to implement fully-compliant IEEE math.  The option is a
     shorthand for @{b}-D_IEEE_FP -D_IEEE_FP_INEXACT@{ub} plus the three
     following: @{b}-mieee-conformant@{ub}, @{b}-mfp-trap-mode=sui@{ub}, and
     @{b}-mtrap-precision=i@{ub}.  On some Alpha implementations the resulting
     code may execute significantly slower than the code generated by
     default.  Since there is very little code that depends on the
     INEXACT FLAG, you should normally not specify this option.  Other
     Alpha compilers call this option @{b}-ieee_with_inexact@{ub}.

@{b}-mfp-trap-mode=TRAP MODE@{ub}
     This option controls what floating-point related traps are enabled.
     Other Alpha compilers call this option @{b}-fptm @{ub}TRAP MODE.  The trap
     mode can be set to one of four values:

    @{b}n@{ub}
          This is the default (normal) setting.  The only traps that
          are enabled are the ones that cannot be disabled in software
          (e.g., division by zero trap).

    @{b}u@{ub}
          In addition to the traps enabled by @{b}n@{ub}, underflow traps are
          enabled as well.

    @{b}su@{ub}
          Like @{b}su@{ub}, but the instructions are marked to be safe for
          software completion (see Alpha architecture manual for
          details).

    @{b}sui@{ub}
          Like @{b}su@{ub}, but inexact traps are enabled as well.

@{b}-mfp-rounding-mode=ROUNDING MODE@{ub}
     Selects the IEEE rounding mode.  Other Alpha compilers call this
     option @{b}-fprm @{ub}ROUNDING MODE.  The ROUNDING MODE can be one of:

    @{b}n@{ub}
          Normal IEEE rounding mode.  Floating point numbers are
          rounded towards the nearest machine number or towards the
          even machine number in case of a tie.

    @{b}m@{ub}
          Round towards minus infinity.

    @{b}c@{ub}
          Chopped rounding mode.  Floating point numbers are rounded
          towards zero.

    @{b}d@{ub}
          Dynamic rounding mode.  A field in the floating point control
          register (FPCR, see Alpha architecture reference manual)
          controls the rounding mode in effect.  The C library
          initializes this register for rounding towards plus infinity.
          Thus, unless your program modifies the FPCR, @{b}d@{ub} corresponds
          to round towards plus infinity.

@{b}-mtrap-precision=TRAP PRECISION@{ub}
     In the Alpha architecture, floating point traps are imprecise.
     This means without software assistance it is impossible to recover
     from a floating trap and program execution normally needs to be
     terminated.  GNU CC can generate code that can assist operating
     system trap handlers in determining the exact location that caused
     a floating point trap.  Depending on the requirements of an
     application, different levels of precisions can be selected:

    @{b}p@{ub}
          Program precision.  This option is the default and means a
          trap handler can only identify which program caused a
          floating point exception.

    @{b}f@{ub}
          Function precision.  The trap handler can determine the
          function that caused a floating point exception.

    @{b}i@{ub}
          Instruction precision.  The trap handler can determine the
          exact instruction that caused a floating point exception.

     Other Alpha compilers provide the equivalent options called
     @{b}-scope_safe@{ub} and @{b}-resumption_safe@{ub}.

@{b}-mieee-conformant@{ub}
     This option marks the generated code as IEEE conformant.  You must
     not use this option unless you also specify @{b}-mtrap-precision=i@{ub} and
     either @{b}-mfp-trap-mode=su@{ub} or @{b}-mfp-trap-mode=sui@{ub}.  Its only effect
     is to emit the line @{b}.eflag 48@{ub} in the function prologue of the
     generated assembly file.  Under DEC Unix, this has the effect that
     IEEE-conformant math library routines will be linked in.

@{b}-mbuild-constants@{ub}
     Normally GNU CC examines a 32- or 64-bit integer constant to see
     if it can construct it from smaller constants in two or three
     instructions.  If it cannot, it will output the constant as a
     literal and generate code to load it from the data segment at
     runtime.

     Use this option to require GNU CC to construct @{i}all@{ui} integer
     constants using code, even if it takes more instructions (the
     maximum is six).

     You would typically use this option to build a shared library
     dynamic loader.  Itself a shared library, it must relocate itself
     in memory before it can find the variables and constants in its
     own data segment.

@{b}-malpha-as@{ub}
@{b}-mgas@{ub}
     Select whether to generate code to be assembled by the
     vendor-supplied assembler (@{b}-malpha-as@{ub}) or by the GNU assembler
     @{b}-mgas@{ub}.

@{b}-mbwx@{ub}
@{b}-mno-bwx@{ub}
@{b}-mcix@{ub}
@{b}-mno-cix@{ub}
@{b}-mmax@{ub}
@{b}-mno-max@{ub}
     Indicate whether GNU CC should generate code to use the optional
     BWX, CIX, and MAX instruction sets.  The default is to use the
     instruction sets supported by the CPU type specified via @{b}-mcpu=@{ub}
     option or that of the CPU on which GNU CC was built if none was
     specified.

@{b}-mcpu=CPU_TYPE@{ub}
     Set the instruction set, register set, and instruction scheduling
     parameters for machine type CPU_TYPE.  You can specify either the
     @{b}EV@{ub} style name or the corresponding chip number.  GNU CC supports
     scheduling parameters for the EV4 and EV5 family of processors and
     will choose the default values for the instruction set from the
     processor you specify.  If you do not specify a processor type,
     GNU CC will default to the processor on which the compiler was
     built.

     Supported values for CPU_TYPE are

    @{b}ev4@{ub}
    @{b}21064@{ub}
          Schedules as an EV4 and has no instruction set extensions.

    @{b}ev5@{ub}
    @{b}21164@{ub}
          Schedules as an EV5 and has no instruction set extensions.

    @{b}ev56@{ub}
    @{b}21164a@{ub}
          Schedules as an EV5 and supports the BWX extension.

    @{b}pca56@{ub}
    @{b}21164pc@{ub}
    @{b}21164PC@{ub}
          Schedules as an EV5 and supports the BWX and MAX extensions.

    @{b}ev6@{ub}
    @{b}21264@{ub}
          Schedules as an EV5 (until Digital releases the scheduling
          parameters for the EV6) and supports the BWX, CIX, and MAX
          extensions.

@{b}-mmemory-latency=TIME@{ub}
     Sets the latency the scheduler should assume for typical memory
     references as seen by the application.  This number is highly
     dependant on the memory access patterns used by the application
     and the size of the external cache on the machine.

     Valid options for TIME are

    @{b}NUMBER@{ub}
          A decimal number representing clock cycles.

    @{b}L1@{ub}
    @{b}L2@{ub}
    @{b}L3@{ub}
    @{b}main@{ub}
          The compiler contains estimates of the number of clock cycles
          for "typical" EV4 & EV5 hardware for the Level 1, 2 & 3 caches
          (also called Dcache, Scache, and Bcache), as well as to main
          memory.  Note that L3 is only valid for EV5.


@endnode

@node "Clipper Options" "gcc.guide/Clipper Options"
@next "H8-300 Options"
@prev "DEC Alpha Options"
@toc "Submodel Options"

Clipper Options
---------------

   These @{b}-m@{ub} options are defined for the Clipper implementations:

@{b}-mc300@{ub}
     Produce code for a C300 Clipper processor. This is the default.

@{b}-mc400@{ub}
     Produce code for a C400 Clipper processor i.e. use floating point
     registers f8..f15.


@endnode

@node "H8-300 Options" "gcc.guide/H8-300 Options"
@next "SH Options"
@prev "Clipper Options"
@toc "Submodel Options"

H8/300 Options
--------------

   These @{b}-m@{ub} options are defined for the H8/300 implementations:

@{b}-mrelax@{ub}
     Shorten some address references at link time, when possible; uses
     the linker option @{b}-relax@{ub}.  See @{"ld and the H8/300" link "ld.guide/H8-300"}, for a fuller
     description.

@{b}-mh@{ub}
     Generate code for the H8/300H.

@{b}-ms@{ub}
     Generate code for the H8/S.

@{b}-mint32@{ub}
     Make @{b}int@{ub} data 32 bits by default.

@{b}-malign-300@{ub}
     On the h8/300h, use the same alignment rules as for the h8/300.
     The default for the h8/300h is to align longs and floats on 4 byte
     boundaries.  @{b}-malign-300@{ub} causes them to be aligned on 2 byte
     boundaries.  This option has no effect on the h8/300.


@endnode

@node "SH Options" "gcc.guide/SH Options"
@next "System V Options"
@prev "H8-300 Options"
@toc "Submodel Options"

SH Options
----------

   These @{b}-m@{ub} options are defined for the SH implementations:

@{b}-m1@{ub}
     Generate code for the SH1.

@{b}-m2@{ub}
     Generate code for the SH2.

@{b}-m3@{ub}
     Generate code for the SH3.

@{b}-m3e@{ub}
     Generate code for the SH3e.

@{b}-mb@{ub}
     Compile code for the processor in big endian mode.

@{b}-ml@{ub}
     Compile code for the processor in little endian mode.

@{b}-mdalign@{ub}
     Align doubles at 64 bit boundaries.  Note that this changes the
     calling conventions, and thus some functions from the standard C
     library will not work unless you recompile it first with -mdalign.

@{b}-mrelax@{ub}
     Shorten some address references at link time, when possible; uses
     the linker option @{b}-relax@{ub}.


@endnode

@node "System V Options" "gcc.guide/System V Options"
@next "V850 Options"
@prev "SH Options"
@toc "Submodel Options"

Options for System V
--------------------

   These additional options are available on System V Release 4 for
compatibility with other compilers on those systems:

@{b}-G@{ub}
     Create a shared object.  It is recommended that @{b}-symbolic@{ub} or
     @{b}-shared@{ub} be used instead.

@{b}-Qy@{ub}
     Identify the versions of each tool used by the compiler, in a
     @{b}.ident@{ub} assembler directive in the output.

@{b}-Qn@{ub}
     Refrain from adding @{b}.ident@{ub} directives to the output file (this is
     the default).

@{b}-YP,DIRS@{ub}
     Search the directories DIRS, and no others, for libraries
     specified with @{b}-l@{ub}.

@{b}-Ym,DIR@{ub}
     Look in the directory DIR to find the M4 preprocessor.  The
     assembler uses this option.


@endnode

@node "V850 Options" "gcc.guide/V850 Options"
@next "ARC Options"
@prev "System V Options"
@toc "Submodel Options"

V850 Options
------------

   These @{b}-m@{ub} options are defined for V850 implementations:

@{b}-mlong-calls@{ub}
@{b}-mno-long-calls@{ub}
     Treat all calls as being far away (near).  If calls are assumed to
     be far away, the compiler will always load the functions address
     up into a register, and call indirect through the pointer.

@{b}-mno-ep@{ub}
@{b}-mep@{ub}
     Do not optimize (do optimize) basic blocks that use the same index
     pointer 4 or more times to copy pointer into the @{b}ep@{ub} register, and
     use the shorter @{b}sld@{ub} and @{b}sst@{ub} instructions.  The @{b}-mep@{ub} option is on
     by default if you optimize.

@{b}-mno-prolog-function@{ub}
@{b}-mprolog-function@{ub}
     Do not use (do use) external functions to save and restore
     registers at the prolog and epilog of a function.  The external
     functions are slower, but use less code space if more than one
     function saves the same number of registers.  The
     @{b}-mprolog-function@{ub} option is on by default if you optimize.

@{b}-mspace@{ub}
     Try to make the code as small as possible.  At present, this just
     turns on the @{b}-mep@{ub} and @{b}-mprolog-function@{ub} options.

@{b}-mtda=N@{ub}
     Put static or global variables whose size is N bytes or less into
     the tiny data area that register @{b}ep@{ub} points to.  The tiny data area
     can hold up to 256 bytes in total (128 bytes for byte references).

@{b}-msda=N@{ub}
     Put static or global variables whose size is N bytes or less into
     the small data area that register @{b}gp@{ub} points to.  The small data
     area can hold up to 64 kilobytes.

@{b}-mzda=N@{ub}
     Put static or global variables whose size is N bytes or less into
     the first 32 kilobytes of memory.

@{b}-mv850@{ub}
     Specify that the target processor is the V850.

@{b}-mbig-switch@{ub}
     Generate code suitable for big switch tables.  Use this option
     only if the assembler/linker complain about out of range branches
     within a switch table.


@endnode

@node "ARC Options" "gcc.guide/ARC Options"
@prev "V850 Options"
@toc "Submodel Options"

ARC Options
-----------

   These options are defined for ARC implementations:

@{b}-EL@{ub}
     Compile code for little endian mode.  This is the default.

@{b}-EB@{ub}
     Compile code for big endian mode.

@{b}-mmangle-cpu@{ub}
     Prepend the name of the cpu to all public symbol names.  In
     multiple-processor systems, there are many ARC variants with
     different instruction and register set characteristics.  This flag
     prevents code compiled for one cpu to be linked with code compiled
     for another.  No facility exists for handling variants that are
     "almost identical".  This is an all or nothing option.

@{b}-mcpu=CPU@{ub}
     Compile code for ARC variant CPU.  Which variants are supported
     depend on the configuration.  All variants support @{b}-mcpu=base@{ub},
     this is the default.

@{b}-mtext=TEXT SECTION@{ub}

@{b}-mdata=DATA SECTION@{ub}

@{b}-mrodata=READONLY DATA SECTION@{ub}
     Put functions, data, and readonly data in TEXT SECTION, DATA
     SECTION, and READONLY DATA SECTION respectively by default.  This
     can be overridden with the @{b}section@{ub} attribute.  See
     @{"Variable Attributes" link "Variable Attributes"}.


@endnode

@node "Code Gen Options" "gcc.guide/Code Gen Options"
@next "Environment Variables"
@prev "Submodel Options"
@toc "Invoking GCC"

Options for Code Generation Conventions
=======================================

   These machine-independent options control the interface conventions
used in code generation.

   Most of them have both positive and negative forms; the negative form
of @{b}-ffoo@{ub} would be @{b}-fno-foo@{ub}.  In the table below, only one of the forms
is listed--the one which is not the default.  You can figure out the
other form by either removing @{b}no-@{ub} or adding it.

@{b}-fexceptions@{ub}
     Enable exception handling, and generate extra code needed to
     propagate exceptions.  If you do not specify this option, GNU CC
     enables it by default for languages like C++ that normally require
     exception handling, and disabled for languages like C that do not
     normally require it.  However, when compiling C code that needs to
     interoperate properly with exception handlers written in C++, you
     may need to enable this option.  You may also wish to disable this
     option is you are compiling older C++ programs that don't use
     exception handling.

@{b}-fpcc-struct-return@{ub}
     Return "short" @{b}struct@{ub} and @{b}union@{ub} values in memory like longer ones,
     rather than in registers.  This convention is less efficient, but
     it has the advantage of allowing intercallability between GNU
     CC-compiled files and files compiled with other compilers.

     The precise convention for returning structures in memory depends
     on the target configuration macros.

     Short structures and unions are those whose size and alignment
     match that of some integer type.

@{b}-freg-struct-return@{ub}
     Use the convention that @{b}struct@{ub} and @{b}union@{ub} values are returned in
     registers when possible.  This is more efficient for small
     structures than @{b}-fpcc-struct-return@{ub}.

     If you specify neither @{b}-fpcc-struct-return@{ub} nor its contrary
     @{b}-freg-struct-return@{ub}, GNU CC defaults to whichever convention is
     standard for the target.  If there is no standard convention, GNU
     CC defaults to @{b}-fpcc-struct-return@{ub}, except on targets where GNU CC
     is the principal compiler.  In those cases, we can choose the
     standard, and we chose the more efficient register return
     alternative.

@{b}-fshort-enums@{ub}
     Allocate to an @{b}enum@{ub} type only as many bytes as it needs for the
     declared range of possible values.  Specifically, the @{b}enum@{ub} type
     will be equivalent to the smallest integer type which has enough
     room.

@{b}-fshort-double@{ub}
     Use the same size for @{b}double@{ub} as for @{b}float@{ub}.

@{b}-fshared-data@{ub}
     Requests that the data and non-@{b}const@{ub} variables of this compilation
     be shared data rather than private data.  The distinction makes
     sense only on certain operating systems, where shared data is
     shared between processes running the same program, while private
     data exists in one copy per process.

@{b}-fno-common@{ub}
     Allocate even uninitialized global variables in the bss section of
     the object file, rather than generating them as common blocks.
     This has the effect that if the same variable is declared (without
     @{b}extern@{ub}) in two different compilations, you will get an error when
     you link them.  The only reason this might be useful is if you
     wish to verify that the program will work on other systems which
     always work this way.

@{b}-fno-ident@{ub}
     Ignore the @{b}#ident@{ub} directive.

@{b}-fno-gnu-linker@{ub}
     Do not output global initializations (such as C++ constructors and
     destructors) in the form used by the GNU linker (on systems where
     the GNU linker is the standard method of handling them).  Use this
     option when you want to use a non-GNU linker, which also requires
     using the @{b}collect2@{ub} program to make sure the system linker includes
     constructors and destructors.  (@{b}collect2@{ub} is included in the GNU CC
     distribution.)  For systems which @{i}must@{ui} use @{b}collect2@{ub}, the compiler
     driver @{b}gcc@{ub} is configured to do this automatically.

@{b}-finhibit-size-directive@{ub}
     Don't output a @{b}.size@{ub} assembler directive, or anything else that
     would cause trouble if the function is split in the middle, and the
     two halves are placed at locations far apart in memory.  This
     option is used when compiling @{b}crtstuff.c@{ub}; you should not need to
     use it for anything else.

@{b}-fverbose-asm@{ub}
     Put extra commentary information in the generated assembly code to
     make it more readable.  This option is generally only of use to
     those who actually need to read the generated assembly code
     (perhaps while debugging the compiler itself).

@{b}     -fno-verbose-asm@{ub}, the default, causes the extra information to be
     omitted and is useful when comparing two assembler files.

@{b}-fvolatile@{ub}
     Consider all memory references through pointers to be volatile.

@{b}-fvolatile-global@{ub}
     Consider all memory references to extern and global data items to
     be volatile.

@{b}-fpic@{ub}
     Generate position-independent code (PIC) suitable for use in a
     shared library, if supported for the target machine.  Such code
     accesses all constant addresses through a global offset table
     (GOT).  The dynamic loader resolves the GOT entries when the
     program starts (the dynamic loader is not part of GNU CC; it is
     part of the operating system).  If the GOT size for the linked
     executable exceeds a machine-specific maximum size, you get an
     error message from the linker indicating that @{b}-fpic@{ub} does not work;
     in that case, recompile with @{b}-fPIC@{ub} instead.  (These maximums are
     16k on the m88k, 8k on the Sparc, and 32k on the m68k and RS/6000.
     The 386 has no such limit.)

     Position-independent code requires special support, and therefore
     works only on certain machines.  For the 386, GNU CC supports PIC
     for System V but not for the Sun 386i.  Code generated for the IBM
     RS/6000 is always position-independent.

@{b}-fPIC@{ub}
     If supported for the target machine, emit position-independent
     code, suitable for dynamic linking and avoiding any limit on the
     size of the global offset table.  This option makes a difference
     on the m68k, m88k, and the Sparc.

     Position-independent code requires special support, and therefore
     works only on certain machines.

@{b}-ffixed-REG@{ub}
     Treat the register named REG as a fixed register; generated code
     should never refer to it (except perhaps as a stack pointer, frame
     pointer or in some other fixed role).

     REG must be the name of a register.  The register names accepted
     are machine-specific and are defined in the @{b}REGISTER_NAMES@{ub} macro
     in the machine description macro file.

     This flag does not have a negative form, because it specifies a
     three-way choice.

@{b}-fcall-used-REG@{ub}
     Treat the register named REG as an allocable register that is
     clobbered by function calls.  It may be allocated for temporaries
     or variables that do not live across a call.  Functions compiled
     this way will not save and restore the register REG.

     Use of this flag for a register that has a fixed pervasive role in
     the machine's execution model, such as the stack pointer or frame
     pointer, will produce disastrous results.

     This flag does not have a negative form, because it specifies a
     three-way choice.

@{b}-fcall-saved-REG@{ub}
     Treat the register named REG as an allocable register saved by
     functions.  It may be allocated even for temporaries or variables
     that live across a call.  Functions compiled this way will save
     and restore the register REG if they use it.

     Use of this flag for a register that has a fixed pervasive role in
     the machine's execution model, such as the stack pointer or frame
     pointer, will produce disastrous results.

     A different sort of disaster will result from the use of this flag
     for a register in which function values may be returned.

     This flag does not have a negative form, because it specifies a
     three-way choice.

@{b}-fpack-struct@{ub}
     Pack all structure members together without holes.  Usually you
     would not want to use this option, since it makes the code
     suboptimal, and the offsets of structure members won't agree with
     system libraries.

@{b}-fcheck-memory-usage@{ub}
     Generate extra code to check each memory access.  GNU CC will
     generate code that is suitable for a detector of bad memory
     accesses such as @{b}Checker@{ub}.  If you specify this option, you can not
     use the @{b}asm@{ub} or @{b}__asm__@{ub} keywords.

     You must also specify this option when you compile functions you
     call that have side effects.  If you do not, you may get erroneous
     messages from the detector.  Normally,  you should compile all
     your code with this option.  If you use functions from a library
     that have side-effects (such as @{b}read@{ub}), you may not be able to
     recompile the library and specify this option.  In that case, you
     can enable the @{b}-fprefix-function-name@{ub} option, which requests GNU
     CC to encapsulate your code and make other functions look as if
     they were compiled with @{b}-fcheck-memory-usage@{ub}.  This is done by
     calling "stubs", which are provided by the detector.  If you
     cannot find or build stubs for every function you call, you may
     have to specify @{b}-fcheck-memory-usage@{ub} without
     @{b}-fprefix-function-name@{ub}.

@{b}-fprefix-function-name@{ub}
     Request GNU CC to add a prefix to the symbols generated for
     function names.  GNU CC adds a prefix to the names of functions
     defined as well as functions called.  Code compiled with this
     option and code compiled without the option can't be linked
     together, unless or stubs are used.

     If you compile the following code with @{b}-fprefix-function-name@{ub}
          extern void bar (int);
          void
          foo (int a)
          {
            return bar (a + 5);
          
          }

     GNU CC will compile the code as if it was written:
          extern void prefix_bar (int);
          void
          prefix_foo (int a)
          {
            return prefix_bar (a + 5);
          }
     This option is designed to be used with @{b}-fcheck-memory-usage@{ub}.

@{b}-fstack-check@{ub}
     Generate code to verify that you do not go beyond the boundary of
     the stack.  You should specify this flag if you are running in an
     environment with multiple threads, but only rarely need to specify
     it in a single-threaded environment since stack overflow is
     automatically detected on nearly all systems if there is only one
     stack.

@{b}-fexceptions@{ub}
     Enable exception handling.  For some targets, this implies
     generation of frame unwind information for all functions, which
     can produce significant data size overhead, though it does not
     affect execution.

     This option is on by default for languages that support exception
     handling (such as C++), and off for those that don't (such as C).

@{b}+e0@{ub}
@{b}+e1@{ub}
     Control whether virtual function definitions in classes are used to
     generate code, or only to define interfaces for their callers.
     (C++ only).

     These options are provided for compatibility with @{b}cfront@{ub} 1.x
     usage; the recommended alternative GNU C++ usage is in flux.  See
     @{"Declarations and Definitions in One Header" link "C++ Interface"}.

     With @{b}+e0@{ub}, virtual function definitions in classes are declared
     @{b}extern@{ub}; the declaration is used only as an interface
     specification, not to generate code for the virtual functions (in
     this compilation).

     With @{b}+e1@{ub}, G++ actually generates the code implementing virtual
     functions defined in the code, and makes them publicly visible.

@{b}-fargument-alias@{ub}
@{b}-fargument-noalias@{ub}
@{b}-fargument-noalias-global@{ub}
     Specify the possible relationships among parameters and between
     parameters and global data.

@{b}     -fargument-alias@{ub} specifies that arguments (parameters) may alias
     each other and may alias global storage.  @{b}-fargument-noalias@{ub}
     specifies that arguments do not alias each other, but may alias
     global storage.  @{b}-fargument-noalias-global@{ub} specifies that
     arguments do not alias each other and do not alias global storage.

     Each language will automatically use whatever option is required by
     the language standard.  You should not need to use these options
     yourself.


@endnode

@node "Environment Variables" "gcc.guide/Environment Variables"
@next "Running Protoize"
@prev "Code Gen Options"
@toc "Invoking GCC"

Environment Variables Affecting GNU CC
======================================

   This section describes several environment variables that affect how
GNU CC operates.  They work by specifying directories or prefixes to use
when searching for various kinds of files.

   Note that you can also specify places to search using options such as
@{b}-B@{ub}, @{b}-I@{ub} and @{b}-L@{ub} (see @{"Directory Options" link "Directory Options"}).  These take precedence over
places specified using environment variables, which in turn take
precedence over those specified by the configuration of GNU CC.  See
@{"Driver" link "Driver"}.

@{b}TMPDIR@{ub}
     If @{b}TMPDIR@{ub} is set, it specifies the directory to use for temporary
     files.  GNU CC uses temporary files to hold the output of one
     stage of compilation which is to be used as input to the next
     stage: for example, the output of the preprocessor, which is the
     input to the compiler proper.

@{b}GCC_EXEC_PREFIX@{ub}
     If @{b}GCC_EXEC_PREFIX@{ub} is set, it specifies a prefix to use in the
     names of the subprograms executed by the compiler.  No slash is
     added when this prefix is combined with the name of a subprogram,
     but you can specify a prefix that ends with a slash if you wish.

     If GNU CC cannot find the subprogram using the specified prefix, it
     tries looking in the usual places for the subprogram.

     The default value of @{b}GCC_EXEC_PREFIX@{ub} is @{b}PREFIX/lib/gcc-lib/@{ub} where
     PREFIX is the value of @{b}prefix@{ub} when you ran the @{b}configure@{ub} script.

     Other prefixes specified with @{b}-B@{ub} take precedence over this prefix.

     This prefix is also used for finding files such as @{b}crt0.o@{ub} that are
     used for linking.

     In addition, the prefix is used in an unusual way in finding the
     directories to search for header files.  For each of the standard
     directories whose name normally begins with @{b}/usr/local/lib/gcc-lib@{ub}
     (more precisely, with the value of @{b}GCC_INCLUDE_DIR@{ub}), GNU CC tries
     replacing that beginning with the specified prefix to produce an
     alternate directory name.  Thus, with @{b}-Bfoo/@{ub}, GNU CC will search
     @{b}foo/bar@{ub} where it would normally search @{b}/usr/local/lib/bar@{ub}.  These
     alternate directories are searched first; the standard directories
     come next.

@{b}COMPILER_PATH@{ub}
     The value of @{b}COMPILER_PATH@{ub} is a colon-separated list of
     directories, much like @{b}PATH@{ub}.  GNU CC tries the directories thus
     specified when searching for subprograms, if it can't find the
     subprograms using @{b}GCC_EXEC_PREFIX@{ub}.

@{b}LIBRARY_PATH@{ub}
     The value of @{b}LIBRARY_PATH@{ub} is a colon-separated list of
     directories, much like @{b}PATH@{ub}.  When configured as a native compiler,
     GNU CC tries the directories thus specified when searching for
     special linker files, if it can't find them using @{b}GCC_EXEC_PREFIX@{ub}.
     Linking using GNU CC also uses these directories when searching
     for ordinary libraries for the @{b}-l@{ub} option (but directories
     specified with @{b}-L@{ub} come first).

@{b}C_INCLUDE_PATH@{ub}
@{b}CPLUS_INCLUDE_PATH@{ub}
@{b}OBJC_INCLUDE_PATH@{ub}
     These environment variables pertain to particular languages.  Each
     variable's value is a colon-separated list of directories, much
     like @{b}PATH@{ub}.  When GNU CC searches for header files, it tries the
     directories listed in the variable for the language you are using,
     after the directories specified with @{b}-I@{ub} but before the standard
     header file directories.

@{b}DEPENDENCIES_OUTPUT@{ub}
     If this variable is set, its value specifies how to output
     dependencies for Make based on the header files processed by the
     compiler.  This output looks much like the output from the @{b}-M@{ub}
     option (see @{"Preprocessor Options" link "Preprocessor Options"}), but it goes to a separate
     file, and is in addition to the usual results of compilation.

     The value of @{b}DEPENDENCIES_OUTPUT@{ub} can be just a file name, in which
     case the Make rules are written to that file, guessing the target
     name from the source file name.  Or the value can have the form
     @{b}FILE TARGET@{ub}, in which case the rules are written to file FILE
     using TARGET as the target name.


@endnode

@node "Running Protoize" "gcc.guide/Running Protoize"
@prev "Environment Variables"
@toc "Invoking GCC"

Running Protoize
================

   The program @{b}protoize@{ub} is an optional part of GNU C.  You can use it
to add prototypes to a program, thus converting the program to ANSI C
in one respect.  The companion program @{b}unprotoize@{ub} does the reverse: it
removes argument types from any prototypes that are found.

   When you run these programs, you must specify a set of source files
as command line arguments.  The conversion programs start out by
compiling these files to see what functions they define.  The
information gathered about a file FOO is saved in a file named @{b}FOO.X@{ub}.

   After scanning comes actual conversion.  The specified files are all
eligible to be converted; any files they include (whether sources or
just headers) are eligible as well.

   But not all the eligible files are converted.  By default, @{b}protoize@{ub}
and @{b}unprotoize@{ub} convert only source and header files in the current
directory.  You can specify additional directories whose files should
be converted with the @{b}-d DIRECTORY@{ub} option.  You can also specify
particular files to exclude with the @{b}-x FILE@{ub} option.  A file is
converted if it is eligible, its directory name matches one of the
specified directory names, and its name within the directory has not
been excluded.

   Basic conversion with @{b}protoize@{ub} consists of rewriting most function
definitions and function declarations to specify the types of the
arguments.  The only ones not rewritten are those for varargs functions.

@{b}   protoize@{ub} optionally inserts prototype declarations at the beginning
of the source file, to make them available for any calls that precede
the function's definition.  Or it can insert prototype declarations
with block scope in the blocks where undeclared functions are called.

   Basic conversion with @{b}unprotoize@{ub} consists of rewriting most function
declarations to remove any argument types, and rewriting function
definitions to the old-style pre-ANSI form.

   Both conversion programs print a warning for any function
declaration or definition that they can't convert.  You can suppress
these warnings with @{b}-q@{ub}.

   The output from @{b}protoize@{ub} or @{b}unprotoize@{ub} replaces the original source
file.  The original file is renamed to a name ending with @{b}.save@{ub}.  If
the @{b}.save@{ub} file already exists, then the source file is simply discarded.

@{b}   protoize@{ub} and @{b}unprotoize@{ub} both depend on GNU CC itself to scan the
program and collect information about the functions it uses.  So
neither of these programs will work until GNU CC is installed.

   Here is a table of the options you can use with @{b}protoize@{ub} and
@{b}unprotoize@{ub}.  Each option works with both programs unless otherwise
stated.

@{b}-B DIRECTORY@{ub}
     Look for the file @{b}SYSCALLS.c.X@{ub} in DIRECTORY, instead of the usual
     directory (normally @{b}/usr/local/lib@{ub}).  This file contains prototype
     information about standard system functions.  This option applies
     only to @{b}protoize@{ub}.

@{b}-c COMPILATION-OPTIONS@{ub}
     Use  COMPILATION-OPTIONS as the options when running @{b}gcc@{ub} to
     produce the @{b}.X@{ub} files.  The special option @{b}-aux-info@{ub} is always
     passed in addition, to tell @{b}gcc@{ub} to write a @{b}.X@{ub} file.

     Note that the compilation options must be given as a single
     argument to @{b}protoize@{ub} or @{b}unprotoize@{ub}.  If you want to specify several
     @{b}gcc@{ub} options, you must quote the entire set of compilation options
     to make them a single word in the shell.

     There are certain @{b}gcc@{ub} arguments that you cannot use, because they
     would produce the wrong kind of output.  These include @{b}-g@{ub}, @{b}-O@{ub}, @{b}-c@{ub},
     @{b}-S@{ub}, and @{b}-o@{ub} If you include these in the COMPILATION-OPTIONS, they
     are ignored.

@{b}-C@{ub}
     Rename files to end in @{b}.C@{ub} instead of @{b}.c@{ub}.  This is convenient if
     you are converting a C program to C++.  This option applies only
     to @{b}protoize@{ub}.

@{b}-g@{ub}
     Add explicit global declarations.  This means inserting explicit
     declarations at the beginning of each source file for each function
     that is called in the file and was not declared.  These
     declarations precede the first function definition that contains a
     call to an undeclared function.  This option applies only to
     @{b}protoize@{ub}.

@{b}-i STRING@{ub}
     Indent old-style parameter declarations with the string STRING.
     This option applies only to @{b}protoize@{ub}.

@{b}     unprotoize@{ub} converts prototyped function definitions to old-style
     function definitions, where the arguments are declared between the
     argument list and the initial @{b}{@{ub}.  By default, @{b}unprotoize@{ub} uses five
     spaces as the indentation.  If you want to indent with just one
     space instead, use @{b}-i " "@{ub}.

@{b}-k@{ub}
     Keep the @{b}.X@{ub} files.  Normally, they are deleted after conversion is
     finished.

@{b}-l@{ub}
     Add explicit local declarations.  @{b}protoize@{ub} with @{b}-l@{ub} inserts a
     prototype declaration for each function in each block which calls
     the function without any declaration.  This option applies only to
     @{b}protoize@{ub}.

@{b}-n@{ub}
     Make no real changes.  This mode just prints information about the
     conversions that would have been done without @{b}-n@{ub}.

@{b}-N@{ub}
     Make no @{b}.save@{ub} files.  The original files are simply deleted.  Use
     this option with caution.

@{b}-p PROGRAM@{ub}
     Use the program PROGRAM as the compiler.  Normally, the name @{b}gcc@{ub}
     is used.

@{b}-q@{ub}
     Work quietly.  Most warnings are suppressed.

@{b}-v@{ub}
     Print the version number, just like @{b}-v@{ub} for @{b}gcc@{ub}.

   If you need special compiler options to compile one of your program's
source files, then you should generate that file's @{b}.X@{ub} file specially,
by running @{b}gcc@{ub} on that source file with the appropriate options and the
option @{b}-aux-info@{ub}.  Then run @{b}protoize@{ub} on the entire set of files.
@{b}protoize@{ub} will use the existing @{b}.X@{ub} file because it is newer than the
source file.  For example:

     gcc -Dfoo=bar file1.c -aux-info
     protoize *.c

You need to include the special files along with the rest in the
@{b}protoize@{ub} command, even though their @{b}.X@{ub} files already exist, because
otherwise they won't get converted.

   See @{"Protoize Caveats" link "Protoize Caveats"}, for more information on how to use @{b}protoize@{ub}
successfully.

   Note most of this information is out of date and superceded by the
EGCS install procedures.  It is provided for historical reference only.


@endnode

@node "Installation" "gcc.guide/Installation"
@next "C Extensions"
@prev "Invoking GCC"
@toc "Main"

Installing GNU CC
*****************


 @{" Configurations   " link "Configurations"}  Configurations Supported by GNU CC.
 @{" Other Dir        " link "Other Dir"}  Compiling in a separate directory (not where the source is).
 @{" Cross-Compiler   " link "Cross-Compiler"}  Building and installing a cross-compiler.
 @{" Sun Install      " link "Sun Install"}  See below for installation on the Sun.
 @{" VMS Install      " link "VMS Install"}  See below for installation on VMS.
 @{" Collect2         " link "Collect2"}  How @{b}collect2@{ub} works; how it finds @{b}ld@{ub}.
 @{" Header Dirs      " link "Header Dirs"}  Understanding the standard header file directories.

   Here is the procedure for installing GNU CC on a Unix system.  See
@{"VMS Install" link "VMS Install"}, for VMS systems.  In this section we assume you compile
in the same directory that contains the source files; see @{"Other Dir" link "Other Dir"},
to find out how to compile in a separate directory on Unix systems.

   You cannot install GNU C by itself on MSDOS; it will not compile
under any MSDOS compiler except itself.  You need to get the complete
compilation package DJGPP, which includes binaries as well as sources,
and includes all the necessary compilation tools and libraries.

  1. If you have built GNU CC previously in the same directory for a
     different target machine, do @{b}make distclean@{ub} to delete all files
     that might be invalid.  One of the files this deletes is @{b}Makefile@{ub};
     if @{b}make distclean@{ub} complains that @{b}Makefile@{ub} does not exist, it
     probably means that the directory is already suitably clean.

  2. On a System V release 4 system, make sure @{b}/usr/bin@{ub} precedes
     @{b}/usr/ucb@{ub} in @{b}PATH@{ub}.  The @{b}cc@{ub} command in @{b}/usr/ucb@{ub} uses libraries which
     have bugs.

  3. Specify the host, build and target machine configurations.  You do
     this by running the file @{b}configure@{ub}.

     The @{i}build@{ui} machine is the system which you are using, the @{i}host@{ui}
     machine is the system where you want to run the resulting compiler
     (normally the build machine), and the @{i}target@{ui} machine is the system
     for which you want the compiler to generate code.

     If you are building a compiler to produce code for the machine it
     runs on (a native compiler), you normally do not need to specify
     any operands to @{b}configure@{ub}; it will try to guess the type of
     machine you are on and use that as the build, host and target
     machines.  So you don't need to specify a configuration when
     building a native compiler unless @{b}configure@{ub} cannot figure out what
     your configuration is or guesses wrong.

     In those cases, specify the build machine's @{i}configuration name@{ui}
     with the @{b}--host@{ub} option; the host and target will default to be the
     same as the host machine.  (If you are building a cross-compiler,
     see @{"Cross-Compiler" link "Cross-Compiler"}.)

     Here is an example:

          ./configure --host=sparc-sun-sunos4.1

     A configuration name may be canonical or it may be more or less
     abbreviated.

     A canonical configuration name has three parts, separated by
     dashes.  It looks like this: @{b}CPU-COMPANY-SYSTEM@{ub}.  (The three parts
     may themselves contain dashes; @{b}configure@{ub} can figure out which
     dashes serve which purpose.)  For example, @{b}m68k-sun-sunos4.1@{ub}
     specifies a Sun 3.

     You can also replace parts of the configuration by nicknames or
     aliases.  For example, @{b}sun3@{ub} stands for @{b}m68k-sun@{ub}, so @{b}sun3-sunos4.1@{ub}
     is another way to specify a Sun 3.  You can also use simply
     @{b}sun3-sunos@{ub}, since the version of SunOS is assumed by default to be
     version 4.

     You can specify a version number after any of the system types,
     and some of the CPU types.  In most cases, the version is
     irrelevant, and will be ignored.  So you might as well specify the
     version if you know it.

     See @{"Configurations" link "Configurations"}, for a list of supported configuration names
     and notes on many of the configurations.  You should check the
     notes in that section before proceeding any further with the
     installation of GNU CC.

     There are four additional options you can specify independently to
     describe variant hardware and software configurations.  These are
     @{b}--with-gnu-as@{ub}, @{b}--with-gnu-ld@{ub}, @{b}--with-stabs@{ub} and @{b}--nfp@{ub}.

    @{b}--with-gnu-as@{ub}
          If you will use GNU CC with the GNU assembler (GAS), you
          should declare this by using the @{b}--with-gnu-as@{ub} option when
          you run @{b}configure@{ub}.

          Using this option does not install GAS.  It only modifies the
          output of GNU CC to work with GAS.  Building and installing
          GAS is up to you.

          Conversely, if you @{i}do not@{ui} wish to use GAS and do not specify
          @{b}--with-gnu-as@{ub} when building GNU CC, it is up to you to make
          sure that GAS is not installed.  GNU CC searches for a
          program named @{b}as@{ub} in various directories; if the program it
          finds is GAS, then it runs GAS.  If you are not sure where
          GNU CC finds the assembler it is using, try specifying @{b}-v@{ub}
          when you run it.

          The systems where it makes a difference whether you use GAS
          are
@{b}          hppa1.0-ANY-ANY@{ub}, @{b}hppa1.1-ANY-ANY@{ub}, @{b}i386-ANY-sysv@{ub}, @{b}i386-ANY-isc@{ub},
@{b}          i860-ANY-bsd@{ub}, @{b}m68k-bull-sysv@{ub},
@{b}          m68k-hp-hpux@{ub}, @{b}m68k-sony-bsd@{ub},
@{b}          m68k-altos-sysv@{ub}, @{b}m68000-hp-hpux@{ub},
@{b}          m68000-att-sysv@{ub}, @{b}ANY-lynx-lynxos@{ub}, and @{b}mips-ANY@{ub}).  On any
          other system, @{b}--with-gnu-as@{ub} has no effect.

          On the systems listed above (except for the HP-PA, for ISC on
          the 386, and for @{b}mips-sgi-irix5.*@{ub}), if you use GAS, you
          should also use the GNU linker (and specify @{b}--with-gnu-ld@{ub}).

    @{b}--with-gnu-ld@{ub}
          Specify the option @{b}--with-gnu-ld@{ub} if you plan to use the GNU
          linker with GNU CC.

          This option does not cause the GNU linker to be installed; it
          just modifies the behavior of GNU CC to work with the GNU
          linker.

    @{b}--with-stabs@{ub}
          On MIPS based systems and on Alphas, you must specify whether
          you want GNU CC to create the normal ECOFF debugging format,
          or to use BSD-style stabs passed through the ECOFF symbol
          table.  The normal ECOFF debug format cannot fully handle
          languages other than C.  BSD stabs format can handle other
          languages, but it only works with the GNU debugger GDB.

          Normally, GNU CC uses the ECOFF debugging format by default;
          if you prefer BSD stabs, specify @{b}--with-stabs@{ub} when you
          configure GNU CC.

          No matter which default you choose when you configure GNU CC,
          the user can use the @{b}-gcoff@{ub} and @{b}-gstabs+@{ub} options to specify
          explicitly the debug format for a particular compilation.

@{b}          --with-stabs@{ub} is meaningful on the ISC system on the 386,
          also, if @{b}--with-gas@{ub} is used.  It selects use of stabs
          debugging information embedded in COFF output.  This kind of
          debugging information supports C++ well; ordinary COFF
          debugging information does not.

@{b}          --with-stabs@{ub} is also meaningful on 386 systems running SVR4.
          It selects use of stabs debugging information embedded in ELF
          output.  The C++ compiler currently (2.6.0) does not support
          the DWARF debugging information normally used on 386 SVR4
          platforms; stabs provide a workable alternative.  This
          requires gas and gdb, as the normal SVR4 tools can not
          generate or interpret stabs.

    @{b}--nfp@{ub}
          On certain systems, you must specify whether the machine has
          a floating point unit.  These systems include @{b}m68k-sun-sunosN@{ub}
          and @{b}m68k-isi-bsd@{ub}.  On any other system, @{b}--nfp@{ub} currently has no
          effect, though perhaps there are other systems where it could
          usefully make a difference.

    @{b}--enable-haifa@{ub}
    @{b}--disable-haifa@{ub}
          Use @{b}--enable-haifa@{ub} to enable use of an experimental
          instruction scheduler (from IBM Haifa).  This may or may not
          produce better code.  Some targets on which it is known to be
          a win enable it by default; use @{b}--disable-haifa@{ub} to disable it
          in these cases.  @{b}configure@{ub} will print out whether the Haifa
          scheduler is enabled when it is run.

    @{b}--enable-threads=TYPE@{ub}
          Certain systems, notably Linux-based GNU systems, can't be
          relied on to supply a threads facility for the Objective C
          runtime and so will default to single-threaded runtime.  They
          may, however, have a library threads implementation
          available, in which case threads can be enabled with this
          option by supplying a suitable TYPE, probably @{b}posix@{ub}.  The
          possibilities for TYPE are @{b}single@{ub}, @{b}posix@{ub}, @{b}win32@{ub}, @{b}solaris@{ub},
          @{b}irix@{ub} and @{b}mach@{ub}.

    @{b}--enable-checking@{ub}
          When you specify this option, the compiler is built to
          perform checking of tree node types when referencing fields
          of that node.  This does not change the generated code, but
          adds error checking within the compiler.  This will slow down
          the compiler and may only work properly if you are building
          the compiler with GNU C.

     The @{b}configure@{ub} script searches subdirectories of the source
     directory for other compilers that are to be integrated into GNU
     CC.  The GNU compiler for C++, called G++ is in a subdirectory
     named @{b}cp@{ub}.  @{b}configure@{ub} inserts rules into @{b}Makefile@{ub} to build all of
     those compilers.

     Here we spell out what files will be set up by @{b}configure@{ub}.  Normally
     you need not be concerned with these files.

        * A file named @{b}config.h@{ub} is created that contains a @{b}#include@{ub} of
          the top-level config file for the machine you will run the
          compiler on (see @{"Config" link "Config"}).  This file is responsible for
          defining information about the host machine.  It includes
          @{b}tm.h@{ub}.

          The top-level config file is located in the subdirectory
          @{b}config@{ub}.  Its name is always @{b}xm-SOMETHING.h@{ub}; usually
          @{b}xm-MACHINE.h@{ub}, but there are some exceptions.

          If your system does not support symbolic links, you might
          want to set up @{b}config.h@{ub} to contain a @{b}#include@{ub} command which
          refers to the appropriate file.

        * A file named @{b}tconfig.h@{ub} is created which includes the
          top-level config file for your target machine.  This is used
          for compiling certain programs to run on that machine.

        * A file named @{b}tm.h@{ub} is created which includes the
          machine-description macro file for your target machine.  It
          should be in the subdirectory @{b}config@{ub} and its name is often
          @{b}MACHINE.h@{ub}.

        * The command file @{b}configure@{ub} also constructs the file @{b}Makefile@{ub}
          by adding some text to the template file @{b}Makefile.in@{ub}.  The
          additional text comes from files in the @{b}config@{ub} directory,
          named @{b}t-TARGET@{ub} and @{b}x-HOST@{ub}.  If these files do not exist, it
          means nothing needs to be added for a given target or host.

  4. The standard directory for installing GNU CC is @{b}/usr/local/lib@{ub}.
     If you want to install its files somewhere else, specify
     @{b}--prefix=DIR@{ub} when you run @{b}configure@{ub}.  Here DIR is a directory name
     to use instead of @{b}/usr/local@{ub} for all purposes with one exception:
     the directory @{b}/usr/local/include@{ub} is searched for header files no
     matter where you install the compiler.  To override this name, use
     the @{b}--with-local-prefix@{ub} option below.  The directory you specify
     need not exist, but its parent directory must exist.

  5. Specify @{b}--with-local-prefix=DIR@{ub} if you want the compiler to search
     directory @{b}DIR/include@{ub} for locally installed header files @{i}instead@{ui}
     of @{b}/usr/local/include@{ub}.

     You should specify @{b}--with-local-prefix@{ub} @{b}only@{ub} if your site has a
     different convention (not @{b}/usr/local@{ub}) for where to put
     site-specific files.

     The default value for @{b}--with-local-prefix@{ub} is @{b}/usr/local@{ub} regardless
     of the value of @{b}--prefix@{ub}.  Specifying @{b}--prefix@{ub} has no effect on
     which directory GNU CC searches for local header files.  This may
     seem counterintuitive, but actually it is logical.

     The purpose of @{b}--prefix@{ub} is to specify where to @{i}install GNU CC@{ui}.
     The local header files in @{b}/usr/local/include@{ub}--if you put any in
     that directory--are not part of GNU CC.  They are part of other
     programs--perhaps many others.  (GNU CC installs its own header
     files in another directory which is based on the @{b}--prefix@{ub} value.)

@{b}     Do not@{ub} specify @{b}/usr@{ub} as the @{b}--with-local-prefix@{ub}!  The directory you
     use for @{b}--with-local-prefix@{ub} @{b}must not@{ub} contain any of the system's
     standard header files.  If it did contain them, certain programs
     would be miscompiled (including GNU Emacs, on certain targets),
     because this would override and nullify the header file
     corrections made by the @{b}fixincludes@{ub} script.

     Indications are that people who use this option use it based on
     mistaken ideas of what it is for.  People use it as if it specified
     where to install part of GNU CC.  Perhaps they make this assumption
     because installing GNU CC creates the directory.

  6. Make sure the Bison parser generator is installed.  (This is
     unnecessary if the Bison output files @{b}c-parse.c@{ub} and @{b}cexp.c@{ub} are
     more recent than @{b}c-parse.y@{ub} and @{b}cexp.y@{ub} and you do not plan to
     change the @{b}.y@{ub} files.)

     Bison versions older than Sept 8, 1988 will produce incorrect
     output for @{b}c-parse.c@{ub}.

  7. If you have chosen a configuration for GNU CC which requires other
     GNU tools (such as GAS or the GNU linker) instead of the standard
     system tools, install the required tools in the build directory
     under the names @{b}as@{ub}, @{b}ld@{ub} or whatever is appropriate.  This will
     enable the compiler to find the proper tools for compilation of
     the program @{b}enquire@{ub}.

     Alternatively, you can do subsequent compilation using a value of
     the @{b}PATH@{ub} environment variable such that the necessary GNU tools
     come before the standard system tools.

  8. Build the compiler.  Just type @{b}make LANGUAGES=c@{ub} in the compiler
     directory.

@{b}     LANGUAGES=c@{ub} specifies that only the C compiler should be compiled.
     The makefile normally builds compilers for all the supported
     languages; currently, C, C++ and Objective C.  However, C is the
     only language that is sure to work when you build with other
     non-GNU C compilers.  In addition, building anything but C at this
     stage is a waste of time.

     In general, you can specify the languages to build by typing the
     argument @{b}LANGUAGES="LIST"@{ub}, where LIST is one or more words from
     the list @{b}c@{ub}, @{b}c++@{ub}, and @{b}objective-c@{ub}.  If you have any additional GNU
     compilers as subdirectories of the GNU CC source directory, you
     may also specify their names in this list.

     Ignore any warnings you may see about "statement not reached" in
     @{b}insn-emit.c@{ub}; they are normal.  Also, warnings about "unknown
     escape sequence" are normal in @{b}genopinit.c@{ub} and perhaps some other
     files.  Likewise, you should ignore warnings about "constant is so
     large that it is unsigned" in @{b}insn-emit.c@{ub} and @{b}insn-recog.c@{ub}, a
     warning about a comparison always being zero in @{b}enquire.o@{ub}, and
     warnings about shift counts exceeding type widths in @{b}cexp.y@{ub}.  Any
     other compilation errors may represent bugs in the port to your
     machine or operating system, and should be investigated and
     reported (see @{"Bugs" link "Bugs"}).

     Some commercial compilers fail to compile GNU CC because they have
     bugs or limitations.  For example, the Microsoft compiler is said
     to run out of macro space.  Some Ultrix compilers run out of
     expression space; then you need to break up the statement where
     the problem happens.

  9. If you are building a cross-compiler, stop here.  See
     @{"Cross-Compiler" link "Cross-Compiler"}.

 10. Move the first-stage object files and executables into a
     subdirectory with this command:

          make stage1

     The files are moved into a subdirectory named @{b}stage1@{ub}.  Once
     installation is complete, you may wish to delete these files with
     @{b}rm -r stage1@{ub}.

 11. If you have chosen a configuration for GNU CC which requires other
     GNU tools (such as GAS or the GNU linker) instead of the standard
     system tools, install the required tools in the @{b}stage1@{ub} subdirectory
     under the names @{b}as@{ub}, @{b}ld@{ub} or whatever is appropriate.  This will
     enable the stage 1 compiler to find the proper tools in the
     following stage.

     Alternatively, you can do subsequent compilation using a value of
     the @{b}PATH@{ub} environment variable such that the necessary GNU tools
     come before the standard system tools.

 12. Recompile the compiler with itself, with this command:

          make CC="stage1/xgcc -Bstage1/" CFLAGS="-g -O2"

     This is called making the stage 2 compiler.

     The command shown above builds compilers for all the supported
     languages.  If you don't want them all, you can specify the
     languages to build by typing the argument @{b}LANGUAGES="LIST"@{ub}.  LIST
     should contain one or more words from the list @{b}c@{ub}, @{b}c++@{ub},
     @{b}objective-c@{ub}, and @{b}proto@{ub}.  Separate the words with spaces.  @{b}proto@{ub}
     stands for the programs @{b}protoize@{ub} and @{b}unprotoize@{ub}; they are not a
     separate language, but you use @{b}LANGUAGES@{ub} to enable or disable
     their installation.

     If you are going to build the stage 3 compiler, then you might
     want to build only the C language in stage 2.

     Once you have built the stage 2 compiler, if you are short of disk
     space, you can delete the subdirectory @{b}stage1@{ub}.

     On a 68000 or 68020 system lacking floating point hardware, unless
     you have selected a @{b}tm.h@{ub} file that expects by default that there
     is no such hardware, do this instead:

          make CC="stage1/xgcc -Bstage1/" CFLAGS="-g -O2 -msoft-float"

 13. If you wish to test the compiler by compiling it with itself one
     more time, install any other necessary GNU tools (such as GAS or
     the GNU linker) in the @{b}stage2@{ub} subdirectory as you did in the
     @{b}stage1@{ub} subdirectory, then do this:

          make stage2
          make CC="stage2/xgcc -Bstage2/" CFLAGS="-g -O2"

     This is called making the stage 3 compiler.  Aside from the @{b}-B@{ub}
     option, the compiler options should be the same as when you made
     the stage 2 compiler.  But the @{b}LANGUAGES@{ub} option need not be the
     same.  The command shown above builds compilers for all the
     supported languages; if you don't want them all, you can specify
     the languages to build by typing the argument @{b}LANGUAGES="LIST"@{ub}, as
     described above.

     If you do not have to install any additional GNU tools, you may
     use the command

          make bootstrap LANGUAGES=LANGUAGE-LIST BOOT_CFLAGS=OPTION-LIST

     instead of making @{b}stage1@{ub}, @{b}stage2@{ub}, and performing the two compiler
     builds.

 14. Then compare the latest object files with the stage 2 object
     files--they ought to be identical, aside from time stamps (if any).

     On some systems, meaningful comparison of object files is
     impossible; they always appear "different."  This is currently
     true on Solaris and some systems that use ELF object file format.
     On some versions of Irix on SGI machines and DEC Unix (OSF/1) on
     Alpha systems, you will not be able to compare the files without
     specifying @{b}-save-temps@{ub}; see the description of individual systems
     above to see if you get comparison failures.  You may have similar
     problems on other systems.

     Use this command to compare the files:

          make compare

     This will mention any object files that differ between stage 2 and
     stage 3.  Any difference, no matter how innocuous, indicates that
     the stage 2 compiler has compiled GNU CC incorrectly, and is
     therefore a potentially serious bug which you should investigate
     and report (see @{"Bugs" link "Bugs"}).

     If your system does not put time stamps in the object files, then
     this is a faster way to compare them (using the Bourne shell):

          for file in *.o; do
          cmp $file stage2/$file
          done

     If you have built the compiler with the @{b}-mno-mips-tfile@{ub} option on
     MIPS machines, you will not be able to compare the files.

 15. Install the compiler driver, the compiler's passes and run-time
     support with @{b}make install@{ub}.  Use the same value for @{b}CC@{ub}, @{b}CFLAGS@{ub} and
     @{b}LANGUAGES@{ub} that you used when compiling the files that are being
     installed.  One reason this is necessary is that some versions of
     Make have bugs and recompile files gratuitously when you do this
     step.  If you use the same variable values, those files will be
     recompiled properly.

     For example, if you have built the stage 2 compiler, you can use
     the following command:

          make install CC="stage2/xgcc -Bstage2/" CFLAGS="-g -O" LANGUAGES="LIST"

     This copies the files @{b}cc1@{ub}, @{b}cpp@{ub} and @{b}libgcc.a@{ub} to files @{b}cc1@{ub}, @{b}cpp@{ub} and
     @{b}libgcc.a@{ub} in the directory @{b}/usr/local/lib/gcc-lib/TARGET/VERSION@{ub},
     which is where the compiler driver program looks for them.  Here
     TARGET is the canonicalized form of target machine type specified
     when you ran @{b}configure@{ub}, and VERSION is the version number of GNU
     CC.  This naming scheme permits various versions and/or
     cross-compilers to coexist.  It also copies the executables for
     compilers for other languages (e.g., @{b}cc1plus@{ub} for C++) to the same
     directory.

     This also copies the driver program @{b}xgcc@{ub} into @{b}/usr/local/bin/gcc@{ub},
     so that it appears in typical execution search paths.  It also
     copies @{b}gcc.1@{ub} into @{b}/usr/local/man/man1@{ub} and info pages into
     @{b}/usr/local/info@{ub}.

     On some systems, this command causes recompilation of some files.
     This is usually due to bugs in @{b}make@{ub}.  You should either ignore this
     problem, or use GNU Make.

@{b}     Warning: there is a bug in @{b}alloca@{ub} in the Sun library.  To avoid
     this bug, be sure to install the executables of GNU CC that were
     compiled by GNU CC.  (That is, the executables from stage 2 or 3,
     not stage 1.)  They use @{b}alloca@{ub} as a built-in function and never the
     one in the library.@{ub}

     (It is usually better to install GNU CC executables from stage 2
     or 3, since they usually run faster than the ones compiled with
     some other compiler.)

 16. If you're going to use C++, it's likely that you need to also
     install a C++ runtime library.  Just as GNU C does not distribute
     a C runtime library, it also does not include a C++ runtime
     library.  All I/O functionality, special class libraries, etc., are
     provided by the C++ runtime library.

     The standard C++ runtime library for GNU CC is called @{b}libstdc++@{ub}.
     An obsolescent library @{b}libg++@{ub} may also be available, but it's
     necessary only for older software that hasn't been converted yet;
     if you don't know whether you need @{b}libg++@{ub} then you probably don't
     need it.

     Here's one way to build and install @{b}libstdc++@{ub} for GNU CC:

        * Build and install GNU CC, so that invoking @{b}gcc@{ub} obtains the
          GNU CC that was just built.

        * Obtain a copy of a compatible @{b}libstdc++@{ub} distribution.  For
          example, the @{b}libstdc++-2.8.0.tar.gz@{ub} distribution should be
          compatible with GCC 2.8.0.  GCC distributors normally
          distribute @{b}libstdc++@{ub} as well.

        * Set the @{b}CXX@{ub} environment variable to @{b}gcc@{ub} while running the
          @{b}libstdc++@{ub} distribution's @{b}configure@{ub} command.  Use the same
          @{b}configure@{ub} options that you used when you invoked GCC's
          @{b}configure@{ub} command.

        * Invoke @{b}make@{ub} to build the C++ runtime.

        * Invoke @{b}make install@{ub} to install the C++ runtime.

     To summarize, after building and installing GNU CC, invoke the
     following shell commands in the topmost directory of the C++
     library distribution.  For CONFIGURE-OPTIONS, use the same options
     that you used to configure GNU CC.

          $ CXX=gcc ./configure CONFIGURE-OPTIONS
          $ make
          $ make install

 17. GNU CC includes a runtime library for Objective-C because it is an
     integral part of the language.  You can find the files associated
     with the library in the subdirectory @{b}objc@{ub}.  The GNU Objective-C
     Runtime Library requires header files for the target's C library in
     order to be compiled,and also requires the header files for the
     target's thread library if you want thread support.  See
     @{"Cross-Compilers and Header Files" link "Cross Headers"}, for discussion about header
     files issues for cross-compilation.

     When you run @{b}configure@{ub}, it picks the appropriate Objective-C
     thread implementation file for the target platform.  In some
     situations, you may wish to choose a different back-end as some
     platforms support multiple thread implementations or you may wish
     to disable thread support completely.  You do this by specifying a
     value for the OBJC_THREAD_FILE makefile variable on the command
     line when you run make, for example:

          make CC="stage2/xgcc -Bstage2/" CFLAGS="-g -O2" OBJC_THREAD_FILE=thr-single

     Below is a list of the currently available back-ends.

        * thr-single Disable thread support, should work for all
          platforms.

        * thr-decosf1 DEC OSF/1 thread support.

        * thr-irix SGI IRIX thread support.

        * thr-mach Generic MACH thread support, known to work on
          NEXTSTEP.

        * thr-os2 IBM OS/2 thread support.

        * thr-posix Generix POSIX thread support.

        * thr-pthreads PCThreads on Linux-based GNU systems.

        * thr-solaris SUN Solaris thread support.

        * thr-win32 Microsoft Win32 API thread support.


@endnode

@node "Configurations" "gcc.guide/Configurations"
@next "Other Dir"
@toc "Installation"

Configurations Supported by GNU CC
==================================

   Here are the possible CPU types:

     1750a, a29k, alpha, arm, cN, clipper, dsp16xx, elxsi, h8300,
     hppa1.0, hppa1.1, i370, i386, i486, i586, i860, i960, m32r,
     m68000, m68k, m88k, mips, mipsel, mips64, mips64el, ns32k,
     powerpc, powerpcle, pyramid, romp, rs6000, sh, sparc, sparclite,
     sparc64, vax, we32k.

   Here are the recognized company names.  As you can see, customary
abbreviations are used rather than the longer official names.

     acorn, alliant, altos, apollo, apple, att, bull, cbm, convergent,
     convex, crds, dec, dg, dolphin, elxsi, encore, harris, hitachi,
     hp, ibm, intergraph, isi, mips, motorola, ncr, next, ns, omron,
     plexus, sequent, sgi, sony, sun, tti, unicom, wrs.

   The company name is meaningful only to disambiguate when the rest of
the information supplied is insufficient.  You can omit it, writing
just @{b}CPU-SYSTEM@{ub}, if it is not needed.  For example, @{b}vax-ultrix4.2@{ub} is
equivalent to @{b}vax-dec-ultrix4.2@{ub}.

   Here is a list of system types:

     386bsd, aix, acis, amigaos, aos, aout, aux, bosx, bsd, clix, coff,
     ctix, cxux, dgux, dynix, ebmon, ecoff, elf, esix, freebsd, hms,
     genix, gnu, linux-gnu, hiux, hpux, iris, irix, isc, luna, lynxos,
     mach, minix, msdos, mvs, netbsd, newsos, nindy, ns, osf, osfrose,
     ptx, riscix, riscos, rtu, sco, sim, solaris, sunos, sym, sysv,
     udi, ultrix, unicos, uniplus, unos, vms, vsta, vxworks, winnt,
     xenix.

You can omit the system type; then @{b}configure@{ub} guesses the operating
system from the CPU and company.

   You can add a version number to the system type; this may or may not
make a difference.  For example, you can write @{b}bsd4.3@{ub} or @{b}bsd4.4@{ub} to
distinguish versions of BSD.  In practice, the version number is most
needed for @{b}sysv3@{ub} and @{b}sysv4@{ub}, which are often treated differently.

   If you specify an impossible combination such as @{b}i860-dg-vms@{ub}, then
you may get an error message from @{b}configure@{ub}, or it may ignore part of
the information and do the best it can with the rest.  @{b}configure@{ub} always
prints the canonical name for the alternative that it used.  GNU CC
does not support all possible alternatives.

   Often a particular model of machine has a name.  Many machine names
are recognized as aliases for CPU/company combinations.  Thus, the
machine name @{b}sun3@{ub}, mentioned above, is an alias for @{b}m68k-sun@{ub}.
Sometimes we accept a company name as a machine name, when the name is
popularly used for a particular machine.  Here is a table of the known
machine names:

     3300, 3b1, 3bN, 7300, altos3068, altos, apollo68, att-7300,
     balance, convex-cN, crds, decstation-3100, decstation, delta,
     encore, fx2800, gmicro, hp7NN, hp8NN, hp9k2NN, hp9k3NN, hp9k7NN,
     hp9k8NN, iris4d, iris, isi68, m3230, magnum, merlin, miniframe,
     mmax, news-3600, news800, news, next, pbd, pc532, pmax, powerpc,
     powerpcle, ps2, risc-news, rtpc, sun2, sun386i, sun386, sun3,
     sun4, symmetry, tower-32, tower.

Remember that a machine name specifies both the cpu type and the company
name.  If you want to install your own homemade configuration files,
you can use @{b}local@{ub} as the company name to access them.  If you use
configuration @{b}CPU-local@{ub}, the configuration name without the cpu prefix
is used to form the configuration file names.

   Thus, if you specify @{b}m68k-local@{ub}, configuration uses files @{b}m68k.md@{ub},
@{b}local.h@{ub}, @{b}m68k.c@{ub}, @{b}xm-local.h@{ub}, @{b}t-local@{ub}, and @{b}x-local@{ub}, all in the directory
@{b}config/m68k@{ub}.

   Here is a list of configurations that have special treatment or
special things you must know:

@{b}1750a-*-*@{ub}
     MIL-STD-1750A processors.

     The MIL-STD-1750A cross configuration produces output for @{b}as1750@{ub},
     an assembler/linker available under the GNU Public License for the
     1750A. @{b}as1750@{ub} can be obtained at
     @{i}ftp://ftp.fta-berlin.de/pub/crossgcc/1750gals/@{ui}.  A similarly
     licensed simulator for the 1750A is available from same address.

     You should ignore a fatal error during the building of libgcc
     (libgcc is not yet implemented for the 1750A.)

     The @{b}as1750@{ub} assembler requires the file @{b}ms1750.inc@{ub}, which is found
     in the directory @{b}config/1750a@{ub}.

     GNU CC produced the same sections as the Fairchild F9450 C
     Compiler, namely:

    @{b}Normal@{ub}
          The program code section.

    @{b}Static@{ub}
          The read/write (RAM) data section.

    @{b}Konst@{ub}
          The read-only (ROM) constants section.

    @{b}Init@{ub}
          Initialization section (code to copy KREL to SREL).

     The smallest addressable unit is 16 bits (BITS_PER_UNIT is 16).
     This means that type `char' is represented with a 16-bit word per
     character.  The 1750A's "Load/Store Upper/Lower Byte" instructions
     are not used by GNU CC.

@{b}alpha-*-osf1@{ub}
     Systems using processors that implement the DEC Alpha architecture
     and are running the DEC Unix (OSF/1) operating system, for example
     the DEC Alpha AXP systems.CC.)

     GNU CC writes a @{b}.verstamp@{ub} directive to the assembler output file
     unless it is built as a cross-compiler.  It gets the version to
     use from the system header file @{b}/usr/include/stamp.h@{ub}.  If you
     install a new version of DEC Unix, you should rebuild GCC to pick
     up the new version stamp.

     Note that since the Alpha is a 64-bit architecture,
     cross-compilers from 32-bit machines will not generate code as
     efficient as that generated when the compiler is running on a
     64-bit machine because many optimizations that depend on being
     able to represent a word on the target in an integral value on the
     host cannot be performed.  Building cross-compilers on the Alpha
     for 32-bit machines has only been tested in a few cases and may
     not work properly.

@{b}     make compare@{ub} may fail on old versions of DEC Unix unless you add
     @{b}-save-temps@{ub} to @{b}CFLAGS@{ub}.  On these systems, the name of the
     assembler input file is stored in the object file, and that makes
     comparison fail if it differs between the @{b}stage1@{ub} and @{b}stage2@{ub}
     compilations.  The option @{b}-save-temps@{ub} forces a fixed name to be
     used for the assembler input file, instead of a randomly chosen
     name in @{b}/tmp@{ub}.  Do not add @{b}-save-temps@{ub} unless the comparisons fail
     without that option.  If you add @{b}-save-temps@{ub}, you will have to
     manually delete the @{b}.i@{ub} and @{b}.s@{ub} files after each series of
     compilations.

     GNU CC now supports both the native (ECOFF) debugging format used
     by DBX and GDB and an encapsulated STABS format for use only with
     GDB.  See the discussion of the @{b}--with-stabs@{ub} option of @{b}configure@{ub}
     above for more information on these formats and how to select them.

     There is a bug in DEC's assembler that produces incorrect line
     numbers for ECOFF format when the @{b}.align@{ub} directive is used.  To
     work around this problem, GNU CC will not emit such alignment
     directives while writing ECOFF format debugging information even
     if optimization is being performed.  Unfortunately, this has the
     very undesirable side-effect that code addresses when @{b}-O@{ub} is
     specified are different depending on whether or not @{b}-g@{ub} is also
     specified.

     To avoid this behavior, specify @{b}-gstabs+@{ub} and use GDB instead of
     DBX.  DEC is now aware of this problem with the assembler and
     hopes to provide a fix shortly.

@{b}arc-*-elf@{ub}
     Argonaut ARC processor.  This configuration is intended for
     embedded systems.

@{b}arm-*-aout@{ub}
     Advanced RISC Machines ARM-family processors.  These are often
     used in embedded applications.  There are no standard Unix
     configurations.  This configuration corresponds to the basic
     instruction sequences and will produce @{b}a.out@{ub} format object modules.

     You may need to make a variant of the file @{b}arm.h@{ub} for your
     particular configuration.

@{b}arm-*-linuxaout@{ub}
     Any of the ARM family processors running the Linux-based GNU
     system with the @{b}a.out@{ub} binary format (ELF is not yet supported).
     You must use version 2.8.1.0.7 or later of the GNU/Linux binutils,
     which you can download from @{b}sunsite.unc.edu:/pub/Linux/GCC@{ub} and
     other mirror sites for Linux-based GNU systems.

@{b}arm-*-riscix@{ub}
     The ARM2 or ARM3 processor running RISC iX, Acorn's port of BSD
     Unix.  If you are running a version of RISC iX prior to 1.2 then
     you must specify the version number during configuration.  Note
     that the assembler shipped with RISC iX does not support stabs
     debugging information; a new version of the assembler, with stabs
     support included, is now available from Acorn and via ftp
     @{b}ftp.acorn.com:/pub/riscix/as+xterm.tar.Z@{ub}.  To enable stabs
     debugging, pass @{b}--with-gnu-as@{ub} to configure.

     You will need to install GNU @{b}sed@{ub} before you can run configure.

@{b}a29k@{ub}
     AMD Am29k-family processors.  These are normally used in embedded
     applications.  There are no standard Unix configurations.  This
     configuration corresponds to AMD's standard calling sequence and
     binary interface and is compatible with other 29k tools.

     You may need to make a variant of the file @{b}a29k.h@{ub} for your
     particular configuration.

@{b}a29k-*-bsd@{ub}
     AMD Am29050 used in a system running a variant of BSD Unix.

@{b}decstation-*@{ub}
     MIPS-based DECstations can support three different personalities:
     Ultrix, DEC OSF/1, and OSF/rose.  (Alpha-based DECstation products
     have a configuration name beginning with @{b}alpha-dec@{ub}.)  To configure
     GCC for these platforms use the following configurations:

    @{b}decstation-ultrix@{ub}
          Ultrix configuration.

    @{b}decstation-osf1@{ub}
          Dec's version of OSF/1.

    @{b}decstation-osfrose@{ub}
          Open Software Foundation reference port of OSF/1 which uses
          the OSF/rose object file format instead of ECOFF.  Normally,
          you would not select this configuration.

     The MIPS C compiler needs to be told to increase its table size
     for switch statements with the @{b}-Wf,-XNg1500@{ub} option in order to
     compile @{b}cp/parse.c@{ub}.  If you use the @{b}-O2@{ub} optimization option, you
     also need to use @{b}-Olimit 3000@{ub}.  Both of these options are
     automatically generated in the @{b}Makefile@{ub} that the shell script
     @{b}configure@{ub} builds.  If you override the @{b}CC@{ub} make variable and use
     the MIPS compilers, you may need to add @{b}-Wf,-XNg1500 -Olimit 3000@{ub}.

@{b}elxsi-elxsi-bsd@{ub}
     The Elxsi's C compiler has known limitations that prevent it from
     compiling GNU C.  Please contact @{b}mrs@cygnus.com@{ub} for more details.

@{b}dsp16xx@{ub}
     A port to the AT&T DSP1610 family of processors.

@{b}h8300-*-*@{ub}
     Hitachi H8/300 series of processors.

     The calling convention and structure layout has changed in release
     2.6.  All code must be recompiled.  The calling convention now
     passes the first three arguments in function calls in registers.
     Structures are no longer a multiple of 2 bytes.

@{b}hppa*-*-*@{ub}
     There are several variants of the HP-PA processor which run a
     variety of operating systems.  GNU CC must be configured to use
     the correct processor type and operating system, or GNU CC will
     not function correctly.  The easiest way to handle this problem is
     to @{i}not@{ui} specify a target when configuring GNU CC, the @{b}configure@{ub}
     script will try to automatically determine the right processor
     type and operating system.

@{b}     -g@{ub} does not work on HP-UX, since that system uses a peculiar
     debugging format which GNU CC does not know about.  However, @{b}-g@{ub}
     will work if you also use GAS and GDB in conjunction with GCC.  We
     highly recommend using GAS for all HP-PA configurations.

     You should be using GAS-2.6 (or later) along with GDB-4.16 (or
     later).  These can be retrieved from all the traditional GNU ftp
     archive sites.

     On some versions of HP-UX, you will need to install GNU @{b}sed@{ub}.

     You will need to be install GAS into a directory before @{b}/bin@{ub},
     @{b}/usr/bin@{ub}, and @{b}/usr/ccs/bin@{ub} in your search path.  You should
     install GAS before you build GNU CC.

     To enable debugging, you must configure GNU CC with the
     @{b}--with-gnu-as@{ub} option before building.

@{b}i370-*-*@{ub}
     This port is very preliminary and has many known bugs.  We hope to
     have a higher-quality port for this machine soon.

@{b}i386-*-linux-gnuoldld@{ub}
     Use this configuration to generate @{b}a.out@{ub} binaries on Linux-based
     GNU systems if you do not have gas/binutils version 2.5.2 or later
     installed. This is an obsolete configuration.

@{b}i386-*-linux-gnuaout@{ub}
     Use this configuration to generate @{b}a.out@{ub} binaries on Linux-based
     GNU systems. This configuration is being superseded. You must use
     gas/binutils version 2.5.2 or later.

@{b}i386-*-linux-gnu@{ub}
     Use this configuration to generate ELF binaries on Linux-based GNU
     systems.  You must use gas/binutils version 2.5.2 or later.

@{b}i386-*-sco@{ub}
     Compilation with RCC is recommended.  Also, it may be a good idea
     to link with GNU malloc instead of the malloc that comes with the
     system.

@{b}i386-*-sco3.2v4@{ub}
     Use this configuration for SCO release 3.2 version 4.

@{b}i386-*-sco3.2v5*@{ub}
     Use this for the SCO OpenServer Release family including 5.0.0,
     5.0.2, 5.0.4, 5.0.5, Internet FastStart 1.0, and Internet
     FastStart 1.1.

     GNU CC can generate COFF binaries if you specify @{b}-mcoff@{ub} or ELF
     binaries, the default.    A full @{b}make bootstrap@{ub} is recommended so
     that an ELF compiler that builds ELF is generated.

     You must have TLS597 from `ftp://ftp.sco.com/TLS' installed for ELF
     C++ binaries to work correctly on releases before 5.0.4.

     The native SCO assembler that is provided with the OS at no charge
     is normally required.  If, however, you must be able to use the GNU
     assembler (perhaps you have complex asms) you must configure this
     package @{b}--with-gnu-as@{ub}.  To do this, install (cp or symlink) gcc/as
     to your copy of the GNU assembler.  You must use a recent version
     of GNU binutils; version 2.9.1 seems to work well.  If you select
     this option, you will be unable to build COFF images.  Trying to
     do so will result in non-obvious failures.  In general, the
     "-with-gnu-as" option isn't as well tested as the native assembler.

@{i}     NOTE:@{ui} If you are building C++, you must follow the instructions
     about invoking @{b}make bootstrap@{ub} because the native OpenServer
     compiler may build a @{b}cc1plus@{ub} that will not correctly parse many
     valid C++ programs.  You must do a @{b}make bootstrap@{ub} if you are
     building with the native compiler.

@{b}i386-*-isc@{ub}
     It may be a good idea to link with GNU malloc instead of the
     malloc that comes with the system.

     In ISC version 4.1, @{b}sed@{ub} core dumps when building @{b}deduced.h@{ub}.  Use
     the version of @{b}sed@{ub} from version 4.0.

@{b}i386-*-esix@{ub}
     It may be good idea to link with GNU malloc instead of the malloc
     that comes with the system.

@{b}i386-ibm-aix@{ub}
     You need to use GAS version 2.1 or later, and LD from GNU binutils
     version 2.2 or later.

@{b}i386-sequent-bsd@{ub}
     Go to the Berkeley universe before compiling.

@{b}i386-sequent-ptx1*@{ub}
@{b}i386-sequent-ptx2*@{ub}
     You must install GNU @{b}sed@{ub} before running @{b}configure@{ub}.

@{b}i386-sun-sunos4@{ub}
     You may find that you need another version of GNU CC to begin
     bootstrapping with, since the current version when built with the
     system's own compiler seems to get an infinite loop compiling part
     of @{b}libgcc2.c@{ub}.  GNU CC version 2 compiled with GNU CC (any version)
     seems not to have this problem.

     See @{"Sun Install" link "Sun Install"}, for information on installing GNU CC on Sun
     systems.

@{b}i[345]86-*-winnt3.5@{ub}
     This version requires a GAS that has not yet been released.  Until
     it is, you can get a prebuilt binary version via anonymous ftp from
     @{b}cs.washington.edu:pub/gnat@{ub} or @{b}cs.nyu.edu:pub/gnat@{ub}. You must also
     use the Microsoft header files from the Windows NT 3.5 SDK.  Find
     these on the CDROM in the @{b}/mstools/h@{ub} directory dated 9/4/94.  You
     must use a fixed version of Microsoft linker made especially for
     NT 3.5, which is also is available on the NT 3.5 SDK CDROM.  If
     you do not have this linker, can you also use the linker from
     Visual C/C++ 1.0 or 2.0.

     Installing GNU CC for NT builds a wrapper linker, called @{b}ld.exe@{ub},
     which mimics the behaviour of Unix @{b}ld@{ub} in the specification of
     libraries (@{b}-L@{ub} and @{b}-l@{ub}).  @{b}ld.exe@{ub} looks for both Unix and Microsoft
     named libraries.  For example, if you specify @{b}-lfoo@{ub}, @{b}ld.exe@{ub} will
     look first for @{b}libfoo.a@{ub} and then for @{b}foo.lib@{ub}.

     You may install GNU CC for Windows NT in one of two ways,
     depending on whether or not you have a Unix-like shell and various
     Unix-like utilities.

       1. If you do not have a Unix-like shell and few Unix-like
          utilities, you will use a DOS style batch script called
          @{b}configure.bat@{ub}.  Invoke it as @{b}configure winnt@{ub} from an MSDOS
          console window or from the program manager dialog box.
          @{b}configure.bat@{ub} assumes you have already installed and have in
          your path a Unix-like @{b}sed@{ub} program which is used to create a
          working @{b}Makefile@{ub} from @{b}Makefile.in@{ub}.

@{b}          Makefile@{ub} uses the Microsoft Nmake program maintenance utility
          and the Visual C/C++ V8.00 compiler to build GNU CC.  You
          need only have the utilities @{b}sed@{ub} and @{b}touch@{ub} to use this
          installation method, which only automatically builds the
          compiler itself.  You must then examine what @{b}fixinc.winnt@{ub}
          does, edit the header files by hand and build @{b}libgcc.a@{ub}
          manually.

       2. The second type of installation assumes you are running a
          Unix-like shell, have a complete suite of Unix-like utilities
          in your path, and have a previous version of GNU CC already
          installed, either through building it via the above
          installation method or acquiring a pre-built binary.  In this
          case, use the @{b}configure@{ub} script in the normal fashion.

@{b}i860-intel-osf1@{ub}
     This is the Paragon.  If you have version 1.0 of the operating
     system, see @{"Installation Problems" link "Installation Problems"}, for special things you need to
     do to compensate for peculiarities in the system.

@{b}*-lynx-lynxos@{ub}
     LynxOS 2.2 and earlier comes with GNU CC 1.x already installed as
     @{b}/bin/gcc@{ub}.  You should compile with this instead of @{b}/bin/cc@{ub}.  You
     can tell GNU CC to use the GNU assembler and linker, by specifying
     @{b}--with-gnu-as --with-gnu-ld@{ub} when configuring.  These will produce
     COFF format object files and executables;  otherwise GNU CC will
     use the installed tools, which produce @{b}a.out@{ub} format executables.

@{b}m32r-*-elf@{ub}
     Mitsubishi M32R processor.  This configuration is intended for
     embedded systems.

@{b}m68000-hp-bsd@{ub}
     HP 9000 series 200 running BSD.  Note that the C compiler that
     comes with this system cannot compile GNU CC; contact
     @{b}law@cygnus.com@{ub} to get binaries of GNU CC for bootstrapping.

@{b}m68k-altos@{ub}
     Altos 3068.  You must use the GNU assembler, linker and debugger.
     Also, you must fix a kernel bug.  Details in the file @{b}README.ALTOS@{ub}.

@{b}m68k-apple-aux@{ub}
     Apple Macintosh running A/UX.  You may configure GCC  to use
     either the system assembler and linker or the GNU assembler and
     linker.  You should use the GNU configuration if you can,
     especially if you also want to use GNU C++.  You enabled that
     configuration with + the @{b}--with-gnu-as@{ub} and @{b}--with-gnu-ld@{ub} options
     to @{b}configure@{ub}.

     Note the C compiler that comes with this system cannot compile GNU
     CC.  You can find binaries of GNU CC for bootstrapping on
     @{b}jagubox.gsfc.nasa.gov@{ub}.  You will also a patched version of @{b}/bin/ld@{ub}
     there that raises some of the arbitrary limits found in the
     original.

@{b}m68k-att-sysv@{ub}
     AT&T 3b1, a.k.a. 7300 PC.  Special procedures are needed to
     compile GNU CC with this machine's standard C compiler, due to
     bugs in that compiler.  You can bootstrap it more easily with
     previous versions of GNU CC if you have them.

     Installing GNU CC on the 3b1 is difficult if you do not already
     have GNU CC running, due to bugs in the installed C compiler.
     However, the following procedure might work.  We are unable to
     test it.

       1. Comment out the @{b}#include "config.h"@{ub} line near the start of
          @{b}cccp.c@{ub} and do @{b}make cpp@{ub}.  This makes a preliminary version of
          GNU cpp.

       2. Save the old @{b}/lib/cpp@{ub} and copy the preliminary GNU cpp to that
          file name.

       3. Undo your change in @{b}cccp.c@{ub}, or reinstall the original version,
          and do @{b}make cpp@{ub} again.

       4. Copy this final version of GNU cpp into @{b}/lib/cpp@{ub}.

       5. Replace every occurrence of @{b}obstack_free@{ub} in the file @{b}tree.c@{ub}
          with @{b}_obstack_free@{ub}.

       6. Run @{b}make@{ub} to get the first-stage GNU CC.

       7. Reinstall the original version of @{b}/lib/cpp@{ub}.

       8. Now you can compile GNU CC with itself and install it in the
          normal fashion.

@{b}m68k-bull-sysv@{ub}
     Bull DPX/2 series 200 and 300 with BOS-2.00.45 up to BOS-2.01. GNU
     CC works either with native assembler or GNU assembler. You can use
     GNU assembler with native coff generation by providing
     @{b}--with-gnu-as@{ub} to the configure script or use GNU assembler with
     dbx-in-coff encapsulation by providing @{b}--with-gnu-as --stabs@{ub}. For
     any problem with native assembler or for availability of the DPX/2
     port of GAS, contact @{b}F.Pierresteguy@frcl.bull.fr@{ub}.

@{b}m68k-crds-unox@{ub}
     Use @{b}configure unos@{ub} for building on Unos.

     The Unos assembler is named @{b}casm@{ub} instead of @{b}as@{ub}.  For some strange
     reason linking @{b}/bin/as@{ub} to @{b}/bin/casm@{ub} changes the behavior, and does
     not work.  So, when installing GNU CC, you should install the
     following script as @{b}as@{ub} in the subdirectory where the passes of GCC
     are installed:

          #!/bin/sh
          casm $*

     The default Unos library is named @{b}libunos.a@{ub} instead of @{b}libc.a@{ub}.  To
     allow GNU CC to function, either change all references to @{b}-lc@{ub} in
     @{b}gcc.c@{ub} to @{b}-lunos@{ub} or link @{b}/lib/libc.a@{ub} to @{b}/lib/libunos.a@{ub}.

     When compiling GNU CC with the standard compiler, to overcome bugs
     in the support of @{b}alloca@{ub}, do not use @{b}-O@{ub} when making stage 2.  Then
     use the stage 2 compiler with @{b}-O@{ub} to make the stage 3 compiler.
     This compiler will have the same characteristics as the usual
     stage 2 compiler on other systems.  Use it to make a stage 4
     compiler and compare that with stage 3 to verify proper
     compilation.

     (Perhaps simply defining @{b}ALLOCA@{ub} in @{b}x-crds@{ub} as described in the
     comments there will make the above paragraph superfluous.  Please
     inform us of whether this works.)

     Unos uses memory segmentation instead of demand paging, so you
     will need a lot of memory.  5 Mb is barely enough if no other
     tasks are running.  If linking @{b}cc1@{ub} fails, try putting the object
     files into a library and linking from that library.

@{b}m68k-hp-hpux@{ub}
     HP 9000 series 300 or 400 running HP-UX.  HP-UX version 8.0 has a
     bug in the assembler that prevents compilation of GNU CC.  To fix
     it, get patch PHCO_4484 from HP.

     In addition, if you wish to use gas @{b}--with-gnu-as@{ub} you must use gas
     version 2.1 or later, and you must use the GNU linker version 2.1
     or later.  Earlier versions of gas relied upon a program which
     converted the gas output into the native HP-UX format, but that
     program has not been kept up to date.  gdb does not understand
     that native HP-UX format, so you must use gas if you wish to use
     gdb.

@{b}m68k-sun@{ub}
     Sun 3.  We do not provide a configuration file to use the Sun FPA
     by default, because programs that establish signal handlers for
     floating point traps inherently cannot work with the FPA.

     See @{"Sun Install" link "Sun Install"}, for information on installing GNU CC on Sun
     systems.

@{b}m88k-*-svr3@{ub}
     Motorola m88k running the AT&T/Unisoft/Motorola V.3 reference port.
     These systems tend to use the Green Hills C, revision 1.8.5, as the
     standard C compiler.  There are apparently bugs in this compiler
     that result in object files differences between stage 2 and stage
     3.  If this happens, make the stage 4 compiler and compare it to
     the stage 3 compiler.  If the stage 3 and stage 4 object files are
     identical, this suggests you encountered a problem with the
     standard C compiler; the stage 3 and 4 compilers may be usable.

     It is best, however, to use an older version of GNU CC for
     bootstrapping if you have one.

@{b}m88k-*-dgux@{ub}
     Motorola m88k running DG/UX.  To build 88open BCS native or cross
     compilers on DG/UX, specify the configuration name as
     @{b}m88k-*-dguxbcs@{ub} and build in the 88open BCS software development
     environment.  To build ELF native or cross compilers on DG/UX,
     specify @{b}m88k-*-dgux@{ub} and build in the DG/UX ELF development
     environment.  You set the software development environment by
     issuing @{b}sde-target@{ub} command and specifying either @{b}m88kbcs@{ub} or
     @{b}m88kdguxelf@{ub} as the operand.

     If you do not specify a configuration name, @{b}configure@{ub} guesses the
     configuration based on the current software development
     environment.

@{b}m88k-tektronix-sysv3@{ub}
     Tektronix XD88 running UTekV 3.2e.  Do not turn on optimization
     while building stage1 if you bootstrap with the buggy Green Hills
     compiler.  Also, The bundled LAI System V NFS is buggy so if you
     build in an NFS mounted directory, start from a fresh reboot, or
     avoid NFS all together.  Otherwise you may have trouble getting
     clean comparisons between stages.

@{b}mips-mips-bsd@{ub}
     MIPS machines running the MIPS operating system in BSD mode.  It's
     possible that some old versions of the system lack the functions
     @{b}memcpy@{ub}, @{b}memcmp@{ub}, and @{b}memset@{ub}.  If your system lacks these, you must
     remove or undo the definition of @{b}TARGET_MEM_FUNCTIONS@{ub} in
     @{b}mips-bsd.h@{ub}.

     The MIPS C compiler needs to be told to increase its table size
     for switch statements with the @{b}-Wf,-XNg1500@{ub} option in order to
     compile @{b}cp/parse.c@{ub}.  If you use the @{b}-O2@{ub} optimization option, you
     also need to use @{b}-Olimit 3000@{ub}.  Both of these options are
     automatically generated in the @{b}Makefile@{ub} that the shell script
     @{b}configure@{ub} builds.  If you override the @{b}CC@{ub} make variable and use
     the MIPS compilers, you may need to add @{b}-Wf,-XNg1500 -Olimit 3000@{ub}.

@{b}mips-mips-riscos*@{ub}
     The MIPS C compiler needs to be told to increase its table size
     for switch statements with the @{b}-Wf,-XNg1500@{ub} option in order to
     compile @{b}cp/parse.c@{ub}.  If you use the @{b}-O2@{ub} optimization option, you
     also need to use @{b}-Olimit 3000@{ub}.  Both of these options are
     automatically generated in the @{b}Makefile@{ub} that the shell script
     @{b}configure@{ub} builds.  If you override the @{b}CC@{ub} make variable and use
     the MIPS compilers, you may need to add @{b}-Wf,-XNg1500 -Olimit 3000@{ub}.

     MIPS computers running RISC-OS can support four different
     personalities: default, BSD 4.3, System V.3, and System V.4 (older
     versions of RISC-OS don't support V.4).  To configure GCC for
     these platforms use the following configurations:

    @{b}mips-mips-riscos@{b}rev@{ub}@{ub}
          Default configuration for RISC-OS, revision @{b}rev@{ub}.

    @{b}mips-mips-riscos@{b}rev@{ub}bsd@{ub}
          BSD 4.3 configuration for RISC-OS, revision @{b}rev@{ub}.

    @{b}mips-mips-riscos@{b}rev@{ub}sysv4@{ub}
          System V.4 configuration for RISC-OS, revision @{b}rev@{ub}.

    @{b}mips-mips-riscos@{b}rev@{ub}sysv@{ub}
          System V.3 configuration for RISC-OS, revision @{b}rev@{ub}.

     The revision @{b}rev@{ub} mentioned above is the revision of RISC-OS to
     use.  You must reconfigure GCC when going from a RISC-OS revision
     4 to RISC-OS revision 5.  This has the effect of avoiding a linker
     bug (see @{"Installation Problems" link "Installation Problems"}, for more details).

@{b}mips-sgi-*@{ub}
     In order to compile GCC on an SGI running IRIX 4, the "c.hdr.lib"
     option must be installed from the CD-ROM supplied from Silicon
     Graphics.  This is found on the 2nd CD in release 4.0.1.

     In order to compile GCC on an SGI running IRIX 5, the
     "compiler_dev.hdr" subsystem must be installed from the IDO CD-ROM
     supplied by Silicon Graphics.

@{b}     make compare@{ub} may fail on version 5 of IRIX unless you add
     @{b}-save-temps@{ub} to @{b}CFLAGS@{ub}.  On these systems, the name of the
     assembler input file is stored in the object file, and that makes
     comparison fail if it differs between the @{b}stage1@{ub} and @{b}stage2@{ub}
     compilations.  The option @{b}-save-temps@{ub} forces a fixed name to be
     used for the assembler input file, instead of a randomly chosen
     name in @{b}/tmp@{ub}.  Do not add @{b}-save-temps@{ub} unless the comparisons fail
     without that option.  If you do you @{b}-save-temps@{ub}, you will have to
     manually delete the @{b}.i@{ub} and @{b}.s@{ub} files after each series of
     compilations.

     The MIPS C compiler needs to be told to increase its table size
     for switch statements with the @{b}-Wf,-XNg1500@{ub} option in order to
     compile @{b}cp/parse.c@{ub}.  If you use the @{b}-O2@{ub} optimization option, you
     also need to use @{b}-Olimit 3000@{ub}.  Both of these options are
     automatically generated in the @{b}Makefile@{ub} that the shell script
     @{b}configure@{ub} builds.  If you override the @{b}CC@{ub} make variable and use
     the MIPS compilers, you may need to add @{b}-Wf,-XNg1500 -Olimit 3000@{ub}.

     On Irix version 4.0.5F, and perhaps on some other versions as well,
     there is an assembler bug that reorders instructions incorrectly.
     To work around it, specify the target configuration
     @{b}mips-sgi-irix4loser@{ub}.  This configuration inhibits assembler
     optimization.

     In a compiler configured with target @{b}mips-sgi-irix4@{ub}, you can turn
     off assembler optimization by using the @{b}-noasmopt@{ub} option.  This
     compiler option passes the option @{b}-O0@{ub} to the assembler, to inhibit
     reordering.

     The @{b}-noasmopt@{ub} option can be useful for testing whether a problem
     is due to erroneous assembler reordering.  Even if a problem does
     not go away with @{b}-noasmopt@{ub}, it may still be due to assembler
     reordering--perhaps GNU CC itself was miscompiled as a result.

     To enable debugging under Irix 5, you must use GNU as 2.5 or later,
     and use the @{b}--with-gnu-as@{ub} configure option when configuring gcc.
     GNU as is distributed as part of the binutils package.

@{b}mips-sony-sysv@{ub}
     Sony MIPS NEWS.  This works in NEWSOS 5.0.1, but not in 5.0.2
     (which uses ELF instead of COFF).  Support for 5.0.2 will probably
     be provided soon by volunteers.  In particular, the linker does
     not like the code generated by GCC when shared libraries are
     linked in.

@{b}ns32k-encore@{ub}
     Encore ns32000 system.  Encore systems are supported only under
     BSD.

@{b}ns32k-*-genix@{ub}
     National Semiconductor ns32000 system.  Genix has bugs in @{b}alloca@{ub}
     and @{b}malloc@{ub}; you must get the compiled versions of these from GNU
     Emacs.

@{b}ns32k-sequent@{ub}
     Go to the Berkeley universe before compiling.

@{b}ns32k-utek@{ub}
     UTEK ns32000 system ("merlin").  The C compiler that comes with
     this system cannot compile GNU CC; contact @{b}tektronix!reed!mason@{ub} to
     get binaries of GNU CC for bootstrapping.

@{b}romp-*-aos@{ub}
@{b}romp-*-mach@{ub}
     The only operating systems supported for the IBM RT PC are AOS and
     MACH.  GNU CC does not support AIX running on the RT.  We
     recommend you compile GNU CC with an earlier version of itself; if
     you compile GNU CC with @{b}hc@{ub}, the Metaware compiler, it will work,
     but you will get mismatches between the stage 2 and stage 3
     compilers in various files.  These errors are minor differences in
     some floating-point constants and can be safely ignored; the stage
     3 compiler is correct.

@{b}rs6000-*-aix@{ub}
@{b}powerpc-*-aix@{ub}
     Various early versions of each release of the IBM XLC compiler
     will not bootstrap GNU CC.  Symptoms include differences between
     the stage2 and stage3 object files, and errors when compiling
     @{b}libgcc.a@{ub} or @{b}enquire@{ub}.  Known problematic releases include:
     xlc-1.2.1.8, xlc-1.3.0.0 (distributed with AIX 3.2.5), and
     xlc-1.3.0.19.  Both xlc-1.2.1.28 and xlc-1.3.0.24 (PTF 432238) are
     known to produce working versions of GNU CC, but most other recent
     releases correctly bootstrap GNU CC.

     Release 4.3.0 of AIX and ones prior to AIX 3.2.4 include a version
     of the IBM assembler which does not accept debugging directives:
     assembler updates are available as PTFs.  Also, if you are using
     AIX 3.2.5 or greater and the GNU assembler, you must have a
     version modified after October 16th, 1995 in order for the GNU C
     compiler to build.  See the file @{b}README.RS6000@{ub} for more details on
     any of these problems.

     GNU CC does not yet support the 64-bit PowerPC instructions.

     Objective C does not work on this architecture because it makes
     assumptions that are incompatible with the calling conventions.

     AIX on the RS/6000 provides support (NLS) for environments outside
     of the United States.  Compilers and assemblers use NLS to support
     locale-specific representations of various objects including
     floating-point numbers ("." vs "," for separating decimal
     fractions).  There have been problems reported where the library
     linked with GNU CC does not produce the same floating-point
     formats that the assembler accepts.  If you have this problem, set
     the LANG environment variable to "C" or "En_US".

     Due to changes in the way that GNU CC invokes the binder (linker)
     for AIX 4.1, you may now receive warnings of duplicate symbols
     from the link step that were not reported before.  The assembly
     files generated by GNU CC for AIX have always included multiple
     symbol definitions for certain global variable and function
     declarations in the original program.  The warnings should not
     prevent the linker from producing a correct library or runnable
     executable.

     By default, AIX 4.1 produces code that can be used on either Power
     or PowerPC processors.

     You can specify a default version for the @{b}-mcpu=@{ub}CPU_TYPE switch by
     using the configure option @{b}--with-cpu-@{ub}CPU_TYPE.

@{b}powerpc-*-elf@{ub}
@{b}powerpc-*-sysv4@{ub}
     PowerPC system in big endian mode, running System V.4.

     You can specify a default version for the @{b}-mcpu=@{ub}CPU_TYPE switch by
     using the configure option @{b}--with-cpu-@{ub}CPU_TYPE.

@{b}powerpc-*-linux-gnu@{ub}
     PowerPC system in big endian mode, running the Linux-based GNU
     system.

     You can specify a default version for the @{b}-mcpu=@{ub}CPU_TYPE switch by
     using the configure option @{b}--with-cpu-@{ub}CPU_TYPE.

@{b}powerpc-*-eabiaix@{ub}
     Embedded PowerPC system in big endian mode with -mcall-aix
     selected as the default.

     You can specify a default version for the @{b}-mcpu=@{ub}CPU_TYPE switch by
     using the configure option @{b}--with-cpu-@{ub}CPU_TYPE.

@{b}powerpc-*-eabisim@{ub}
     Embedded PowerPC system in big endian mode for use in running
     under the PSIM simulator.

     You can specify a default version for the @{b}-mcpu=@{ub}CPU_TYPE switch by
     using the configure option @{b}--with-cpu-@{ub}CPU_TYPE.

@{b}powerpc-*-eabi@{ub}
     Embedded PowerPC system in big endian mode.

     You can specify a default version for the @{b}-mcpu=@{ub}CPU_TYPE switch by
     using the configure option @{b}--with-cpu-@{ub}CPU_TYPE.

@{b}powerpcle-*-elf@{ub}
@{b}powerpcle-*-sysv4@{ub}
     PowerPC system in little endian mode, running System V.4.

     You can specify a default version for the @{b}-mcpu=@{ub}CPU_TYPE switch by
     using the configure option @{b}--with-cpu-@{ub}CPU_TYPE.

@{b}powerpcle-*-solaris2*@{ub}
     PowerPC system in little endian mode, running Solaris 2.5.1 or
     higher.

     You can specify a default version for the @{b}-mcpu=@{ub}CPU_TYPE switch by
     using the configure option @{b}--with-cpu-@{ub}CPU_TYPE.  Beta versions of
     the Sun 4.0 compiler do not seem to be able to build GNU CC
     correctly.  There are also problems with the host assembler and
     linker that are fixed by using the GNU versions of these tools.

@{b}powerpcle-*-eabisim@{ub}
     Embedded PowerPC system in little endian mode for use in running
     under the PSIM simulator.

@{b}powerpcle-*-eabi@{ub}
     Embedded PowerPC system in little endian mode.

     You can specify a default version for the @{b}-mcpu=@{ub}CPU_TYPE switch by
     using the configure option @{b}--with-cpu-@{ub}CPU_TYPE.

@{b}powerpcle-*-winnt@{ub}
@{b}powerpcle-*-pe@{ub}
     PowerPC system in little endian mode running Windows NT.

     You can specify a default version for the @{b}-mcpu=@{ub}CPU_TYPE switch by
     using the configure option @{b}--with-cpu-@{ub}CPU_TYPE.

@{b}vax-dec-ultrix@{ub}
     Don't try compiling with Vax C (@{b}vcc@{ub}).  It produces incorrect code
     in some cases (for example, when @{b}alloca@{ub} is used).

     Meanwhile, compiling @{b}cp/parse.c@{ub} with pcc does not work because of
     an internal table size limitation in that compiler.  To avoid this
     problem, compile just the GNU C compiler first, and use it to
     recompile building all the languages that you want to run.

@{b}sparc-sun-*@{ub}
     See @{"Sun Install" link "Sun Install"}, for information on installing GNU CC on Sun
     systems.

@{b}vax-dec-vms@{ub}
     See @{"VMS Install" link "VMS Install"}, for details on how to install GNU CC on VMS.

@{b}we32k-*-*@{ub}
     These computers are also known as the 3b2, 3b5, 3b20 and other
     similar names.  (However, the 3b1 is actually a 68000; see
     @{"Configurations" link "Configurations"}.)

     Don't use @{b}-g@{ub} when compiling with the system's compiler.  The
     system's linker seems to be unable to handle such a large program
     with debugging information.

     The system's compiler runs out of capacity when compiling @{b}stmt.c@{ub}
     in GNU CC.  You can work around this by building @{b}cpp@{ub} in GNU CC
     first, then use that instead of the system's preprocessor with the
     system's C compiler to compile @{b}stmt.c@{ub}.  Here is how:

          mv /lib/cpp /lib/cpp.att
          cp cpp /lib/cpp.gnu
          echo '/lib/cpp.gnu -traditional ${1+"$@"}' > /lib/cpp
          chmod +x /lib/cpp

     The system's compiler produces bad code for some of the GNU CC
     optimization files.  So you must build the stage 2 compiler without
     optimization.  Then build a stage 3 compiler with optimization.
     That executable should work.  Here are the necessary commands:

          make LANGUAGES=c CC=stage1/xgcc CFLAGS="-Bstage1/ -g"
          make stage2
          make CC=stage2/xgcc CFLAGS="-Bstage2/ -g -O"

     You may need to raise the ULIMIT setting to build a C++ compiler,
     as the file @{b}cc1plus@{ub} is larger than one megabyte.


@endnode

@node "Other Dir" "gcc.guide/Other Dir"
@next "Cross-Compiler"
@prev "Configurations"
@toc "Installation"

Compilation in a Separate Directory
===================================

   If you wish to build the object files and executables in a directory
other than the one containing the source files, here is what you must
do differently:

  1. Make sure you have a version of Make that supports the @{b}VPATH@{ub}
     feature.  (GNU Make supports it, as do Make versions on most BSD
     systems.)

  2. If you have ever run @{b}configure@{ub} in the source directory, you must
     undo the configuration.  Do this by running:

          make distclean

  3. Go to the directory in which you want to build the compiler before
     running @{b}configure@{ub}:

          mkdir gcc-sun3
          cd gcc-sun3

     On systems that do not support symbolic links, this directory must
     be on the same file system as the source code directory.

  4. Specify where to find @{b}configure@{ub} when you run it:

          ../gcc/configure ...

     This also tells @{b}configure@{ub} where to find the compiler sources;
     @{b}configure@{ub} takes the directory from the file name that was used to
     invoke it.  But if you want to be sure, you can specify the source
     directory with the @{b}--srcdir@{ub} option, like this:

          ../gcc/configure --srcdir=../gcc OTHER OPTIONS

     The directory you specify with @{b}--srcdir@{ub} need not be the same as
     the one that @{b}configure@{ub} is found in.

   Now, you can run @{b}make@{ub} in that directory.  You need not repeat the
configuration steps shown above, when ordinary source files change.  You
must, however, run @{b}configure@{ub} again when the configuration files change,
if your system does not support symbolic links.


@endnode

@node "Cross-Compiler" "gcc.guide/Cross-Compiler"
@next "Sun Install"
@prev "Other Dir"
@toc "Installation"

Building and Installing a Cross-Compiler
========================================

   GNU CC can function as a cross-compiler for many machines, but not
all.

   * Cross-compilers for the Mips as target using the Mips assembler
     currently do not work, because the auxiliary programs @{b}mips-tdump.c@{ub}
     and @{b}mips-tfile.c@{ub} can't be compiled on anything but a Mips.  It
     does work to cross compile for a Mips if you use the GNU assembler
     and linker.

   * Cross-compilers between machines with different floating point
     formats have not all been made to work.  GNU CC now has a floating
     point emulator with which these can work, but each target machine
     description needs to be updated to take advantage of it.

   * Cross-compilation between machines of different word sizes is
     somewhat problematic and sometimes does not work.

   Since GNU CC generates assembler code, you probably need a
cross-assembler that GNU CC can run, in order to produce object files.
If you want to link on other than the target machine, you need a
cross-linker as well.  You also need header files and libraries suitable
for the target machine that you can install on the host machine.


 @{" Steps of Cross     " link "Steps of Cross"}  Using a cross-compiler involves several steps
                          that may be carried out on different machines.
 @{" Configure Cross    " link "Configure Cross"}  Configuring a cross-compiler.
 @{" Tools and Libraries " link "Tools and Libraries"}  Where to put the linker and assembler, and the C library.
 @{" Cross Headers      " link "Cross Headers"}  Finding and installing header files
                          for a cross-compiler.
 @{" Cross Runtime      " link "Cross Runtime"}  Supplying arithmetic runtime routines (@{b}libgcc1.a@{ub}).
 @{" Build Cross        " link "Build Cross"}  Actually compiling the cross-compiler.


@endnode

@node "Steps of Cross" "gcc.guide/Steps of Cross"
@next "Configure Cross"
@toc "Cross-Compiler"

Steps of Cross-Compilation
--------------------------

   To compile and run a program using a cross-compiler involves several
steps:

   * Run the cross-compiler on the host machine to produce assembler
     files for the target machine.  This requires header files for the
     target machine.

   * Assemble the files produced by the cross-compiler.  You can do this
     either with an assembler on the target machine, or with a
     cross-assembler on the host machine.

   * Link those files to make an executable.  You can do this either
     with a linker on the target machine, or with a cross-linker on the
     host machine.  Whichever machine you use, you need libraries and
     certain startup files (typically @{b}crt....o@{ub}) for the target machine.

   It is most convenient to do all of these steps on the same host
machine, since then you can do it all with a single invocation of GNU
CC.  This requires a suitable cross-assembler and cross-linker.  For
some targets, the GNU assembler and linker are available.


@endnode

@node "Configure Cross" "gcc.guide/Configure Cross"
@next "Tools and Libraries"
@prev "Steps of Cross"
@toc "Cross-Compiler"

Configuring a Cross-Compiler
----------------------------

   To build GNU CC as a cross-compiler, you start out by running
@{b}configure@{ub}.  Use the @{b}--target=TARGET@{ub} to specify the target type.  If
@{b}configure@{ub} was unable to correctly identify the system you are running
on, also specify the @{b}--build=BUILD@{ub} option.  For example, here is how to
configure for a cross-compiler that produces code for an HP 68030
system running BSD on a system that @{b}configure@{ub} can correctly identify:

     ./configure --target=m68k-hp-bsd4.3


@endnode

@node "Tools and Libraries" "gcc.guide/Tools and Libraries"
@next "Cross Headers"
@prev "Configure Cross"
@toc "Cross-Compiler"

Tools and Libraries for a Cross-Compiler
----------------------------------------

   If you have a cross-assembler and cross-linker available, you should
install them now.  Put them in the directory @{b}/usr/local/TARGET/bin@{ub}.
Here is a table of the tools you should put in this directory:

@{b}as@{ub}
     This should be the cross-assembler.

@{b}ld@{ub}
     This should be the cross-linker.

@{b}ar@{ub}
     This should be the cross-archiver: a program which can manipulate
     archive files (linker libraries) in the target machine's format.

@{b}ranlib@{ub}
     This should be a program to construct a symbol table in an archive
     file.

   The installation of GNU CC will find these programs in that
directory, and copy or link them to the proper place to for the
cross-compiler to find them when run later.

   The easiest way to provide these files is to build the Binutils
package and GAS.  Configure them with the same @{b}--host@{ub} and @{b}--target@{ub}
options that you use for configuring GNU CC, then build and install
them.  They install their executables automatically into the proper
directory.  Alas, they do not support all the targets that GNU CC
supports.

   If you want to install libraries to use with the cross-compiler,
such as a standard C library, put them in the directory
@{b}/usr/local/TARGET/lib@{ub}; installation of GNU CC copies all the files in
that subdirectory into the proper place for GNU CC to find them and
link with them.  Here's an example of copying some libraries from a
target machine:

     ftp TARGET-MACHINE
     lcd /usr/local/TARGET/lib
     cd /lib
     get libc.a
     cd /usr/lib
     get libg.a
     get libm.a
     quit

The precise set of libraries you'll need, and their locations on the
target machine, vary depending on its operating system.

   Many targets require "start files" such as @{b}crt0.o@{ub} and @{b}crtn.o@{ub} which
are linked into each executable; these too should be placed in
@{b}/usr/local/TARGET/lib@{ub}.  There may be several alternatives for @{b}crt0.o@{ub},
for use with profiling or other compilation options.  Check your
target's definition of @{b}STARTFILE_SPEC@{ub} to find out what start files it
uses.  Here's an example of copying these files from a target machine:

     ftp TARGET-MACHINE
     lcd /usr/local/TARGET/lib
     prompt
     cd /lib
     mget *crt*.o
     cd /usr/lib
     mget *crt*.o
     quit


@endnode

@node "Cross Runtime" "gcc.guide/Cross Runtime"
@next "Build Cross"
@prev "Cross Headers"
@toc "Cross-Compiler"

@{b}libgcc.a@{ub} and Cross-Compilers
----------------------------

   Code compiled by GNU CC uses certain runtime support functions
implicitly.  Some of these functions can be compiled successfully with
GNU CC itself, but a few cannot be.  These problem functions are in the
source file @{b}libgcc1.c@{ub}; the library made from them is called @{b}libgcc1.a@{ub}.

   When you build a native compiler, these functions are compiled with
some other compiler-the one that you use for bootstrapping GNU CC.
Presumably it knows how to open code these operations, or else knows how
to call the run-time emulation facilities that the machine comes with.
But this approach doesn't work for building a cross-compiler.  The
compiler that you use for building knows about the host system, not the
target system.

   So, when you build a cross-compiler you have to supply a suitable
library @{b}libgcc1.a@{ub} that does the job it is expected to do.

   To compile @{b}libgcc1.c@{ub} with the cross-compiler itself does not work.
The functions in this file are supposed to implement arithmetic
operations that GNU CC does not know how to open code for your target
machine.  If these functions are compiled with GNU CC itself, they will
compile into infinite recursion.

   On any given target, most of these functions are not needed.  If GNU
CC can open code an arithmetic operation, it will not call these
functions to perform the operation.  It is possible that on your target
machine, none of these functions is needed.  If so, you can supply an
empty library as @{b}libgcc1.a@{ub}.

   Many targets need library support only for multiplication and
division.  If you are linking with a library that contains functions for
multiplication and division, you can tell GNU CC to call them directly
by defining the macros @{b}MULSI3_LIBCALL@{ub}, and the like.  These macros need
to be defined in the target description macro file.  For some targets,
they are defined already.  This may be sufficient to avoid the need for
libgcc1.a; if so, you can supply an empty library.

   Some targets do not have floating point instructions; they need other
functions in @{b}libgcc1.a@{ub}, which do floating arithmetic.  Recent versions
of GNU CC have a file which emulates floating point.  With a certain
amount of work, you should be able to construct a floating point
emulator that can be used as @{b}libgcc1.a@{ub}.  Perhaps future versions will
contain code to do this automatically and conveniently.  That depends
on whether someone wants to implement it.

   Some embedded targets come with all the necessary @{b}libgcc1.a@{ub} routines
written in C or assembler.  These targets build @{b}libgcc1.a@{ub} automatically
and you do not need to do anything special for them.  Other embedded
targets do not need any @{b}libgcc1.a@{ub} routines since all the necessary
operations are supported by the hardware.

   If your target system has another C compiler, you can configure GNU
CC as a native compiler on that machine, build just @{b}libgcc1.a@{ub} with @{b}make
libgcc1.a@{ub} on that machine, and use the resulting file with the
cross-compiler.  To do this, execute the following on the target
machine:

     cd TARGET-BUILD-DIR
     ./configure --host=sparc --target=sun3
     make libgcc1.a

And then this on the host machine:

     ftp TARGET-MACHINE
     binary
     cd TARGET-BUILD-DIR
     get libgcc1.a
     quit

   Another way to provide the functions you need in @{b}libgcc1.a@{ub} is to
define the appropriate @{b}perform_...@{ub} macros for those functions.  If
these definitions do not use the C arithmetic operators that they are
meant to implement, you should be able to compile them with the
cross-compiler you are building.  (If these definitions already exist
for your target file, then you are all set.)

   To build @{b}libgcc1.a@{ub} using the perform macros, use @{b}LIBGCC1=libgcc1.a
OLDCC=./xgcc@{ub} when building the compiler.  Otherwise, you should place
your replacement library under the name @{b}libgcc1.a@{ub} in the directory in
which you will build the cross-compiler, before you run @{b}make@{ub}.


@endnode

@node "Cross Headers" "gcc.guide/Cross Headers"
@next "Cross Runtime"
@prev "Tools and Libraries"
@toc "Cross-Compiler"

Cross-Compilers and Header Files
--------------------------------

   If you are cross-compiling a standalone program or a program for an
embedded system, then you may not need any header files except the few
that are part of GNU CC (and those of your program).  However, if you
intend to link your program with a standard C library such as @{b}libc.a@{ub},
then you probably need to compile with the header files that go with
the library you use.

   The GNU C compiler does not come with these files, because (1) they
are system-specific, and (2) they belong in a C library, not in a
compiler.

   If the GNU C library supports your target machine, then you can get
the header files from there (assuming you actually use the GNU library
when you link your program).

   If your target machine comes with a C compiler, it probably comes
with suitable header files also.  If you make these files accessible
from the host machine, the cross-compiler can use them also.

   Otherwise, you're on your own in finding header files to use when
cross-compiling.

   When you have found suitable header files, put them in the directory
@{b}/usr/local/TARGET/include@{ub}, before building the cross compiler.  Then
installation will run fixincludes properly and install the corrected
versions of the header files where the compiler will use them.

   Provide the header files before you build the cross-compiler, because
the build stage actually runs the cross-compiler to produce parts of
@{b}libgcc.a@{ub}.  (These are the parts that @{i}can@{ui} be compiled with GNU CC.)
Some of them need suitable header files.

   Here's an example showing how to copy the header files from a target
machine.  On the target machine, do this:

     (cd /usr/include; tar cf - .) > tarfile

   Then, on the host machine, do this:

     ftp TARGET-MACHINE
     lcd /usr/local/TARGET/include
     get tarfile
     quit
     tar xf tarfile


@endnode

@node "Build Cross" "gcc.guide/Build Cross"
@prev "Cross Runtime"
@toc "Cross-Compiler"

Actually Building the Cross-Compiler
------------------------------------

   Now you can proceed just as for compiling a single-machine compiler
through the step of building stage 1.  If you have not provided some
sort of @{b}libgcc1.a@{ub}, then compilation will give up at the point where it
needs that file, printing a suitable error message.  If you do provide
@{b}libgcc1.a@{ub}, then building the compiler will automatically compile and
link a test program called @{b}libgcc1-test@{ub}; if you get errors in the
linking, it means that not all of the necessary routines in @{b}libgcc1.a@{ub}
are available.

   You must provide the header file @{b}float.h@{ub}.  One way to do this is to
compile @{b}enquire@{ub} and run it on your target machine.  The job of @{b}enquire@{ub}
is to run on the target machine and figure out by experiment the nature
of its floating point representation.  @{b}enquire@{ub} records its findings in
the header file @{b}float.h@{ub}.  If you can't produce this file by running
@{b}enquire@{ub} on the target machine, then you will need to come up with a
suitable @{b}float.h@{ub} in some other way (or else, avoid using it in your
programs).

   Do not try to build stage 2 for a cross-compiler.  It doesn't work to
rebuild GNU CC as a cross-compiler using the cross-compiler, because
that would produce a program that runs on the target machine, not on the
host.  For example, if you compile a 386-to-68030 cross-compiler with
itself, the result will not be right either for the 386 (because it was
compiled into 68030 code) or for the 68030 (because it was configured
for a 386 as the host).  If you want to compile GNU CC into 68030 code,
whether you compile it on a 68030 or with a cross-compiler on a 386, you
must specify a 68030 as the host when you configure it.

   To install the cross-compiler, use @{b}make install@{ub}, as usual.


@endnode

@node "Sun Install" "gcc.guide/Sun Install"
@next "VMS Install"
@prev "Cross-Compiler"
@toc "Installation"

Installing GNU CC on the Sun
============================

   On Solaris, do not use the linker or other tools in @{b}/usr/ucb@{ub} to
build GNU CC.  Use @{b}/usr/ccs/bin@{ub}.

   If the assembler reports @{b}Error: misaligned data@{ub} when bootstrapping,
you are probably using an obsolete version of the GNU assembler.
Upgrade to the latest version of GNU @{b}binutils@{ub}, or use the Solaris
assembler.

   Make sure the environment variable @{b}FLOAT_OPTION@{ub} is not set when you
compile @{b}libgcc.a@{ub}.  If this option were set to @{b}f68881@{ub} when @{b}libgcc.a@{ub} is
compiled, the resulting code would demand to be linked with a special
startup file and would not link properly without special pains.

   There is a bug in @{b}alloca@{ub} in certain versions of the Sun library.  To
avoid this bug, install the binaries of GNU CC that were compiled by
GNU CC.  They use @{b}alloca@{ub} as a built-in function and never the one in
the library.

   Some versions of the Sun compiler crash when compiling GNU CC.  The
problem is a segmentation fault in cpp.  This problem seems to be due to
the bulk of data in the environment variables.  You may be able to avoid
it by using the following command to compile GNU CC with Sun CC:

     make CC="TERMCAP=x OBJS=x LIBFUNCS=x STAGESTUFF=x cc"

   SunOS 4.1.3 and 4.1.3_U1 have bugs that can cause intermittent core
dumps when compiling GNU CC.  A common symptom is an internal compiler
error which does not recur if you run it again.  To fix the problem,
install Sun recommended patch 100726 (for SunOS 4.1.3) or 101508 (for
SunOS 4.1.3_U1), or upgrade to a later SunOS release.


@endnode

@node "VMS Install" "gcc.guide/VMS Install"
@next "Collect2"
@prev "Sun Install"
@toc "Installation"

Installing GNU CC on VMS
========================

   The VMS version of GNU CC is distributed in a backup saveset
containing both source code and precompiled binaries.

   To install the @{b}gcc@{ub} command so you can use the compiler easily, in
the same manner as you use the VMS C compiler, you must install the VMS
CLD file for GNU CC as follows:

  1. Define the VMS logical names @{b}GNU_CC@{ub} and @{b}GNU_CC_INCLUDE@{ub} to point to
     the directories where the GNU CC executables (@{b}gcc-cpp.exe@{ub},
     @{b}gcc-cc1.exe@{ub}, etc.) and the C include files are kept respectively.
     This should be done with the commands:

          $ assign /system /translation=concealed -
            disk:[gcc.] gnu_cc
          $ assign /system /translation=concealed -
            disk:[gcc.include.] gnu_cc_include

     with the appropriate disk and directory names.  These commands can
     be placed in your system startup file so they will be executed
     whenever the machine is rebooted.  You may, if you choose, do this
     via the @{b}GCC_INSTALL.COM@{ub} script in the @{b}[GCC]@{ub} directory.

  2. Install the @{b}GCC@{ub} command with the command line:

          $ set command /table=sys$common:[syslib]dcltables -
            /output=sys$common:[syslib]dcltables gnu_cc:[000000]gcc
          $ install replace sys$common:[syslib]dcltables

  3. To install the help file, do the following:

          $ library/help sys$library:helplib.hlb gcc.hlp

     Now you can invoke the compiler with a command like @{b}gcc /verbose
     file.c@{ub}, which is equivalent to the command @{b}gcc -v -c file.c@{ub} in
     Unix.

   If you wish to use GNU C++ you must first install GNU CC, and then
perform the following steps:

  1. Define the VMS logical name @{b}GNU_GXX_INCLUDE@{ub} to point to the
     directory where the preprocessor will search for the C++ header
     files.  This can be done with the command:

          $ assign /system /translation=concealed -
            disk:[gcc.gxx_include.] gnu_gxx_include

     with the appropriate disk and directory name.  If you are going to
     be using a C++ runtime library, this is where its install
     procedure will install its header files.

  2. Obtain the file @{b}gcc-cc1plus.exe@{ub}, and place this in the same
     directory that @{b}gcc-cc1.exe@{ub} is kept.

     The GNU C++ compiler can be invoked with a command like @{b}gcc /plus
     /verbose file.cc@{ub}, which is equivalent to the command @{b}g++ -v -c
     file.cc@{ub} in Unix.

   We try to put corresponding binaries and sources on the VMS
distribution tape.  But sometimes the binaries will be from an older
version than the sources, because we don't always have time to update
them.  (Use the @{b}/version@{ub} option to determine the version number of the
binaries and compare it with the source file @{b}version.c@{ub} to tell whether
this is so.)  In this case, you should use the binaries you get to
recompile the sources.  If you must recompile, here is how:

  1. Execute the command procedure @{b}vmsconfig.com@{ub} to set up the files
     @{b}tm.h@{ub}, @{b}config.h@{ub}, @{b}aux-output.c@{ub}, and @{b}md.@{ub}, and to create files
     @{b}tconfig.h@{ub} and @{b}hconfig.h@{ub}.  This procedure also creates several
     linker option files used by @{b}make-cc1.com@{ub} and a data file used by
     @{b}make-l2.com@{ub}.

          $ \@vmsconfig.com

  2. Setup the logical names and command tables as defined above.  In
     addition, define the VMS logical name @{b}GNU_BISON@{ub} to point at the to
     the directories where the Bison executable is kept.  This should be
     done with the command:

          $ assign /system /translation=concealed -
            disk:[bison.] gnu_bison

     You may, if you choose, use the @{b}INSTALL_BISON.COM@{ub} script in the
     @{b}[BISON]@{ub} directory.

  3. Install the @{b}BISON@{ub} command with the command line:

          $ set command /table=sys$common:[syslib]dcltables -
            /output=sys$common:[syslib]dcltables -
            gnu_bison:[000000]bison
          $ install replace sys$common:[syslib]dcltables

  4. Type @{b}\@make-gcc@{ub} to recompile everything (alternatively, submit the
     file @{b}make-gcc.com@{ub} to a batch queue).  If you wish to build the GNU
     C++ compiler as well as the GNU CC compiler, you must first edit
     @{b}make-gcc.com@{ub} and follow the instructions that appear in the
     comments.

  5. In order to use GCC, you need a library of functions which GCC
     compiled code will call to perform certain tasks, and these
     functions are defined in the file @{b}libgcc2.c@{ub}.  To compile this you
     should use the command procedure @{b}make-l2.com@{ub}, which will generate
     the library @{b}libgcc2.olb@{ub}.  @{b}libgcc2.olb@{ub} should be built using the
     compiler built from the same distribution that @{b}libgcc2.c@{ub} came
     from, and @{b}make-gcc.com@{ub} will automatically do all of this for you.

     To install the library, use the following commands:

          $ library gnu_cc:[000000]gcclib/delete=(new,eprintf)
          $ library gnu_cc:[000000]gcclib/delete=L_*
          $ library libgcc2/extract=*/output=libgcc2.obj
          $ library gnu_cc:[000000]gcclib libgcc2.obj

     The first command simply removes old modules that will be replaced
     with modules from @{b}libgcc2@{ub} under different module names.  The
     modules @{b}new@{ub} and @{b}eprintf@{ub} may not actually be present in your
     @{b}gcclib.olb@{ub}--if the VMS librarian complains about those modules not
     being present, simply ignore the message and continue on with the
     next command.  The second command removes the modules that came
     from the previous version of the library @{b}libgcc2.c@{ub}.

     Whenever you update the compiler on your system, you should also
     update the library with the above procedure.

  6. You may wish to build GCC in such a way that no files are written
     to the directory where the source files reside.  An example would
     be the when the source files are on a read-only disk.  In these
     cases, execute the following DCL commands (substituting your
     actual path names):

          $ assign dua0:[gcc.build_dir.]/translation=concealed, -
                   dua1:[gcc.source_dir.]/translation=concealed  gcc_build
          $ set default gcc_build:[000000]

     where the directory @{b}dua1:[gcc.source_dir]@{ub} contains the source
     code, and the directory @{b}dua0:[gcc.build_dir]@{ub} is meant to contain
     all of the generated object files and executables.  Once you have
     done this, you can proceed building GCC as described above.  (Keep
     in mind that @{b}gcc_build@{ub} is a rooted logical name, and thus the
     device names in each element of the search list must be an actual
     physical device name rather than another rooted logical name).

  7. @{b}If you are building GNU CC with a previous version of GNU CC, you
     also should check to see that you have the newest version of the
     assembler@{ub}.  In particular, GNU CC version 2 treats global constant
     variables slightly differently from GNU CC version 1, and GAS
     version 1.38.1 does not have the patches required to work with GCC
     version 2.  If you use GAS 1.38.1, then @{b}extern const@{ub} variables
     will not have the read-only bit set, and the linker will generate
     warning messages about mismatched psect attributes for these
     variables.  These warning messages are merely a nuisance, and can
     safely be ignored.

     If you are compiling with a version of GNU CC older than 1.33,
     specify @{b}/DEFINE=("inline=")@{ub} as an option in all the compilations.
     This requires editing all the @{b}gcc@{ub} commands in @{b}make-cc1.com@{ub}.  (The
     older versions had problems supporting @{b}inline@{ub}.)  Once you have a
     working 1.33 or newer GNU CC, you can change this file back.

  8. If you want to build GNU CC with the VAX C compiler, you will need
     to make minor changes in @{b}make-cccp.com@{ub} and @{b}make-cc1.com@{ub} to choose
     alternate definitions of @{b}CC@{ub}, @{b}CFLAGS@{ub}, and @{b}LIBS@{ub}.  See comments in
     those files.  However, you must also have a working version of the
     GNU assembler (GNU as, aka GAS) as it is used as the back-end for
     GNU CC to produce binary object modules and is not included in the
     GNU CC sources.  GAS is also needed to compile @{b}libgcc2@{ub} in order to
     build @{b}gcclib@{ub} (see above); @{b}make-l2.com@{ub} expects to be able to find
     it operational in @{b}gnu_cc:[000000]gnu-as.exe@{ub}.

     To use GNU CC on VMS, you need the VMS driver programs @{b}gcc.exe@{ub},
     @{b}gcc.com@{ub}, and @{b}gcc.cld@{ub}.  They are distributed with the VMS binaries
     (@{b}gcc-vms@{ub}) rather than the GNU CC sources.  GAS is also included in
     @{b}gcc-vms@{ub}, as is Bison.

     Once you have successfully built GNU CC with VAX C, you should use
     the resulting compiler to rebuild itself.  Before doing this, be
     sure to restore the @{b}CC@{ub}, @{b}CFLAGS@{ub}, and @{b}LIBS@{ub} definitions in
     @{b}make-cccp.com@{ub} and @{b}make-cc1.com@{ub}.  The second generation compiler
     will be able to take advantage of many optimizations that must be
     suppressed when building with other compilers.

   Under previous versions of GNU CC, the generated code would
occasionally give strange results when linked with the sharable @{b}VAXCRTL@{ub}
library.  Now this should work.

   Even with this version, however, GNU CC itself should not be linked
with the sharable @{b}VAXCRTL@{ub}.  The version of @{b}qsort@{ub} in @{b}VAXCRTL@{ub} has a bug
(known to be present in VMS versions V4.6 through V5.5) which causes
the compiler to fail.

   The executables are generated by @{b}make-cc1.com@{ub} and @{b}make-cccp.com@{ub} use
the object library version of @{b}VAXCRTL@{ub} in order to make use of the @{b}qsort@{ub}
routine in @{b}gcclib.olb@{ub}.  If you wish to link the compiler executables
with the shareable image version of @{b}VAXCRTL@{ub}, you should edit the file
@{b}tm.h@{ub} (created by @{b}vmsconfig.com@{ub}) to define the macro @{b}QSORT_WORKAROUND@{ub}.

@{b}   QSORT_WORKAROUND@{ub} is always defined when GNU CC is compiled with VAX
C, to avoid a problem in case @{b}gcclib.olb@{ub} is not yet available.


@endnode

@node "Collect2" "gcc.guide/Collect2"
@next "Header Dirs"
@prev "VMS Install"
@toc "Installation"

@{b}collect2@{ub}
========

   GNU CC uses a utility called @{b}collect2@{ub} on nearly all systems to
arrange to call various initialization functions at start time.

   The program @{b}collect2@{ub} works by linking the program once and looking
through the linker output file for symbols with particular names
indicating they are constructor functions.  If it finds any, it creates
a new temporary @{b}.c@{ub} file containing a table of them, compiles it, and
links the program a second time including that file.

   The actual calls to the constructors are carried out by a subroutine
called @{b}__main@{ub}, which is called (automatically) at the beginning of the
body of @{b}main@{ub} (provided @{b}main@{ub} was compiled with GNU CC).  Calling @{b}__main@{ub}
is necessary, even when compiling C code, to allow linking C and C++
object code together.  (If you use @{b}-nostdlib@{ub}, you get an unresolved
reference to @{b}__main@{ub}, since it's defined in the standard GCC library.
Include @{b}-lgcc@{ub} at the end of your compiler command line to resolve this
reference.)

   The program @{b}collect2@{ub} is installed as @{b}ld@{ub} in the directory where the
passes of the compiler are installed.  When @{b}collect2@{ub} needs to find the
@{i}real@{ui} @{b}ld@{ub}, it tries the following file names:

   * @{b}real-ld@{ub} in the directories listed in the compiler's search
     directories.

   * @{b}real-ld@{ub} in the directories listed in the environment variable @{b}PATH@{ub}.

   * The file specified in the @{b}REAL_LD_FILE_NAME@{ub} configuration macro,
     if specified.

   * @{b}ld@{ub} in the compiler's search directories, except that @{b}collect2@{ub} will
     not execute itself recursively.

   * @{b}ld@{ub} in @{b}PATH@{ub}.

   "The compiler's search directories" means all the directories where
@{b}gcc@{ub} searches for passes of the compiler.  This includes directories
that you specify with @{b}-B@{ub}.

   Cross-compilers search a little differently:

   * @{b}real-ld@{ub} in the compiler's search directories.

   * @{b}TARGET-real-ld@{ub} in @{b}PATH@{ub}.

   * The file specified in the @{b}REAL_LD_FILE_NAME@{ub} configuration macro,
     if specified.

   * @{b}ld@{ub} in the compiler's search directories.

   * @{b}TARGET-ld@{ub} in @{b}PATH@{ub}.

@{b}   collect2@{ub} explicitly avoids running @{b}ld@{ub} using the file name under
which @{b}collect2@{ub} itself was invoked.  In fact, it remembers up a list of
such names--in case one copy of @{b}collect2@{ub} finds another copy (or
version) of @{b}collect2@{ub} installed as @{b}ld@{ub} in a second place in the search
path.

@{b}   collect2@{ub} searches for the utilities @{b}nm@{ub} and @{b}strip@{ub} using the same
algorithm as above for @{b}ld@{ub}.


@endnode

@node "Header Dirs" "gcc.guide/Header Dirs"
@prev "Collect2"
@toc "Installation"

Standard Header File Directories
================================

@{b}   GCC_INCLUDE_DIR@{ub} means the same thing for native and cross.  It is
where GNU CC stores its private include files, and also where GNU CC
stores the fixed include files.  A cross compiled GNU CC runs
@{b}fixincludes@{ub} on the header files in @{b}$(tooldir)/include@{ub}.  (If the cross
compilation header files need to be fixed, they must be installed
before GNU CC is built.  If the cross compilation header files are
already suitable for ANSI C and GNU CC, nothing special need be done).

@{b}   GPLUS_INCLUDE_DIR@{ub} means the same thing for native and cross.  It is
where @{b}g++@{ub} looks first for header files.  The C++ library installs only
target independent header files in that directory.

@{b}   LOCAL_INCLUDE_DIR@{ub} is used only for a native compiler.  It is
normally @{b}/usr/local/include@{ub}.  GNU CC searches this directory so that
users can install header files in @{b}/usr/local/include@{ub}.

@{b}   CROSS_INCLUDE_DIR@{ub} is used only for a cross compiler.  GNU CC doesn't
install anything there.

@{b}   TOOL_INCLUDE_DIR@{ub} is used for both native and cross compilers.  It is
the place for other packages to install header files that GNU CC will
use.  For a cross-compiler, this is the equivalent of @{b}/usr/include@{ub}.
When you build a cross-compiler, @{b}fixincludes@{ub} processes any header files
in this directory.


@endnode

@node "C Extensions" "gcc.guide/C Extensions"
@next "C++ Extensions"
@prev "Installation"
@toc "Main"

Extensions to the C Language Family
***********************************

   GNU C provides several language features not found in ANSI standard
C.  (The @{b}-pedantic@{ub} option directs GNU CC to print a warning message if
any of these features is used.)  To test for the availability of these
features in conditional compilation, check for a predefined macro
@{b}__GNUC__@{ub}, which is always defined under GNU CC.

   These extensions are available in C and Objective C.  Most of them
are also available in C++.  See @{"Extensions to the C++ Language" link "C++ Extensions"}, for
extensions that apply @{i}only@{ui} to C++.


 @{" Statement Exprs    " link "Statement Exprs"}  Putting statements and declarations inside expressions.
 @{" Local Labels       " link "Local Labels"}  Labels local to a statement-expression.
 @{" Labels as Values   " link "Labels as Values"}  Getting pointers to labels, and computed gotos.
 @{" Nested Functions   " link "Nested Functions"}  As in Algol and Pascal, lexical scoping of functions.
 @{" Constructing Calls " link "Constructing Calls"}  Dispatching a call to another function.
 @{" Naming Types       " link "Naming Types"}  Giving a name to the type of some expression.
 @{" Typeof             " link "Typeof"}  @{b}typeof@{ub}: referring to the type of an expression.
 @{" Lvalues            " link "Lvalues"}  Using @{b}?:@{ub}, @{b},@{ub} and casts in lvalues.
 @{" Conditionals       " link "Conditionals"}  Omitting the middle operand of a @{b}?:@{ub} expression.
 @{" Long Long          " link "Long Long"}  Double-word integers--@{b}long long int@{ub}.
 @{" Complex            " link "Complex"}  Data types for complex numbers.
 @{" Zero Length        " link "Zero Length"}  Zero-length arrays.
 @{" Variable Length    " link "Variable Length"}  Arrays whose length is computed at run time.
 @{" Macro Varargs      " link "Macro Varargs"}  Macros with variable number of arguments.
 @{" Subscripting       " link "Subscripting"}  Any array can be subscripted, even if not an lvalue.
 @{" Pointer Arith      " link "Pointer Arith"}  Arithmetic on @{b}void@{ub}-pointers and function pointers.
 @{" Initializers       " link "Initializers"}  Non-constant initializers.
 @{" Constructors       " link "Constructors"}  Constructor expressions give structures, unions
                         or arrays as values.
 @{" Labeled Elements   " link "Labeled Elements"}  Labeling elements of initializers.
 @{" Cast to Union      " link "Cast to Union"}  Casting to union type from any member of the union.
 @{" Case Ranges        " link "Case Ranges"}  `case 1 ... 9' and such.
 @{" Function Attributes " link "Function Attributes"}  Declaring that functions have no side effects,
                         or that they can never return.
 @{" Function Prototypes " link "Function Prototypes"}  Prototype declarations and old-style definitions.
 @{" C++ Comments       " link "C++ Comments"}  C++ comments are recognized.
 @{" Dollar Signs       " link "Dollar Signs"}  Dollar sign is allowed in identifiers.
 @{" Character Escapes  " link "Character Escapes"}  @{b}\\e@{ub} stands for the character <ESC>.
 @{" Variable Attributes " link "Variable Attributes"}  Specifying attributes of variables.
 @{" Type Attributes    " link "Type Attributes"}  Specifying attributes of types.
 @{" Alignment          " link "Alignment"}  Inquiring about the alignment of a type or variable.
 @{" Inline             " link "Inline"}  Defining inline functions (as fast as macros).
 @{" Extended Asm       " link "Extended Asm"}  Assembler instructions with C expressions as operands.
                         (With them you can define "built-in" functions.)
 @{" Asm Labels         " link "Asm Labels"}  Specifying the assembler name to use for a C symbol.
 @{" Explicit Reg Vars  " link "Explicit Reg Vars"}  Defining variables residing in specified registers.
 @{" Alternate Keywords " link "Alternate Keywords"}  @{b}__const__@{ub}, @{b}__asm__@{ub}, etc., for header files.
 @{" Incomplete Enums   " link "Incomplete Enums"}  @{b}enum foo;@{ub}, with details to follow.
 @{" Function Names     " link "Function Names"}  Printable strings which are the name of the current
			 function.
 @{" Return Address     " link "Return Address"}  Getting the return or frame address of a function.


@endnode

@node "Statement Exprs" "gcc.guide/Statement Exprs"
@next "Local Labels"
@toc "C Extensions"

Statements and Declarations in Expressions
==========================================

   A compound statement enclosed in parentheses may appear as an
expression in GNU C.  This allows you to use loops, switches, and local
variables within an expression.

   Recall that a compound statement is a sequence of statements
surrounded by braces; in this construct, parentheses go around the
braces.  For example:

     ({ int y = foo (); int z;
        if (y > 0) z = y;
        else z = - y;
        z; })

is a valid (though slightly more complex than necessary) expression for
the absolute value of @{b}foo ()@{ub}.

   The last thing in the compound statement should be an expression
followed by a semicolon; the value of this subexpression serves as the
value of the entire construct.  (If you use some other kind of statement
last within the braces, the construct has type @{b}void@{ub}, and thus
effectively no value.)

   This feature is especially useful in making macro definitions "safe"
(so that they evaluate each operand exactly once).  For example, the
"maximum" function is commonly defined as a macro in standard C as
follows:

     #define max(a,b) ((a) > (b) ? (a) : (b))

But this definition computes either A or B twice, with bad results if
the operand has side effects.  In GNU C, if you know the type of the
operands (here let's assume @{b}int@{ub}), you can define the macro safely as
follows:

     #define maxint(a,b) \\
       ({int _a = (a), _b = (b); _a > _b ? _a : _b; })

   Embedded statements are not allowed in constant expressions, such as
the value of an enumeration constant, the width of a bit field, or the
initial value of a static variable.

   If you don't know the type of the operand, you can still do this,
but you must use @{b}typeof@{ub} (see @{"Typeof" link "Typeof"}) or type naming (see
@{"Naming Types" link "Naming Types"}).


@endnode

@node "Local Labels" "gcc.guide/Local Labels"
@next "Labels as Values"
@prev "Statement Exprs"
@toc "C Extensions"

Locally Declared Labels
=======================

   Each statement expression is a scope in which @{i}local labels@{ui} can be
declared.  A local label is simply an identifier; you can jump to it
with an ordinary @{b}goto@{ub} statement, but only from within the statement
expression it belongs to.

   A local label declaration looks like this:

     __label__ LABEL;

or

     __label__ LABEL1, LABEL2, ...;

   Local label declarations must come at the beginning of the statement
expression, right after the @{b}({@{ub}, before any ordinary declarations.

   The label declaration defines the label @{i}name@{ui}, but does not define
the label itself.  You must do this in the usual way, with @{b}LABEL:@{ub},
within the statements of the statement expression.

   The local label feature is useful because statement expressions are
often used in macros.  If the macro contains nested loops, a @{b}goto@{ub} can
be useful for breaking out of them.  However, an ordinary label whose
scope is the whole function cannot be used: if the macro can be
expanded several times in one function, the label will be multiply
defined in that function.  A local label avoids this problem.  For
example:

     #define SEARCH(array, target)                     \\
     ({                                               \\
       __label__ found;                                \\
       typeof (target) _SEARCH_target = (target);      \\
       typeof (*(array)) *_SEARCH_array = (array);     \\
       int i, j;                                       \\
       int value;                                      \\
       for (i = 0; i < max; i++)                       \\
         for (j = 0; j < max; j++)                     \\
           if (_SEARCH_array[i][j] == _SEARCH_target)  \\
             { value = i; goto found; }              \\
       value = -1;                                     \\
      found:                                           \\
       value;                                          \\
     })


@endnode

@node "Labels as Values" "gcc.guide/Labels as Values"
@next "Nested Functions"
@prev "Local Labels"
@toc "C Extensions"

Labels as Values
================

   You can get the address of a label defined in the current function
(or a containing function) with the unary operator @{b}&&@{ub}.  The value has
type @{b}void *@{ub}.  This value is a constant and can be used wherever a
constant of that type is valid.  For example:

     void *ptr;
     ...
     ptr = &&foo;

   To use these values, you need to be able to jump to one.  This is
done with the computed goto statement(1), @{b}goto *EXP;@{ub}.  For example,

     goto *ptr;

Any expression of type @{b}void *@{ub} is allowed.

   One way of using these constants is in initializing a static array
that will serve as a jump table:

     static void *array[] = { &&foo, &&bar, &&hack };

   Then you can select a label with indexing, like this:

     goto *array[i];

Note that this does not check whether the subscript is in bounds--array
indexing in C never does that.

   Such an array of label values serves a purpose much like that of the
@{b}switch@{ub} statement.  The @{b}switch@{ub} statement is cleaner, so use that rather
than an array unless the problem does not fit a @{b}switch@{ub} statement very
well.

   Another use of label values is in an interpreter for threaded code.
The labels within the interpreter function can be stored in the
threaded code for super-fast dispatching.

   You can use this mechanism to jump to code in a different function.
If you do that, totally unpredictable things will happen.  The best way
to avoid this is to store the label address only in automatic variables
and never pass it as an argument.

   ---------- Footnotes ----------

   (1) The analogous feature in Fortran is called an assigned goto, but
that name seems inappropriate in C, where one can do more than simply
store label addresses in label variables.


@endnode

@node "Nested Functions" "gcc.guide/Nested Functions"
@next "Constructing Calls"
@prev "Labels as Values"
@toc "C Extensions"

Nested Functions
================

   A @{i}nested function@{ui} is a function defined inside another function.
(Nested functions are not supported for GNU C++.)  The nested function's
name is local to the block where it is defined.  For example, here we
define a nested function named @{b}square@{ub}, and call it twice:

     foo (double a, double b)
     {
       double square (double z) { return z * z; }
     
       return square (a) + square (b);
     }

   The nested function can access all the variables of the containing
function that are visible at the point of its definition.  This is
called @{i}lexical scoping@{ui}.  For example, here we show a nested function
which uses an inherited variable named @{b}offset@{ub}:

     bar (int *array, int offset, int size)
     {
       int access (int *array, int index)
         { return array[index + offset]; }
       int i;
       ...
       for (i = 0; i < size; i++)
         ... access (array, i) ...
     }

   Nested function definitions are permitted within functions in the
places where variable definitions are allowed; that is, in any block,
before the first statement in the block.

   It is possible to call the nested function from outside the scope of
its name by storing its address or passing the address to another
function:

     hack (int *array, int size)
     {
       void store (int index, int value)
         { array[index] = value; }
     
       intermediate (store, size);
     }

   Here, the function @{b}intermediate@{ub} receives the address of @{b}store@{ub} as an
argument.  If @{b}intermediate@{ub} calls @{b}store@{ub}, the arguments given to @{b}store@{ub}
are used to store into @{b}array@{ub}.  But this technique works only so long as
the containing function (@{b}hack@{ub}, in this example) does not exit.

   If you try to call the nested function through its address after the
containing function has exited, all hell will break loose.  If you try
to call it after a containing scope level has exited, and if it refers
to some of the variables that are no longer in scope, you may be lucky,
but it's not wise to take the risk.  If, however, the nested function
does not refer to anything that has gone out of scope, you should be
safe.

   GNU CC implements taking the address of a nested function using a
technique called @{i}trampolines@{ui}.   A paper describing them is available as
@{b}http://master.debian.org/~karlheg/Usenix88-lexic.pdf@{ub}.

   A nested function can jump to a label inherited from a containing
function, provided the label was explicitly declared in the containing
function (see @{"Local Labels" link "Local Labels"}).  Such a jump returns instantly to the
containing function, exiting the nested function which did the @{b}goto@{ub} and
any intermediate functions as well.  Here is an example:

     bar (int *array, int offset, int size)
     {
       __label__ failure;
       int access (int *array, int index)
         {
           if (index > size)
             goto failure;
           return array[index + offset];
         }
       int i;
       ...
       for (i = 0; i < size; i++)
         ... access (array, i) ...
       ...
       return 0;
     
      /* Control comes here from @{b}access@{ub}
         if it detects an error.  */
      failure:
       return -1;
     }

   A nested function always has internal linkage.  Declaring one with
@{b}extern@{ub} is erroneous.  If you need to declare the nested function before
its definition, use @{b}auto@{ub} (which is otherwise meaningless for function
declarations).

     bar (int *array, int offset, int size)
     {
       __label__ failure;
       auto int access (int *, int);
       ...
       int access (int *array, int index)
         {
           if (index > size)
             goto failure;
           return array[index + offset];
         }
       ...
     }


@endnode

@node "Constructing Calls" "gcc.guide/Constructing Calls"
@next "Naming Types"
@prev "Nested Functions"
@toc "C Extensions"

Constructing Function Calls
===========================

   Using the built-in functions described below, you can record the
arguments a function received, and call another function with the same
arguments, without knowing the number or types of the arguments.

   You can also record the return value of that function call, and
later return that value, without knowing what data type the function
tried to return (as long as your caller expects that data type).

@{b}__builtin_apply_args ()@{ub}
     This built-in function returns a pointer of type @{b}void *@{ub} to data
     describing how to perform a call with the same arguments as were
     passed to the current function.

     The function saves the arg pointer register, structure value
     address, and all registers that might be used to pass arguments to
     a function into a block of memory allocated on the stack.  Then it
     returns the address of that block.

@{b}__builtin_apply (FUNCTION, ARGUMENTS, SIZE)@{ub}
     This built-in function invokes FUNCTION (type @{b}void (*)()@{ub}) with a
     copy of the parameters described by ARGUMENTS (type @{b}void *@{ub}) and
     SIZE (type @{b}int@{ub}).

     The value of ARGUMENTS should be the value returned by
     @{b}__builtin_apply_args@{ub}.  The argument SIZE specifies the size of the
     stack argument data, in bytes.

     This function returns a pointer of type @{b}void *@{ub} to data describing
     how to return whatever value was returned by FUNCTION.  The data
     is saved in a block of memory allocated on the stack.

     It is not always simple to compute the proper value for SIZE.  The
     value is used by @{b}__builtin_apply@{ub} to compute the amount of data
     that should be pushed on the stack and copied from the incoming
     argument area.

@{b}__builtin_return (RESULT)@{ub}
     This built-in function returns the value described by RESULT from
     the containing function.  You should specify, for RESULT, a value
     returned by @{b}__builtin_apply@{ub}.


@endnode

@node "Naming Types" "gcc.guide/Naming Types"
@next "Typeof"
@prev "Constructing Calls"
@toc "C Extensions"

Naming an Expression's Type
===========================

   You can give a name to the type of an expression using a @{b}typedef@{ub}
declaration with an initializer.  Here is how to define NAME as a type
name for the type of EXP:

     typedef NAME = EXP;

   This is useful in conjunction with the statements-within-expressions
feature.  Here is how the two together can be used to define a safe
"maximum" macro that operates on any arithmetic type:

     #define max(a,b) \\
       ({typedef _ta = (a), _tb = (b);  \\
         _ta _a = (a); _tb _b = (b);     \\
         _a > _b ? _a : _b; })

   The reason for using names that start with underscores for the local
variables is to avoid conflicts with variable names that occur within
the expressions that are substituted for @{b}a@{ub} and @{b}b@{ub}.  Eventually we hope
to design a new form of declaration syntax that allows you to declare
variables whose scopes start only after their initializers; this will
be a more reliable way to prevent such conflicts.


@endnode

@node "Typeof" "gcc.guide/Typeof"
@next "Lvalues"
@prev "Naming Types"
@toc "C Extensions"

Referring to a Type with @{b}typeof@{ub}
===============================

   Another way to refer to the type of an expression is with @{b}typeof@{ub}.
The syntax of using of this keyword looks like @{b}sizeof@{ub}, but the
construct acts semantically like a type name defined with @{b}typedef@{ub}.

   There are two ways of writing the argument to @{b}typeof@{ub}: with an
expression or with a type.  Here is an example with an expression:

     typeof (x[0](1))

This assumes that @{b}x@{ub} is an array of functions; the type described is
that of the values of the functions.

   Here is an example with a typename as the argument:

     typeof (int *)

Here the type described is that of pointers to @{b}int@{ub}.

   If you are writing a header file that must work when included in
ANSI C programs, write @{b}__typeof__@{ub} instead of @{b}typeof@{ub}.  See
@{"Alternate Keywords" link "Alternate Keywords"}.

   A @{b}typeof@{ub}-construct can be used anywhere a typedef name could be
used.  For example, you can use it in a declaration, in a cast, or
inside of @{b}sizeof@{ub} or @{b}typeof@{ub}.

   * This declares @{b}y@{ub} with the type of what @{b}x@{ub} points to.

          typeof (*x) y;

   * This declares @{b}y@{ub} as an array of such values.

          typeof (*x) y[4];

   * This declares @{b}y@{ub} as an array of pointers to characters:

          typeof (typeof (char *)[4]) y;

     It is equivalent to the following traditional C declaration:

          char *y[4];

     To see the meaning of the declaration using @{b}typeof@{ub}, and why it
     might be a useful way to write, let's rewrite it with these macros:

          #define pointer(T)  typeof(T *)
          #define array(T, N) typeof(T [N])

     Now the declaration can be rewritten this way:

          array (pointer (char), 4) y;

     Thus, @{b}array (pointer (char), 4)@{ub} is the type of arrays of 4
     pointers to @{b}char@{ub}.


@endnode

@node "Lvalues" "gcc.guide/Lvalues"
@next "Conditionals"
@prev "Typeof"
@toc "C Extensions"

Generalized Lvalues
===================

   Compound expressions, conditional expressions and casts are allowed
as lvalues provided their operands are lvalues.  This means that you
can take their addresses or store values into them.

   Standard C++ allows compound expressions and conditional expressions
as lvalues, and permits casts to reference type, so use of this
extension is deprecated for C++ code.

   For example, a compound expression can be assigned, provided the last
expression in the sequence is an lvalue.  These two expressions are
equivalent:

     (a, b) += 5
     a, (b += 5)

   Similarly, the address of the compound expression can be taken.
These two expressions are equivalent:

     &(a, b)
     a, &b

   A conditional expression is a valid lvalue if its type is not void
and the true and false branches are both valid lvalues.  For example,
these two expressions are equivalent:

     (a ? b : c) = 5
     (a ? b = 5 : (c = 5))

   A cast is a valid lvalue if its operand is an lvalue.  A simple
assignment whose left-hand side is a cast works by converting the
right-hand side first to the specified type, then to the type of the
inner left-hand side expression.  After this is stored, the value is
converted back to the specified type to become the value of the
assignment.  Thus, if @{b}a@{ub} has type @{b}char *@{ub}, the following two expressions
are equivalent:

     (int)a = 5
     (int)(a = (char *)(int)5)

   An assignment-with-arithmetic operation such as @{b}+=@{ub} applied to a cast
performs the arithmetic using the type resulting from the cast, and then
continues as in the previous case.  Therefore, these two expressions are
equivalent:

     (int)a += 5
     (int)(a = (char *)(int) ((int)a + 5))

   You cannot take the address of an lvalue cast, because the use of its
address would not work out coherently.  Suppose that @{b}&(int)f@{ub} were
permitted, where @{b}f@{ub} has type @{b}float@{ub}.  Then the following statement would
try to store an integer bit-pattern where a floating point number
belongs:

     *&(int)f = 1;

   This is quite different from what @{b}(int)f = 1@{ub} would do--that would
convert 1 to floating point and store it.  Rather than cause this
inconsistency, we think it is better to prohibit use of @{b}&@{ub} on a cast.

   If you really do want an @{b}int *@{ub} pointer with the address of @{b}f@{ub}, you
can simply write @{b}(int *)&f@{ub}.


@endnode

@node "Conditionals" "gcc.guide/Conditionals"
@next "Long Long"
@prev "Lvalues"
@toc "C Extensions"

Conditionals with Omitted Operands
==================================

   The middle operand in a conditional expression may be omitted.  Then
if the first operand is nonzero, its value is the value of the
conditional expression.

   Therefore, the expression

     x ? : y

has the value of @{b}x@{ub} if that is nonzero; otherwise, the value of @{b}y@{ub}.

   This example is perfectly equivalent to

     x ? x : y

In this simple case, the ability to omit the middle operand is not
especially useful.  When it becomes useful is when the first operand
does, or may (if it is a macro argument), contain a side effect.  Then
repeating the operand in the middle would perform the side effect
twice.  Omitting the middle operand uses the value already computed
without the undesirable effects of recomputing it.


@endnode

@node "Long Long" "gcc.guide/Long Long"
@next "Complex"
@prev "Conditionals"
@toc "C Extensions"

Double-Word Integers
====================

   GNU C supports data types for integers that are twice as long as
@{b}int@{ub}.  Simply write @{b}long long int@{ub} for a signed integer, or @{b}unsigned long
long int@{ub} for an unsigned integer.  To make an integer constant of type
@{b}long long int@{ub}, add the suffix @{b}LL@{ub} to the integer.  To make an integer
constant of type @{b}unsigned long long int@{ub}, add the suffix @{b}ULL@{ub} to the
integer.

   You can use these types in arithmetic like any other integer types.
Addition, subtraction, and bitwise boolean operations on these types
are open-coded on all types of machines.  Multiplication is open-coded
if the machine supports fullword-to-doubleword a widening multiply
instruction.  Division and shifts are open-coded only on machines that
provide special support.  The operations that are not open-coded use
special library routines that come with GNU CC.

   There may be pitfalls when you use @{b}long long@{ub} types for function
arguments, unless you declare function prototypes.  If a function
expects type @{b}int@{ub} for its argument, and you pass a value of type @{b}long
long int@{ub}, confusion will result because the caller and the subroutine
will disagree about the number of bytes for the argument.  Likewise, if
the function expects @{b}long long int@{ub} and you pass @{b}int@{ub}.  The best way to
avoid such problems is to use prototypes.


@endnode

@node "Complex" "gcc.guide/Complex"
@next "Zero Length"
@prev "Long Long"
@toc "C Extensions"

Complex Numbers
===============

   GNU C supports complex data types.  You can declare both complex
integer types and complex floating types, using the keyword @{b}__complex__@{ub}.

   For example, @{b}__complex__ double x;@{ub} declares @{b}x@{ub} as a variable whose
real part and imaginary part are both of type @{b}double@{ub}.  @{b}__complex__
short int y;@{ub} declares @{b}y@{ub} to have real and imaginary parts of type @{b}short
int@{ub}; this is not likely to be useful, but it shows that the set of
complex types is complete.

   To write a constant with a complex data type, use the suffix @{b}i@{ub} or @{b}j@{ub}
(either one; they are equivalent).  For example, @{b}2.5fi@{ub} has type
@{b}__complex__ float@{ub} and @{b}3i@{ub} has type @{b}__complex__ int@{ub}.  Such a constant
always has a pure imaginary value, but you can form any complex value
you like by adding one to a real constant.

   To extract the real part of a complex-valued expression EXP, write
@{b}__real__ EXP@{ub}.  Likewise, use @{b}__imag__@{ub} to extract the imaginary part.

   The operator @{b}~@{ub} performs complex conjugation when used on a value
with a complex type.

   GNU CC can allocate complex automatic variables in a noncontiguous
fashion; it's even possible for the real part to be in a register while
the imaginary part is on the stack (or vice-versa).  None of the
supported debugging info formats has a way to represent noncontiguous
allocation like this, so GNU CC describes a noncontiguous complex
variable as if it were two separate variables of noncomplex type.  If
the variable's actual name is @{b}foo@{ub}, the two fictitious variables are
named @{b}foo$real@{ub} and @{b}foo$imag@{ub}.  You can examine and set these two
fictitious variables with your debugger.

   A future version of GDB will know how to recognize such pairs and
treat them as a single variable with a complex type.


@endnode

@node "Zero Length" "gcc.guide/Zero Length"
@next "Variable Length"
@prev "Complex"
@toc "C Extensions"

Arrays of Length Zero
=====================

   Zero-length arrays are allowed in GNU C.  They are very useful as
the last element of a structure which is really a header for a
variable-length object:

     struct line {
       int length;
       char contents[0];
     };
     
     {
       struct line *thisline = (struct line *)
         malloc (sizeof (struct line) + this_length);
       thisline->length = this_length;
     }

   In standard C, you would have to give @{b}contents@{ub} a length of 1, which
means either you waste space or complicate the argument to @{b}malloc@{ub}.


@endnode

@node "Variable Length" "gcc.guide/Variable Length"
@next "Macro Varargs"
@prev "Zero Length"
@toc "C Extensions"

Arrays of Variable Length
=========================

   Variable-length automatic arrays are allowed in GNU C.  These arrays
are declared like any other automatic arrays, but with a length that is
not a constant expression.  The storage is allocated at the point of
declaration and deallocated when the brace-level is exited.  For
example:

     FILE *
     concat_fopen (char *s1, char *s2, char *mode)
     {
       char str[strlen (s1) + strlen (s2) + 1];
       strcpy (str, s1);
       strcat (str, s2);
       return fopen (str, mode);
     }

   Jumping or breaking out of the scope of the array name deallocates
the storage.  Jumping into the scope is not allowed; you get an error
message for it.

   You can use the function @{b}alloca@{ub} to get an effect much like
variable-length arrays.  The function @{b}alloca@{ub} is available in many other
C implementations (but not in all).  On the other hand, variable-length
arrays are more elegant.

   There are other differences between these two methods.  Space
allocated with @{b}alloca@{ub} exists until the containing @{i}function@{ui} returns.
The space for a variable-length array is deallocated as soon as the
array name's scope ends.  (If you use both variable-length arrays and
@{b}alloca@{ub} in the same function, deallocation of a variable-length array
will also deallocate anything more recently allocated with @{b}alloca@{ub}.)

   You can also use variable-length arrays as arguments to functions:

     struct entry
     tester (int len, char data[len][len])
     {
       ...
     }

   The length of an array is computed once when the storage is allocated
and is remembered for the scope of the array in case you access it with
@{b}sizeof@{ub}.

   If you want to pass the array first and the length afterward, you can
use a forward declaration in the parameter list--another GNU extension.

     struct entry
     tester (int len; char data[len][len], int len)
     {
       ...
     }

   The @{b}int len@{ub} before the semicolon is a @{i}parameter forward declaration@{ui},
and it serves the purpose of making the name @{b}len@{ub} known when the
declaration of @{b}data@{ub} is parsed.

   You can write any number of such parameter forward declarations in
the parameter list.  They can be separated by commas or semicolons, but
the last one must end with a semicolon, which is followed by the "real"
parameter declarations.  Each forward declaration must match a "real"
declaration in parameter name and data type.


@endnode

@node "Macro Varargs" "gcc.guide/Macro Varargs"
@next "Subscripting"
@prev "Variable Length"
@toc "C Extensions"

Macros with Variable Numbers of Arguments
=========================================

   In GNU C, a macro can accept a variable number of arguments, much as
a function can.  The syntax for defining the macro looks much like that
used for a function.  Here is an example:

     #define eprintf(format, args...)  \\
      fprintf (stderr, format , ## args)

   Here @{b}args@{ub} is a @{i}rest argument@{ui}: it takes in zero or more arguments, as
many as the call contains.  All of them plus the commas between them
form the value of @{b}args@{ub}, which is substituted into the macro body where
@{b}args@{ub} is used.  Thus, we have this expansion:

     eprintf ("%s:%d: ", input_file_name, line_number)
     ==>
     fprintf (stderr, "%s:%d: " , input_file_name, line_number)

Note that the comma after the string constant comes from the definition
of @{b}eprintf@{ub}, whereas the last comma comes from the value of @{b}args@{ub}.

   The reason for using @{b}##@{ub} is to handle the case when @{b}args@{ub} matches no
arguments at all.  In this case, @{b}args@{ub} has an empty value.  In this
case, the second comma in the definition becomes an embarrassment: if
it got through to the expansion of the macro, we would get something
like this:

     fprintf (stderr, "success!\\n" , )

which is invalid C syntax.  @{b}##@{ub} gets rid of the comma, so we get the
following instead:

     fprintf (stderr, "success!\\n")

   This is a special feature of the GNU C preprocessor: @{b}##@{ub} before a
rest argument that is empty discards the preceding sequence of
non-whitespace characters from the macro definition.  (If another macro
argument precedes, none of it is discarded.)

   It might be better to discard the last preprocessor token instead of
the last preceding sequence of non-whitespace characters; in fact, we
may someday change this feature to do so.  We advise you to write the
macro definition so that the preceding sequence of non-whitespace
characters is just a single token, so that the meaning will not change
if we change the definition of this feature.


@endnode

@node "Subscripting" "gcc.guide/Subscripting"
@next "Pointer Arith"
@prev "Macro Varargs"
@toc "C Extensions"

Non-Lvalue Arrays May Have Subscripts
=====================================

   Subscripting is allowed on arrays that are not lvalues, even though
the unary @{b}&@{ub} operator is not.  For example, this is valid in GNU C though
not valid in other C dialects:

     struct foo {int a[4];};
     
     struct foo f();
     
     bar (int index)
     {
       return f().a[index];
     }


@endnode

@node "Pointer Arith" "gcc.guide/Pointer Arith"
@next "Initializers"
@prev "Subscripting"
@toc "C Extensions"

Arithmetic on @{b}void@{ub}- and Function-Pointers
=========================================

   In GNU C, addition and subtraction operations are supported on
pointers to @{b}void@{ub} and on pointers to functions.  This is done by
treating the size of a @{b}void@{ub} or of a function as 1.

   A consequence of this is that @{b}sizeof@{ub} is also allowed on @{b}void@{ub} and on
function types, and returns 1.

   The option @{b}-Wpointer-arith@{ub} requests a warning if these extensions
are used.


@endnode

@node "Initializers" "gcc.guide/Initializers"
@next "Constructors"
@prev "Pointer Arith"
@toc "C Extensions"

Non-Constant Initializers
=========================

   As in standard C++, the elements of an aggregate initializer for an
automatic variable are not required to be constant expressions in GNU C.
Here is an example of an initializer with run-time varying elements:

     foo (float f, float g)
     {
       float beat_freqs[2] = { f-g, f+g };
       ...
     }


@endnode

@node "Constructors" "gcc.guide/Constructors"
@next "Labeled Elements"
@prev "Initializers"
@toc "C Extensions"

Constructor Expressions
=======================

   GNU C supports constructor expressions.  A constructor looks like a
cast containing an initializer.  Its value is an object of the type
specified in the cast, containing the elements specified in the
initializer.

   Usually, the specified type is a structure.  Assume that @{b}struct foo@{ub}
and @{b}structure@{ub} are declared as shown:

     struct foo {int a; char b[2];} structure;

Here is an example of constructing a @{b}struct foo@{ub} with a constructor:

     structure = ((struct foo) {x + y, 'a', 0});

This is equivalent to writing the following:

     {
       struct foo temp = {x + y, 'a', 0};
       structure = temp;
     }

   You can also construct an array.  If all the elements of the
constructor are (made up of) simple constant expressions, suitable for
use in initializers, then the constructor is an lvalue and can be
coerced to a pointer to its first element, as shown here:

     char **foo = (char *[]) { "x", "y", "z" };

   Array constructors whose elements are not simple constants are not
very useful, because the constructor is not an lvalue.  There are only
two valid ways to use it: to subscript it, or initialize an array
variable with it.  The former is probably slower than a @{b}switch@{ub}
statement, while the latter does the same thing an ordinary C
initializer would do.  Here is an example of subscripting an array
constructor:

     output = ((int[]) { 2, x, 28 }) [input];

   Constructor expressions for scalar types and union types are is also
allowed, but then the constructor expression is equivalent to a cast.


@endnode

@node "Labeled Elements" "gcc.guide/Labeled Elements"
@next "Cast to Union"
@prev "Constructors"
@toc "C Extensions"

Labeled Elements in Initializers
================================

   Standard C requires the elements of an initializer to appear in a
fixed order, the same as the order of the elements in the array or
structure being initialized.

   In GNU C you can give the elements in any order, specifying the array
indices or structure field names they apply to.  This extension is not
implemented in GNU C++.

   To specify an array index, write @{b}[INDEX]@{ub} or @{b}[INDEX] =@{ub} before the
element value.  For example,

     int a[6] = { [4] 29, [2] = 15 };

is equivalent to

     int a[6] = { 0, 0, 15, 0, 29, 0 };

The index values must be constant expressions, even if the array being
initialized is automatic.

   To initialize a range of elements to the same value, write @{b}[FIRST
... LAST] = VALUE@{ub}.  For example,

     int widths[] = { [0 ... 9] = 1, [10 ... 99] = 2, [100] = 3 };

Note that the length of the array is the highest value specified plus
one.

   In a structure initializer, specify the name of a field to initialize
with @{b}FIELDNAME:@{ub} before the element value.  For example, given the
following structure,

     struct point { int x, y; };

the following initialization

     struct point p = { y: yvalue, x: xvalue };

is equivalent to

     struct point p = { xvalue, yvalue };

   Another syntax which has the same meaning is @{b}.FIELDNAME =@{ub}., as shown
here:

     struct point p = { .y = yvalue, .x = xvalue };

   You can also use an element label (with either the colon syntax or
the period-equal syntax) when initializing a union, to specify which
element of the union should be used.  For example,

     union foo { int i; double d; };
     
     union foo f = { d: 4 };

will convert 4 to a @{b}double@{ub} to store it in the union using the second
element.  By contrast, casting 4 to type @{b}union foo@{ub} would store it into
the union as the integer @{b}i@{ub}, since it is an integer.  (See
@{"Cast to Union" link "Cast to Union"}.)

   You can combine this technique of naming elements with ordinary C
initialization of successive elements.  Each initializer element that
does not have a label applies to the next consecutive element of the
array or structure.  For example,

     int a[6] = { [1] = v1, v2, [4] = v4 };

is equivalent to

     int a[6] = { 0, v1, v2, 0, v4, 0 };

   Labeling the elements of an array initializer is especially useful
when the indices are characters or belong to an @{b}enum@{ub} type.  For example:

     int whitespace[256]
       = { [' '] = 1, ['\\t'] = 1, ['\\h'] = 1,
           ['\\f'] = 1, ['\\n'] = 1, ['\\r'] = 1 };


@endnode

@node "Case Ranges" "gcc.guide/Case Ranges"
@next "Function Attributes"
@prev "Cast to Union"
@toc "C Extensions"

Case Ranges
===========

   You can specify a range of consecutive values in a single @{b}case@{ub} label,
like this:

     case LOW ... HIGH:

This has the same effect as the proper number of individual @{b}case@{ub}
labels, one for each integer value from LOW to HIGH, inclusive.

   This feature is especially useful for ranges of ASCII character
codes:

     case 'A' ... 'Z':

@{b}   Be careful:@{ub} Write spaces around the @{b}...@{ub}, for otherwise it may be
parsed wrong when you use it with integer values.  For example, write
this:

     case 1 ... 5:

rather than this:

     case 1...5:


@endnode

@node "Cast to Union" "gcc.guide/Cast to Union"
@next "Case Ranges"
@prev "Labeled Elements"
@toc "C Extensions"

Cast to a Union Type
====================

   A cast to union type is similar to other casts, except that the type
specified is a union type.  You can specify the type either with @{b}union
TAG@{ub} or with a typedef name.  A cast to union is actually a constructor
though, not a cast, and hence does not yield an lvalue like normal
casts.  (See @{"Constructors" link "Constructors"}.)

   The types that may be cast to the union type are those of the members
of the union.  Thus, given the following union and variables:

     union foo { int i; double d; };
     int x;
     double y;

both @{b}x@{ub} and @{b}y@{ub} can be cast to type @{b}union@{ub} foo.

   Using the cast as the right-hand side of an assignment to a variable
of union type is equivalent to storing in a member of the union:

     union foo u;
     ...
     u = (union foo) x  ==  u.i = x
     u = (union foo) y  ==  u.d = y

   You can also use the union cast as a function argument:

     void hack (union foo);
     ...
     hack ((union foo) x);


@endnode

@node "Function Attributes" "gcc.guide/Function Attributes"
@next "Function Prototypes"
@prev "Case Ranges"
@toc "C Extensions"

Declaring Attributes of Functions
=================================

   In GNU C, you declare certain things about functions called in your
program which help the compiler optimize function calls and check your
code more carefully.

   The keyword @{b}__attribute__@{ub} allows you to specify special attributes
when making a declaration.  This keyword is followed by an attribute
specification inside double parentheses.  Eight attributes, @{b}noreturn@{ub},
@{b}const@{ub}, @{b}format@{ub}, @{b}section@{ub}, @{b}constructor@{ub}, @{b}destructor@{ub}, @{b}unused@{ub} and @{b}weak@{ub} are
currently defined for functions.  Other attributes, including @{b}section@{ub}
are supported for variables declarations (see @{"Variable Attributes" link "Variable Attributes"}) and
for types (see @{"Type Attributes" link "Type Attributes"}).

   You may also specify attributes with @{b}__@{ub} preceding and following each
keyword.  This allows you to use them in header files without being
concerned about a possible macro of the same name.  For example, you
may use @{b}__noreturn__@{ub} instead of @{b}noreturn@{ub}.

@{b}noreturn@{ub}
     A few standard library functions, such as @{b}abort@{ub} and @{b}exit@{ub}, cannot
     return.  GNU CC knows this automatically.  Some programs define
     their own functions that never return.  You can declare them
     @{b}noreturn@{ub} to tell the compiler this fact.  For example,

          void fatal () __attribute__ ((noreturn));
          
          void
          fatal (...)
          {
            ... /* Print error message. */ ...
            exit (1);
          }

     The @{b}noreturn@{ub} keyword tells the compiler to assume that @{b}fatal@{ub}
     cannot return.  It can then optimize without regard to what would
     happen if @{b}fatal@{ub} ever did return.  This makes slightly better code.
     More importantly, it helps avoid spurious warnings of
     uninitialized variables.

     Do not assume that registers saved by the calling function are
     restored before calling the @{b}noreturn@{ub} function.

     It does not make sense for a @{b}noreturn@{ub} function to have a return
     type other than @{b}void@{ub}.

     The attribute @{b}noreturn@{ub} is not implemented in GNU C versions
     earlier than 2.5.  An alternative way to declare that a function
     does not return, which works in the current version and in some
     older versions, is as follows:

          typedef void voidfn ();
          
          volatile voidfn fatal;

@{b}const@{ub}
     Many functions do not examine any values except their arguments,
     and have no effects except the return value.  Such a function can
     be subject to common subexpression elimination and loop
     optimization just as an arithmetic operator would be.  These
     functions should be declared with the attribute @{b}const@{ub}.  For
     example,

          int square (int) __attribute__ ((const));

     says that the hypothetical function @{b}square@{ub} is safe to call fewer
     times than the program says.

     The attribute @{b}const@{ub} is not implemented in GNU C versions earlier
     than 2.5.  An alternative way to declare that a function has no
     side effects, which works in the current version and in some older
     versions, is as follows:

          typedef int intfn ();
          
          extern const intfn square;

     This approach does not work in GNU C++ from 2.6.0 on, since the
     language specifies that the @{b}const@{ub} must be attached to the return
     value.

     Note that a function that has pointer arguments and examines the
     data pointed to must @{i}not@{ui} be declared @{b}const@{ub}.  Likewise, a function
     that calls a non-@{b}const@{ub} function usually must not be @{b}const@{ub}.  It
     does not make sense for a @{b}const@{ub} function to return @{b}void@{ub}.

@{b}format (ARCHETYPE, STRING-INDEX, FIRST-TO-CHECK)@{ub}
     The @{b}format@{ub} attribute specifies that a function takes @{b}printf@{ub},
     @{b}scanf@{ub}, or @{b}strftime@{ub} style arguments which should be type-checked
     against a format string.  For example, the declaration:

          extern int
          my_printf (void *my_object, const char *my_format, ...)
                __attribute__ ((format (printf, 2, 3)));

     causes the compiler to check the arguments in calls to @{b}my_printf@{ub}
     for consistency with the @{b}printf@{ub} style format string argument
     @{b}my_format@{ub}.

     The parameter ARCHETYPE determines how the format string is
     interpreted, and should be either @{b}printf@{ub}, @{b}scanf@{ub}, or @{b}strftime@{ub}.  The
     parameter STRING-INDEX specifies which argument is the format
     string argument (starting from 1), while FIRST-TO-CHECK is the
     number of the first argument to check against the format string.
     For functions where the arguments are not available to be checked
     (such as @{b}vprintf@{ub}), specify the third parameter as zero.  In this
     case the compiler only checks the format string for consistency.

     In the example above, the format string (@{b}my_format@{ub}) is the second
     argument of the function @{b}my_print@{ub}, and the arguments to check
     start with the third argument, so the correct parameters for the
     format attribute are 2 and 3.

     The @{b}format@{ub} attribute allows you to identify your own functions
     which take format strings as arguments, so that GNU CC can check
     the calls to these functions for errors.  The compiler always
     checks formats for the ANSI library functions @{b}printf@{ub}, @{b}fprintf@{ub},
     @{b}sprintf@{ub}, @{b}scanf@{ub}, @{b}fscanf@{ub}, @{b}sscanf@{ub}, @{b}strftime@{ub}, @{b}vprintf@{ub}, @{b}vfprintf@{ub} and
     @{b}vsprintf@{ub} whenever such warnings are requested (using @{b}-Wformat@{ub}), so
     there is no need to modify the header file @{b}stdio.h@{ub}.

@{b}format_arg (STRING-INDEX)@{ub}
     The @{b}format_arg@{ub} attribute specifies that a function takes @{b}printf@{ub} or
     @{b}scanf@{ub} style arguments, modifies it (for example, to translate it
     into another language), and passes it to a @{b}printf@{ub} or @{b}scanf@{ub} style
     function.  For example, the declaration:

          extern char *
          my_dgettext (char *my_domain, const char *my_format)
                __attribute__ ((format_arg (2)));

     causes the compiler to check the arguments in calls to @{b}my_dgettext@{ub}
     whose result is passed to a @{b}printf@{ub}, @{b}scanf@{ub}, or @{b}strftime@{ub} type
     function for consistency with the @{b}printf@{ub} style format string
     argument @{b}my_format@{ub}.

     The parameter STRING-INDEX specifies which argument is the format
     string argument (starting from 1).

     The @{b}format-arg@{ub} attribute allows you to identify your own functions
     which modify format strings, so that GNU CC can check the calls to
     @{b}printf@{ub}, @{b}scanf@{ub}, or @{b}strftime@{ub} function whose operands are a call to
     one of your own function.  The compiler always treats @{b}gettext@{ub},
     @{b}dgettext@{ub}, and @{b}dcgettext@{ub} in this manner.

@{b}section ("section-name")@{ub}
     Normally, the compiler places the code it generates in the @{b}text@{ub}
     section.  Sometimes, however, you need additional sections, or you
     need certain particular functions to appear in special sections.
     The @{b}section@{ub} attribute specifies that a function lives in a
     particular section.  For example, the declaration:

          extern void foobar (void) __attribute__ ((section ("bar")));

     puts the function @{b}foobar@{ub} in the @{b}bar@{ub} section.

     Some file formats do not support arbitrary sections so the @{b}section@{ub}
     attribute is not available on all platforms.  If you need to map
     the entire contents of a module to a particular section, consider
     using the facilities of the linker instead.

@{b}constructor@{ub}
@{b}destructor@{ub}
     The @{b}constructor@{ub} attribute causes the function to be called
     automatically before execution enters @{b}main ()@{ub}.  Similarly, the
     @{b}destructor@{ub} attribute causes the function to be called
     automatically after @{b}main ()@{ub} has completed or @{b}exit ()@{ub} has been
     called.  Functions with these attributes are useful for
     initializing data that will be used implicitly during the
     execution of the program.

     These attributes are not currently implemented for Objective C.

@{b}unused@{ub}
     This attribute, attached to a function, means that the function is
     meant to be possibly unused.  GNU CC will not produce a warning
     for this function.  GNU C++ does not currently support this
     attribute as definitions without parameters are valid in C++.

@{b}weak@{ub}
     The @{b}weak@{ub} attribute causes the declaration to be emitted as a weak
     symbol rather than a global.  This is primarily useful in defining
     library functions which can be overridden in user code, though it
     can also be used with non-function declarations.  Weak symbols are
     supported for ELF targets, and also for a.out targets when using
     the GNU assembler and linker.

@{b}alias ("target")@{ub}
     The @{b}alias@{ub} attribute causes the declaration to be emitted as an
     alias for another symbol, which must be specified.  For instance,

          void __f () { /* do something */; }
          void f () __attribute__ ((weak, alias ("__f")));

     declares @{b}f@{ub} to be a weak alias for @{b}__f@{ub}.  In C++, the mangled name
     for the target must be used.

     Not all target machines support this attribute.

@{b}regparm (NUMBER)@{ub}
     On the Intel 386, the @{b}regparm@{ub} attribute causes the compiler to
     pass up to NUMBER integer arguments in registers EAX, EDX, and ECX
     instead of on the stack.  Functions that take a variable number of
     arguments will continue to be passed all of their arguments on the
     stack.

@{b}stdcall@{ub}
     On the Intel 386, the @{b}stdcall@{ub} attribute causes the compiler to
     assume that the called function will pop off the stack space used
     to pass arguments, unless it takes a variable number of arguments.

     The PowerPC compiler for Windows NT currently ignores the @{b}stdcall@{ub}
     attribute.

@{b}cdecl@{ub}
     On the Intel 386, the @{b}cdecl@{ub} attribute causes the compiler to
     assume that the calling function will pop off the stack space used
     to pass arguments.  This is useful to override the effects of the
     @{b}-mrtd@{ub} switch.

     The PowerPC compiler for Windows NT currently ignores the @{b}cdecl@{ub}
     attribute.

@{b}longcall@{ub}
     On the RS/6000 and PowerPC, the @{b}longcall@{ub} attribute causes the
     compiler to always call the function via a pointer, so that
     functions which reside further than 64 megabytes (67,108,864
     bytes) from the current location can be called.

@{b}dllimport@{ub}
     On the PowerPC running Windows NT, the @{b}dllimport@{ub} attribute causes
     the compiler to call the function via a global pointer to the
     function pointer that is set up by the Windows NT dll library.
     The pointer name is formed by combining @{b}__imp_@{ub} and the function
     name.

@{b}dllexport@{ub}
     On the PowerPC running Windows NT, the @{b}dllexport@{ub} attribute causes
     the compiler to provide a global pointer to the function pointer,
     so that it can be called with the @{b}dllimport@{ub} attribute.  The pointer
     name is formed by combining @{b}__imp_@{ub} and the function name.

@{b}exception (EXCEPT-FUNC [, EXCEPT-ARG])@{ub}
     On the PowerPC running Windows NT, the @{b}exception@{ub} attribute causes
     the compiler to modify the structured exception table entry it
     emits for the declared function.  The string or identifier
     EXCEPT-FUNC is placed in the third entry of the structured
     exception table.  It represents a function, which is called by the
     exception handling mechanism if an exception occurs.  If it was
     specified, the string or identifier EXCEPT-ARG is placed in the
     fourth entry of the structured exception table.

@{b}function_vector@{ub}
     Use this option on the H8/300 and H8/300H to indicate that the
     specified function should be called through the function vector.
     Calling a function through the function vector will reduce code
     size, however; the function vector has a limited size (maximum 128
     entries on the H8/300 and 64 entries on the H8/300H) and shares
     space with the interrupt vector.

     You must use GAS and GLD from GNU binutils version 2.7 or later for
     this option to work correctly.

@{b}interrupt_handler@{ub}
     Use this option on the H8/300 and H8/300H to indicate that the
     specified function is an interrupt handler.  The compiler will
     generate function entry and exit sequences suitable for use in an
     interrupt handler when this attribute is present.

@{b}eightbit_data@{ub}
     Use this option on the H8/300 and H8/300H to indicate that the
     specified variable should be placed into the eight bit data
     section.  The compiler will generate more efficient code for
     certain operations on data in the eight bit data area.  Note the
     eight bit data area is limited to 256 bytes of data.

     You must use GAS and GLD from GNU binutils version 2.7 or later for
     this option to work correctly.

@{b}tiny_data@{ub}
     Use this option on the H8/300H to indicate that the specified
     variable should be placed into the tiny data section.  The
     compiler will generate more efficient code for loads and stores on
     data in the tiny data section.  Note the tiny data area is limited
     to slightly under 32kbytes of data.

@{b}interrupt@{ub}
     Use this option on the M32R/D to indicate that the specified
     function is an interrupt handler.  The compiler will generate
     function entry and exit sequences suitable for use in an interrupt
     handler when this attribute is present.

@{b}model (MODEL-NAME)@{ub}
     Use this attribute on the M32R/D to set the addressability of an
     object, and the code generated for a function.  The identifier
     MODEL-NAME is one of @{b}small@{ub}, @{b}medium@{ub}, or @{b}large@{ub}, representing each of
     the code models.

     Small model objects live in the lower 16MB of memory (so that their
     addresses can be loaded with the @{b}ld24@{ub} instruction), and are
     callable with the @{b}bl@{ub} instruction.

     Medium model objects may live anywhere in the 32 bit address space
     (the compiler will generate @{b}seth/add3@{ub} instructions to load their
     addresses), and are callable with the @{b}bl@{ub} instruction.

     Large model objects may live anywhere in the 32 bit address space
     (the compiler will generate @{b}seth/add3@{ub} instructions to load their
     addresses), and may not be reachable with the @{b}bl@{ub} instruction (the
     compiler will generate the much slower @{b}seth/add3/jl@{ub} instruction
     sequence).

   You can specify multiple attributes in a declaration by separating
them by commas within the double parentheses or by immediately
following an attribute declaration with another attribute declaration.

   Some people object to the @{b}__attribute__@{ub} feature, suggesting that
ANSI C's @{b}#pragma@{ub} should be used instead.  There are two reasons for not
doing this.

  1. It is impossible to generate @{b}#pragma@{ub} commands from a macro.

  2. There is no telling what the same @{b}#pragma@{ub} might mean in another
     compiler.

   These two reasons apply to almost any application that might be
proposed for @{b}#pragma@{ub}.  It is basically a mistake to use @{b}#pragma@{ub} for
@{i}anything@{ui}.


@endnode

@node "Function Prototypes" "gcc.guide/Function Prototypes"
@next "C++ Comments"
@prev "Function Attributes"
@toc "C Extensions"

Prototypes and Old-Style Function Definitions
=============================================

   GNU C extends ANSI C to allow a function prototype to override a
later old-style non-prototype definition.  Consider the following
example:

     /* Use prototypes unless the compiler is old-fashioned.  */
     #ifdef __STDC__
     #define P(x) x
     #else
     #define P(x) ()
     #endif
     
     /* Prototype function declaration.  */
     int isroot P((uid_t));
     
     /* Old-style function definition.  */
     int
     isroot (x)   /* ??? lossage here ??? */
          uid_t x;
     {
       return x == 0;
     }

   Suppose the type @{b}uid_t@{ub} happens to be @{b}short@{ub}.  ANSI C does not allow
this example, because subword arguments in old-style non-prototype
definitions are promoted.  Therefore in this example the function
definition's argument is really an @{b}int@{ub}, which does not match the
prototype argument type of @{b}short@{ub}.

   This restriction of ANSI C makes it hard to write code that is
portable to traditional C compilers, because the programmer does not
know whether the @{b}uid_t@{ub} type is @{b}short@{ub}, @{b}int@{ub}, or @{b}long@{ub}.  Therefore, in
cases like these GNU C allows a prototype to override a later old-style
definition.  More precisely, in GNU C, a function prototype argument
type overrides the argument type specified by a later old-style
definition if the former type is the same as the latter type before
promotion.  Thus in GNU C the above example is equivalent to the
following:

     int isroot (uid_t);
     
     int
     isroot (uid_t x)
     {
       return x == 0;
     }

   GNU C++ does not support old-style function definitions, so this
extension is irrelevant.


@endnode

@node "C++ Comments" "gcc.guide/C++ Comments"
@next "Dollar Signs"
@prev "Function Prototypes"
@toc "C Extensions"

C++ Style Comments
==================

   In GNU C, you may use C++ style comments, which start with @{b}//@{ub} and
continue until the end of the line.  Many other C implementations allow
such comments, and they are likely to be in a future C standard.
However, C++ style comments are not recognized if you specify @{b}-ansi@{ub} or
@{b}-traditional@{ub}, since they are incompatible with traditional constructs
like @{b}dividend//*comment*/divisor@{ub}.


@endnode

@node "Dollar Signs" "gcc.guide/Dollar Signs"
@next "Character Escapes"
@prev "C++ Comments"
@toc "C Extensions"

Dollar Signs in Identifier Names
================================

   In GNU C, you may normally use dollar signs in identifier names.
This is because many traditional C implementations allow such
identifiers.  However, dollar signs in identifiers are not supported on
a few target machines, typically because the target assembler does not
allow them.


@endnode

@node "Character Escapes" "gcc.guide/Character Escapes"
@next "Variable Attributes"
@prev "Dollar Signs"
@toc "C Extensions"

The Character <ESC> in Constants
================================

   You can use the sequence @{b}\\e@{ub} in a string or character constant to
stand for the ASCII character <ESC>.


@endnode

@node "Alignment" "gcc.guide/Alignment"
@next "Inline"
@prev "Type Attributes"
@toc "C Extensions"

Inquiring on Alignment of Types or Variables
============================================

   The keyword @{b}__alignof__@{ub} allows you to inquire about how an object is
aligned, or the minimum alignment usually required by a type.  Its
syntax is just like @{b}sizeof@{ub}.

   For example, if the target machine requires a @{b}double@{ub} value to be
aligned on an 8-byte boundary, then @{b}__alignof__ (double)@{ub} is 8.  This is
true on many RISC machines.  On more traditional machine designs,
@{b}__alignof__ (double)@{ub} is 4 or even 2.

   Some machines never actually require alignment; they allow reference
to any data type even at an odd addresses.  For these machines,
@{b}__alignof__@{ub} reports the @{i}recommended@{ui} alignment of a type.

   When the operand of @{b}__alignof__@{ub} is an lvalue rather than a type, the
value is the largest alignment that the lvalue is known to have.  It may
have this alignment as a result of its data type, or because it is part
of a structure and inherits alignment from that structure.  For
example, after this declaration:

     struct foo { int x; char y; } foo1;

the value of @{b}__alignof__ (foo1.y)@{ub} is probably 2 or 4, the same as
@{b}__alignof__ (int)@{ub}, even though the data type of @{b}foo1.y@{ub} does not itself
demand any alignment.

   A related feature which lets you specify the alignment of an object
is @{b}__attribute__ ((aligned (ALIGNMENT)))@{ub}; see the following section.


@endnode

@node "Variable Attributes" "gcc.guide/Variable Attributes"
@next "Type Attributes"
@prev "Character Escapes"
@toc "C Extensions"

Specifying Attributes of Variables
==================================

   The keyword @{b}__attribute__@{ub} allows you to specify special attributes
of variables or structure fields.  This keyword is followed by an
attribute specification inside double parentheses.  Eight attributes
are currently defined for variables: @{b}aligned@{ub}, @{b}mode@{ub}, @{b}nocommon@{ub}, @{b}packed@{ub},
@{b}section@{ub}, @{b}transparent_union@{ub}, @{b}unused@{ub}, and @{b}weak@{ub}.  Other attributes are
available for functions (see @{"Function Attributes" link "Function Attributes"}) and for types (see
@{"Type Attributes" link "Type Attributes"}).

   You may also specify attributes with @{b}__@{ub} preceding and following each
keyword.  This allows you to use them in header files without being
concerned about a possible macro of the same name.  For example, you
may use @{b}__aligned__@{ub} instead of @{b}aligned@{ub}.

@{b}aligned (ALIGNMENT)@{ub}
     This attribute specifies a minimum alignment for the variable or
     structure field, measured in bytes.  For example, the declaration:

          int x __attribute__ ((aligned (16))) = 0;

     causes the compiler to allocate the global variable @{b}x@{ub} on a 16-byte
     boundary.  On a 68040, this could be used in conjunction with an
     @{b}asm@{ub} expression to access the @{b}move16@{ub} instruction which requires
     16-byte aligned operands.

     You can also specify the alignment of structure fields.  For
     example, to create a double-word aligned @{b}int@{ub} pair, you could write:

          struct foo { int x[2] __attribute__ ((aligned (8))); };

     This is an alternative to creating a union with a @{b}double@{ub} member
     that forces the union to be double-word aligned.

     It is not possible to specify the alignment of functions; the
     alignment of functions is determined by the machine's requirements
     and cannot be changed.  You cannot specify alignment for a typedef
     name because such a name is just an alias, not a distinct type.

     As in the preceding examples, you can explicitly specify the
     alignment (in bytes) that you wish the compiler to use for a given
     variable or structure field.  Alternatively, you can leave out the
     alignment factor and just ask the compiler to align a variable or
     field to the maximum useful alignment for the target machine you
     are compiling for.  For example, you could write:

          short array[3] __attribute__ ((aligned));

     Whenever you leave out the alignment factor in an @{b}aligned@{ub} attribute
     specification, the compiler automatically sets the alignment for
     the declared variable or field to the largest alignment which is
     ever used for any data type on the target machine you are
     compiling for.  Doing this can often make copy operations more
     efficient, because the compiler can use whatever instructions copy
     the biggest chunks of memory when performing copies to or from the
     variables or fields that you have aligned this way.

     The @{b}aligned@{ub} attribute can only increase the alignment; but you can
     decrease it by specifying @{b}packed@{ub} as well.  See below.

     Note that the effectiveness of @{b}aligned@{ub} attributes may be limited
     by inherent limitations in your linker.  On many systems, the
     linker is only able to arrange for variables to be aligned up to a
     certain maximum alignment.  (For some linkers, the maximum
     supported alignment may be very very small.)  If your linker is
     only able to align variables up to a maximum of 8 byte alignment,
     then specifying @{b}aligned(16)@{ub} in an @{b}__attribute__@{ub} will still only
     provide you with 8 byte alignment.  See your linker documentation
     for further information.

@{b}mode (MODE)@{ub}
     This attribute specifies the data type for the
     declaration--whichever type corresponds to the mode MODE.  This in
     effect lets you request an integer or floating point type
     according to its width.

     You may also specify a mode of @{b}byte@{ub} or @{b}__byte__@{ub} to indicate the
     mode corresponding to a one-byte integer, @{b}word@{ub} or @{b}__word__@{ub} for the
     mode of a one-word integer, and @{b}pointer@{ub} or @{b}__pointer__@{ub} for the
     mode used to represent pointers.

@{b}nocommon@{ub}
     This attribute specifies requests GNU CC not to place a variable
     "common" but instead to allocate space for it directly.  If you
     specify the @{b}-fno-common@{ub} flag, GNU CC will do this for all
     variables.

     Specifying the @{b}nocommon@{ub} attribute for a variable provides an
     initialization of zeros.  A variable may only be initialized in one
     source file.

@{b}packed@{ub}
     The @{b}packed@{ub} attribute specifies that a variable or structure field
     should have the smallest possible alignment--one byte for a
     variable, and one bit for a field, unless you specify a larger
     value with the @{b}aligned@{ub} attribute.

     Here is a structure in which the field @{b}x@{ub} is packed, so that it
     immediately follows @{b}a@{ub}:

          struct foo
          {
            char a;
            int x[2] __attribute__ ((packed));
          };

@{b}section ("section-name")@{ub}
     Normally, the compiler places the objects it generates in sections
     like @{b}data@{ub} and @{b}bss@{ub}.  Sometimes, however, you need additional
     sections, or you need certain particular variables to appear in
     special sections, for example to map to special hardware.  The
     @{b}section@{ub} attribute specifies that a variable (or function) lives in
     a particular section.  For example, this small program uses
     several specific section names:

          struct duart a __attribute__ ((section ("DUART_A"))) = { 0 };
          struct duart b __attribute__ ((section ("DUART_B"))) = { 0 };
          char stack[10000] __attribute__ ((section ("STACK"))) = { 0 };
          int init_data __attribute__ ((section ("INITDATA"))) = 0;
          
          main()
          {
            /* Initialize stack pointer */
            init_sp (stack + sizeof (stack));
          
            /* Initialize initialized data */
            memcpy (&init_data, &data, &edata - &data);
          
            /* Turn on the serial ports */
            init_duart (&a);
            init_duart (&b);
          }

     Use the @{b}section@{ub} attribute with an @{i}initialized@{ui} definition of a
     @{i}global@{ui} variable, as shown in the example.  GNU CC issues a warning
     and otherwise ignores the @{b}section@{ub} attribute in uninitialized
     variable declarations.

     You may only use the @{b}section@{ub} attribute with a fully initialized
     global definition because of the way linkers work.  The linker
     requires each object be defined once, with the exception that
     uninitialized variables tentatively go in the @{b}common@{ub} (or @{b}bss@{ub})
     section and can be multiply "defined".  You can force a variable
     to be initialized with the @{b}-fno-common@{ub} flag or the @{b}nocommon@{ub}
     attribute.

     Some file formats do not support arbitrary sections so the @{b}section@{ub}
     attribute is not available on all platforms.  If you need to map
     the entire contents of a module to a particular section, consider
     using the facilities of the linker instead.

@{b}transparent_union@{ub}
     This attribute, attached to a function parameter which is a union,
     means that the corresponding argument may have the type of any
     union member, but the argument is passed as if its type were that
     of the first union member.  For more details see See
     @{"Type Attributes" link "Type Attributes"}.  You can also use this attribute on a @{b}typedef@{ub}
     for a union data type; then it applies to all function parameters
     with that type.

@{b}unused@{ub}
     This attribute, attached to a variable, means that the variable is
     meant to be possibly unused.  GNU CC will not produce a warning
     for this variable.

@{b}weak@{ub}
     The @{b}weak@{ub} attribute is described in See @{"Function Attributes" link "Function Attributes"}.

@{b}model (MODEL-NAME)@{ub}
     Use this attribute on the M32R/D to set the addressability of an
     object.  The identifier MODEL-NAME is one of @{b}small@{ub}, @{b}medium@{ub}, or
     @{b}large@{ub}, representing each of the code models.

     Small model objects live in the lower 16MB of memory (so that their
     addresses can be loaded with the @{b}ld24@{ub} instruction).

     Medium and large model objects may live anywhere in the 32 bit
     address space (the compiler will generate @{b}seth/add3@{ub} instructions
     to load their addresses).

   To specify multiple attributes, separate them by commas within the
double parentheses: for example, @{b}__attribute__ ((aligned (16), packed))@{ub}.


@endnode

@node "Type Attributes" "gcc.guide/Type Attributes"
@next "Alignment"
@prev "Variable Attributes"
@toc "C Extensions"

Specifying Attributes of Types
==============================

   The keyword @{b}__attribute__@{ub} allows you to specify special attributes
of @{b}struct@{ub} and @{b}union@{ub} types when you define such types.  This keyword is
followed by an attribute specification inside double parentheses.
Three attributes are currently defined for types: @{b}aligned@{ub}, @{b}packed@{ub}, and
@{b}transparent_union@{ub}.  Other attributes are defined for functions (see
@{"Function Attributes" link "Function Attributes"}) and for variables (see @{"Variable Attributes" link "Variable Attributes"}).

   You may also specify any one of these attributes with @{b}__@{ub} preceding
and following its keyword.  This allows you to use these attributes in
header files without being concerned about a possible macro of the same
name.  For example, you may use @{b}__aligned__@{ub} instead of @{b}aligned@{ub}.

   You may specify the @{b}aligned@{ub} and @{b}transparent_union@{ub} attributes either
in a @{b}typedef@{ub} declaration or just past the closing curly brace of a
complete enum, struct or union type @{i}definition@{ui} and the @{b}packed@{ub} attribute
only past the closing brace of a definition.

   You may also specify attributes between the enum, struct or union
tag and the name of the type rather than after the closing brace.

@{b}aligned (ALIGNMENT)@{ub}
     This attribute specifies a minimum alignment (in bytes) for
     variables of the specified type.  For example, the declarations:

          struct S { short f[3]; } __attribute__ ((aligned (8)));
          typedef int more_aligned_int __attribute__ ((aligned (8)));

     force the compiler to insure (as far as it can) that each variable
     whose type is @{b}struct S@{ub} or @{b}more_aligned_int@{ub} will be allocated and
     aligned @{i}at least@{ui} on a 8-byte boundary.  On a Sparc, having all
     variables of type @{b}struct S@{ub} aligned to 8-byte boundaries allows the
     compiler to use the @{b}ldd@{ub} and @{b}std@{ub} (doubleword load and store)
     instructions when copying one variable of type @{b}struct S@{ub} to
     another, thus improving run-time efficiency.

     Note that the alignment of any given @{b}struct@{ub} or @{b}union@{ub} type is
     required by the ANSI C standard to be at least a perfect multiple
     of the lowest common multiple of the alignments of all of the
     members of the @{b}struct@{ub} or @{b}union@{ub} in question.  This means that you
     @{i}can@{ui} effectively adjust the alignment of a @{b}struct@{ub} or @{b}union@{ub} type by
     attaching an @{b}aligned@{ub} attribute to any one of the members of such a
     type, but the notation illustrated in the example above is a more
     obvious, intuitive, and readable way to request the compiler to
     adjust the alignment of an entire @{b}struct@{ub} or @{b}union@{ub} type.

     As in the preceding example, you can explicitly specify the
     alignment (in bytes) that you wish the compiler to use for a given
     @{b}struct@{ub} or @{b}union@{ub} type.  Alternatively, you can leave out the
     alignment factor and just ask the compiler to align a type to the
     maximum useful alignment for the target machine you are compiling
     for.  For example, you could write:

          struct S { short f[3]; } __attribute__ ((aligned));

     Whenever you leave out the alignment factor in an @{b}aligned@{ub}
     attribute specification, the compiler automatically sets the
     alignment for the type to the largest alignment which is ever used
     for any data type on the target machine you are compiling for.
     Doing this can often make copy operations more efficient, because
     the compiler can use whatever instructions copy the biggest chunks
     of memory when performing copies to or from the variables which
     have types that you have aligned this way.

     In the example above, if the size of each @{b}short@{ub} is 2 bytes, then
     the size of the entire @{b}struct S@{ub} type is 6 bytes.  The smallest
     power of two which is greater than or equal to that is 8, so the
     compiler sets the alignment for the entire @{b}struct S@{ub} type to 8
     bytes.

     Note that although you can ask the compiler to select a
     time-efficient alignment for a given type and then declare only
     individual stand-alone objects of that type, the compiler's
     ability to select a time-efficient alignment is primarily useful
     only when you plan to create arrays of variables having the
     relevant (efficiently aligned) type.  If you declare or use arrays
     of variables of an efficiently-aligned type, then it is likely
     that your program will also be doing pointer arithmetic (or
     subscripting, which amounts to the same thing) on pointers to the
     relevant type, and the code that the compiler generates for these
     pointer arithmetic operations will often be more efficient for
     efficiently-aligned types than for other types.

     The @{b}aligned@{ub} attribute can only increase the alignment; but you can
     decrease it by specifying @{b}packed@{ub} as well.  See below.

     Note that the effectiveness of @{b}aligned@{ub} attributes may be limited
     by inherent limitations in your linker.  On many systems, the
     linker is only able to arrange for variables to be aligned up to a
     certain maximum alignment.  (For some linkers, the maximum
     supported alignment may be very very small.)  If your linker is
     only able to align variables up to a maximum of 8 byte alignment,
     then specifying @{b}aligned(16)@{ub} in an @{b}__attribute__@{ub} will still only
     provide you with 8 byte alignment.  See your linker documentation
     for further information.

@{b}packed@{ub}
     This attribute, attached to an @{b}enum@{ub}, @{b}struct@{ub}, or @{b}union@{ub} type
     definition, specified that the minimum required memory be used to
     represent the type.

     Specifying this attribute for @{b}struct@{ub} and @{b}union@{ub} types is equivalent
     to specifying the @{b}packed@{ub} attribute on each of the structure or
     union members.  Specifying the @{b}-fshort-enums@{ub} flag on the line is
     equivalent to specifying the @{b}packed@{ub} attribute on all @{b}enum@{ub}
     definitions.

     You may only specify this attribute after a closing curly brace on
     an @{b}enum@{ub} definition, not in a @{b}typedef@{ub} declaration, unless that
     declaration also contains the definition of the @{b}enum@{ub}.

@{b}transparent_union@{ub}
     This attribute, attached to a @{b}union@{ub} type definition, indicates
     that any function parameter having that union type causes calls to
     that function to be treated in a special way.

     First, the argument corresponding to a transparent union type can
     be of any type in the union; no cast is required.  Also, if the
     union contains a pointer type, the corresponding argument can be a
     null pointer constant or a void pointer expression; and if the
     union contains a void pointer type, the corresponding argument can
     be any pointer expression.  If the union member type is a pointer,
     qualifiers like @{b}const@{ub} on the referenced type must be respected,
     just as with normal pointer conversions.

     Second, the argument is passed to the function using the calling
     conventions of first member of the transparent union, not the
     calling conventions of the union itself.  All members of the union
     must have the same machine representation; this is necessary for
     this argument passing to work properly.

     Transparent unions are designed for library functions that have
     multiple interfaces for compatibility reasons.  For example,
     suppose the @{b}wait@{ub} function must accept either a value of type @{b}int *@{ub}
     to comply with Posix, or a value of type @{b}union wait *@{ub} to comply
     with the 4.1BSD interface.  If @{b}wait@{ub}'s parameter were @{b}void *@{ub}, @{b}wait@{ub}
     would accept both kinds of arguments, but it would also accept any
     other pointer type and this would make argument type checking less
     useful.  Instead, @{b}<sys/wait.h>@{ub} might define the interface as
     follows:

          typedef union
            {
              int *__ip;
              union wait *__up;
            } wait_status_ptr_t __attribute__ ((__transparent_union__));
          
          pid_t wait (wait_status_ptr_t);

     This interface allows either @{b}int *@{ub} or @{b}union wait *@{ub} arguments to be
     passed, using the @{b}int *@{ub} calling convention.  The program can call
     @{b}wait@{ub} with arguments of either type:

          int w1 () { int w; return wait (&w); }
          int w2 () { union wait w; return wait (&w); }

     With this interface, @{b}wait@{ub}'s implementation might look like this:

          pid_t wait (wait_status_ptr_t p)
          {
            return waitpid (-1, p.__ip, 0);
          }

@{b}unused@{ub}
     When attached to a type (including a @{b}union@{ub} or a @{b}struct@{ub}), this
     attribute means that variables of that type are meant to appear
     possibly unused.  GNU CC will not produce a warning for any
     variables of that type, even if the variable appears to do
     nothing.  This is often the case with lock or thread classes,
     which are usually defined and then not referenced, but contain
     constructors and destructors that have nontrivial bookkeeping
     functions.

   To specify multiple attributes, separate them by commas within the
double parentheses: for example, @{b}__attribute__ ((aligned (16), packed))@{ub}.


@endnode

@node "Inline" "gcc.guide/Inline"
@next "Extended Asm"
@prev "Alignment"
@toc "C Extensions"

An Inline Function is As Fast As a Macro
========================================

   By declaring a function @{b}inline@{ub}, you can direct GNU CC to integrate
that function's code into the code for its callers.  This makes
execution faster by eliminating the function-call overhead; in
addition, if any of the actual argument values are constant, their known
values may permit simplifications at compile time so that not all of the
inline function's code needs to be included.  The effect on code size is
less predictable; object code may be larger or smaller with function
inlining, depending on the particular case.  Inlining of functions is an
optimization and it really "works" only in optimizing compilation.  If
you don't use @{b}-O@{ub}, no function is really inline.

   To declare a function inline, use the @{b}inline@{ub} keyword in its
declaration, like this:

     inline int
     inc (int *a)
     {
       (*a)++;
     }

   (If you are writing a header file to be included in ANSI C programs,
write @{b}__inline__@{ub} instead of @{b}inline@{ub}.  See @{"Alternate Keywords" link "Alternate Keywords"}.)

   You can also make all "simple enough" functions inline with the
option @{b}-finline-functions@{ub}.  Note that certain usages in a function
definition can make it unsuitable for inline substitution.

   Note that in C and Objective C, unlike C++, the @{b}inline@{ub} keyword does
not affect the linkage of the function.

   GNU CC automatically inlines member functions defined within the
class body of C++ programs even if they are not explicitly declared
@{b}inline@{ub}.  (You can override this with @{b}-fno-default-inline@{ub}; see
@{"Options Controlling C++ Dialect" link "C++ Dialect Options"}.)

   When a function is both inline and @{b}static@{ub}, if all calls to the
function are integrated into the caller, and the function's address is
never used, then the function's own assembler code is never referenced.
In this case, GNU CC does not actually output assembler code for the
function, unless you specify the option @{b}-fkeep-inline-functions@{ub}.  Some
calls cannot be integrated for various reasons (in particular, calls
that precede the function's definition cannot be integrated, and
neither can recursive calls within the definition).  If there is a
nonintegrated call, then the function is compiled to assembler code as
usual.  The function must also be compiled as usual if the program
refers to its address, because that can't be inlined.

   When an inline function is not @{b}static@{ub}, then the compiler must assume
that there may be calls from other source files; since a global symbol
can be defined only once in any program, the function must not be
defined in the other source files, so the calls therein cannot be
integrated.  Therefore, a non-@{b}static@{ub} inline function is always compiled
on its own in the usual fashion.

   If you specify both @{b}inline@{ub} and @{b}extern@{ub} in the function definition,
then the definition is used only for inlining.  In no case is the
function compiled on its own, not even if you refer to its address
explicitly.  Such an address becomes an external reference, as if you
had only declared the function, and had not defined it.

   This combination of @{b}inline@{ub} and @{b}extern@{ub} has almost the effect of a
macro.  The way to use it is to put a function definition in a header
file with these keywords, and put another copy of the definition
(lacking @{b}inline@{ub} and @{b}extern@{ub}) in a library file.  The definition in the
header file will cause most calls to the function to be inlined.  If
any uses of the function remain, they will refer to the single copy in
the library.

   GNU C does not inline any functions when not optimizing.  It is not
clear whether it is better to inline or not, in this case, but we found
that a correct implementation when not optimizing was difficult.  So we
did the easy thing, and turned it off.


@endnode

@node "Extended Asm" "gcc.guide/Extended Asm"
@next "Asm Labels"
@prev "Inline"
@toc "C Extensions"

Assembler Instructions with C Expression Operands
=================================================

   In an assembler instruction using @{b}asm@{ub}, you can specify the operands
of the instruction using C expressions.  This means you need not guess
which registers or memory locations will contain the data you want to
use.

   You must specify an assembler instruction template much like what
appears in a machine description, plus an operand constraint string for
each operand.

   For example, here is how to use the 68881's @{b}fsinx@{ub} instruction:

     asm ("fsinx %1,%0" : "=f" (result) : "f" (angle));

Here @{b}angle@{ub} is the C expression for the input operand while @{b}result@{ub} is
that of the output operand.  Each has @{b}"f"@{ub} as its operand constraint,
saying that a floating point register is required.  The @{b}=@{ub} in @{b}=f@{ub}
indicates that the operand is an output; all output operands'
constraints must use @{b}=@{ub}.  The constraints use the same language used in
the machine description (see @{"Constraints" link "Constraints"}).

   Each operand is described by an operand-constraint string followed by
the C expression in parentheses.  A colon separates the assembler
template from the first output operand and another separates the last
output operand from the first input, if any.  Commas separate the
operands within each group.  The total number of operands is limited to
ten or to the maximum number of operands in any instruction pattern in
the machine description, whichever is greater.

   If there are no output operands but there are input operands, you
must place two consecutive colons surrounding the place where the output
operands would go.

   Output operand expressions must be lvalues; the compiler can check
this.  The input operands need not be lvalues.  The compiler cannot
check whether the operands have data types that are reasonable for the
instruction being executed.  It does not parse the assembler instruction
template and does not know what it means or even whether it is valid
assembler input.  The extended @{b}asm@{ub} feature is most often used for
machine instructions the compiler itself does not know exist.  If the
output expression cannot be directly addressed (for example, it is a
bit field), your constraint must allow a register.  In that case, GNU CC
will use the register as the output of the @{b}asm@{ub}, and then store that
register into the output.

   The ordinary output operands must be write-only; GNU CC will assume
that the values in these operands before the instruction are dead and
need not be generated.  Extended asm supports input-output or read-write
operands.  Use the constraint character @{b}+@{ub} to indicate such an operand
and list it with the output operands.

   When the constraints for the read-write operand (or the operand in
which only some of the bits are to be changed) allows a register, you
may, as an alternative, logically split its function into two separate
operands, one input operand and one write-only output operand.  The
connection between them is expressed by constraints which say they need
to be in the same location when the instruction executes.  You can use
the same C expression for both operands, or different expressions.  For
example, here we write the (fictitious) @{b}combine@{ub} instruction with @{b}bar@{ub} as
its read-only source operand and @{b}foo@{ub} as its read-write destination:

     asm ("combine %2,%0" : "=r" (foo) : "0" (foo), "g" (bar));

The constraint @{b}"0"@{ub} for operand 1 says that it must occupy the same
location as operand 0.  A digit in constraint is allowed only in an
input operand and it must refer to an output operand.

   Only a digit in the constraint can guarantee that one operand will
be in the same place as another.  The mere fact that @{b}foo@{ub} is the value
of both operands is not enough to guarantee that they will be in the
same place in the generated assembler code.  The following would not
work reliably:

     asm ("combine %2,%0" : "=r" (foo) : "r" (foo), "g" (bar));

   Various optimizations or reloading could cause operands 0 and 1 to
be in different registers; GNU CC knows no reason not to do so.  For
example, the compiler might find a copy of the value of @{b}foo@{ub} in one
register and use it for operand 1, but generate the output operand 0 in
a different register (copying it afterward to @{b}foo@{ub}'s own address).  Of
course, since the register for operand 1 is not even mentioned in the
assembler code, the result will not work, but GNU CC can't tell that.

   Some instructions clobber specific hard registers.  To describe this,
write a third colon after the input operands, followed by the names of
the clobbered hard registers (given as strings).  Here is a realistic
example for the VAX:

     asm volatile ("movc3 %0,%1,%2"
                   : /* no outputs */
                   : "g" (from), "g" (to), "g" (count)
                   : "r0", "r1", "r2", "r3", "r4", "r5");

   If you refer to a particular hardware register from the assembler
code, you will probably have to list the register after the third colon
to tell the compiler the register's value is modified.  In some
assemblers, the register names begin with @{b}%@{ub}; to produce one @{b}%@{ub} in the
assembler code, you must write @{b}%%@{ub} in the input.

   If your assembler instruction can alter the condition code register,
add @{b}cc@{ub} to the list of clobbered registers.  GNU CC on some machines
represents the condition codes as a specific hardware register; @{b}cc@{ub}
serves to name this register.  On other machines, the condition code is
handled differently, and specifying @{b}cc@{ub} has no effect.  But it is valid
no matter what the machine.

   If your assembler instruction modifies memory in an unpredictable
fashion, add @{b}memory@{ub} to the list of clobbered registers.  This will
cause GNU CC to not keep memory values cached in registers across the
assembler instruction.

   You can put multiple assembler instructions together in a single @{b}asm@{ub}
template, separated either with newlines (written as @{b}\\n@{ub}) or with
semicolons if the assembler allows such semicolons.  The GNU assembler
allows semicolons and most Unix assemblers seem to do so.  The input
operands are guaranteed not to use any of the clobbered registers, and
neither will the output operands' addresses, so you can read and write
the clobbered registers as many times as you like.  Here is an example
of multiple instructions in a template; it assumes the subroutine @{b}_foo@{ub}
accepts arguments in registers 9 and 10:

     asm ("movl %0,r9;movl %1,r10;call _foo"
          : /* no outputs */
          : "g" (from), "g" (to)
          : "r9", "r10");

   Unless an output operand has the @{b}&@{ub} constraint modifier, GNU CC may
allocate it in the same register as an unrelated input operand, on the
assumption the inputs are consumed before the outputs are produced.
This assumption may be false if the assembler code actually consists of
more than one instruction.  In such a case, use @{b}&@{ub} for each output
operand that may not overlap an input.  See @{"Modifiers" link "Modifiers"}.

   If you want to test the condition code produced by an assembler
instruction, you must include a branch and a label in the @{b}asm@{ub}
construct, as follows:

     asm ("clr %0;frob %1;beq 0f;mov #1,%0;0:"
          : "g" (result)
          : "g" (input));

This assumes your assembler supports local labels, as the GNU assembler
and most Unix assemblers do.

   Speaking of labels, jumps from one @{b}asm@{ub} to another are not supported.
The compiler's optimizers do not know about these jumps, and therefore
they cannot take account of them when deciding how to optimize.

   Usually the most convenient way to use these @{b}asm@{ub} instructions is to
encapsulate them in macros that look like functions.  For example,

     #define sin(x)       \\
     ({ double __value, __arg = (x);   \\
        asm ("fsinx %1,%0": "=f" (__value): "f" (__arg));  \\
        __value; })

Here the variable @{b}__arg@{ub} is used to make sure that the instruction
operates on a proper @{b}double@{ub} value, and to accept only those arguments @{b}x@{ub}
which can convert automatically to a @{b}double@{ub}.

   Another way to make sure the instruction operates on the correct data
type is to use a cast in the @{b}asm@{ub}.  This is different from using a
variable @{b}__arg@{ub} in that it converts more different types.  For example,
if the desired type were @{b}int@{ub}, casting the argument to @{b}int@{ub} would accept
a pointer with no complaint, while assigning the argument to an @{b}int@{ub}
variable named @{b}__arg@{ub} would warn about using a pointer unless the caller
explicitly casts it.

   If an @{b}asm@{ub} has output operands, GNU CC assumes for optimization
purposes the instruction has no side effects except to change the output
operands.  This does not mean instructions with a side effect cannot be
used, but you must be careful, because the compiler may eliminate them
if the output operands aren't used, or move them out of loops, or
replace two with one if they constitute a common subexpression.  Also,
if your instruction does have a side effect on a variable that otherwise
appears not to change, the old value of the variable may be reused later
if it happens to be found in a register.

   You can prevent an @{b}asm@{ub} instruction from being deleted, moved
significantly, or combined, by writing the keyword @{b}volatile@{ub} after the
@{b}asm@{ub}.  For example:

     #define get_and_set_priority(new)  \\
     ({ int __old; \\
        asm volatile ("get_and_set_priority %0, %1": "=g" (__old) : "g" (new)); \\
        __old; })
     b

If you write an @{b}asm@{ub} instruction with no outputs, GNU CC will know the
instruction has side-effects and will not delete the instruction or
move it outside of loops.  If the side-effects of your instruction are
not purely external, but will affect variables in your program in ways
other than reading the inputs and clobbering the specified registers or
memory, you should write the @{b}volatile@{ub} keyword to prevent future
versions of GNU CC from moving the instruction around within a core
region.

   An @{b}asm@{ub} instruction without any operands or clobbers (and "old style"
@{b}asm@{ub}) will not be deleted or moved significantly, regardless, unless it
is unreachable, the same wasy as if you had written a @{b}volatile@{ub} keyword.

   Note that even a volatile @{b}asm@{ub} instruction can be moved in ways that
appear insignificant to the compiler, such as across jump instructions.
You can't expect a sequence of volatile @{b}asm@{ub} instructions to remain
perfectly consecutive.  If you want consecutive output, use a single
@{b}asm@{ub}.

   It is a natural idea to look for a way to give access to the
condition code left by the assembler instruction.  However, when we
attempted to implement this, we found no way to make it work reliably.
The problem is that output operands might need reloading, which would
result in additional following "store" instructions.  On most machines,
these instructions would alter the condition code before there was time
to test it.  This problem doesn't arise for ordinary "test" and
"compare" instructions because they don't have any output operands.

   If you are writing a header file that should be includable in ANSI C
programs, write @{b}__asm__@{ub} instead of @{b}asm@{ub}.  See @{"Alternate Keywords" link "Alternate Keywords"}.


@endnode

@node "Asm Labels" "gcc.guide/Asm Labels"
@next "Explicit Reg Vars"
@prev "Extended Asm"
@toc "C Extensions"

Controlling Names Used in Assembler Code
========================================

   You can specify the name to be used in the assembler code for a C
function or variable by writing the @{b}asm@{ub} (or @{b}__asm__@{ub}) keyword after the
declarator as follows:

     int foo asm ("myfoo") = 2;

This specifies that the name to be used for the variable @{b}foo@{ub} in the
assembler code should be @{b}myfoo@{ub} rather than the usual @{b}_foo@{ub}.

   On systems where an underscore is normally prepended to the name of
a C function or variable, this feature allows you to define names for
the linker that do not start with an underscore.

   You cannot use @{b}asm@{ub} in this way in a function @{i}definition@{ui}; but you can
get the same effect by writing a declaration for the function before
its definition and putting @{b}asm@{ub} there, like this:

     extern func () asm ("FUNC");
     
     func (x, y)
          int x, y;
     ...

   It is up to you to make sure that the assembler names you choose do
not conflict with any other assembler symbols.  Also, you must not use a
register name; that would produce completely invalid assembler code.
GNU CC does not as yet have the ability to store static variables in
registers.  Perhaps that will be added.


@endnode

@node "Explicit Reg Vars" "gcc.guide/Explicit Reg Vars"
@next "Alternate Keywords"
@prev "Asm Labels"
@toc "C Extensions"

Variables in Specified Registers
================================

   GNU C allows you to put a few global variables into specified
hardware registers.  You can also specify the register in which an
ordinary register variable should be allocated.

   * Global register variables reserve registers throughout the program.
     This may be useful in programs such as programming language
     interpreters which have a couple of global variables that are
     accessed very often.

   * Local register variables in specific registers do not reserve the
     registers.  The compiler's data flow analysis is capable of
     determining where the specified registers contain live values, and
     where they are available for other uses.

     These local variables are sometimes convenient for use with the
     extended @{b}asm@{ub} feature (see @{"Extended Asm" link "Extended Asm"}), if you want to write one
     output of the assembler instruction directly into a particular
     register.  (This will work provided the register you specify fits
     the constraints specified for that operand in the @{b}asm@{ub}.)


 @{" Global Reg Vars " link "Global Reg Vars"}  
 @{" Local Reg Vars " link "Local Reg Vars"}


@endnode

@node "Global Reg Vars" "gcc.guide/Global Reg Vars"
@next "Local Reg Vars"
@toc "Explicit Reg Vars"

Defining Global Register Variables
----------------------------------

   You can define a global register variable in GNU C like this:

     register int *foo asm ("a5");

Here @{b}a5@{ub} is the name of the register which should be used.  Choose a
register which is normally saved and restored by function calls on your
machine, so that library routines will not clobber it.

   Naturally the register name is cpu-dependent, so you would need to
conditionalize your program according to cpu type.  The register @{b}a5@{ub}
would be a good choice on a 68000 for a variable of pointer type.  On
machines with register windows, be sure to choose a "global" register
that is not affected magically by the function call mechanism.

   In addition, operating systems on one type of cpu may differ in how
they name the registers; then you would need additional conditionals.
For example, some 68000 operating systems call this register @{b}%a5@{ub}.

   Eventually there may be a way of asking the compiler to choose a
register automatically, but first we need to figure out how it should
choose and how to enable you to guide the choice.  No solution is
evident.

   Defining a global register variable in a certain register reserves
that register entirely for this use, at least within the current
compilation.  The register will not be allocated for any other purpose
in the functions in the current compilation.  The register will not be
saved and restored by these functions.  Stores into this register are
never deleted even if they would appear to be dead, but references may
be deleted or moved or simplified.

   It is not safe to access the global register variables from signal
handlers, or from more than one thread of control, because the system
library routines may temporarily use the register for other things
(unless you recompile them specially for the task at hand).

   It is not safe for one function that uses a global register variable
to call another such function @{b}foo@{ub} by way of a third function @{b}lose@{ub} that
was compiled without knowledge of this variable (i.e. in a different
source file in which the variable wasn't declared).  This is because
@{b}lose@{ub} might save the register and put some other value there.  For
example, you can't expect a global register variable to be available in
the comparison-function that you pass to @{b}qsort@{ub}, since @{b}qsort@{ub} might have
put something else in that register.  (If you are prepared to recompile
@{b}qsort@{ub} with the same global register variable, you can solve this
problem.)

   If you want to recompile @{b}qsort@{ub} or other source files which do not
actually use your global register variable, so that they will not use
that register for any other purpose, then it suffices to specify the
compiler option @{b}-ffixed-REG@{ub}.  You need not actually add a global
register declaration to their source code.

   A function which can alter the value of a global register variable
cannot safely be called from a function compiled without this variable,
because it could clobber the value the caller expects to find there on
return.  Therefore, the function which is the entry point into the part
of the program that uses the global register variable must explicitly
save and restore the value which belongs to its caller.

   On most machines, @{b}longjmp@{ub} will restore to each global register
variable the value it had at the time of the @{b}setjmp@{ub}.  On some machines,
however, @{b}longjmp@{ub} will not change the value of global register
variables.  To be portable, the function that called @{b}setjmp@{ub} should make
other arrangements to save the values of the global register variables,
and to restore them in a @{b}longjmp@{ub}.  This way, the same thing will happen
regardless of what @{b}longjmp@{ub} does.

   All global register variable declarations must precede all function
definitions.  If such a declaration could appear after function
definitions, the declaration would be too late to prevent the register
from being used for other purposes in the preceding functions.

   Global register variables may not have initial values, because an
executable file has no means to supply initial contents for a register.

   On the Sparc, there are reports that g3 ... g7 are suitable
registers, but certain library functions, such as @{b}getwd@{ub}, as well as the
subroutines for division and remainder, modify g3 and g4.  g1 and g2
are local temporaries.

   On the 68000, a2 ... a5 should be suitable, as should d2 ... d7.  Of
course, it will not do to use more than a few of those.


@endnode

@node "Local Reg Vars" "gcc.guide/Local Reg Vars"
@prev "Global Reg Vars"
@toc "Explicit Reg Vars"

Specifying Registers for Local Variables
----------------------------------------

   You can define a local register variable with a specified register
like this:

     register int *foo asm ("a5");

Here @{b}a5@{ub} is the name of the register which should be used.  Note that
this is the same syntax used for defining global register variables,
but for a local variable it would appear within a function.

   Naturally the register name is cpu-dependent, but this is not a
problem, since specific registers are most often useful with explicit
assembler instructions (see @{"Extended Asm" link "Extended Asm"}).  Both of these things
generally require that you conditionalize your program according to cpu
type.

   In addition, operating systems on one type of cpu may differ in how
they name the registers; then you would need additional conditionals.
For example, some 68000 operating systems call this register @{b}%a5@{ub}.

   Defining such a register variable does not reserve the register; it
remains available for other uses in places where flow control determines
the variable's value is not live.  However, these registers are made
unavailable for use in the reload pass; excessive use of this feature
leaves the compiler too few available registers to compile certain
functions.

   This option does not guarantee that GNU CC will generate code that
has this variable in the register you specify at all times.  You may not
code an explicit reference to this register in an @{b}asm@{ub} statement and
assume it will always refer to this variable.


@endnode

@node "Alternate Keywords" "gcc.guide/Alternate Keywords"
@next "Incomplete Enums"
@prev "Explicit Reg Vars"
@toc "C Extensions"

Alternate Keywords
==================

   The option @{b}-traditional@{ub} disables certain keywords; @{b}-ansi@{ub} disables
certain others.  This causes trouble when you want to use GNU C
extensions, or ANSI C features, in a general-purpose header file that
should be usable by all programs, including ANSI C programs and
traditional ones.  The keywords @{b}asm@{ub}, @{b}typeof@{ub} and @{b}inline@{ub} cannot be used
since they won't work in a program compiled with @{b}-ansi@{ub}, while the
keywords @{b}const@{ub}, @{b}volatile@{ub}, @{b}signed@{ub}, @{b}typeof@{ub} and @{b}inline@{ub} won't work in a
program compiled with @{b}-traditional@{ub}.

   The way to solve these problems is to put @{b}__@{ub} at the beginning and
end of each problematical keyword.  For example, use @{b}__asm__@{ub} instead of
@{b}asm@{ub}, @{b}__const__@{ub} instead of @{b}const@{ub}, and @{b}__inline__@{ub} instead of @{b}inline@{ub}.

   Other C compilers won't accept these alternative keywords; if you
want to compile with another compiler, you can define the alternate
keywords as macros to replace them with the customary keywords.  It
looks like this:

     #ifndef __GNUC__
     #define __asm__ asm
     #endif

@{b}   -pedantic@{ub} causes warnings for many GNU C extensions.  You can
prevent such warnings within one expression by writing @{b}__extension__@{ub}
before the expression.  @{b}__extension__@{ub} has no effect aside from this.


@endnode

@node "Incomplete Enums" "gcc.guide/Incomplete Enums"
@next "Function Names"
@prev "Alternate Keywords"
@toc "C Extensions"

Incomplete @{b}enum@{ub} Types
=====================

   You can define an @{b}enum@{ub} tag without specifying its possible values.
This results in an incomplete type, much like what you get if you write
@{b}struct foo@{ub} without describing the elements.  A later declaration which
does specify the possible values completes the type.

   You can't allocate variables or storage using the type while it is
incomplete.  However, you can work with pointers to that type.

   This extension may not be very useful, but it makes the handling of
@{b}enum@{ub} more consistent with the way @{b}struct@{ub} and @{b}union@{ub} are handled.

   This extension is not supported by GNU C++.


@endnode

@node "Function Names" "gcc.guide/Function Names"
@next "Return Address"
@prev "Incomplete Enums"
@toc "C Extensions"

Function Names as Strings
=========================

   GNU CC predefines two string variables to be the name of the current
function.  The variable @{b}__FUNCTION__@{ub} is the name of the function as it
appears in the source.  The variable @{b}__PRETTY_FUNCTION__@{ub} is the name of
the function pretty printed in a language specific fashion.

   These names are always the same in a C function, but in a C++
function they may be different.  For example, this program:

     extern "C" {
     extern int printf (char *, ...);
     }
     
     class a {
      public:
       sub (int i)
         {
           printf ("__FUNCTION__ = %s\\n", __FUNCTION__);
           printf ("__PRETTY_FUNCTION__ = %s\\n", __PRETTY_FUNCTION__);
         }
     };
     
     int
     main (void)
     {
       a ax;
       ax.sub (0);
       return 0;
     }

gives this output:

     __FUNCTION__ = sub
     __PRETTY_FUNCTION__ = int  a::sub (int)

   These names are not macros: they are predefined string variables.
For example, @{b}#ifdef __FUNCTION__@{ub} does not have any special meaning
inside a function, since the preprocessor does not do anything special
with the identifier @{b}__FUNCTION__@{ub}.


@endnode

@node "Return Address" "gcc.guide/Return Address"
@prev "Function Names"
@toc "C Extensions"

Getting the Return or Frame Address of a Function
=================================================

   These functions may be used to get information about the callers of a
function.

@{b}__builtin_return_address (LEVEL)@{ub}
     This function returns the return address of the current function,
     or of one of its callers.  The LEVEL argument is number of frames
     to scan up the call stack.  A value of @{b}0@{ub} yields the return address
     of the current function, a value of @{b}1@{ub} yields the return address of
     the caller of the current function, and so forth.

     The LEVEL argument must be a constant integer.

     On some machines it may be impossible to determine the return
     address of any function other than the current one; in such cases,
     or when the top of the stack has been reached, this function will
     return @{b}0@{ub}.

     This function should only be used with a non-zero argument for
     debugging purposes.

@{b}__builtin_frame_address (LEVEL)@{ub}
     This function is similar to @{b}__builtin_return_address@{ub}, but it
     returns the address of the function frame rather than the return
     address of the function.  Calling @{b}__builtin_frame_address@{ub} with a
     value of @{b}0@{ub} yields the frame address of the current function, a
     value of @{b}1@{ub} yields the frame address of the caller of the current
     function, and so forth.

     The frame is the area on the stack which holds local variables and
     saved registers.  The frame address is normally the address of the
     first word pushed on to the stack by the function.  However, the
     exact definition depends upon the processor and the calling
     convention.  If the processor has a dedicated frame pointer
     register, and the function has a frame, then
     @{b}__builtin_frame_address@{ub} will return the value of the frame pointer
     register.

     The caveats that apply to @{b}__builtin_return_address@{ub} apply to this
     function as well.


@endnode

@node "C++ Extensions" "gcc.guide/C++ Extensions"
@next "Gcov"
@prev "C Extensions"
@toc "Main"

Extensions to the C++ Language
******************************

   The GNU compiler provides these extensions to the C++ language (and
you can also use most of the C language extensions in your C++
programs).  If you want to write code that checks whether these
features are available, you can test for the GNU compiler the same way
as for C programs: check for a predefined macro @{b}__GNUC__@{ub}.  You can also
use @{b}__GNUG__@{ub} to test specifically for GNU C++ (see
@{"Standard Predefined Macros" link "cpp.guide/Standard Predefined"}).


 @{" Naming Results     " link "Naming Results"}  Giving a name to C++ function return values.
 @{" Min and Max        " link "Min and Max"}  C++ Minimum and maximum operators.
 @{" Destructors and Goto " link "Destructors and Goto"}  Goto is safe to use in C++ even when destructors
                           are needed.
 @{" C++ Interface      " link "C++ Interface"}  You can use a single C++ header file for both
                         declarations and definitions.
 @{" Template Instantiation " link "Template Instantiation"}  Methods for ensuring that exactly one copy of
                         each needed template instantiation is emitted.
 @{" C++ Signatures     " link "C++ Signatures"}  You can specify abstract types to get subtype
			 polymorphism independent from inheritance.


@endnode

@node "Naming Results" "gcc.guide/Naming Results"
@next "Min and Max"
@toc "C++ Extensions"

Named Return Values in C++
==========================

   GNU C++ extends the function-definition syntax to allow you to
specify a name for the result of a function outside the body of the
definition, in C++ programs:

     TYPE
     FUNCTIONNAME (ARGS) return RESULTNAME;
     {
       ...
       BODY
       ...
     }

   You can use this feature to avoid an extra constructor call when a
function result has a class type.  For example, consider a function @{b}m@{ub},
declared as @{b}X v = m ();@{ub}, whose result is of class @{b}X@{ub}:

     X
     m ()
     {
       X b;
       b.a = 23;
       return b;
     }

   Although @{b}m@{ub} appears to have no arguments, in fact it has one implicit
argument: the address of the return value.  At invocation, the address
of enough space to hold @{b}v@{ub} is sent in as the implicit argument.  Then @{b}b@{ub}
is constructed and its @{b}a@{ub} field is set to the value 23.  Finally, a copy
constructor (a constructor of the form @{b}X(X&)@{ub}) is applied to @{b}b@{ub}, with the
(implicit) return value location as the target, so that @{b}v@{ub} is now bound
to the return value.

   But this is wasteful.  The local @{b}b@{ub} is declared just to hold
something that will be copied right out.  While a compiler that
combined an "elision" algorithm with interprocedural data flow analysis
could conceivably eliminate all of this, it is much more practical to
allow you to assist the compiler in generating efficient code by
manipulating the return value explicitly, thus avoiding the local
variable and copy constructor altogether.

   Using the extended GNU C++ function-definition syntax, you can avoid
the temporary allocation and copying by naming @{b}r@{ub} as your return value
at the outset, and assigning to its @{b}a@{ub} field directly:

     X
     m () return r;
     {
       r.a = 23;
     }

The declaration of @{b}r@{ub} is a standard, proper declaration, whose effects
are executed @{b}before@{ub} any of the body of @{b}m@{ub}.

   Functions of this type impose no additional restrictions; in
particular, you can execute @{b}return@{ub} statements, or return implicitly by
reaching the end of the function body ("falling off the edge").  Cases
like

     X
     m () return r (23);
     {
       return;
     }

(or even @{b}X m () return r (23); { }@{ub}) are unambiguous, since the return
value @{b}r@{ub} has been initialized in either case.  The following code may be
hard to read, but also works predictably:

     X
     m () return r;
     {
       X b;
       return b;
     }

   The return value slot denoted by @{b}r@{ub} is initialized at the outset, but
the statement @{b}return b;@{ub} overrides this value.  The compiler deals with
this by destroying @{b}r@{ub} (calling the destructor if there is one, or doing
nothing if there is not), and then reinitializing @{b}r@{ub} with @{b}b@{ub}.

   This extension is provided primarily to help people who use
overloaded operators, where there is a great need to control not just
the arguments, but the return values of functions.  For classes where
the copy constructor incurs a heavy performance penalty (especially in
the common case where there is a quick default constructor), this is a
major savings.  The disadvantage of this extension is that you do not
control when the default constructor for the return value is called: it
is always called at the beginning.


@endnode

@node "Min and Max" "gcc.guide/Min and Max"
@next "Destructors and Goto"
@prev "Naming Results"
@toc "C++ Extensions"

Minimum and Maximum Operators in C++
====================================

   It is very convenient to have operators which return the "minimum"
or the "maximum" of two arguments.  In GNU C++ (but not in GNU C),

@{b}A <? B@{ub}
     is the @{i}minimum@{ui}, returning the smaller of the numeric values A and
     B;

@{b}A >? B@{ub}
     is the @{i}maximum@{ui}, returning the larger of the numeric values A and B.

   These operations are not primitive in ordinary C++, since you can
use a macro to return the minimum of two things in C++, as in the
following example.

     #define MIN(X,Y) ((X) < (Y) ? : (X) : (Y))

You might then use @{b}int min = MIN (i, j);@{ub} to set MIN to the minimum
value of variables I and J.

   However, side effects in @{b}X@{ub} or @{b}Y@{ub} may cause unintended behavior.  For
example, @{b}MIN (i++, j++)@{ub} will fail, incrementing the smaller counter
twice.  A GNU C extension allows you to write safe macros that avoid
this kind of problem (see @{"Naming an Expression's Type" link "Naming Types"}).  However,
writing @{b}MIN@{ub} and @{b}MAX@{ub} as macros also forces you to use function-call
notation for a fundamental arithmetic operation.  Using GNU C++
extensions, you can write @{b}int min = i <? j;@{ub} instead.

   Since @{b}<?@{ub} and @{b}>?@{ub} are built into the compiler, they properly handle
expressions with side-effects;  @{b}int min = i++ <? j++;@{ub} works correctly.


@endnode

@node "Destructors and Goto" "gcc.guide/Destructors and Goto"
@next "C++ Interface"
@prev "Min and Max"
@toc "C++ Extensions"

@{b}goto@{ub} and Destructors in GNU C++
===============================

   In C++ programs, you can safely use the @{b}goto@{ub} statement.  When you
use it to exit a block which contains aggregates requiring destructors,
the destructors will run before the @{b}goto@{ub} transfers control.

   The compiler still forbids using @{b}goto@{ub} to @{i}enter@{ui} a scope that requires
constructors.


@endnode

@node "C++ Interface" "gcc.guide/C++ Interface"
@next "Template Instantiation"
@prev "Destructors and Goto"
@toc "C++ Extensions"

Declarations and Definitions in One Header
==========================================

   C++ object definitions can be quite complex.  In principle, your
source code will need two kinds of things for each object that you use
across more than one source file.  First, you need an @{i}interface@{ui}
specification, describing its structure with type declarations and
function prototypes.  Second, you need the @{i}implementation@{ui} itself.  It
can be tedious to maintain a separate interface description in a header
file, in parallel to the actual implementation.  It is also dangerous,
since separate interface and implementation definitions may not remain
parallel.

   With GNU C++, you can use a single header file for both purposes.

@{i}     Warning:@{ui} The mechanism to specify this is in transition.  For the
     nonce, you must use one of two @{b}#pragma@{ub} commands; in a future
     release of GNU C++, an alternative mechanism will make these
     @{b}#pragma@{ub} commands unnecessary.

   The header file contains the full definitions, but is marked with
@{b}#pragma interface@{ub} in the source code.  This allows the compiler to use
the header file only as an interface specification when ordinary source
files incorporate it with @{b}#include@{ub}.  In the single source file where
the full implementation belongs, you can use either a naming convention
or @{b}#pragma implementation@{ub} to indicate this alternate use of the header
file.

@{b}#pragma interface@{ub}
@{b}#pragma interface "SUBDIR/OBJECTS.h"@{ub}
     Use this directive in @{i}header files@{ui} that define object classes, to
     save space in most of the object files that use those classes.
     Normally, local copies of certain information (backup copies of
     inline member functions, debugging information, and the internal
     tables that implement virtual functions) must be kept in each
     object file that includes class definitions.  You can use this
     pragma to avoid such duplication.  When a header file containing
     @{b}#pragma interface@{ub} is included in a compilation, this auxiliary
     information will not be generated (unless the main input source
     file itself uses @{b}#pragma implementation@{ub}).  Instead, the object
     files will contain references to be resolved at link time.

     The second form of this directive is useful for the case where you
     have multiple headers with the same name in different directories.
     If you use this form, you must specify the same string to @{b}#pragma
     implementation@{ub}.

@{b}#pragma implementation@{ub}
@{b}#pragma implementation "OBJECTS.h"@{ub}
     Use this pragma in a @{i}main input file@{ui}, when you want full output
     from included header files to be generated (and made globally
     visible).  The included header file, in turn, should use @{b}#pragma
     interface@{ub}.  Backup copies of inline member functions, debugging
     information, and the internal tables used to implement virtual
     functions are all generated in implementation files.

     If you use @{b}#pragma implementation@{ub} with no argument, it applies to
     an include file with the same basename(1) as your source file.
     For example, in @{b}allclass.cc@{ub}, giving just @{b}#pragma implementation@{ub} by
     itself is equivalent to @{b}#pragma implementation "allclass.h"@{ub}.

     In versions of GNU C++ prior to 2.6.0 @{b}allclass.h@{ub} was treated as an
     implementation file whenever you would include it from @{b}allclass.cc@{ub}
     even if you never specified @{b}#pragma implementation@{ub}.  This was
     deemed to be more trouble than it was worth, however, and disabled.

     If you use an explicit @{b}#pragma implementation@{ub}, it must appear in
     your source file @{i}before@{ui} you include the affected header files.

     Use the string argument if you want a single implementation file to
     include code from multiple header files.  (You must also use
     @{b}#include@{ub} to include the header file; @{b}#pragma implementation@{ub} only
     specifies how to use the file--it doesn't actually include it.)

     There is no way to split up the contents of a single header file
     into multiple implementation files.

@{b}   #pragma implementation@{ub} and @{b}#pragma interface@{ub} also have an effect on
function inlining.

   If you define a class in a header file marked with @{b}#pragma
interface@{ub}, the effect on a function defined in that class is similar to
an explicit @{b}extern@{ub} declaration--the compiler emits no code at all to
define an independent version of the function.  Its definition is used
only for inlining with its callers.

   Conversely, when you include the same header file in a main source
file that declares it as @{b}#pragma implementation@{ub}, the compiler emits
code for the function itself; this defines a version of the function
that can be found via pointers (or by callers compiled without
inlining).  If all calls to the function can be inlined, you can avoid
emitting the function by compiling with @{b}-fno-implement-inlines@{ub}.  If any
calls were not inlined, you will get linker errors.

   ---------- Footnotes ----------

   (1) A file's @{i}basename@{ui} was the name stripped of all leading path
information and of trailing suffixes, such as @{b}.h@{ub} or @{b}.C@{ub} or @{b}.cc@{ub}.


@endnode

@node "Template Instantiation" "gcc.guide/Template Instantiation"
@next "C++ Signatures"
@prev "C++ Interface"
@toc "C++ Extensions"

Where's the Template?
=====================

   C++ templates are the first language feature to require more
intelligence from the environment than one usually finds on a UNIX
system.  Somehow the compiler and linker have to make sure that each
template instance occurs exactly once in the executable if it is needed,
and not at all otherwise.  There are two basic approaches to this
problem, which I will refer to as the Borland model and the Cfront
model.

Borland model
     Borland C++ solved the template instantiation problem by adding
     the code equivalent of common blocks to their linker; the compiler
     emits template instances in each translation unit that uses them,
     and the linker collapses them together.  The advantage of this
     model is that the linker only has to consider the object files
     themselves; there is no external complexity to worry about.  This
     disadvantage is that compilation time is increased because the
     template code is being compiled repeatedly.  Code written for this
     model tends to include definitions of all templates in the header
     file, since they must be seen to be instantiated.

Cfront model
     The AT&T C++ translator, Cfront, solved the template instantiation
     problem by creating the notion of a template repository, an
     automatically maintained place where template instances are
     stored.  A more modern version of the repository works as follows:
     As individual object files are built, the compiler places any
     template definitions and instantiations encountered in the
     repository.  At link time, the link wrapper adds in the objects in
     the repository and compiles any needed instances that were not
     previously emitted.  The advantages of this model are more optimal
     compilation speed and the ability to use the system linker; to
     implement the Borland model a compiler vendor also needs to
     replace the linker.  The disadvantages are vastly increased
     complexity, and thus potential for error; for some code this can be
     just as transparent, but in practice it can been very difficult to
     build multiple programs in one directory and one program in
     multiple directories.  Code written for this model tends to
     separate definitions of non-inline member templates into a
     separate file, which should be compiled separately.

   When used with GNU ld version 2.8 or later on an ELF system such as
Linux/GNU or Solaris 2, or on Microsoft Windows, g++ supports the
Borland model.  On other systems, g++ implements neither automatic
model.

   A future version of g++ will support a hybrid model whereby the
compiler will emit any instantiations for which the template definition
is included in the compile, and store template definitions and
instantiation context information into the object file for the rest.
The link wrapper will extract that information as necessary and invoke
the compiler to produce the remaining instantiations.  The linker will
then combine duplicate instantiations.

   In the mean time, you have the following options for dealing with
template instantiations:

  1. Compile your template-using code with @{b}-frepo@{ub}.  The compiler will
     generate files with the extension @{b}.rpo@{ub} listing all of the template
     instantiations used in the corresponding object files which could
     be instantiated there; the link wrapper, @{b}collect2@{ub}, will then
     update the @{b}.rpo@{ub} files to tell the compiler where to place those
     instantiations and rebuild any affected object files.  The
     link-time overhead is negligible after the first pass, as the
     compiler will continue to place the instantiations in the same
     files.

     This is your best option for application code written for the
     Borland model, as it will just work.  Code written for the Cfront
     model will need to be modified so that the template definitions
     are available at one or more points of instantiation; usually this
     is as simple as adding @{b}#include <tmethods.cc>@{ub} to the end of each
     template header.

     For library code, if you want the library to provide all of the
     template instantiations it needs, just try to link all of its
     object files together; the link will fail, but cause the
     instantiations to be generated as a side effect.  Be warned,
     however, that this may cause conflicts if multiple libraries try
     to provide the same instantiations.  For greater control, use
     explicit instantiation as described in the next option.

  2. Compile your code with @{b}-fno-implicit-templates@{ub} to disable the
     implicit generation of template instances, and explicitly
     instantiate all the ones you use.  This approach requires more
     knowledge of exactly which instances you need than do the others,
     but it's less mysterious and allows greater control.  You can
     scatter the explicit instantiations throughout your program,
     perhaps putting them in the translation units where the instances
     are used or the translation units that define the templates
     themselves; you can put all of the explicit instantiations you
     need into one big file; or you can create small files like

          #include "Foo.h"
          #include "Foo.cc"
          
          template class Foo<int>;
          template ostream& operator <<
                          (ostream&, const Foo<int>&);

     for each of the instances you need, and create a template
     instantiation library from those.

     If you are using Cfront-model code, you can probably get away with
     not using @{b}-fno-implicit-templates@{ub} when compiling files that don't
     @{b}#include@{ub} the member template definitions.

     If you use one big file to do the instantiations, you may want to
     compile it without @{b}-fno-implicit-templates@{ub} so you get all of the
     instances required by your explicit instantiations (but not by any
     other files) without having to specify them as well.

     g++ has extended the template instantiation syntax outlined in the
     Working Paper to allow forward declaration of explicit
     instantiations, explicit instantiation of members of template
     classes and instantiation of the compiler support data for a
     template class (i.e. the vtable) without instantiating any of its
     members:

          extern template int max (int, int);
          template void Foo<int>::f ();
          inline template class Foo<int>;

  3. Do nothing.  Pretend g++ does implement automatic instantiation
     management.  Code written for the Borland model will work fine, but
     each translation unit will contain instances of each of the
     templates it uses.  In a large program, this can lead to an
     unacceptable amount of code duplication.

  4. Add @{b}#pragma interface@{ub} to all files containing template
     definitions.  For each of these files, add @{b}#pragma implementation
     "FILENAME"@{ub} to the top of some @{b}.C@{ub} file which @{b}#include@{ub}s it.  Then
     compile everything with @{b}-fexternal-templates@{ub}.  The templates will
     then only be expanded in the translation unit which implements
     them (i.e. has a @{b}#pragma implementation@{ub} line for the file where
     they live); all other files will use external references.  If
     you're lucky, everything should work properly.  If you get
     undefined symbol errors, you need to make sure that each template
     instance which is used in the program is used in the file which
     implements that template.  If you don't have any use for a
     particular instance in that file, you can just instantiate it
     explicitly, using the syntax from the latest C++ working paper:

          template class A<int>;
          template ostream& operator << (ostream&, const A<int>&);

     This strategy will work with code written for either model.  If
     you are using code written for the Cfront model, the file
     containing a class template and the file containing its member
     templates should be implemented in the same translation unit.

     A slight variation on this approach is to instead use the flag
     @{b}-falt-external-templates@{ub}; this flag causes template instances to
     be emitted in the translation unit that implements the header
     where they are first instantiated, rather than the one which
     implements the file where the templates are defined.  This header
     must be the same in all translation units, or things are likely to
     break.

     See @{"Declarations and Definitions in One Header" link "C++ Interface"}, for more
     discussion of these pragmas.


@endnode

@node "C++ Signatures" "gcc.guide/C++ Signatures"
@prev "Template Instantiation"
@toc "C++ Extensions"

Type Abstraction using Signatures
=================================

   In GNU C++, you can use the keyword @{b}signature@{ub} to define a completely
abstract class interface as a datatype.  You can connect this
abstraction with actual classes using signature pointers.  If you want
to use signatures, run the GNU compiler with the @{b}-fhandle-signatures@{ub}
command-line option.  (With this option, the compiler reserves a second
keyword @{b}sigof@{ub} as well, for a future extension.)

   Roughly, signatures are type abstractions or interfaces of classes.
Some other languages have similar facilities.  C++ signatures are
related to ML's signatures, Haskell's type classes, definition modules
in Modula-2, interface modules in Modula-3, abstract types in Emerald,
type modules in Trellis/Owl, categories in Scratchpad II, and types in
POOL-I.  For a more detailed discussion of signatures, see `Signatures:
A Language Extension for Improving Type Abstraction and Subtype
Polymorphism in C++' by Gerald Baumgartner and Vincent F. Russo (Tech
report CSD-TR-95-051, Dept. of Computer Sciences, Purdue University,
August 1995, a slightly improved version appeared in @{i}Software--Practice
& Experience@{ui}, @{b}25@{ub}(8), pp. 863-889, August 1995).  You can get the tech
report by anonymous FTP from @{b}ftp.cs.purdue.edu@{ub} in
@{b}pub/gb/Signature-design.ps.gz@{ub}.

   Syntactically, a signature declaration is a collection of member
function declarations and nested type declarations.  For example, this
signature declaration defines a new abstract type @{b}S@{ub} with member
functions @{b}int foo ()@{ub} and @{b}int bar (int)@{ub}:

     signature S
     {
       int foo ();
       int bar (int);
     };

   Since signature types do not include implementation definitions, you
cannot write an instance of a signature directly.  Instead, you can
define a pointer to any class that contains the required interfaces as a
@{i}signature pointer@{ui}.  Such a class @{i}implements@{ui} the signature type.

   To use a class as an implementation of @{b}S@{ub}, you must ensure that the
class has public member functions @{b}int foo ()@{ub} and @{b}int bar (int)@{ub}.  The
class can have other member functions as well, public or not; as long
as it offers what's declared in the signature, it is suitable as an
implementation of that signature type.

   For example, suppose that @{b}C@{ub} is a class that meets the requirements
of signature @{b}S@{ub} (@{b}C@{ub} @{i}conforms to@{ui} @{b}S@{ub}).  Then

     C obj;
     S * p = &obj;

defines a signature pointer @{b}p@{ub} and initializes it to point to an object
of type @{b}C@{ub}.  The member function call @{b}int i = p->foo ();@{ub} executes
@{b}obj.foo ()@{ub}.

   Abstract virtual classes provide somewhat similar facilities in
standard C++.  There are two main advantages to using signatures
instead:

  1. Subtyping becomes independent from inheritance.  A class or
     signature type @{b}T@{ub} is a subtype of a signature type @{b}S@{ub} independent of
     any inheritance hierarchy as long as all the member functions
     declared in @{b}S@{ub} are also found in @{b}T@{ub}.  So you can define a subtype
     hierarchy that is completely independent from any inheritance
     (implementation) hierarchy, instead of being forced to use types
     that mirror the class inheritance hierarchy.

  2. Signatures allow you to work with existing class hierarchies as
     implementations of a signature type.  If those class hierarchies
     are only available in compiled form, you're out of luck with
     abstract virtual classes, since an abstract virtual class cannot
     be retrofitted on top of existing class hierarchies.  So you would
     be required to write interface classes as subtypes of the abstract
     virtual class.

   There is one more detail about signatures.  A signature declaration
can contain member function @{i}definitions@{ui} as well as member function
declarations.  A signature member function with a full definition is
called a @{i}default implementation@{ui}; classes need not contain that
particular interface in order to conform.  For example, a class @{b}C@{ub} can
conform to the signature

     signature T
     {
       int f (int);
       int f0 () { return f (0); };
     };

whether or not @{b}C@{ub} implements the member function @{b}int f0 ()@{ub}.  If you
define @{b}C::f0@{ub}, that definition takes precedence; otherwise, the default
implementation @{b}S::f0@{ub} applies.


@endnode

@node "Gcov" "gcc.guide/Gcov"
@next "Trouble"
@prev "C++ Extensions"
@toc "Main"

@{b}gcov@{ub}: a Test Coverage Program
*****************************

@{b}   gcov@{ub} is a tool you can use in conjunction with GNU CC to test code
coverage in your programs.

   This chapter describes version 1.5 of @{b}gcov@{ub}.


 @{" Gcov Intro                 " link "Gcov Intro"}  Introduction to gcov.
 @{" Invoking Gcov              " link "Invoking Gcov"}  How to use gcov.
 @{" Gcov and Optimization      " link "Gcov and Optimization"}  Using gcov with GCC optimization.
 @{" Gcov Data Files            " link "Gcov Data Files"}  The files used by gcov.


@endnode

@node "Gcov Intro" "gcc.guide/Gcov Intro"
@next "Invoking Gcov"
@toc "Gcov"

Introduction to @{b}gcov@{ub}
====================

@{b}   gcov@{ub} is a test coverage program.  Use it in concert with GNU CC to
analyze your programs to help create more efficient, faster running
code.  You can use @{b}gcov@{ub} as a profiling tool to help discover where your
optimization efforts will best affect your code.  You can also use @{b}gcov@{ub}
along with the other profiling tool, @{b}gprof@{ub}, to assess which parts of
your code use the greatest amount of computing time.

   Profiling tools help you analyze your code's performance.  Using a
profiler such as @{b}gcov@{ub} or @{b}gprof@{ub}, you can find out some basic performance
statistics, such as:

   * how often each line of code executes

   * what lines of code are actually executed

   * how much computing time each section of code uses

   Once you know these things about how your code works when compiled,
you can look at each module to see which modules should be optimized.
@{b}gcov@{ub} helps you determine where to work on optimization.

   Software developers also use coverage testing in concert with
testsuites, to make sure software is actually good enough for a release.
Testsuites can verify that a program works as expected; a coverage
program tests to see how much of the program is exercised by the
testsuite.  Developers can then determine what kinds of test cases need
to be added to the testsuites to create both better testing and a better
final product.

   You should compile your code without optimization if you plan to use
@{b}gcov@{ub} because the optimization, by combining some lines of code into one
function, may not give you as much information as you need to look for
`hot spots' where the code is using a great deal of computer time.
Likewise, because @{b}gcov@{ub} accumulates statistics by line (at the lowest
resolution), it works best with a programming style that places only
one statement on each line.  If you use complicated macros that expand
to loops or to other control structures, the statistics are less
helpful--they only report on the line where the macro call appears.  If
your complex macros behave like functions, you can replace them with
inline functions to solve this problem.

@{b}   gcov@{ub} creates a logfile called @{b}SOURCEFILE.gcov@{ub} which indicates how
many times each line of a source file @{b}SOURCEFILE.c@{ub} has executed.  You
can use these logfiles along with @{b}gprof@{ub} to aid in fine-tuning the
performance of your programs.  @{b}gprof@{ub} gives timing information you can
use along with the information you get from @{b}gcov@{ub}.

@{b}   gcov@{ub} works only on code compiled with GNU CC.  It is not compatible
with any other profiling or test coverage mechanism.


@endnode

@node "Invoking Gcov" "gcc.guide/Invoking Gcov"
@next "Gcov and Optimization"
@prev "Gcov Intro"
@toc "Gcov"

Invoking gcov
=============

     gcov [-b] [-v] [-n] [-l] [-f] [-o directory] SOURCEFILE

@{b}-b@{ub}
     Write branch frequencies to the output file, and write branch
     summary info to the standard output.  This option allows you to
     see how often each branch in your program was taken.

@{b}-v@{ub}
     Display the @{b}gcov@{ub} version number (on the standard error stream).

@{b}-n@{ub}
     Do not create the @{b}gcov@{ub} output file.

@{b}-l@{ub}
     Create long file names for included source files.  For example, if
     the header file @{b}x.h@{ub} contains code, and was included in the file
     @{b}a.c@{ub}, then running @{b}gcov@{ub} on the file @{b}a.c@{ub} will produce an output file
     called @{b}a.c.x.h.gcov@{ub} instead of @{b}x.h.gcov@{ub}.  This can be useful if
     @{b}x.h@{ub} is included in multiple source files.

@{b}-f@{ub}
     Output summaries for each function in addition to the file level
     summary.

@{b}-o@{ub}
     The directory where the object files live.  Gcov will search for
     @{b}.bb@{ub}, @{b}.bbg@{ub}, and @{b}.da@{ub} files in this directory.

   When using @{b}gcov@{ub}, you must first compile your program with two
special GNU CC options: @{b}-fprofile-arcs -ftest-coverage@{ub}.  This tells the
compiler to generate additional information needed by gcov (basically a
flow graph of the program) and also includes additional code in the
object files for generating the extra profiling information needed by
gcov.  These additional files are placed in the directory where the
source code is located.

   Running the program will cause profile output to be generated.  For
each source file compiled with -fprofile-arcs, an accompanying @{b}.da@{ub} file
will be placed in the source directory.

   Running @{b}gcov@{ub} with your program's source file names as arguments will
now produce a listing of the code along with frequency of execution for
each line.  For example, if your program is called @{b}tmp.c@{ub}, this is what
you see when you use the basic @{b}gcov@{ub} facility:

     $ gcc -fprofile-arcs -ftest-coverage tmp.c
     $ a.out
     $ gcov tmp.c
      87.50% of 8 source lines executed in file tmp.c
     Creating tmp.c.gcov.

   The file @{b}tmp.c.gcov@{ub} contains output from @{b}gcov@{ub}.  Here is a sample:

                     main()
                     {
                1      int i, total;
     
                1      total = 0;
     
               11      for (i = 0; i < 10; i++)
               10        total += i;
     
                1      if (total != 45)
           ######        printf ("Failure\\n");
                       else
                1        printf ("Success\\n");
                1    }

   When you use the @{b}-b@{ub} option, your output looks like this:

     $ gcov -b tmp.c
      87.50% of 8 source lines executed in file tmp.c
      80.00% of 5 branches executed in file tmp.c
      80.00% of 5 branches taken at least once in file tmp.c
      50.00% of 2 calls executed in file tmp.c
     Creating tmp.c.gcov.

   Here is a sample of a resulting @{b}tmp.c.gcov@{ub} file:

                     main()
                     {
                1      int i, total;
     
                1      total = 0;
     
               11      for (i = 0; i < 10; i++)
     branch 0 taken = 91%
     branch 1 taken = 100%
     branch 2 taken = 100%
               10        total += i;
     
                1      if (total != 45)
     branch 0 taken = 100%
           ######        printf ("Failure\\n");
     call 0 never executed
     branch 1 never executed
                       else
                1        printf ("Success\\n");
     call 0 returns = 100%
                1    }

   For each basic block, a line is printed after the last line of the
basic block describing the branch or call that ends the basic block.
There can be multiple branches and calls listed for a single source
line if there are multiple basic blocks that end on that line.  In this
case, the branches and calls are each given a number.  There is no
simple way to map these branches and calls back to source constructs.
In general, though, the lowest numbered branch or call will correspond
to the leftmost construct on the source line.

   For a branch, if it was executed at least once, then a percentage
indicating the number of times the branch was taken divided by the
number of times the branch was executed will be printed.  Otherwise, the
message "never executed" is printed.

   For a call, if it was executed at least once, then a percentage
indicating the number of times the call returned divided by the number
of times the call was executed will be printed.  This will usually be
100%, but may be less for functions call @{b}exit@{ub} or @{b}longjmp@{ub}, and thus may
not return everytime they are called.

   The execution counts are cumulative.  If the example program were
executed again without removing the @{b}.da@{ub} file, the count for the number
of times each line in the source was executed would be added to the
results of the previous run(s).  This is potentially useful in several
ways.  For example, it could be used to accumulate data over a number
of program runs as part of a test verification suite, or to provide
more accurate long-term information over a large number of program runs.

   The data in the @{b}.da@{ub} files is saved immediately before the program
exits.  For each source file compiled with -fprofile-arcs, the profiling
code first attempts to read in an existing @{b}.da@{ub} file; if the file
doesn't match the executable (differing number of basic block counts) it
will ignore the contents of the file.  It then adds in the new execution
counts and finally writes the data to the file.


@endnode

@node "Gcov and Optimization" "gcc.guide/Gcov and Optimization"
@next "Gcov Data Files"
@prev "Invoking Gcov"
@toc "Gcov"

Using @{b}gcov@{ub} with GCC Optimization
================================

   If you plan to use @{b}gcov@{ub} to help optimize your code, you must first
compile your program with two special GNU CC options: @{b}-fprofile-arcs
-ftest-coverage@{ub}.  Aside from that, you can use any other GNU CC
options; but if you want to prove that every single line in your
program was executed, you should not compile with optimization at the
same time.  On some machines the optimizer can eliminate some simple
code lines by combining them with other lines.  For example, code like
this:

     if (a != b)
       c = 1;
     else
       c = 0;

can be compiled into one instruction on some machines.  In this case,
there is no way for @{b}gcov@{ub} to calculate separate execution counts for
each line because there isn't separate code for each line.  Hence the
@{b}gcov@{ub} output looks like this if you compiled the program with
optimization:

           100  if (a != b)
           100    c = 1;
           100  else
           100    c = 0;

   The output shows that this block of code, combined by optimization,
executed 100 times.  In one sense this result is correct, because there
was only one instruction representing all four of these lines.  However,
the output does not indicate how many times the result was 0 and how
many times the result was 1.


@endnode

@node "Gcov Data Files" "gcc.guide/Gcov Data Files"
@prev "Gcov and Optimization"
@toc "Gcov"

Brief description of @{b}gcov@{ub} data files
====================================

@{b}   gcov@{ub} uses three files for doing profiling.  The names of these files
are derived from the original @{i}source@{ui} file by substituting the file
suffix with either @{b}.bb@{ub}, @{b}.bbg@{ub}, or @{b}.da@{ub}.  All of these files are placed in
the same directory as the source file, and contain data stored in a
platform-independent method.

   The @{b}.bb@{ub} and @{b}.bbg@{ub} files are generated when the source file is
compiled with the GNU CC @{b}-ftest-coverage@{ub} option.  The @{b}.bb@{ub} file contains
a list of source files (including headers), functions within those
files, and line numbers corresponding to each basic block in the source
file.

   The @{b}.bb@{ub} file format consists of several lists of 4-byte integers
which correspond to the line numbers of each basic block in the file.
Each list is terminated by a line number of 0.  A line number of -1 is
used to designate that the source file name (padded to a 4-byte
boundary and followed by another -1) follows.  In addition, a line
number of -2 is used to designate that the name of a function (also
padded to a 4-byte boundary and followed by a -2) follows.

   The @{b}.bbg@{ub} file is used to reconstruct the program flow graph for the
source file.  It contains a list of the program flow arcs (possible
branches taken from one basic block to another) for each function which,
in combination with the @{b}.bb@{ub} file, enables gcov to reconstruct the
program flow.

   In the @{b}.bbg@{ub} file, the format is:
             number of basic blocks for function #0 (4-byte number)
             total number of arcs for function #0 (4-byte number)
             count of arcs in basic block #0 (4-byte number)
             destination basic block of arc #0 (4-byte number)
             flag bits (4-byte number)
             destination basic block of arc #1 (4-byte number)
             flag bits (4-byte number)
             ...
             destination basic block of arc #N (4-byte number)
             flag bits (4-byte number)
             count of arcs in basic block #1 (4-byte number)
             destination basic block of arc #0 (4-byte number)
             flag bits (4-byte number)
             ...

   A -1 (stored as a 4-byte number) is used to separate each function's
list of basic blocks, and to verify that the file has been read
correctly.

   The @{b}.da@{ub} file is generated when a program containing object files
built with the GNU CC @{b}-fprofile-arcs@{ub} option is executed.  A separate
@{b}.da@{ub} file is created for each source file compiled with this option, and
the name of the @{b}.da@{ub} file is stored as an absolute pathname in the
resulting object file.  This path name is derived from the source file
name by substituting a @{b}.da@{ub} suffix.

   The format of the @{b}.da@{ub} file is fairly simple.  The first 8-byte
number is the number of counts in the file, followed by the counts
(stored as 8-byte numbers).  Each count corresponds to the number of
times each arc in the program is executed.  The counts are cumulative;
each time the program is executed, it attemps to combine the existing
@{b}.da@{ub} files with the new counts for this invocation of the program.  It
ignores the contents of any @{b}.da@{ub} files whose number of arcs doesn't
correspond to the current program, and merely overwrites them instead.

   All three of these files use the functions in @{b}gcov-io.h@{ub} to store
integers; the functions in this header provide a machine-independent
mechanism for storing and retrieving data from a stream.


@endnode

@node "Trouble" "gcc.guide/Trouble"
@next "Bugs"
@prev "Gcov"
@toc "Main"

Known Causes of Trouble with GNU CC
***********************************

   This section describes known problems that affect users of GNU CC.
Most of these are not GNU CC bugs per se--if they were, we would fix
them.  But the result for a user may be like the result of a bug.

   Some of these problems are due to bugs in other software, some are
missing features that are too much work to add, and some are places
where people's opinions differ as to what is best.


 @{" Actual Bugs              " link "Actual Bugs"}  Bugs we will fix later.
 @{" Installation Problems    " link "Installation Problems"}  Problems that manifest when you install GNU CC.
 @{" Cross-Compiler Problems  " link "Cross-Compiler Problems"}  Common problems of cross compiling with GNU CC.
 @{" Interoperation           " link "Interoperation"}  Problems using GNU CC with other compilers,
			   and with certain linkers, assemblers and debuggers.
 @{" External Bugs            " link "External Bugs"}  Problems compiling certain programs.
 @{" Incompatibilities        " link "Incompatibilities"}  GNU CC is incompatible with traditional C.
 @{" Fixed Headers            " link "Fixed Headers"}  GNU C uses corrected versions of system header files.
                           This is necessary, but doesn't always work smoothly.
 @{" Standard Libraries       " link "Standard Libraries"}  GNU C uses the system C library, which might not be
                           compliant with the ISO/ANSI C standard.
 @{" Disappointments          " link "Disappointments"}  Regrettable things we can't change, but not quite bugs.
 @{" C++ Misunderstandings    " link "C++ Misunderstandings"}  Common misunderstandings with GNU C++.
 @{" Protoize Caveats         " link "Protoize Caveats"}  Things to watch out for when using @{b}protoize@{ub}.
 @{" Non-bugs                 " link "Non-bugs"}  Things we think are right, but some others disagree.
 @{" Warnings and Errors      " link "Warnings and Errors"}  Which problems in your code get warnings,
                         and which get errors.


@endnode

@node "Actual Bugs" "gcc.guide/Actual Bugs"
@next "Installation Problems"
@toc "Trouble"

Actual Bugs We Haven't Fixed Yet
================================

   * The @{b}fixincludes@{ub} script interacts badly with automounters; if the
     directory of system header files is automounted, it tends to be
     unmounted while @{b}fixincludes@{ub} is running.  This would seem to be a
     bug in the automounter.  We don't know any good way to work around
     it.

   * The @{b}fixproto@{ub} script will sometimes add prototypes for the
     @{b}sigsetjmp@{ub} and @{b}siglongjmp@{ub} functions that reference the @{b}jmp_buf@{ub} type
     before that type is defined.  To work around this, edit the
     offending file and place the typedef in front of the prototypes.

   * There are several obscure case of mis-using struct, union, and
     enum tags that are not detected as errors by the compiler.

   * When @{b}-pedantic-errors@{ub} is specified, GNU C will incorrectly give an
     error message when a function name is specified in an expression
     involving the comma operator.

   * Loop unrolling doesn't work properly for certain C++ programs.
     This is a bug in the C++ front end.  It sometimes emits incorrect
     debug info, and the loop unrolling code is unable to recover from
     this error.


@endnode

@node "Installation Problems" "gcc.guide/Installation Problems"
@next "Cross-Compiler Problems"
@prev "Actual Bugs"
@toc "Trouble"

Installation Problems
=====================

   This is a list of problems (and some apparent problems which don't
really mean anything is wrong) that show up during installation of GNU
CC.

   * On certain systems, defining certain environment variables such as
     @{b}CC@{ub} can interfere with the functioning of @{b}make@{ub}.

   * If you encounter seemingly strange errors when trying to build the
     compiler in a directory other than the source directory, it could
     be because you have previously configured the compiler in the
     source directory.  Make sure you have done all the necessary
     preparations.  See @{"Other Dir" link "Other Dir"}.

   * If you build GNU CC on a BSD system using a directory stored in a
     System V file system, problems may occur in running @{b}fixincludes@{ub} if
     the System V file system doesn't support symbolic links.  These
     problems result in a failure to fix the declaration of @{b}size_t@{ub} in
     @{b}sys/types.h@{ub}.  If you find that @{b}size_t@{ub} is a signed type and that
     type mismatches occur, this could be the cause.

     The solution is not to use such a directory for building GNU CC.

   * In previous versions of GNU CC, the @{b}gcc@{ub} driver program looked for
     @{b}as@{ub} and @{b}ld@{ub} in various places; for example, in files beginning with
     @{b}/usr/local/lib/gcc-@{ub}.  GNU CC version 2 looks for them in the
     directory @{b}/usr/local/lib/gcc-lib/TARGET/VERSION@{ub}.

     Thus, to use a version of @{b}as@{ub} or @{b}ld@{ub} that is not the system default,
     for example @{b}gas@{ub} or GNU @{b}ld@{ub}, you must put them in that directory (or
     make links to them from that directory).

   * Some commands executed when making the compiler may fail (return a
     non-zero status) and be ignored by @{b}make@{ub}.  These failures, which
     are often due to files that were not found, are expected, and can
     safely be ignored.

   * It is normal to have warnings in compiling certain files about
     unreachable code and about enumeration type clashes.  These files'
     names begin with @{b}insn-@{ub}.  Also, @{b}real.c@{ub} may get some warnings that
     you can ignore.

   * Sometimes @{b}make@{ub} recompiles parts of the compiler when installing
     the compiler.  In one case, this was traced down to a bug in @{b}make@{ub}.
     Either ignore the problem or switch to GNU Make.

   * If you have installed a program known as purify, you may find that
     it causes errors while linking @{b}enquire@{ub}, which is part of building
     GNU CC.  The fix is to get rid of the file @{b}real-ld@{ub} which purify
     installs--so that GNU CC won't try to use it.

   * On GNU/Linux SLS 1.01, there is a problem with @{b}libc.a@{ub}: it does not
     contain the obstack functions.  However, GNU CC assumes that the
     obstack functions are in @{b}libc.a@{ub} when it is the GNU C library.  To
     work around this problem, change the @{b}__GNU_LIBRARY__@{ub} conditional
     around line 31 to @{b}#if 1@{ub}.

   * On some 386 systems, building the compiler never finishes because
     @{b}enquire@{ub} hangs due to a hardware problem in the motherboard--it
     reports floating point exceptions to the kernel incorrectly.  You
     can install GNU CC except for @{b}float.h@{ub} by patching out the command
     to run @{b}enquire@{ub}.  You may also be able to fix the problem for real
     by getting a replacement motherboard.  This problem was observed in
     Revision E of the Micronics motherboard, and is fixed in Revision
     F.  It has also been observed in the MYLEX MXA-33 motherboard.

     If you encounter this problem, you may also want to consider
     removing the FPU from the socket during the compilation.
     Alternatively, if you are running SCO Unix, you can reboot and
     force the FPU to be ignored.  To do this, type @{b}hd(40)unix auto
     ignorefpu@{ub}.

   * On some 386 systems, GNU CC crashes trying to compile @{b}enquire.c@{ub}.
     This happens on machines that don't have a 387 FPU chip.  On 386
     machines, the system kernel is supposed to emulate the 387 when you
     don't have one.  The crash is due to a bug in the emulator.

     One of these systems is the Unix from Interactive Systems: 386/ix.
     On this system, an alternate emulator is provided, and it does
     work.  To use it, execute this command as super-user:

          ln /etc/emulator.rel1 /etc/emulator

     and then reboot the system.  (The default emulator file remains
     present under the name @{b}emulator.dflt@{ub}.)

     Try using @{b}/etc/emulator.att@{ub}, if you have such a problem on the SCO
     system.

     Another system which has this problem is Esix.  We don't know
     whether it has an alternate emulator that works.

     On NetBSD 0.8, a similar problem manifests itself as these error
     messages:

          enquire.c: In function `fprop':
          enquire.c:2328: floating overflow

   * On SCO systems, when compiling GNU CC with the system's compiler,
     do not use @{b}-O@{ub}.  Some versions of the system's compiler miscompile
     GNU CC with @{b}-O@{ub}.

   * Sometimes on a Sun 4 you may observe a crash in the program
     @{b}genflags@{ub} or @{b}genoutput@{ub} while building GNU CC.  This is said to be
     due to a bug in @{b}sh@{ub}.  You can probably get around it by running
     @{b}genflags@{ub} or @{b}genoutput@{ub} manually and then retrying the @{b}make@{ub}.

   * On Solaris 2, executables of GNU CC version 2.0.2 are commonly
     available, but they have a bug that shows up when compiling current
     versions of GNU CC: undefined symbol errors occur during assembly
     if you use @{b}-g@{ub}.

     The solution is to compile the current version of GNU CC without
     @{b}-g@{ub}.  That makes a working compiler which you can use to recompile
     with @{b}-g@{ub}.

   * Solaris 2 comes with a number of optional OS packages.  Some of
     these packages are needed to use GNU CC fully.  If you did not
     install all optional packages when installing Solaris, you will
     need to verify that the packages that GNU CC needs are installed.

     To check whether an optional package is installed, use the @{b}pkginfo@{ub}
     command.  To add an optional package, use the @{b}pkgadd@{ub} command.  For
     further details, see the Solaris documentation.

     For Solaris 2.0 and 2.1, GNU CC needs six packages: @{b}SUNWarc@{ub},
     @{b}SUNWbtool@{ub}, @{b}SUNWesu@{ub}, @{b}SUNWhea@{ub}, @{b}SUNWlibm@{ub}, and @{b}SUNWtoo@{ub}.

     For Solaris 2.2, GNU CC needs an additional seventh package:
     @{b}SUNWsprot@{ub}.

   * On Solaris 2, trying to use the linker and other tools in @{b}/usr/ucb@{ub}
     to install GNU CC has been observed to cause trouble.  For
     example, the linker may hang indefinitely.  The fix is to remove
     @{b}/usr/ucb@{ub} from your @{b}PATH@{ub}.

   * If you use the 1.31 version of the MIPS assembler (such as was
     shipped with Ultrix 3.1), you will need to use the
     -fno-delayed-branch switch when optimizing floating point code.
     Otherwise, the assembler will complain when the GCC compiler fills
     a branch delay slot with a floating point instruction, such as
     @{b}add.d@{ub}.

   * If on a MIPS system you get an error message saying "does not have
     gp sections for all it's [sic] sectons [sic]", don't worry about
     it.  This happens whenever you use GAS with the MIPS linker, but
     there is not really anything wrong, and it is okay to use the
     output file.  You can stop such warnings by installing the GNU
     linker.

     It would be nice to extend GAS to produce the gp tables, but they
     are optional, and there should not be a warning about their
     absence.

   * In Ultrix 4.0 on the MIPS machine, @{b}stdio.h@{ub} does not work with GNU
     CC at all unless it has been fixed with @{b}fixincludes@{ub}.  This causes
     problems in building GNU CC.  Once GNU CC is installed, the
     problems go away.

     To work around this problem, when making the stage 1 compiler,
     specify this option to Make:

          GCC_FOR_TARGET="./xgcc -B./ -I./include"

     When making stage 2 and stage 3, specify this option:

          CFLAGS="-g -I./include"

   * Users have reported some problems with version 2.0 of the MIPS
     compiler tools that were shipped with Ultrix 4.1.  Version 2.10
     which came with Ultrix 4.2 seems to work fine.

     Users have also reported some problems with version 2.20 of the
     MIPS compiler tools that were shipped with RISC/os 4.x.  The
     earlier version 2.11 seems to work fine.

   * Some versions of the MIPS linker will issue an assertion failure
     when linking code that uses @{b}alloca@{ub} against shared libraries on
     RISC-OS 5.0, and DEC's OSF/1 systems.  This is a bug in the
     linker, that is supposed to be fixed in future revisions.  To
     protect against this, GNU CC passes @{b}-non_shared@{ub} to the linker
     unless you pass an explicit @{b}-shared@{ub} or @{b}-call_shared@{ub} switch.

   * On System V release 3, you may get this error message while
     linking:

          ld fatal: failed to write symbol name SOMETHING
           in strings table for file WHATEVER

     This probably indicates that the disk is full or your ULIMIT won't
     allow the file to be as large as it needs to be.

     This problem can also result because the kernel parameter @{b}MAXUMEM@{ub}
     is too small.  If so, you must regenerate the kernel and make the
     value much larger.  The default value is reported to be 1024; a
     value of 32768 is said to work.  Smaller values may also work.

   * On System V, if you get an error like this,

          /usr/local/lib/bison.simple: In function `yyparse':
          /usr/local/lib/bison.simple:625: virtual memory exhausted

     that too indicates a problem with disk space, ULIMIT, or @{b}MAXUMEM@{ub}.

   * Current GNU CC versions probably do not work on version 2 of the
     NeXT operating system.

   * On NeXTStep 3.0, the Objective C compiler does not work, due,
     apparently, to a kernel bug that it happens to trigger.  This
     problem does not happen on 3.1.

   * On the Tower models 4N0 and 6N0, by default a process is not
     allowed to have more than one megabyte of memory.  GNU CC cannot
     compile itself (or many other programs) with @{b}-O@{ub} in that much
     memory.

     To solve this problem, reconfigure the kernel adding the following
     line to the configuration file:

          MAXUMEM = 4096

   * On HP 9000 series 300 or 400 running HP-UX release 8.0, there is a
     bug in the assembler that must be fixed before GNU CC can be
     built.  This bug manifests itself during the first stage of
     compilation, while building @{b}libgcc2.a@{ub}:

          _floatdisf
          cc1: warning: `-g' option not supported on this version of GCC
          cc1: warning: `-g1' option not supported on this version of GCC
          ./xgcc: Internal compiler error: program as got fatal signal 11

     A patched version of the assembler is available by anonymous ftp
     from @{b}altdorf.ai.mit.edu@{ub} as the file
     @{b}archive/cph/hpux-8.0-assembler@{ub}.  If you have HP software support,
     the patch can also be obtained directly from HP, as described in
     the following note:

          This is the patched assembler, to patch SR#1653-010439, where
          the assembler aborts on floating point constants.

          The bug is not really in the assembler, but in the shared
          library version of the function "cvtnum(3c)".  The bug on
          "cvtnum(3c)" is SR#4701-078451.  Anyway, the attached
          assembler uses the archive library version of "cvtnum(3c)"
          and thus does not exhibit the bug.

     This patch is also known as PHCO_4484.

   * On HP-UX version 8.05, but not on 8.07 or more recent versions,
     the @{b}fixproto@{ub} shell script triggers a bug in the system shell.  If
     you encounter this problem, upgrade your operating system or use
     BASH (the GNU shell) to run @{b}fixproto@{ub}.

   * Some versions of the Pyramid C compiler are reported to be unable
     to compile GNU CC.  You must use an older version of GNU CC for
     bootstrapping.  One indication of this problem is if you get a
     crash when GNU CC compiles the function @{b}muldi3@{ub} in file @{b}libgcc2.c@{ub}.

     You may be able to succeed by getting GNU CC version 1, installing
     it, and using it to compile GNU CC version 2.  The bug in the
     Pyramid C compiler does not seem to affect GNU CC version 1.

   * There may be similar problems on System V Release 3.1 on 386
     systems.

   * On the Intel Paragon (an i860 machine), if you are using operating
     system version 1.0, you will get warnings or errors about
     redefinition of @{b}va_arg@{ub} when you build GNU CC.

     If this happens, then you need to link most programs with the
     library @{b}iclib.a@{ub}.  You must also modify @{b}stdio.h@{ub} as follows: before
     the lines

          #if     defined(__i860__) && !defined(_VA_LIST)
          #include <va_list.h>

     insert the line

          #if __PGC__

     and after the lines

          extern int  vprintf(const char *, va_list );
          extern int  vsprintf(char *, const char *, va_list );
          #endif

     insert the line

          #endif /* __PGC__ */

     These problems don't exist in operating system version 1.1.

   * On the Altos 3068, programs compiled with GNU CC won't work unless
     you fix a kernel bug.  This happens using system versions V.2.2
     1.0gT1 and V.2.2 1.0e and perhaps later versions as well.  See the
     file @{b}README.ALTOS@{ub}.

   * You will get several sorts of compilation and linking errors on the
     we32k if you don't follow the special instructions.  See
     @{"Configurations" link "Configurations"}.

   * A bug in the HP-UX 8.05 (and earlier) shell will cause the fixproto
     program to report an error of the form:

          ./fixproto: sh internal 1K buffer overflow

     To fix this, change the first line of the fixproto script to look
     like:

          #!/bin/ksh


@endnode

@node "Cross-Compiler Problems" "gcc.guide/Cross-Compiler Problems"
@next "Interoperation"
@prev "Installation Problems"
@toc "Trouble"

Cross-Compiler Problems
=======================

   You may run into problems with cross compilation on certain machines,
for several reasons.

   * Cross compilation can run into trouble for certain machines because
     some target machines' assemblers require floating point numbers to
     be written as @{i}integer@{ui} constants in certain contexts.

     The compiler writes these integer constants by examining the
     floating point value as an integer and printing that integer,
     because this is simple to write and independent of the details of
     the floating point representation.  But this does not work if the
     compiler is running on a different machine with an incompatible
     floating point format, or even a different byte-ordering.

     In addition, correct constant folding of floating point values
     requires representing them in the target machine's format.  (The C
     standard does not quite require this, but in practice it is the
     only way to win.)

     It is now possible to overcome these problems by defining macros
     such as @{b}REAL_VALUE_TYPE@{ub}.  But doing so is a substantial amount of
     work for each target machine.  See @{"Cross-compilation" link "Cross-compilation"}.

   * At present, the program @{b}mips-tfile@{ub} which adds debug support to
     object files on MIPS systems does not work in a cross compile
     environment.


@endnode

@node "Interoperation" "gcc.guide/Interoperation"
@next "External Bugs"
@prev "Cross-Compiler Problems"
@toc "Trouble"

Interoperation
==============

   This section lists various difficulties encountered in using GNU C or
GNU C++ together with other compilers or with the assemblers, linkers,
libraries and debuggers on certain systems.

   * Objective C does not work on the RS/6000.

   * GNU C++ does not do name mangling in the same way as other C++
     compilers.  This means that object files compiled with one compiler
     cannot be used with another.

     This effect is intentional, to protect you from more subtle
     problems.  Compilers differ as to many internal details of C++
     implementation, including: how class instances are laid out, how
     multiple inheritance is implemented, and how virtual function
     calls are handled.  If the name encoding were made the same, your
     programs would link against libraries provided from other
     compilers--but the programs would then crash when run.
     Incompatible libraries are then detected at link time, rather than
     at run time.

   * Older GDB versions sometimes fail to read the output of GNU CC
     version 2.  If you have trouble, get GDB version 4.4 or later.

   * DBX rejects some files produced by GNU CC, though it accepts
     similar constructs in output from PCC.  Until someone can supply a
     coherent description of what is valid DBX input and what is not,
     there is nothing I can do about these problems.  You are on your
     own.

   * The GNU assembler (GAS) does not support PIC.  To generate PIC
     code, you must use some other assembler, such as @{b}/bin/as@{ub}.

   * On some BSD systems, including some versions of Ultrix, use of
     profiling causes static variable destructors (currently used only
     in C++) not to be run.

   * Use of @{b}-I/usr/include@{ub} may cause trouble.

     Many systems come with header files that won't work with GNU CC
     unless corrected by @{b}fixincludes@{ub}.  The corrected header files go in
     a new directory; GNU CC searches this directory before
     @{b}/usr/include@{ub}.  If you use @{b}-I/usr/include@{ub}, this tells GNU CC to
     search @{b}/usr/include@{ub} earlier on, before the corrected headers.  The
     result is that you get the uncorrected header files.

     Instead, you should use these options (when compiling C programs):

          -I/usr/local/lib/gcc-lib/TARGET/VERSION/include -I/usr/include

     For C++ programs, GNU CC also uses a special directory that
     defines C++ interfaces to standard C subroutines.  This directory
     is meant to be searched @{i}before@{ui} other standard include directories,
     so that it takes precedence.  If you are compiling C++ programs
     and specifying include directories explicitly, use this option
     first, then the two options above:

          -I/usr/local/lib/g++-include

   * On some SGI systems, when you use @{b}-lgl_s@{ub} as an option, it gets
     translated magically to @{b}-lgl_s -lX11_s -lc_s@{ub}.  Naturally, this
     does not happen when you use GNU CC.  You must specify all three
     options explicitly.

   * On a Sparc, GNU CC aligns all values of type @{b}double@{ub} on an 8-byte
     boundary, and it expects every @{b}double@{ub} to be so aligned.  The Sun
     compiler usually gives @{b}double@{ub} values 8-byte alignment, with one
     exception: function arguments of type @{b}double@{ub} may not be aligned.

     As a result, if a function compiled with Sun CC takes the address
     of an argument of type @{b}double@{ub} and passes this pointer of type
     @{b}double *@{ub} to a function compiled with GNU CC, dereferencing the
     pointer may cause a fatal signal.

     One way to solve this problem is to compile your entire program
     with GNU CC.  Another solution is to modify the function that is
     compiled with Sun CC to copy the argument into a local variable;
     local variables are always properly aligned.  A third solution is
     to modify the function that uses the pointer to dereference it via
     the following function @{b}access_double@{ub} instead of directly with @{b}*@{ub}:

          inline double
          access_double (double *unaligned_ptr)
          {
            union d2i { double d; int i[2]; };
          
            union d2i *p = (union d2i *) unaligned_ptr;
            union d2i u;
          
            u.i[0] = p->i[0];
            u.i[1] = p->i[1];
          
            return u.d;
          }

     Storing into the pointer can be done likewise with the same union.

   * On Solaris, the @{b}malloc@{ub} function in the @{b}libmalloc.a@{ub} library may
     allocate memory that is only 4 byte aligned.  Since GNU CC on the
     Sparc assumes that doubles are 8 byte aligned, this may result in a
     fatal signal if doubles are stored in memory allocated by the
     @{b}libmalloc.a@{ub} library.

     The solution is to not use the @{b}libmalloc.a@{ub} library.  Use instead
     @{b}malloc@{ub} and related functions from @{b}libc.a@{ub}; they do not have this
     problem.

   * Sun forgot to include a static version of @{b}libdl.a@{ub} with some
     versions of SunOS (mainly 4.1).  This results in undefined symbols
     when linking static binaries (that is, if you use @{b}-static@{ub}).  If you
     see undefined symbols @{b}_dlclose@{ub}, @{b}_dlsym@{ub} or @{b}_dlopen@{ub} when linking,
     compile and link against the file @{b}mit/util/misc/dlsym.c@{ub} from the
     MIT version of X windows.

   * The 128-bit long double format that the Sparc port supports
     currently works by using the architecturally defined quad-word
     floating point instructions.  Since there is no hardware that
     supports these instructions they must be emulated by the operating
     system.  Long doubles do not work in Sun OS versions 4.0.3 and
     earlier, because the kernel emulator uses an obsolete and
     incompatible format.  Long doubles do not work in Sun OS version
     4.1.1 due to a problem in a Sun library.  Long doubles do work on
     Sun OS versions 4.1.2 and higher, but GNU CC does not enable them
     by default.  Long doubles appear to work in Sun OS 5.x (Solaris
     2.x).

   * On HP-UX version 9.01 on the HP PA, the HP compiler @{b}cc@{ub} does not
     compile GNU CC correctly.  We do not yet know why.  However, GNU CC
     compiled on earlier HP-UX versions works properly on HP-UX 9.01
     and can compile itself properly on 9.01.

   * On the HP PA machine, ADB sometimes fails to work on functions
     compiled with GNU CC.  Specifically, it fails to work on functions
     that use @{b}alloca@{ub} or variable-size arrays.  This is because GNU CC
     doesn't generate HP-UX unwind descriptors for such functions.  It
     may even be impossible to generate them.

   * Debugging (@{b}-g@{ub}) is not supported on the HP PA machine, unless you
     use the preliminary GNU tools (see @{"Installation" link "Installation"}).

   * Taking the address of a label may generate errors from the HP-UX
     PA assembler.  GAS for the PA does not have this problem.

   * Using floating point parameters for indirect calls to static
     functions will not work when using the HP assembler.  There simply
     is no way for GCC to specify what registers hold arguments for
     static functions when using the HP assembler.  GAS for the PA does
     not have this problem.

   * In extremely rare cases involving some very large functions you may
     receive errors from the HP linker complaining about an out of
     bounds unconditional branch offset.  This used to occur more often
     in previous versions of GNU CC, but is now exceptionally rare.  If
     you should run into it, you can work around by making your
     function smaller.

   * GNU CC compiled code sometimes emits warnings from the HP-UX
     assembler of the form:

          (warning) Use of GR3 when
            frame >= 8192 may cause conflict.

     These warnings are harmless and can be safely ignored.

   * The current version of the assembler (@{b}/bin/as@{ub}) for the RS/6000 has
     certain problems that prevent the @{b}-g@{ub} option in GCC from working.
     Note that @{b}Makefile.in@{ub} uses @{b}-g@{ub} by default when compiling @{b}libgcc2.c@{ub}.

     IBM has produced a fixed version of the assembler.  The upgraded
     assembler unfortunately was not included in any of the AIX 3.2
     update PTF releases (3.2.2, 3.2.3, or 3.2.3e).  Users of AIX 3.1
     should request PTF U403044 from IBM and users of AIX 3.2 should
     request PTF U416277.  See the file @{b}README.RS6000@{ub} for more details
     on these updates.

     You can test for the presense of a fixed assembler by using the
     command

          as -u < /dev/null

     If the command exits normally, the assembler fix already is
     installed.  If the assembler complains that "-u" is an unknown
     flag, you need to order the fix.

   * On the IBM RS/6000, compiling code of the form

          extern int foo;
          
          ... foo ...
          
          static int foo;

     will cause the linker to report an undefined symbol @{b}foo@{ub}.  Although
     this behavior differs from most other systems, it is not a bug
     because redefining an @{b}extern@{ub} variable as @{b}static@{ub} is undefined in
     ANSI C.

   * AIX on the RS/6000 provides support (NLS) for environments outside
     of the United States.  Compilers and assemblers use NLS to support
     locale-specific representations of various objects including
     floating-point numbers ("." vs "," for separating decimal
     fractions).  There have been problems reported where the library
     linked with GCC does not produce the same floating-point formats
     that the assembler accepts.  If you have this problem, set the
     LANG environment variable to "C" or "En_US".

   * Even if you specify @{b}-fdollars-in-identifiers@{ub}, you cannot
     successfully use @{b}$@{ub} in identifiers on the RS/6000 due to a
     restriction in the IBM assembler.  GAS supports these identifiers.

   * On the RS/6000, XLC version 1.3.0.0 will miscompile @{b}jump.c@{ub}.  XLC
     version 1.3.0.1 or later fixes this problem.  You can obtain
     XLC-1.3.0.2 by requesting PTF 421749 from IBM.

   * There is an assembler bug in versions of DG/UX prior to 5.4.2.01
     that occurs when the @{b}fldcr@{ub} instruction is used.  GNU CC uses @{b}fldcr@{ub}
     on the 88100 to serialize volatile memory references.  Use the
     option @{b}-mno-serialize-volatile@{ub} if your version of the assembler
     has this bug.

   * On VMS, GAS versions 1.38.1 and earlier may cause spurious warning
     messages from the linker.  These warning messages complain of
     mismatched psect attributes.  You can ignore them.  See
     @{"VMS Install" link "VMS Install"}.

   * On NewsOS version 3, if you include both of the files @{b}stddef.h@{ub} and
     @{b}sys/types.h@{ub}, you get an error because there are two typedefs of
     @{b}size_t@{ub}.  You should change @{b}sys/types.h@{ub} by adding these lines
     around the definition of @{b}size_t@{ub}:

          #ifndef _SIZE_T
          #define _SIZE_T
          ACTUAL TYPEDEF HERE
          #endif

   * On the Alliant, the system's own convention for returning
     structures and unions is unusual, and is not compatible with GNU
     CC no matter what options are used.

   * On the IBM RT PC, the MetaWare HighC compiler (hc) uses a different
     convention for structure and union returning.  Use the option
     @{b}-mhc-struct-return@{ub} to tell GNU CC to use a convention compatible
     with it.

   * On Ultrix, the Fortran compiler expects registers 2 through 5 to
     be saved by function calls.  However, the C compiler uses
     conventions compatible with BSD Unix: registers 2 through 5 may be
     clobbered by function calls.

     GNU CC uses the same convention as the Ultrix C compiler.  You can
     use these options to produce code compatible with the Fortran
     compiler:

          -fcall-saved-r2 -fcall-saved-r3 -fcall-saved-r4 -fcall-saved-r5

   * On the WE32k, you may find that programs compiled with GNU CC do
     not work with the standard shared C library.  You may need to link
     with the ordinary C compiler.  If you do so, you must specify the
     following options:

          -L/usr/local/lib/gcc-lib/we32k-att-sysv/2.8.1 -lgcc -lc_s

     The first specifies where to find the library @{b}libgcc.a@{ub} specified
     with the @{b}-lgcc@{ub} option.

     GNU CC does linking by invoking @{b}ld@{ub}, just as @{b}cc@{ub} does, and there is
     no reason why it @{i}should@{ui} matter which compilation program you use
     to invoke @{b}ld@{ub}.  If someone tracks this problem down, it can
     probably be fixed easily.

   * On the Alpha, you may get assembler errors about invalid syntax as
     a result of floating point constants.  This is due to a bug in the
     C library functions @{b}ecvt@{ub}, @{b}fcvt@{ub} and @{b}gcvt@{ub}.  Given valid floating
     point numbers, they sometimes print @{b}NaN@{ub}.

   * On Irix 4.0.5F (and perhaps in some other versions), an assembler
     bug sometimes reorders instructions incorrectly when optimization
     is turned on.  If you think this may be happening to you, try
     using the GNU assembler; GAS version 2.1 supports ECOFF on Irix.

     Or use the @{b}-noasmopt@{ub} option when you compile GNU CC with itself,
     and then again when you compile your program.  (This is a temporary
     kludge to turn off assembler optimization on Irix.)  If this
     proves to be what you need, edit the assembler spec in the file
     @{b}specs@{ub} so that it unconditionally passes @{b}-O0@{ub} to the assembler, and
     never passes @{b}-O2@{ub} or @{b}-O3@{ub}.


@endnode

@node "External Bugs" "gcc.guide/External Bugs"
@next "Incompatibilities"
@prev "Interoperation"
@toc "Trouble"

Problems Compiling Certain Programs
===================================

   Certain programs have problems compiling.

   * Parse errors may occur compiling X11 on a Decstation running
     Ultrix 4.2 because of problems in DEC's versions of the X11 header
     files @{b}X11/Xlib.h@{ub} and @{b}X11/Xutil.h@{ub}.  People recommend adding
     @{b}-I/usr/include/mit@{ub} to use the MIT versions of the header files,
     using the @{b}-traditional@{ub} switch to turn off ANSI C, or fixing the
     header files by adding this:

          #ifdef __STDC__
          #define NeedFunctionPrototypes 0
          #endif

   * If you have trouble compiling Perl on a SunOS 4 system, it may be
     because Perl specifies @{b}-I/usr/ucbinclude@{ub}.  This accesses the
     unfixed header files.  Perl specifies the options

          -traditional -Dvolatile=__volatile__
          -I/usr/include/sun -I/usr/ucbinclude
          -fpcc-struct-return

     most of which are unnecessary with GCC 2.4.5 and newer versions.
     You can make a properly working Perl by setting @{b}ccflags@{ub} to
     @{b}-fwritable-strings@{ub} (implied by the @{b}-traditional@{ub} in the original
     options) and @{b}cppflags@{ub} to empty in @{b}config.sh@{ub}, then typing @{b}./doSH;
     make depend; make@{ub}.

   * On various 386 Unix systems derived from System V, including SCO,
     ISC, and ESIX, you may get error messages about running out of
     virtual memory while compiling certain programs.

     You can prevent this problem by linking GNU CC with the GNU malloc
     (which thus replaces the malloc that comes with the system).  GNU
     malloc is available as a separate package, and also in the file
     @{b}src/gmalloc.c@{ub} in the GNU Emacs 19 distribution.

     If you have installed GNU malloc as a separate library package,
     use this option when you relink GNU CC:

          MALLOC=/usr/local/lib/libgmalloc.a

     Alternatively, if you have compiled @{b}gmalloc.c@{ub} from Emacs 19, copy
     the object file to @{b}gmalloc.o@{ub} and use this option when you relink
     GNU CC:

          MALLOC=gmalloc.o


@endnode

@node "Incompatibilities" "gcc.guide/Incompatibilities"
@next "Fixed Headers"
@prev "External Bugs"
@toc "Trouble"

Incompatibilities of GNU CC
===========================

   There are several noteworthy incompatibilities between GNU C and most
existing (non-ANSI) versions of C.  The @{b}-traditional@{ub} option eliminates
many of these incompatibilities, @{i}but not all@{ui}, by telling GNU C to
behave like the other C compilers.

   * GNU CC normally makes string constants read-only.  If several
     identical-looking string constants are used, GNU CC stores only one
     copy of the string.

     One consequence is that you cannot call @{b}mktemp@{ub} with a string
     constant argument.  The function @{b}mktemp@{ub} always alters the string
     its argument points to.

     Another consequence is that @{b}sscanf@{ub} does not work on some systems
     when passed a string constant as its format control string or
     input.  This is because @{b}sscanf@{ub} incorrectly tries to write into the
     string constant.  Likewise @{b}fscanf@{ub} and @{b}scanf@{ub}.

     The best solution to these problems is to change the program to use
     @{b}char@{ub}-array variables with initialization strings for these
     purposes instead of string constants.  But if this is not possible,
     you can use the @{b}-fwritable-strings@{ub} flag, which directs GNU CC to
     handle string constants the same way most C compilers do.
     @{b}-traditional@{ub} also has this effect, among others.

   * @{b}-2147483648@{ub} is positive.

     This is because 2147483648 cannot fit in the type @{b}int@{ub}, so
     (following the ANSI C rules) its data type is @{b}unsigned long int@{ub}.
     Negating this value yields 2147483648 again.

   * GNU CC does not substitute macro arguments when they appear inside
     of string constants.  For example, the following macro in GNU CC

          #define foo(a) "a"

     will produce output @{b}"a"@{ub} regardless of what the argument A is.

     The @{b}-traditional@{ub} option directs GNU CC to handle such cases (among
     others) in the old-fashioned (non-ANSI) fashion.

   * When you use @{b}setjmp@{ub} and @{b}longjmp@{ub}, the only automatic variables
     guaranteed to remain valid are those declared @{b}volatile@{ub}.  This is a
     consequence of automatic register allocation.  Consider this
     function:

          jmp_buf j;
          
          foo ()
          {
            int a, b;
          
            a = fun1 ();
            if (setjmp (j))
              return a;
          
            a = fun2 ();
            /* @{b}longjmp (j)@{ub} may occur in @{b}fun3@{ub}. */
            return a + fun3 ();
          }

     Here @{b}a@{ub} may or may not be restored to its first value when the
     @{b}longjmp@{ub} occurs.  If @{b}a@{ub} is allocated in a register, then its first
     value is restored; otherwise, it keeps the last value stored in it.

     If you use the @{b}-W@{ub} option with the @{b}-O@{ub} option, you will get a
     warning when GNU CC thinks such a problem might be possible.

     The @{b}-traditional@{ub} option directs GNU C to put variables in the
     stack by default, rather than in registers, in functions that call
     @{b}setjmp@{ub}.  This results in the behavior found in traditional C
     compilers.

   * Programs that use preprocessing directives in the middle of macro
     arguments do not work with GNU CC.  For example, a program like
     this will not work:

          foobar (
          #define luser
                  hack)

     ANSI C does not permit such a construct.  It would make sense to
     support it when @{b}-traditional@{ub} is used, but it is too much work to
     implement.

   * Declarations of external variables and functions within a block
     apply only to the block containing the declaration.  In other
     words, they have the same scope as any other declaration in the
     same place.

     In some other C compilers, a @{b}extern@{ub} declaration affects all the
     rest of the file even if it happens within a block.

     The @{b}-traditional@{ub} option directs GNU C to treat all @{b}extern@{ub}
     declarations as global, like traditional compilers.

   * In traditional C, you can combine @{b}long@{ub}, etc., with a typedef name,
     as shown here:

          typedef int foo;
          typedef long foo bar;

     In ANSI C, this is not allowed: @{b}long@{ub} and other type modifiers
     require an explicit @{b}int@{ub}.  Because this criterion is expressed by
     Bison grammar rules rather than C code, the @{b}-traditional@{ub} flag
     cannot alter it.

   * PCC allows typedef names to be used as function parameters.  The
     difficulty described immediately above applies here too.

   * PCC allows whitespace in the middle of compound assignment
     operators such as @{b}+=@{ub}.  GNU CC, following the ANSI standard, does
     not allow this.  The difficulty described immediately above
     applies here too.

   * GNU CC complains about unterminated character constants inside of
     preprocessing conditionals that fail.  Some programs have English
     comments enclosed in conditionals that are guaranteed to fail; if
     these comments contain apostrophes, GNU CC will probably report an
     error.  For example, this code would produce an error:

          #if 0
          You can't expect this to work.
          #endif

     The best solution to such a problem is to put the text into an
     actual C comment delimited by @{b}/*...*/@{ub}.  However, @{b}-traditional@{ub}
     suppresses these error messages.

   * Many user programs contain the declaration @{b}long time ();@{ub}.  In the
     past, the system header files on many systems did not actually
     declare @{b}time@{ub}, so it did not matter what type your program declared
     it to return.  But in systems with ANSI C headers, @{b}time@{ub} is
     declared to return @{b}time_t@{ub}, and if that is not the same as @{b}long@{ub},
     then @{b}long time ();@{ub} is erroneous.

     The solution is to change your program to use @{b}time_t@{ub} as the return
     type of @{b}time@{ub}.

   * When compiling functions that return @{b}float@{ub}, PCC converts it to a
     double.  GNU CC actually returns a @{b}float@{ub}.  If you are concerned
     with PCC compatibility, you should declare your functions to return
     @{b}double@{ub}; you might as well say what you mean.

   * When compiling functions that return structures or unions, GNU CC
     output code normally uses a method different from that used on most
     versions of Unix.  As a result, code compiled with GNU CC cannot
     call a structure-returning function compiled with PCC, and vice
     versa.

     The method used by GNU CC is as follows: a structure or union
     which is 1, 2, 4 or 8 bytes long is returned like a scalar.  A
     structure or union with any other size is stored into an address
     supplied by the caller (usually in a special, fixed register, but
     on some machines it is passed on the stack).  The
     machine-description macros @{b}STRUCT_VALUE@{ub} and @{b}STRUCT_INCOMING_VALUE@{ub}
     tell GNU CC where to pass this address.

     By contrast, PCC on most target machines returns structures and
     unions of any size by copying the data into an area of static
     storage, and then returning the address of that storage as if it
     were a pointer value.  The caller must copy the data from that
     memory area to the place where the value is wanted.  GNU CC does
     not use this method because it is slower and nonreentrant.

     On some newer machines, PCC uses a reentrant convention for all
     structure and union returning.  GNU CC on most of these machines
     uses a compatible convention when returning structures and unions
     in memory, but still returns small structures and unions in
     registers.

     You can tell GNU CC to use a compatible convention for all
     structure and union returning with the option @{b}-fpcc-struct-return@{ub}.

   * GNU C complains about program fragments such as @{b}0x74ae-0x4000@{ub}
     which appear to be two hexadecimal constants separated by the minus
     operator.  Actually, this string is a single @{i}preprocessing token@{ui}.
     Each such token must correspond to one token in C.  Since this
     does not, GNU C prints an error message.  Although it may appear
     obvious that what is meant is an operator and two values, the ANSI
     C standard specifically requires that this be treated as erroneous.

     A @{i}preprocessing token@{ui} is a @{i}preprocessing number@{ui} if it begins with
     a digit and is followed by letters, underscores, digits, periods
     and @{b}e+@{ub}, @{b}e-@{ub}, @{b}E+@{ub}, or @{b}E-@{ub} character sequences.

     To make the above program fragment valid, place whitespace in
     front of the minus sign.  This whitespace will end the
     preprocessing number.


@endnode

@node "Fixed Headers" "gcc.guide/Fixed Headers"
@next "Standard Libraries"
@prev "Incompatibilities"
@toc "Trouble"

Fixed Header Files
==================

   GNU CC needs to install corrected versions of some system header
files.  This is because most target systems have some header files that
won't work with GNU CC unless they are changed.  Some have bugs, some
are incompatible with ANSI C, and some depend on special features of
other compilers.

   Installing GNU CC automatically creates and installs the fixed header
files, by running a program called @{b}fixincludes@{ub} (or for certain targets
an alternative such as @{b}fixinc.svr4@{ub}).  Normally, you don't need to pay
attention to this.  But there are cases where it doesn't do the right
thing automatically.

   * If you update the system's header files, such as by installing a
     new system version, the fixed header files of GNU CC are not
     automatically updated.  The easiest way to update them is to
     reinstall GNU CC.  (If you want to be clever, look in the makefile
     and you can find a shortcut.)

   * On some systems, in particular SunOS 4, header file directories
     contain machine-specific symbolic links in certain places.  This
     makes it possible to share most of the header files among hosts
     running the same version of SunOS 4 on different machine models.

     The programs that fix the header files do not understand this
     special way of using symbolic links; therefore, the directory of
     fixed header files is good only for the machine model used to
     build it.

     In SunOS 4, only programs that look inside the kernel will notice
     the difference between machine models.  Therefore, for most
     purposes, you need not be concerned about this.

     It is possible to make separate sets of fixed header files for the
     different machine models, and arrange a structure of symbolic
     links so as to use the proper set, but you'll have to do this by
     hand.

   * On Lynxos, GNU CC by default does not fix the header files.  This
     is because bugs in the shell cause the @{b}fixincludes@{ub} script to fail.

     This means you will encounter problems due to bugs in the system
     header files.  It may be no comfort that they aren't GNU CC's
     fault, but it does mean that there's nothing for us to do about
     them.


@endnode

@node "Standard Libraries" "gcc.guide/Standard Libraries"
@next "Disappointments"
@prev "Fixed Headers"
@toc "Trouble"

Standard Libraries
==================

   GNU CC by itself attempts to be what the ISO/ANSI C standard calls a
@{i}conforming freestanding implementation@{ui}.  This means all ANSI C language
features are available, as well as the contents of @{b}float.h@{ub}, @{b}limits.h@{ub},
@{b}stdarg.h@{ub}, and @{b}stddef.h@{ub}.  The rest of the C library is supplied by the
vendor of the operating system.  If that C library doesn't conform to
the C standards, then your programs might get warnings (especially when
using @{b}-Wall@{ub}) that you don't expect.

   For example, the @{b}sprintf@{ub} function on SunOS 4.1.3 returns @{b}char *@{ub}
while the C standard says that @{b}sprintf@{ub} returns an @{b}int@{ub}.  The @{b}fixincludes@{ub}
program could make the prototype for this function match the Standard,
but that would be wrong, since the function will still return @{b}char *@{ub}.

   If you need a Standard compliant library, then you need to find one,
as GNU CC does not provide one.  The GNU C library (called @{b}glibc@{ub}) has
been ported to a number of operating systems, and provides ANSI/ISO,
POSIX, BSD and SystemV compatibility.  You could also ask your operating
system vendor if newer libraries are available.


@endnode

@node "Disappointments" "gcc.guide/Disappointments"
@next "C++ Misunderstandings"
@prev "Standard Libraries"
@toc "Trouble"

Disappointments and Misunderstandings
=====================================

   These problems are perhaps regrettable, but we don't know any
practical way around them.

   * Certain local variables aren't recognized by debuggers when you
     compile with optimization.

     This occurs because sometimes GNU CC optimizes the variable out of
     existence.  There is no way to tell the debugger how to compute the
     value such a variable "would have had", and it is not clear that
     would be desirable anyway.  So GNU CC simply does not mention the
     eliminated variable when it writes debugging information.

     You have to expect a certain amount of disagreement between the
     executable and your source code, when you use optimization.

   * Users often think it is a bug when GNU CC reports an error for code
     like this:

          int foo (struct mumble *);
          
          struct mumble { ... };
          
          int foo (struct mumble *x)
          { ... }

     This code really is erroneous, because the scope of @{b}struct mumble@{ub}
     in the prototype is limited to the argument list containing it.
     It does not refer to the @{b}struct mumble@{ub} defined with file scope
     immediately below--they are two unrelated types with similar names
     in different scopes.

     But in the definition of @{b}foo@{ub}, the file-scope type is used because
     that is available to be inherited.  Thus, the definition and the
     prototype do not match, and you get an error.

     This behavior may seem silly, but it's what the ANSI standard
     specifies.  It is easy enough for you to make your code work by
     moving the definition of @{b}struct mumble@{ub} above the prototype.  It's
     not worth being incompatible with ANSI C just to avoid an error
     for the example shown above.

   * Accesses to bitfields even in volatile objects works by accessing
     larger objects, such as a byte or a word.  You cannot rely on what
     size of object is accessed in order to read or write the bitfield;
     it may even vary for a given bitfield according to the precise
     usage.

     If you care about controlling the amount of memory that is
     accessed, use volatile but do not use bitfields.

   * GNU CC comes with shell scripts to fix certain known problems in
     system header files.  They install corrected copies of various
     header files in a special directory where only GNU CC will
     normally look for them.  The scripts adapt to various systems by
     searching all the system header files for the problem cases that
     we know about.

     If new system header files are installed, nothing automatically
     arranges to update the corrected header files.  You will have to
     reinstall GNU CC to fix the new header files.  More specifically,
     go to the build directory and delete the files @{b}stmp-fixinc@{ub} and
     @{b}stmp-headers@{ub}, and the subdirectory @{b}include@{ub}; then do @{b}make install@{ub}
     again.

   * On 68000 and x86 systems, for instance, you can get paradoxical
     results if you test the precise values of floating point numbers.
     For example, you can find that a floating point value which is not
     a NaN is not equal to itself.  This results from the fact that the
     floating point registers hold a few more bits of precision than
     fit in a @{b}double@{ub} in memory.  Compiled code moves values between
     memory and floating point registers at its convenience, and moving
     them into memory truncates them.

     You can partially avoid this problem by using the @{b}-ffloat-store@{ub}
     option (see @{"Optimize Options" link "Optimize Options"}).

   * On the MIPS, variable argument functions using @{b}varargs.h@{ub} cannot
     have a floating point value for the first argument.  The reason
     for this is that in the absence of a prototype in scope, if the
     first argument is a floating point, it is passed in a floating
     point register, rather than an integer register.

     If the code is rewritten to use the ANSI standard @{b}stdarg.h@{ub} method
     of variable arguments, and the prototype is in scope at the time
     of the call, everything will work fine.

   * On the H8/300 and H8/300H, variable argument functions must be
     implemented using the ANSI standard @{b}stdarg.h@{ub} method of variable
     arguments.  Furthermore, calls to functions using @{b}stdarg.h@{ub}
     variable arguments must have a prototype for the called function
     in scope at the time of the call.


@endnode

@node "C++ Misunderstandings" "gcc.guide/C++ Misunderstandings"
@next "Protoize Caveats"
@prev "Disappointments"
@toc "Trouble"

Common Misunderstandings with GNU C++
=====================================

   C++ is a complex language and an evolving one, and its standard
definition (the ANSI C++ draft standard) is also evolving.  As a result,
your C++ compiler may occasionally surprise you, even when its behavior
is correct.  This section discusses some areas that frequently give
rise to questions of this sort.


 @{" Static Definitions " link "Static Definitions"}  Static member declarations are not definitions
 @{" Temporaries        " link "Temporaries"}  Temporaries may vanish before you expect


@endnode

@node "Static Definitions" "gcc.guide/Static Definitions"
@next "Temporaries"
@toc "C++ Misunderstandings"

Declare @{i}and@{ui} Define Static Members
---------------------------------

   When a class has static data members, it is not enough to @{i}declare@{ui}
the static member; you must also @{i}define@{ui} it.  For example:

     class Foo
     {
       ...
       void method();
       static int bar;
     };

   This declaration only establishes that the class @{b}Foo@{ub} has an @{b}int@{ub}
named @{b}Foo::bar@{ub}, and a member function named @{b}Foo::method@{ub}.  But you still
need to define @{i}both@{ui} @{b}method@{ub} and @{b}bar@{ub} elsewhere.  According to the draft
ANSI standard, you must supply an initializer in one (and only one)
source file, such as:

     int Foo::bar = 0;

   Other C++ compilers may not correctly implement the standard
behavior.  As a result, when you switch to @{b}g++@{ub} from one of these
compilers, you may discover that a program that appeared to work
correctly in fact does not conform to the standard: @{b}g++@{ub} reports as
undefined symbols any static data members that lack definitions.


@endnode

@node "Temporaries" "gcc.guide/Temporaries"
@prev "Static Definitions"
@toc "C++ Misunderstandings"

Temporaries May Vanish Before You Expect
----------------------------------------

   It is dangerous to use pointers or references to @{i}portions@{ui} of a
temporary object.  The compiler may very well delete the object before
you expect it to, leaving a pointer to garbage.  The most common place
where this problem crops up is in classes like the libg++ @{b}String@{ub} class,
that define a conversion function to type @{b}char *@{ub} or @{b}const char *@{ub}.
However, any class that returns a pointer to some internal structure is
potentially subject to this problem.

   For example, a program may use a function @{b}strfunc@{ub} that returns
@{b}String@{ub} objects, and another function @{b}charfunc@{ub} that operates on pointers
to @{b}char@{ub}:

     String strfunc ();
     void charfunc (const char *);

In this situation, it may seem natural to write @{b}charfunc (strfunc ());@{ub}
based on the knowledge that class @{b}String@{ub} has an explicit conversion to
@{b}char@{ub} pointers.  However, what really happens is akin to @{b}charfunc
(strfunc ().convert ());@{ub}, where the @{b}convert@{ub} method is a function to do
the same data conversion normally performed by a cast.  Since the last
use of the temporary @{b}String@{ub} object is the call to the conversion
function, the compiler may delete that object before actually calling
@{b}charfunc@{ub}.  The compiler has no way of knowing that deleting the @{b}String@{ub}
object will invalidate the pointer.  The pointer then points to
garbage, so that by the time @{b}charfunc@{ub} is called, it gets an invalid
argument.

   Code like this may run successfully under some other compilers,
especially those that delete temporaries relatively late.  However, the
GNU C++ behavior is also standard-conforming, so if your program depends
on late destruction of temporaries it is not portable.

   If you think this is surprising, you should be aware that the ANSI
C++ committee continues to debate the lifetime-of-temporaries problem.

   For now, at least, the safe way to write such code is to give the
temporary a name, which forces it to remain until the end of the scope
of the name.  For example:

     String& tmp = strfunc ();
     charfunc (tmp);


@endnode

@node "Protoize Caveats" "gcc.guide/Protoize Caveats"
@next "Non-bugs"
@prev "C++ Misunderstandings"
@toc "Trouble"

Caveats of using @{b}protoize@{ub}
=========================

   The conversion programs @{b}protoize@{ub} and @{b}unprotoize@{ub} can sometimes change
a source file in a way that won't work unless you rearrange it.

   * @{b}protoize@{ub} can insert references to a type name or type tag before
     the definition, or in a file where they are not defined.

     If this happens, compiler error messages should show you where the
     new references are, so fixing the file by hand is straightforward.

   * There are some C constructs which @{b}protoize@{ub} cannot figure out.  For
     example, it can't determine argument types for declaring a
     pointer-to-function variable; this you must do by hand.  @{b}protoize@{ub}
     inserts a comment containing @{b}???@{ub} each time it finds such a
     variable; so you can find all such variables by searching for this
     string.  ANSI C does not require declaring the argument types of
     pointer-to-function types.

   * Using @{b}unprotoize@{ub} can easily introduce bugs.  If the program relied
     on prototypes to bring about conversion of arguments, these
     conversions will not take place in the program without prototypes.
     One case in which you can be sure @{b}unprotoize@{ub} is safe is when you
     are removing prototypes that were made with @{b}protoize@{ub}; if the
     program worked before without any prototypes, it will work again
     without them.

     You can find all the places where this problem might occur by
     compiling the program with the @{b}-Wconversion@{ub} option.  It prints a
     warning whenever an argument is converted.

   * Both conversion programs can be confused if there are macro calls
     in and around the text to be converted.  In other words, the
     standard syntax for a declaration or definition must not result
     from expanding a macro.  This problem is inherent in the design of
     C and cannot be fixed.  If only a few functions have confusing
     macro calls, you can easily convert them manually.

   * @{b}protoize@{ub} cannot get the argument types for a function whose
     definition was not actually compiled due to preprocessing
     conditionals.  When this happens, @{b}protoize@{ub} changes nothing in
     regard to such a function.  @{b}protoize@{ub} tries to detect such
     instances and warn about them.

     You can generally work around this problem by using @{b}protoize@{ub} step
     by step, each time specifying a different set of @{b}-D@{ub} options for
     compilation, until all of the functions have been converted.
     There is no automatic way to verify that you have got them all,
     however.

   * Confusion may result if there is an occasion to convert a function
     declaration or definition in a region of source code where there
     is more than one formal parameter list present.  Thus, attempts to
     convert code containing multiple (conditionally compiled) versions
     of a single function header (in the same vicinity) may not produce
     the desired (or expected) results.

     If you plan on converting source files which contain such code, it
     is recommended that you first make sure that each conditionally
     compiled region of source code which contains an alternative
     function header also contains at least one additional follower
     token (past the final right parenthesis of the function header).
     This should circumvent the problem.

   * @{b}unprotoize@{ub} can become confused when trying to convert a function
     definition or declaration which contains a declaration for a
     pointer-to-function formal argument which has the same name as the
     function being defined or declared.  We recommand you avoid such
     choices of formal parameter names.

   * You might also want to correct some of the indentation by hand and
     break long lines.  (The conversion programs don't write lines
     longer than eighty characters in any case.)


@endnode

@node "Non-bugs" "gcc.guide/Non-bugs"
@next "Warnings and Errors"
@prev "Protoize Caveats"
@toc "Trouble"

Certain Changes We Don't Want to Make
=====================================

   This section lists changes that people frequently request, but which
we do not make because we think GNU CC is better without them.

   * Checking the number and type of arguments to a function which has
     an old-fashioned definition and no prototype.

     Such a feature would work only occasionally--only for calls that
     appear in the same file as the called function, following the
     definition.  The only way to check all calls reliably is to add a
     prototype for the function.  But adding a prototype eliminates the
     motivation for this feature.  So the feature is not worthwhile.

   * Warning about using an expression whose type is signed as a shift
     count.

     Shift count operands are probably signed more often than unsigned.
     Warning about this would cause far more annoyance than good.

   * Warning about assigning a signed value to an unsigned variable.

     Such assignments must be very common; warning about them would
     cause more annoyance than good.

   * Warning about unreachable code.

     It's very common to have unreachable code in machine-generated
     programs.  For example, this happens normally in some files of GNU
     C itself.

   * Warning when a non-void function value is ignored.

     Coming as I do from a Lisp background, I balk at the idea that
     there is something dangerous about discarding a value.  There are
     functions that return values which some callers may find useful;
     it makes no sense to clutter the program with a cast to @{b}void@{ub}
     whenever the value isn't useful.

   * Assuming (for optimization) that the address of an external symbol
     is never zero.

     This assumption is false on certain systems when @{b}#pragma weak@{ub} is
     used.

   * Making @{b}-fshort-enums@{ub} the default.

     This would cause storage layout to be incompatible with most other
     C compilers.  And it doesn't seem very important, given that you
     can get the same result in other ways.  The case where it matters
     most is when the enumeration-valued object is inside a structure,
     and in that case you can specify a field width explicitly.

   * Making bitfields unsigned by default on particular machines where
     "the ABI standard" says to do so.

     The ANSI C standard leaves it up to the implementation whether a
     bitfield declared plain @{b}int@{ub} is signed or not.  This in effect
     creates two alternative dialects of C.

     The GNU C compiler supports both dialects; you can specify the
     signed dialect with @{b}-fsigned-bitfields@{ub} and the unsigned dialect
     with @{b}-funsigned-bitfields@{ub}.  However, this leaves open the question
     of which dialect to use by default.

     Currently, the preferred dialect makes plain bitfields signed,
     because this is simplest.  Since @{b}int@{ub} is the same as @{b}signed int@{ub} in
     every other context, it is cleanest for them to be the same in
     bitfields as well.

     Some computer manufacturers have published Application Binary
     Interface standards which specify that plain bitfields should be
     unsigned.  It is a mistake, however, to say anything about this
     issue in an ABI.  This is because the handling of plain bitfields
     distinguishes two dialects of C.  Both dialects are meaningful on
     every type of machine.  Whether a particular object file was
     compiled using signed bitfields or unsigned is of no concern to
     other object files, even if they access the same bitfields in the
     same data structures.

     A given program is written in one or the other of these two
     dialects.  The program stands a chance to work on most any machine
     if it is compiled with the proper dialect.  It is unlikely to work
     at all if compiled with the wrong dialect.

     Many users appreciate the GNU C compiler because it provides an
     environment that is uniform across machines.  These users would be
     inconvenienced if the compiler treated plain bitfields differently
     on certain machines.

     Occasionally users write programs intended only for a particular
     machine type.  On these occasions, the users would benefit if the
     GNU C compiler were to support by default the same dialect as the
     other compilers on that machine.  But such applications are rare.
     And users writing a program to run on more than one type of
     machine cannot possibly benefit from this kind of compatibility.

     This is why GNU CC does and will treat plain bitfields in the same
     fashion on all types of machines (by default).

     There are some arguments for making bitfields unsigned by default
     on all machines.  If, for example, this becomes a universal de
     facto standard, it would make sense for GNU CC to go along with
     it.  This is something to be considered in the future.

     (Of course, users strongly concerned about portability should
     indicate explicitly in each bitfield whether it is signed or not.
     In this way, they write programs which have the same meaning in
     both C dialects.)

   * Undefining @{b}__STDC__@{ub} when @{b}-ansi@{ub} is not used.

     Currently, GNU CC defines @{b}__STDC__@{ub} as long as you don't use
     @{b}-traditional@{ub}.  This provides good results in practice.

     Programmers normally use conditionals on @{b}__STDC__@{ub} to ask whether
     it is safe to use certain features of ANSI C, such as function
     prototypes or ANSI token concatenation.  Since plain @{b}gcc@{ub} supports
     all the features of ANSI C, the correct answer to these questions
     is "yes".

     Some users try to use @{b}__STDC__@{ub} to check for the availability of
     certain library facilities.  This is actually incorrect usage in
     an ANSI C program, because the ANSI C standard says that a
     conforming freestanding implementation should define @{b}__STDC__@{ub} even
     though it does not have the library facilities.  @{b}gcc -ansi
     -pedantic@{ub} is a conforming freestanding implementation, and it is
     therefore required to define @{b}__STDC__@{ub}, even though it does not
     come with an ANSI C library.

     Sometimes people say that defining @{b}__STDC__@{ub} in a compiler that
     does not completely conform to the ANSI C standard somehow
     violates the standard.  This is illogical.  The standard is a
     standard for compilers that claim to support ANSI C, such as @{b}gcc
     -ansi@{ub}--not for other compilers such as plain @{b}gcc@{ub}.  Whatever the
     ANSI C standard says is relevant to the design of plain @{b}gcc@{ub}
     without @{b}-ansi@{ub} only for pragmatic reasons, not as a requirement.

     GNU CC normally defines @{b}__STDC__@{ub} to be 1, and in addition defines
     @{b}__STRICT_ANSI__@{ub} if you specify the @{b}-ansi@{ub} option.  On some hosts,
     system include files use a different convention, where @{b}__STDC__@{ub} is
     normally 0, but is 1 if the user specifies strict conformance to
     the C Standard.  GNU CC follows the host convention when
     processing system include files, but when processing user files it
     follows the usual GNU C convention.

   * Undefining @{b}__STDC__@{ub} in C++.

     Programs written to compile with C++-to-C translators get the
     value of @{b}__STDC__@{ub} that goes with the C compiler that is
     subsequently used.  These programs must test @{b}__STDC__@{ub} to determine
     what kind of C preprocessor that compiler uses: whether they
     should concatenate tokens in the ANSI C fashion or in the
     traditional fashion.

     These programs work properly with GNU C++ if @{b}__STDC__@{ub} is defined.
     They would not work otherwise.

     In addition, many header files are written to provide prototypes
     in ANSI C but not in traditional C.  Many of these header files
     can work without change in C++ provided @{b}__STDC__@{ub} is defined.  If
     @{b}__STDC__@{ub} is not defined, they will all fail, and will all need to
     be changed to test explicitly for C++ as well.

   * Deleting "empty" loops.

     GNU CC does not delete "empty" loops because the most likely reason
     you would put one in a program is to have a delay.  Deleting them
     will not make real programs run any faster, so it would be
     pointless.

     It would be different if optimization of a nonempty loop could
     produce an empty one.  But this generally can't happen.

   * Making side effects happen in the same order as in some other
     compiler.

     It is never safe to depend on the order of evaluation of side
     effects.  For example, a function call like this may very well
     behave differently from one compiler to another:

          void func (int, int);
          
          int i = 2;
          func (i++, i++);

     There is no guarantee (in either the C or the C++ standard language
     definitions) that the increments will be evaluated in any
     particular order.  Either increment might happen first.  @{b}func@{ub}
     might get the arguments @{b}2, 3@{ub}, or it might get @{b}3, 2@{ub}, or even @{b}2, 2@{ub}.

   * Not allowing structures with volatile fields in registers.

     Strictly speaking, there is no prohibition in the ANSI C standard
     against allowing structures with volatile fields in registers, but
     it does not seem to make any sense and is probably not what you
     wanted to do.  So the compiler will give an error message in this
     case.


@endnode

@node "Warnings and Errors" "gcc.guide/Warnings and Errors"
@prev "Non-bugs"
@toc "Trouble"

Warning Messages and Error Messages
===================================

   The GNU compiler can produce two kinds of diagnostics: errors and
warnings.  Each kind has a different purpose:

    @{i} Errors@{ui} report problems that make it impossible to compile your
     program.  GNU CC reports errors with the source file name and line
     number where the problem is apparent.

    @{i} Warnings@{ui} report other unusual conditions in your code that @{i}may@{ui}
     indicate a problem, although compilation can (and does) proceed.
     Warning messages also report the source file name and line number,
     but include the text @{b}warning:@{ub} to distinguish them from error
     messages.

   Warnings may indicate danger points where you should check to make
sure that your program really does what you intend; or the use of
obsolete features; or the use of nonstandard features of GNU C or C++.
Many warnings are issued only if you ask for them, with one of the @{b}-W@{ub}
options (for instance, @{b}-Wall@{ub} requests a variety of useful warnings).

   GNU CC always tries to compile your program if possible; it never
gratuitously rejects a program whose meaning is clear merely because
(for instance) it fails to conform to a standard.  In some cases,
however, the C and C++ standards specify that certain extensions are
forbidden, and a diagnostic @{i}must@{ui} be issued by a conforming compiler.
The @{b}-pedantic@{ub} option tells GNU CC to issue warnings in such cases;
@{b}-pedantic-errors@{ub} says to make them errors instead.  This does not mean
that @{i}all@{ui} non-ANSI constructs get warnings or errors.

   See @{"Options to Request or Suppress Warnings" link "Warning Options"}, for more detail on
these and related command-line options.


@endnode

@node "Bugs" "gcc.guide/Bugs"
@next "Service"
@prev "Trouble"
@toc "Main"

Reporting Bugs
**************

   Your bug reports play an essential role in making GNU CC reliable.

   When you encounter a problem, the first thing to do is to see if it
is already known.  See @{"Trouble" link "Trouble"}.  If it isn't known, then you should
report the problem.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  (If it does not, look in the service directory; see
@{"Service" link "Service"}.)  In any case, the principal function of a bug report is to
help the entire community by making the next version of GNU CC work
better.  Bug reports are your contribution to the maintenance of GNU CC.

   Since the maintainers are very overloaded, we cannot respond to every
bug report.  However, if the bug has not been fixed, we are likely to
send you a patch and ask you to tell us whether it works.

   In order for a bug report to serve its purpose, you must include the
information that makes for fixing the bug.


 @{" Criteria                " link "Bug Criteria"}  Have you really found a bug?
 @{" Where                   " link "Bug Lists"}  Where to send your bug report.
 @{" Reporting               " link "Bug Reporting"}  How to report a bug effectively.
 @{" Patches                 " link "Sending Patches"}  How to send a patch for GNU CC.
 @{" Known                   " link "Trouble"}  Known problems.
 @{" Help                    " link "Service"}  Where to ask for help.


@endnode

@node "Bug Criteria" "gcc.guide/Bug Criteria"
@next "Bug Lists"
@toc "Bugs"

Have You Found a Bug?
=====================

   If you are not sure whether you have found a bug, here are some
guidelines:

   * If the compiler gets a fatal signal, for any input whatever, that
     is a compiler bug.  Reliable compilers never crash.

   * If the compiler produces invalid assembly code, for any input
     whatever (except an @{b}asm@{ub} statement), that is a compiler bug, unless
     the compiler reports errors (not just warnings) which would
     ordinarily prevent the assembler from being run.

   * If the compiler produces valid assembly code that does not
     correctly execute the input source code, that is a compiler bug.

     However, you must double-check to make sure, because you may have
     run into an incompatibility between GNU C and traditional C (see
     @{"Incompatibilities" link "Incompatibilities"}).  These incompatibilities might be considered
     bugs, but they are inescapable consequences of valuable features.

     Or you may have a program whose behavior is undefined, which
     happened by chance to give the desired results with another C or
     C++ compiler.

     For example, in many nonoptimizing compilers, you can write @{b}x;@{ub} at
     the end of a function instead of @{b}return x;@{ub}, with the same results.
     But the value of the function is undefined if @{b}return@{ub} is omitted;
     it is not a bug when GNU CC produces different results.

     Problems often result from expressions with two increment
     operators, as in @{b}f (*p++, *p++)@{ub}.  Your previous compiler might have
     interpreted that expression the way you intended; GNU CC might
     interpret it another way.  Neither compiler is wrong.  The bug is
     in your code.

     After you have localized the error to a single source line, it
     should be easy to check for these things.  If your program is
     correct and well defined, you have found a compiler bug.

   * If the compiler produces an error message for valid input, that is
     a compiler bug.

   * If the compiler does not produce an error message for invalid
     input, that is a compiler bug.  However, you should note that your
     idea of "invalid input" might be my idea of "an extension" or
     "support for traditional practice".

   * If you are an experienced user of C or C++ compilers, your
     suggestions for improvement of GNU CC or GNU C++ are welcome in
     any case.


@endnode

@node "Bug Lists" "gcc.guide/Bug Lists"
@next "Bug Reporting"
@prev "Bug Criteria"
@toc "Bugs"

Where to Report Bugs
====================

   Send bug reports for GNU C to @{b}egcs-bugs@egcs.cygnus.com@{ub}.

   Send bug reports for GNU C++ and the C++ runtime libraries to
@{b}egcs-bugs@egcs.cygnus.com@{ub}.

   Often people think of posting bug reports to the newsgroup instead of
mailing them.  This appears to work, but it has one problem which can be
crucial: a newsgroup posting does not contain a mail path back to the
sender.  Thus, if maintainers need more information, they may be unable
to reach you.  For this reason, you should always send bug reports by
mail to the proper mailing list.

   As a last resort, send bug reports on paper to:

     GNU Compiler Bugs
     Free Software Foundation
     59 Temple Place - Suite 330
     Boston, MA 02111-1307, USA


@endnode

@node "Bug Reporting" "gcc.guide/Bug Reporting"
@next "Sending Patches"
@prev "Bug Lists"
@toc "Bugs"

How to Report Bugs
==================

   The fundamental principle of reporting bugs usefully is this: @{b}report
all the facts@{ub}.  If you are not sure whether to state a fact or leave it
out, state it!

   Often people omit facts because they think they know what causes the
problem and they conclude that some details don't matter.  Thus, you
might assume that the name of the variable you use in an example does
not matter.  Well, probably it doesn't, but one cannot be sure.
Perhaps the bug is a stray memory reference which happens to fetch from
the location where that name is stored in memory; perhaps, if the name
were different, the contents of that location would fool the compiler
into doing the right thing despite the bug.  Play it safe and give a
specific, complete example.  That is the easiest thing for you to do,
and the most helpful.

   Keep in mind that the purpose of a bug report is to enable someone to
fix the bug if it is not known.  It isn't very important what happens if
the bug is already known.  Therefore, always write your bug reports on
the assumption that the bug is not known.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.  You
might as well expedite matters by sending them to begin with.

   Try to make your bug report self-contained.  If we have to ask you
for more information, it is best if you include all the previous
information in your response, as well as the information that was
missing.

   Please report each bug in a separate message.  This makes it easier
for us to track which bugs have been fixed and to forward your bugs
reports to the appropriate maintainer.

   If you include source code in your message, you can send it as clear
text if it is small. If the message is larger, you may compress it using
@{b}gzip@{ub}, @{b}bzip2@{ub}, or @{b}pkzip@{ub}. Please be aware that sending compressed files
needs an additional binary-safe mechanism such as @{b}MIME@{ub} or @{b}uuencode@{ub}.
There is a 100k message limit on the @{b}egcs-bugs@egcs.cygnus.com@{ub} mailing
list at the time of this writing (March 1999).  We're trying to create
some mechanism for larger bug reports to be submitted; please check the
on-line FAQ for more up-to-date instructions.  Don't think that just
posting a URL to the code is better, we do want to archive bug reports,
and not all maintainers have good network connectivity to download
large pieces of software when they need them; it's much easier for them
to have them in their mailboxes.

   To enable someone to investigate the bug, you should include all
these things:

   * The version of GNU CC.  You can get this by running it with the @{b}-v@{ub}
     option.

     Without this, we won't know whether there is any point in looking
     for the bug in the current version of GNU CC.

   * A complete input file that will reproduce the bug.  If the bug is
     in the C preprocessor, send a source file and any header files
     that it requires.  If the bug is in the compiler proper (@{b}cc1@{ub}), run
     your source file through the C preprocessor by doing @{b}gcc -E
     SOURCEFILE > OUTFILE@{ub}, then include the contents of OUTFILE in the
     bug report.  (When you do this, use the same @{b}-I@{ub}, @{b}-D@{ub} or @{b}-U@{ub} options
     that you used in actual compilation.)

     A single statement is not enough of an example.  In order to
     compile it, it must be embedded in a complete file of compiler
     input; and the bug might depend on the details of how this is done.

     Without a real example one can compile, all anyone can do about
     your bug report is wish you luck.  It would be futile to try to
     guess how to provoke the bug.  For example, bugs in register
     allocation and reloading frequently depend on every little detail
     of the function they happen in.

     Even if the input file that fails comes from a GNU program, you
     should still send the complete test case.  Don't ask the GNU CC
     maintainers to do the extra work of obtaining the program in
     question--they are all overworked as it is.  Also, the problem may
     depend on what is in the header files on your system; it is
     unreliable for the GNU CC maintainers to try the problem with the
     header files available to them.  By sending CPP output, you can
     eliminate this source of uncertainty and save us a certain
     percentage of wild goose chases.

   * The command arguments you gave GNU CC or GNU C++ to compile that
     example and observe the bug.  For example, did you use @{b}-O@{ub}?  To
     guarantee you won't omit something important, list all the options.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we would not encounter the bug.

   * The type of machine you are using, and the operating system name
     and version number.

   * The operands you gave to the @{b}configure@{ub} command when you installed
     the compiler.

   * A complete list of any modifications you have made to the compiler
     source.  (We don't promise to investigate the bug unless it
     happens in an unmodified compiler.  But if you've made
     modifications and don't tell us, then you are sending us on a wild
     goose chase.)

     Be precise about these changes.  A description in English is not
     enough--send a context diff for them.

     Adding files of your own (such as a machine description for a
     machine we don't support) is a modification of the compiler source.

   * Details of any other deviations from the standard procedure for
     installing GNU CC.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "The compiler gets a fatal signal," or,
     "The assembler instruction at line 208 in the output is incorrect."

     Of course, if the bug is that the compiler gets a fatal signal,
     then one can't miss it.  But if the bug is incorrect output, the
     maintainer might not notice unless it is glaringly wrong.  None of
     us has time to study all the assembler code from a 50-line C
     program just on the chance that one instruction might be wrong.
     We need @{i}you@{ui} to do this part!

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of the compiler is out of synch, or you have
     encountered a bug in the C library on your system.  (This has
     happened!)  Your copy might crash and the copy here would not.  If
     you @{i}said@{ui} to expect a crash, then when the compiler here fails to
     crash, we would know that the bug was not happening.  If you don't
     say to expect a crash, then we would not know whether the bug was
     happening.  We would not be able to draw any conclusion from our
     observations.

     If the problem is a diagnostic when compiling GNU CC with some
     other compiler, say whether it is a warning or an error.

     Often the observed symptom is incorrect output when your program
     is run.  Sad to say, this is not enough information unless the
     program is short and simple.  None of us has time to study a large
     program to figure out how it would work if compiled correctly,
     much less which line of it was compiled wrong.  So you will have
     to do that.  Tell us which source line it is, and what incorrect
     result happens when that line is executed.  A person who
     understands the program can find this as easily as finding a bug
     in the program itself.

   * If you send examples of assembler code output from GNU CC or GNU
     C++, please use @{b}-g@{ub} when you make them.  The debugging information
     includes source line numbers which are essential for correlating
     the output with the input.

   * If you wish to mention something in the GNU CC source, refer to it
     by context, not by line number.

     The line numbers in the development sources don't match those in
     your sources.  Your line numbers would convey no useful
     information to the maintainers.

   * Additional information from a debugger might enable someone to
     find a problem on a machine which he does not have available.
     However, you need to think when you collect this information if
     you want it to have any chance of being useful.

     For example, many people send just a backtrace, but that is never
     useful by itself.  A simple backtrace with arguments conveys little
     about GNU CC because the compiler is largely data-driven; the same
     functions are called over and over for different RTL insns, doing
     different things depending on the details of the insn.

     Most of the arguments listed in the backtrace are useless because
     they are pointers to RTL list structure.  The numeric values of the
     pointers, which the debugger prints in the backtrace, have no
     significance whatever; all that matters is the contents of the
     objects they point to (and most of the contents are other such
     pointers).

     In addition, most compiler passes consist of one or more loops that
     scan the RTL insn sequence.  The most vital piece of information
     about such a loop--which insn it has reached--is usually in a
     local variable, not in an argument.

     What you need to provide in addition to a backtrace are the values
     of the local variables for several stack frames up.  When a local
     variable or an argument is an RTX, first print its value and then
     use the GDB command @{b}pr@{ub} to print the RTL expression that it points
     to.  (If GDB doesn't run on your machine, use your debugger to call
     the function @{b}debug_rtx@{ub} with the RTX as an argument.)  In general,
     whenever a variable is a pointer, its value is no use without the
     data it points to.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  You might as well save your time for something else.

     Of course, if you can find a simpler example to report @{i}instead@{ui} of
     the original one, that is a convenience.  Errors in the output
     will be easier to spot, running under the debugger will take less
     time, etc.  Most GNU CC bugs involve just one function, so the
     most straightforward way to simplify an example is to delete all
     the function definitions except the one where the bug occurs.
     Those earlier in the file may be replaced by external declarations
     if the crucial function depends on them.  (Exception: inline
     functions may affect compilation of functions defined later in the
     file.)

     However, simplification is not vital; if you don't want to do this,
     report the bug anyway and send the entire test case you used.

   * In particular, some people insert conditionals @{b}#ifdef BUG@{ub} around a
     statement which, if removed, makes the bug not happen.  These are
     just clutter; we won't pay any attention to them anyway.  Besides,
     you should send us cpp output, and that can't have conditionals.

   * A patch for the bug.

     A patch for the bug is useful if it is a good one.  But don't omit
     the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems
     with your patch and decide to fix the problem another way, or we
     might not understand it at all.

     Sometimes with a program as complicated as GNU CC it is very hard
     to construct an example that will make the program follow a
     certain path through the code.  If you don't send the example, we
     won't be able to construct one, so we won't be able to verify that
     the bug is fixed.

     And if we can't understand what bug you are trying to fix, or why
     your patch should be an improvement, we won't install it.  A test
     case will help us to understand.

     See @{"Sending Patches" link "Sending Patches"}, for guidelines on how to make it easy for us
     to understand and install your patches.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even I can't guess right about
     such things without first using the debugger to find the facts.

   * A core dump file.

     We have no way of examining a core dump for your type of machine
     unless we have an identical system--and if we do have one, we
     should be able to reproduce the crash ourselves.


@endnode

@node "Sending Patches" "gcc.guide/Sending Patches"
@prev "Bug Reporting"
@toc "Bugs"

Sending Patches for GNU CC
==========================

   If you would like to write bug fixes or improvements for the GNU C
compiler, that is very helpful.  Send suggested fixes to the bug report
mailing list, @{b}egcs-bugs@egcs.cygnus.com@{ub}.

   Please follow these guidelines so we can study your patches
efficiently.  If you don't follow these guidelines, your information
might still be useful, but using it will take extra work.  Maintaining
GNU C is a lot of work in the best of circumstances, and we can't keep
up unless you do your best to help.

   * Send an explanation with your changes of what problem they fix or
     what improvement they bring about.  For a bug fix, just include a
     copy of the bug report, and explain why the change fixes the bug.

     (Referring to a bug report is not as good as including it, because
     then we will have to look it up, and we have probably already
     deleted it if we've already fixed the bug.)

   * Always include a proper bug report for the problem you think you
     have fixed.  We need to convince ourselves that the change is
     right before installing it.  Even if it is right, we might have
     trouble judging it if we don't have a way to reproduce the problem.

   * Include all the comments that are appropriate to help people
     reading the source in the future understand why this change was
     needed.

   * Don't mix together changes made for different reasons.  Send them
     @{i}individually@{ui}.

     If you make two changes for separate reasons, then we might not
     want to install them both.  We might want to install just one.  If
     you send them all jumbled together in a single set of diffs, we
     have to do extra work to disentangle them--to figure out which
     parts of the change serve which purpose.  If we don't have time
     for this, we might have to ignore your changes entirely.

     If you send each change as soon as you have written it, with its
     own explanation, then the two changes never get tangled up, and we
     can consider each one properly without any extra work to
     disentangle them.

     Ideally, each change you send should be impossible to subdivide
     into parts that we might want to consider separately, because each
     of its parts gets its motivation from the other parts.

   * Send each change as soon as that change is finished.  Sometimes
     people think they are helping us by accumulating many changes to
     send them all together.  As explained above, this is absolutely
     the worst thing you could do.

     Since you should send each change separately, you might as well
     send it right away.  That gives us the option of installing it
     immediately if it is important.

   * Use @{b}diff -c@{ub} to make your diffs.  Diffs without context are hard
     for us to install reliably.  More than that, they make it hard for
     us to study the diffs to decide whether we want to install them.
     Unidiff format is better than contextless diffs, but not as easy
     to read as @{b}-c@{ub} format.

     If you have GNU diff, use @{b}diff -cp@{ub}, which shows the name of the
     function that each change occurs in.

   * Write the change log entries for your changes.  We get lots of
     changes, and we don't have time to do all the change log writing
     ourselves.

     Read the @{b}ChangeLog@{ub} file to see what sorts of information to put
     in, and to learn the style that we use.  The purpose of the change
     log is to show people where to find what was changed.  So you need
     to be specific about what functions you changed; in large
     functions, it's often helpful to indicate where within the
     function the change was.

     On the other hand, once you have shown people where to find the
     change, you need not explain its purpose.  Thus, if you add a new
     function, all you need to say about it is that it is new.  If you
     feel that the purpose needs explaining, it probably does--but the
     explanation will be much more useful if you put it in comments in
     the code.

     If you would like your name to appear in the header line for who
     made the change, send us the header line.

   * When you write the fix, keep in mind that we can't install a
     change that would break other systems.

     People often suggest fixing a problem by changing
     machine-independent files such as @{b}toplev.c@{ub} to do something special
     that a particular system needs.  Sometimes it is totally obvious
     that such changes would break GNU CC for almost all users.  We
     can't possibly make a change like that.  At best it might tell us
     how to write another patch that would solve the problem acceptably.

     Sometimes people send fixes that @{i}might@{ui} be an improvement in
     general--but it is hard to be sure of this.  It's hard to install
     such changes because we have to study them very carefully.  Of
     course, a good explanation of the reasoning by which you concluded
     the change was correct can help convince us.

     The safest changes are changes to the configuration files for a
     particular machine.  These are safe because they can't create new
     bugs on other machines.

     Please help us keep up with the workload by designing the patch in
     a form that is good to install.


@endnode

@node "Service" "gcc.guide/Service"
@next "Contributing"
@prev "Bugs"
@toc "Main"

How To Get Help with GNU CC
***************************

   If you need help installing, using or changing GNU CC, there are two
ways to find it:

   * Send a message to a suitable network mailing list.  First try
     @{b}egcs-bugs@egcs.cygnus.com@{ub}, and if that brings no response, try
     @{b}egcs@egcs.cygnus.com@{ub}.

   * Look in the service directory for someone who might help you for a
     fee.  The service directory is found in the file named @{b}SERVICE@{ub} in
     the GNU CC distribution.


@endnode

@node "Contributing" "gcc.guide/Contributing"
@next "VMS"
@prev "Service"
@toc "Main"

Contributing to GNU CC Development
**********************************

   If you would like to help pretest GNU CC releases to assure they work
well, or if you would like to work on improving GNU CC, please contact
the maintainers at @{b}egcs@egcs.cygnus.com@{ub}.  A pretester should be willing
to try to investigate bugs as well as report them.

   If you'd like to work on improvements, please ask for suggested
projects or suggest your own ideas.  If you have already written an
improvement, please tell us about it.  If you have not yet started
work, it is useful to contact @{b}egcs@egcs.cygnus.com@{ub} before you start; the
maintainers may be able to suggest ways to make your extension fit in
better with the rest of GNU CC and with other development plans.


@endnode

@node "VMS" "gcc.guide/VMS"
@next "Portability"
@prev "Contributing"
@toc "Main"

Using GNU CC on VMS
*******************

   Here is how to use GNU CC on VMS.


 @{" Include Files and VMS " link "Include Files and VMS"}  Where the preprocessor looks for the include files.
 @{" Global Declarations   " link "Global Declarations"}  How to do globaldef, globalref and globalvalue with
                           GNU CC.
 @{" VMS Misc              " link "VMS Misc"}  Misc information.


@endnode

@node "Include Files and VMS" "gcc.guide/Include Files and VMS"
@next "Global Declarations"
@toc "VMS"

Include Files and VMS
=====================

   Due to the differences between the filesystems of Unix and VMS, GNU
CC attempts to translate file names in @{b}#include@{ub} into names that VMS
will understand.  The basic strategy is to prepend a prefix to the
specification of the include file, convert the whole filename to a VMS
filename, and then try to open the file.  GNU CC tries various prefixes
one by one until one of them succeeds:

  1. The first prefix is the @{b}GNU_CC_INCLUDE:@{ub} logical name: this is
     where GNU C header files are traditionally stored.  If you wish to
     store header files in non-standard locations, then you can assign
     the logical @{b}GNU_CC_INCLUDE@{ub} to be a search list, where each element
     of the list is suitable for use with a rooted logical.

  2. The next prefix tried is @{b}SYS$SYSROOT:[SYSLIB.]@{ub}.  This is where
     VAX-C header files are traditionally stored.

  3. If the include file specification by itself is a valid VMS
     filename, the preprocessor then uses this name with no prefix in
     an attempt to open the include file.

  4. If the file specification is not a valid VMS filename (i.e. does
     not contain a device or a directory specifier, and contains a @{b}/@{ub}
     character), the preprocessor tries to convert it from Unix syntax
     to VMS syntax.

     Conversion works like this: the first directory name becomes a
     device, and the rest of the directories are converted into
     VMS-format directory names.  For example, the name @{b}X11/foobar.h@{ub} is
     translated to @{b}X11:[000000]foobar.h@{ub} or @{b}X11:foobar.h@{ub}, whichever one
     can be opened.  This strategy allows you to assign a logical name
     to point to the actual location of the header files.

  5. If none of these strategies succeeds, the @{b}#include@{ub} fails.

   Include directives of the form:

     #include foobar

are a common source of incompatibility between VAX-C and GNU CC.  VAX-C
treats this much like a standard @{b}#include <foobar.h>@{ub} directive.  That
is incompatible with the ANSI C behavior implemented by GNU CC: to
expand the name @{b}foobar@{ub} as a macro.  Macro expansion should eventually
yield one of the two standard formats for @{b}#include@{ub}:

     #include "FILE"
     #include <FILE>

   If you have this problem, the best solution is to modify the source
to convert the @{b}#include@{ub} directives to one of the two standard forms.
That will work with either compiler.  If you want a quick and dirty fix,
define the file names as macros with the proper expansion, like this:

     #define stdio <stdio.h>

This will work, as long as the name doesn't conflict with anything else
in the program.

   Another source of incompatibility is that VAX-C assumes that:

     #include "foobar"

is actually asking for the file @{b}foobar.h@{ub}.  GNU CC does not make this
assumption, and instead takes what you ask for literally; it tries to
read the file @{b}foobar@{ub}.  The best way to avoid this problem is to always
specify the desired file extension in your include directives.

   GNU CC for VMS is distributed with a set of include files that is
sufficient to compile most general purpose programs.  Even though the
GNU CC distribution does not contain header files to define constants
and structures for some VMS system-specific functions, there is no
reason why you cannot use GNU CC with any of these functions.  You first
may have to generate or create header files, either by using the public
domain utility @{b}UNSDL@{ub} (which can be found on a DECUS tape), or by
extracting the relevant modules from one of the system macro libraries,
and using an editor to construct a C header file.

   A @{b}#include@{ub} file name cannot contain a DECNET node name.  The
preprocessor reports an I/O error if you attempt to use a node name,
whether explicitly, or implicitly via a logical name.


@endnode

@node "Global Declarations" "gcc.guide/Global Declarations"
@next "VMS Misc"
@prev "Include Files and VMS"
@toc "VMS"

Global Declarations and VMS
===========================

   GNU CC does not provide the @{b}globalref@{ub}, @{b}globaldef@{ub} and @{b}globalvalue@{ub}
keywords of VAX-C.  You can get the same effect with an obscure feature
of GAS, the GNU assembler.  (This requires GAS version 1.39 or later.)
The following macros allow you to use this feature in a fairly natural
way:

     #ifdef __GNUC__
     #define GLOBALREF(TYPE,NAME)                      \\
       TYPE NAME                                       \\
       asm ("_$$PsectAttributes_GLOBALSYMBOL$$" #NAME)
     #define GLOBALDEF(TYPE,NAME,VALUE)                \\
       TYPE NAME                                       \\
       asm ("_$$PsectAttributes_GLOBALSYMBOL$$" #NAME) \\
         = VALUE
     #define GLOBALVALUEREF(TYPE,NAME)                 \\
       const TYPE NAME[1]                              \\
       asm ("_$$PsectAttributes_GLOBALVALUE$$" #NAME)
     #define GLOBALVALUEDEF(TYPE,NAME,VALUE)           \\
       const TYPE NAME[1]                              \\
       asm ("_$$PsectAttributes_GLOBALVALUE$$" #NAME)  \\
         = {VALUE}
     #else
     #define GLOBALREF(TYPE,NAME) \\
       globalref TYPE NAME
     #define GLOBALDEF(TYPE,NAME,VALUE) \\
       globaldef TYPE NAME = VALUE
     #define GLOBALVALUEDEF(TYPE,NAME,VALUE) \\
       globalvalue TYPE NAME = VALUE
     #define GLOBALVALUEREF(TYPE,NAME) \\
       globalvalue TYPE NAME
     #endif

(The @{b}_$$PsectAttributes_GLOBALSYMBOL@{ub} prefix at the start of the name is
removed by the assembler, after it has modified the attributes of the
symbol).  These macros are provided in the VMS binaries distribution in
a header file @{b}GNU_HACKS.H@{ub}.  An example of the usage is:

     GLOBALREF (int, ijk);
     GLOBALDEF (int, jkl, 0);

   The macros @{b}GLOBALREF@{ub} and @{b}GLOBALDEF@{ub} cannot be used straightforwardly
for arrays, since there is no way to insert the array dimension into
the declaration at the right place.  However, you can declare an array
with these macros if you first define a typedef for the array type,
like this:

     typedef int intvector[10];
     GLOBALREF (intvector, foo);

   Array and structure initializers will also break the macros; you can
define the initializer to be a macro of its own, or you can expand the
@{b}GLOBALDEF@{ub} macro by hand.  You may find a case where you wish to use the
@{b}GLOBALDEF@{ub} macro with a large array, but you are not interested in
explicitly initializing each element of the array.  In such cases you
can use an initializer like: @{b}{0,}@{ub}, which will initialize the entire
array to @{b}0@{ub}.

   A shortcoming of this implementation is that a variable declared with
@{b}GLOBALVALUEREF@{ub} or @{b}GLOBALVALUEDEF@{ub} is always an array.  For example, the
declaration:

     GLOBALVALUEREF(int, ijk);

declares the variable @{b}ijk@{ub} as an array of type @{b}int [1]@{ub}.  This is done
because a globalvalue is actually a constant; its "value" is what the
linker would normally consider an address.  That is not how an integer
value works in C, but it is how an array works.  So treating the symbol
as an array name gives consistent results--with the exception that the
value seems to have the wrong type.  @{b}Don't try to access an element of
the array.@{ub}  It doesn't have any elements.  The array "address" may not
be the address of actual storage.

   The fact that the symbol is an array may lead to warnings where the
variable is used.  Insert type casts to avoid the warnings.  Here is an
example; it takes advantage of the ANSI C feature allowing macros that
expand to use the same name as the macro itself.

     GLOBALVALUEREF (int, ss$_normal);
     GLOBALVALUEDEF (int, xyzzy,123);
     #ifdef __GNUC__
     #define ss$_normal ((int) ss$_normal)
     #define xyzzy ((int) xyzzy)
     #endif

   Don't use @{b}globaldef@{ub} or @{b}globalref@{ub} with a variable whose type is an
enumeration type; this is not implemented.  Instead, make the variable
an integer, and use a @{b}globalvaluedef@{ub} for each of the enumeration
values.  An example of this would be:

     #ifdef __GNUC__
     GLOBALDEF (int, color, 0);
     GLOBALVALUEDEF (int, RED, 0);
     GLOBALVALUEDEF (int, BLUE, 1);
     GLOBALVALUEDEF (int, GREEN, 3);
     #else
     enum globaldef color {RED, BLUE, GREEN = 3};
     #endif


@endnode

@node "VMS Misc" "gcc.guide/VMS Misc"
@prev "Global Declarations"
@toc "VMS"

Other VMS Issues
================

   GNU CC automatically arranges for @{b}main@{ub} to return 1 by default if you
fail to specify an explicit return value.  This will be interpreted by
VMS as a status code indicating a normal successful completion.
Version 1 of GNU CC did not provide this default.

   GNU CC on VMS works only with the GNU assembler, GAS.  You need
version 1.37 or later of GAS in order to produce value debugging
information for the VMS debugger.  Use the ordinary VMS linker with the
object files produced by GAS.

   Under previous versions of GNU CC, the generated code would
occasionally give strange results when linked to the sharable @{b}VAXCRTL@{ub}
library.  Now this should work.

   A caveat for use of @{b}const@{ub} global variables: the @{b}const@{ub} modifier must
be specified in every external declaration of the variable in all of
the source files that use that variable.  Otherwise the linker will
issue warnings about conflicting attributes for the variable.  Your
program will still work despite the warnings, but the variable will be
placed in writable storage.

   Although the VMS linker does distinguish between upper and lower case
letters in global symbols, most VMS compilers convert all such symbols
into upper case and most run-time library routines also have upper case
names.  To be able to reliably call such routines, GNU CC (by means of
the assembler GAS) converts global symbols into upper case like other
VMS compilers.  However, since the usual practice in C is to distinguish
case, GNU CC (via GAS) tries to preserve usual C behavior by augmenting
each name that is not all lower case.  This means truncating the name
to at most 23 characters and then adding more characters at the end
which encode the case pattern of those 23.   Names which contain at
least one dollar sign are an exception; they are converted directly into
upper case without augmentation.

   Name augmentation yields bad results for programs that use
precompiled libraries (such as Xlib) which were generated by another
compiler.  You can use the compiler option @{b}/NOCASE_HACK@{ub} to inhibit
augmentation; it makes external C functions and variables
case-independent as is usual on VMS.  Alternatively, you could write
all references to the functions and variables in such libraries using
lower case; this will work on VMS, but is not portable to other
systems.  The compiler option @{b}/NAMES@{ub} also provides control over global
name handling.

   Function and variable names are handled somewhat differently with GNU
C++.  The GNU C++ compiler performs @{i}name mangling@{ui} on function names,
which means that it adds information to the function name to describe
the data types of the arguments that the function takes.  One result of
this is that the name of a function can become very long.  Since the
VMS linker only recognizes the first 31 characters in a name, special
action is taken to ensure that each function and variable has a unique
name that can be represented in 31 characters.

   If the name (plus a name augmentation, if required) is less than 32
characters in length, then no special action is performed.  If the name
is longer than 31 characters, the assembler (GAS) will generate a hash
string based upon the function name, truncate the function name to 23
characters, and append the hash string to the truncated name.  If the
@{b}/VERBOSE@{ub} compiler option is used, the assembler will print both the
full and truncated names of each symbol that is truncated.

   The @{b}/NOCASE_HACK@{ub} compiler option should not be used when you are
compiling programs that use libg++.  libg++ has several instances of
objects (i.e.  @{b}Filebuf@{ub} and @{b}filebuf@{ub}) which become indistinguishable in a
case-insensitive environment.  This leads to cases where you need to
inhibit augmentation selectively (if you were using libg++ and Xlib in
the same program, for example).  There is no special feature for doing
this, but you can get the result by defining a macro for each mixed
case symbol for which you wish to inhibit augmentation.  The macro
should expand into the lower case equivalent of itself.  For example:

     #define StuDlyCapS studlycaps

   These macro definitions can be placed in a header file to minimize
the number of changes to your source code.


@endnode

@node "Portability" "gcc.guide/Portability"
@next "Interface"
@prev "VMS"
@toc "Main"

GNU CC and Portability
**********************

   The main goal of GNU CC was to make a good, fast compiler for
machines in the class that the GNU system aims to run on: 32-bit
machines that address 8-bit bytes and have several general registers.
Elegance, theoretical power and simplicity are only secondary.

   GNU CC gets most of the information about the target machine from a
machine description which gives an algebraic formula for each of the
machine's instructions.  This is a very clean way to describe the
target.  But when the compiler needs information that is difficult to
express in this fashion, I have not hesitated to define an ad-hoc
parameter to the machine description.  The purpose of portability is to
reduce the total work needed on the compiler; it was not of interest
for its own sake.

   GNU CC does not contain machine dependent code, but it does contain
code that depends on machine parameters such as endianness (whether the
most significant byte has the highest or lowest address of the bytes in
a word) and the availability of autoincrement addressing.  In the
RTL-generation pass, it is often necessary to have multiple strategies
for generating code for a particular kind of syntax tree, strategies
that are usable for different combinations of parameters.  Often I have
not tried to address all possible cases, but only the common ones or
only the ones that I have encountered.  As a result, a new target may
require additional strategies.  You will know if this happens because
the compiler will call @{b}abort@{ub}.  Fortunately, the new strategies can be
added in a machine-independent fashion, and will affect only the target
machines that need them.


@endnode

@node "Interface" "gcc.guide/Interface"
@next "Passes"
@prev "Portability"
@toc "Main"

Interfacing to GNU CC Output
****************************

   GNU CC is normally configured to use the same function calling
convention normally in use on the target system.  This is done with the
machine-description macros described (see @{"Target Macros" link "Target Macros"}).

   However, returning of structure and union values is done differently
on some target machines.  As a result, functions compiled with PCC
returning such types cannot be called from code compiled with GNU CC,
and vice versa.  This does not cause trouble often because few Unix
library routines return structures or unions.

   GNU CC code returns structures and unions that are 1, 2, 4 or 8 bytes
long in the same registers used for @{b}int@{ub} or @{b}double@{ub} return values.  (GNU
CC typically allocates variables of such types in registers also.)
Structures and unions of other sizes are returned by storing them into
an address passed by the caller (usually in a register).  The
machine-description macros @{b}STRUCT_VALUE@{ub} and @{b}STRUCT_INCOMING_VALUE@{ub} tell
GNU CC where to pass this address.

   By contrast, PCC on most target machines returns structures and
unions of any size by copying the data into an area of static storage,
and then returning the address of that storage as if it were a pointer
value.  The caller must copy the data from that memory area to the
place where the value is wanted.  This is slower than the method used
by GNU CC, and fails to be reentrant.

   On some target machines, such as RISC machines and the 80386, the
standard system convention is to pass to the subroutine the address of
where to return the value.  On these machines, GNU CC has been
configured to be compatible with the standard compiler, when this method
is used.  It may not be compatible for structures of 1, 2, 4 or 8 bytes.

   GNU CC uses the system's standard convention for passing arguments.
On some machines, the first few arguments are passed in registers; in
others, all are passed on the stack.  It would be possible to use
registers for argument passing on any machine, and this would probably
result in a significant speedup.  But the result would be complete
incompatibility with code that follows the standard convention.  So this
change is practical only if you are switching to GNU CC as the sole C
compiler for the system.  We may implement register argument passing on
certain machines once we have a complete GNU system so that we can
compile the libraries with GNU CC.

   On some machines (particularly the Sparc), certain types of arguments
are passed "by invisible reference".  This means that the value is
stored in memory, and the address of the memory location is passed to
the subroutine.

   If you use @{b}longjmp@{ub}, beware of automatic variables.  ANSI C says that
automatic variables that are not declared @{b}volatile@{ub} have undefined
values after a @{b}longjmp@{ub}.  And this is all GNU CC promises to do, because
it is very difficult to restore register variables correctly, and one
of GNU CC's features is that it can put variables in registers without
your asking it to.

   If you want a variable to be unaltered by @{b}longjmp@{ub}, and you don't
want to write @{b}volatile@{ub} because old C compilers don't accept it, just
take the address of the variable.  If a variable's address is ever
taken, even if just to compute it and ignore it, then the variable
cannot go in a register:

     {
       int careful;
       &careful;
       ...
     }

   Code compiled with GNU CC may call certain library routines.  Most of
them handle arithmetic for which there are no instructions.  This
includes multiply and divide on some machines, and floating point
operations on any machine for which floating point support is disabled
with @{b}-msoft-float@{ub}.  Some standard parts of the C library, such as @{b}bcopy@{ub}
or @{b}memcpy@{ub}, are also called automatically.  The usual function call
interface is used for calling the library routines.

   These library routines should be defined in the library @{b}libgcc.a@{ub},
which GNU CC automatically searches whenever it links a program.  On
machines that have multiply and divide instructions, if hardware
floating point is in use, normally @{b}libgcc.a@{ub} is not needed, but it is
searched just in case.

   Each arithmetic function is defined in @{b}libgcc1.c@{ub} to use the
corresponding C arithmetic operator.  As long as the file is compiled
with another C compiler, which supports all the C arithmetic operators,
this file will work portably.  However, @{b}libgcc1.c@{ub} does not work if
compiled with GNU CC, because each arithmetic function would compile
into a call to itself!


@endnode

@node "Passes" "gcc.guide/Passes"
@next "RTL"
@prev "Interface"
@toc "Main"

Passes and Files of the Compiler
********************************

   The overall control structure of the compiler is in @{b}toplev.c@{ub}.  This
file is responsible for initialization, decoding arguments, opening and
closing files, and sequencing the passes.

   The parsing pass is invoked only once, to parse the entire input.
The RTL intermediate code for a function is generated as the function
is parsed, a statement at a time.  Each statement is read in as a
syntax tree and then converted to RTL; then the storage for the tree
for the statement is reclaimed.  Storage for types (and the expressions
for their sizes), declarations, and a representation of the binding
contours and how they nest, remain until the function is finished being
compiled; these are all needed to output the debugging information.

   Each time the parsing pass reads a complete function definition or
top-level declaration, it calls either the function
@{b}rest_of_compilation@{ub}, or the function @{b}rest_of_decl_compilation@{ub} in
@{b}toplev.c@{ub}, which are responsible for all further processing necessary,
ending with output of the assembler language.  All other compiler
passes run, in sequence, within @{b}rest_of_compilation@{ub}.  When that
function returns from compiling a function definition, the storage used
for that function definition's compilation is entirely freed, unless it
is an inline function (see @{"An Inline Function is As Fast As a Macro" link "Inline"}).

   Here is a list of all the passes of the compiler and their source
files.  Also included is a description of where debugging dumps can be
requested with @{b}-d@{ub} options.

   * Parsing.  This pass reads the entire text of a function definition,
     constructing partial syntax trees.  This and RTL generation are no
     longer truly separate passes (formerly they were), but it is
     easier to think of them as separate.

     The tree representation does not entirely follow C syntax, because
     it is intended to support other languages as well.

     Language-specific data type analysis is also done in this pass,
     and every tree node that represents an expression has a data type
     attached.  Variables are represented as declaration nodes.

     Constant folding and some arithmetic simplifications are also done
     during this pass.

     The language-independent source files for parsing are
     @{b}stor-layout.c@{ub}, @{b}fold-const.c@{ub}, and @{b}tree.c@{ub}.  There are also header
     files @{b}tree.h@{ub} and @{b}tree.def@{ub} which define the format of the tree
     representation.

     The source files to parse C are @{b}c-parse.in@{ub}, @{b}c-decl.c@{ub}, @{b}c-typeck.c@{ub},
     @{b}c-aux-info.c@{ub}, @{b}c-convert.c@{ub}, and @{b}c-lang.c@{ub} along with header files
     @{b}c-lex.h@{ub}, and @{b}c-tree.h@{ub}.

     The source files for parsing C++ are @{b}cp-parse.y@{ub}, @{b}cp-class.c@{ub},
@{b}     cp-cvt.c@{ub}, @{b}cp-decl.c@{ub}, @{b}cp-decl2.c@{ub}, @{b}cp-dem.c@{ub}, @{b}cp-except.c@{ub},
@{b}     cp-expr.c@{ub}, @{b}cp-init.c@{ub}, @{b}cp-lex.c@{ub}, @{b}cp-method.c@{ub}, @{b}cp-ptree.c@{ub},
@{b}     cp-search.c@{ub}, @{b}cp-tree.c@{ub}, @{b}cp-type2.c@{ub}, and @{b}cp-typeck.c@{ub}, along with
     header files @{b}cp-tree.def@{ub}, @{b}cp-tree.h@{ub}, and @{b}cp-decl.h@{ub}.

     The special source files for parsing Objective C are @{b}objc-parse.y@{ub},
     @{b}objc-actions.c@{ub}, @{b}objc-tree.def@{ub}, and @{b}objc-actions.h@{ub}.  Certain
     C-specific files are used for this as well.

     The file @{b}c-common.c@{ub} is also used for all of the above languages.

   * RTL generation.  This is the conversion of syntax tree into RTL
     code.  It is actually done statement-by-statement during parsing,
     but for most purposes it can be thought of as a separate pass.

     This is where the bulk of target-parameter-dependent code is found,
     since often it is necessary for strategies to apply only when
     certain standard kinds of instructions are available.  The purpose
     of named instruction patterns is to provide this information to
     the RTL generation pass.

     Optimization is done in this pass for @{b}if@{ub}-conditions that are
     comparisons, boolean operations or conditional expressions.  Tail
     recursion is detected at this time also.  Decisions are made about
     how best to arrange loops and how to output @{b}switch@{ub} statements.

     The source files for RTL generation include @{b}stmt.c@{ub}, @{b}calls.c@{ub},
     @{b}expr.c@{ub}, @{b}explow.c@{ub}, @{b}expmed.c@{ub}, @{b}function.c@{ub}, @{b}optabs.c@{ub} and @{b}emit-rtl.c@{ub}.
     Also, the file @{b}insn-emit.c@{ub}, generated from the machine description
     by the program @{b}genemit@{ub}, is used in this pass.  The header file
     @{b}expr.h@{ub} is used for communication within this pass.

     The header files @{b}insn-flags.h@{ub} and @{b}insn-codes.h@{ub}, generated from the
     machine description by the programs @{b}genflags@{ub} and @{b}gencodes@{ub}, tell
     this pass which standard names are available for use and which
     patterns correspond to them.

     Aside from debugging information output, none of the following
     passes refers to the tree structure representation of the function
     (only part of which is saved).

     The decision of whether the function can and should be expanded
     inline in its subsequent callers is made at the end of rtl
     generation.  The function must meet certain criteria, currently
     related to the size of the function and the types and number of
     parameters it has.  Note that this function may contain loops,
     recursive calls to itself (tail-recursive functions can be
     inlined!), gotos, in short, all constructs supported by GNU CC.
     The file @{b}integrate.c@{ub} contains the code to save a function's rtl
     for later inlining and to inline that rtl when the function is
     called.  The header file @{b}integrate.h@{ub} is also used for this purpose.

     The option @{b}-dr@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.rtl@{ub} to the
     input file name.

   * Jump optimization.  This pass simplifies jumps to the following
     instruction, jumps across jumps, and jumps to jumps.  It deletes
     unreferenced labels and unreachable code, except that unreachable
     code that contains a loop is not recognized as unreachable in this
     pass.  (Such loops are deleted later in the basic block analysis.)
     It also converts some code originally written with jumps into
     sequences of instructions that directly set values from the
     results of comparisons, if the machine has such instructions.

     Jump optimization is performed two or three times.  The first time
     is immediately following RTL generation.  The second time is after
     CSE, but only if CSE says repeated jump optimization is needed.
     The last time is right before the final pass.  That time,
     cross-jumping and deletion of no-op move instructions are done
     together with the optimizations described above.

     The source file of this pass is @{b}jump.c@{ub}.

     The option @{b}-dj@{ub} causes a debugging dump of the RTL code after this
     pass is run for the first time.  This dump file's name is made by
     appending @{b}.jump@{ub} to the input file name.

   * Register scan.  This pass finds the first and last use of each
     register, as a guide for common subexpression elimination.  Its
     source is in @{b}regclass.c@{ub}.

   * Jump threading.  This pass detects a condition jump that branches
     to an identical or inverse test.  Such jumps can be @{b}threaded@{ub}
     through the second conditional test.  The source code for this
     pass is in @{b}jump.c@{ub}.  This optimization is only performed if
     @{b}-fthread-jumps@{ub} is enabled.

   * Common subexpression elimination.  This pass also does constant
     propagation.  Its source file is @{b}cse.c@{ub}.  If constant propagation
     causes conditional jumps to become unconditional or to become
     no-ops, jump optimization is run again when CSE is finished.

     The option @{b}-ds@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.cse@{ub} to the
     input file name.

   * Global common subexpression elimination.  This pass performs GCSE
     using Morel-Renvoise Partial Redundancy Elimination, with the
     exception that it does not try to move invariants out of loops -
     that is left to the loop optimization pass.  This pass also
     performs global constant and copy propagation.

     The source file for this pass is gcse.c.

     The option @{b}-dG@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.gcse@{ub} to the
     input file name.

   * Loop optimization.  This pass moves constant expressions out of
     loops, and optionally does strength-reduction and loop unrolling
     as well.  Its source files are @{b}loop.c@{ub} and @{b}unroll.c@{ub}, plus the header
     @{b}loop.h@{ub} used for communication between them.  Loop unrolling uses
     some functions in @{b}integrate.c@{ub} and the header @{b}integrate.h@{ub}.

     The option @{b}-dL@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.loop@{ub} to the
     input file name.

   * If @{b}-frerun-cse-after-loop@{ub} was enabled, a second common
     subexpression elimination pass is performed after the loop
     optimization pass.  Jump threading is also done again at this time
     if it was specified.

     The option @{b}-dt@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.cse2@{ub} to the
     input file name.

   * Stupid register allocation is performed at this point in a
     nonoptimizing compilation.  It does a little data flow analysis as
     well.  When stupid register allocation is in use, the next pass
     executed is the reloading pass; the others in between are skipped.
     The source file is @{b}stupid.c@{ub}.

   * Data flow analysis (@{b}flow.c@{ub}).  This pass divides the program into
     basic blocks (and in the process deletes unreachable loops); then
     it computes which pseudo-registers are live at each point in the
     program, and makes the first instruction that uses a value point at
     the instruction that computed the value.

     This pass also deletes computations whose results are never used,
     and combines memory references with add or subtract instructions
     to make autoincrement or autodecrement addressing.

     The option @{b}-df@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.flow@{ub} to the
     input file name.  If stupid register allocation is in use, this
     dump file reflects the full results of such allocation.

   * Instruction combination (@{b}combine.c@{ub}).  This pass attempts to
     combine groups of two or three instructions that are related by
     data flow into single instructions.  It combines the RTL
     expressions for the instructions by substitution, simplifies the
     result using algebra, and then attempts to match the result
     against the machine description.

     The option @{b}-dc@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.combine@{ub} to the
     input file name.

   * Instruction scheduling (@{b}sched.c@{ub}).  This pass looks for
     instructions whose output will not be available by the time that
     it is used in subsequent instructions.  (Memory loads and floating
     point instructions often have this behavior on RISC machines).  It
     re-orders instructions within a basic block to try to separate the
     definition and use of items that otherwise would cause pipeline
     stalls.

     Instruction scheduling is performed twice.  The first time is
     immediately after instruction combination and the second is
     immediately after reload.

     The option @{b}-dS@{ub} causes a debugging dump of the RTL code after this
     pass is run for the first time.  The dump file's name is made by
     appending @{b}.sched@{ub} to the input file name.

   * Register class preferencing.  The RTL code is scanned to find out
     which register class is best for each pseudo register.  The source
     file is @{b}regclass.c@{ub}.

   * Local register allocation (@{b}local-alloc.c@{ub}).  This pass allocates
     hard registers to pseudo registers that are used only within one
     basic block.  Because the basic block is linear, it can use fast
     and powerful techniques to do a very good job.

     The option @{b}-dl@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.lreg@{ub} to the
     input file name.

   * Global register allocation (@{b}global.c@{ub}).  This pass allocates hard
     registers for the remaining pseudo registers (those whose life
     spans are not contained in one basic block).

   * Reloading.  This pass renumbers pseudo registers with the hardware
     registers numbers they were allocated.  Pseudo registers that did
     not get hard registers are replaced with stack slots.  Then it
     finds instructions that are invalid because a value has failed to
     end up in a register, or has ended up in a register of the wrong
     kind.  It fixes up these instructions by reloading the
     problematical values temporarily into registers.  Additional
     instructions are generated to do the copying.

     The reload pass also optionally eliminates the frame pointer and
     inserts instructions to save and restore call-clobbered registers
     around calls.

     Source files are @{b}reload.c@{ub} and @{b}reload1.c@{ub}, plus the header @{b}reload.h@{ub}
     used for communication between them.

     The option @{b}-dg@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.greg@{ub} to the
     input file name.

   * Instruction scheduling is repeated here to try to avoid pipeline
     stalls due to memory loads generated for spilled pseudo registers.

     The option @{b}-dR@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.sched2@{ub} to the
     input file name.

   * Jump optimization is repeated, this time including cross-jumping
     and deletion of no-op move instructions.

     The option @{b}-dJ@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.jump2@{ub} to the
     input file name.

   * Delayed branch scheduling.  This optional pass attempts to find
     instructions that can go into the delay slots of other
     instructions, usually jumps and calls.  The source file name is
     @{b}reorg.c@{ub}.

     The option @{b}-dd@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.dbr@{ub} to the
     input file name.

   * Conversion from usage of some hard registers to usage of a register
     stack may be done at this point.  Currently, this is supported only
     for the floating-point registers of the Intel 80387 coprocessor.
     The source file name is @{b}reg-stack.c@{ub}.

     The options @{b}-dk@{ub} causes a debugging dump of the RTL code after this
     pass.  This dump file's name is made by appending @{b}.stack@{ub} to the
     input file name.

   * Final.  This pass outputs the assembler code for the function.  It
     is also responsible for identifying spurious test and compare
     instructions.  Machine-specific peephole optimizations are
     performed at the same time.  The function entry and exit sequences
     are generated directly as assembler code in this pass; they never
     exist as RTL.

     The source files are @{b}final.c@{ub} plus @{b}insn-output.c@{ub}; the latter is
     generated automatically from the machine description by the tool
     @{b}genoutput@{ub}.  The header file @{b}conditions.h@{ub} is used for communication
     between these files.

   * Debugging information output.  This is run after final because it
     must output the stack slot offsets for pseudo registers that did
     not get hard registers.  Source files are @{b}dbxout.c@{ub} for DBX symbol
     table format, @{b}sdbout.c@{ub} for SDB symbol table format, and @{b}dwarfout.c@{ub}
     for DWARF symbol table format.

   Some additional files are used by all or many passes:

   * Every pass uses @{b}machmode.def@{ub} and @{b}machmode.h@{ub} which define the
     machine modes.

   * Several passes use @{b}real.h@{ub}, which defines the default
     representation of floating point constants and how to operate on
     them.

   * All the passes that work with RTL use the header files @{b}rtl.h@{ub} and
     @{b}rtl.def@{ub}, and subroutines in file @{b}rtl.c@{ub}.  The tools @{b}gen*@{ub} also use
     these files to read and work with the machine description RTL.

   * Several passes refer to the header file @{b}insn-config.h@{ub} which
     contains a few parameters (C macro definitions) generated
     automatically from the machine description RTL by the tool
     @{b}genconfig@{ub}.

   * Several passes use the instruction recognizer, which consists of
     @{b}recog.c@{ub} and @{b}recog.h@{ub}, plus the files @{b}insn-recog.c@{ub} and
     @{b}insn-extract.c@{ub} that are generated automatically from the machine
     description by the tools @{b}genrecog@{ub} and @{b}genextract@{ub}.

   * Several passes use the header files @{b}regs.h@{ub} which defines the
     information recorded about pseudo register usage, and @{b}basic-block.h@{ub}
     which defines the information recorded about basic blocks.

   * @{b}hard-reg-set.h@{ub} defines the type @{b}HARD_REG_SET@{ub}, a bit-vector with a
     bit for each hard register, and some macros to manipulate it.
     This type is just @{b}int@{ub} if the machine has few enough hard registers;
     otherwise it is an array of @{b}int@{ub} and some of the macros expand into
     loops.

   * Several passes use instruction attributes.  A definition of the
     attributes defined for a particular machine is in file
     @{b}insn-attr.h@{ub}, which is generated from the machine description by
     the program @{b}genattr@{ub}.  The file @{b}insn-attrtab.c@{ub} contains subroutines
     to obtain the attribute values for insns.  It is generated from
     the machine description by the program @{b}genattrtab@{ub}.


@endnode

@node "RTL" "gcc.guide/RTL"
@next "Machine Desc"
@prev "Passes"
@toc "Main"

RTL Representation
******************

   Most of the work of the compiler is done on an intermediate
representation called register transfer language.  In this language,
the instructions to be output are described, pretty much one by one, in
an algebraic form that describes what the instruction does.

   RTL is inspired by Lisp lists.  It has both an internal form, made
up of structures that point at other structures, and a textual form
that is used in the machine description and in printed debugging dumps.
The textual form uses nested parentheses to indicate the pointers in
the internal form.


 @{" RTL Objects      " link "RTL Objects"}  Expressions vs vectors vs strings vs integers.
 @{" Accessors        " link "Accessors"}  Macros to access expression operands or vector elts.
 @{" Flags            " link "Flags"}  Other flags in an RTL expression.
 @{" Machine Modes    " link "Machine Modes"}  Describing the size and format of a datum.
 @{" Constants        " link "Constants"}  Expressions with constant values.
 @{" Regs and Memory  " link "Regs and Memory"}  Expressions representing register contents or memory.
 @{" Arithmetic       " link "Arithmetic"}  Expressions representing arithmetic on other expressions.
 @{" Comparisons      " link "Comparisons"}  Expressions representing comparison of expressions.
 @{" Bit Fields       " link "Bit Fields"}  Expressions representing bitfields in memory or reg.
 @{" Conversions      " link "Conversions"}  Extending, truncating, floating or fixing.
 @{" RTL Declarations " link "RTL Declarations"}  Declaring volatility, constancy, etc.
 @{" Side Effects     " link "Side Effects"}  Expressions for storing in registers, etc.
 @{" Incdec           " link "Incdec"}  Embedded side-effects for autoincrement addressing.
 @{" Assembler        " link "Assembler"}  Representing @{b}asm@{ub} with operands.
 @{" Insns            " link "Insns"}  Expression types for entire insns.
 @{" Calls            " link "Calls"}  RTL representation of function call insns.
 @{" Sharing          " link "Sharing"}  Some expressions are unique; others *must* be copied.
 @{" Reading RTL      " link "Reading RTL"}  Reading textual RTL from a file.


@endnode

@node "RTL Objects" "gcc.guide/RTL Objects"
@next "Accessors"
@prev "RTL"
@toc "RTL"

RTL Object Types
================

   RTL uses five kinds of objects: expressions, integers, wide integers,
strings and vectors.  Expressions are the most important ones.  An RTL
expression ("RTX", for short) is a C structure, but it is usually
referred to with a pointer; a type that is given the typedef name @{b}rtx@{ub}.

   An integer is simply an @{b}int@{ub}; their written form uses decimal digits.
A wide integer is an integral object whose type is @{b}HOST_WIDE_INT@{ub} (see
@{"Config" link "Config"}); their written form uses decimal digits.

   A string is a sequence of characters.  In core it is represented as a
@{b}char *@{ub} in usual C fashion, and it is written in C syntax as well.
However, strings in RTL may never be null.  If you write an empty
string in a machine description, it is represented in core as a null
pointer rather than as a pointer to a null character.  In certain
contexts, these null pointers instead of strings are valid.  Within RTL
code, strings are most commonly found inside @{b}symbol_ref@{ub} expressions,
but they appear in other contexts in the RTL expressions that make up
machine descriptions.

   A vector contains an arbitrary number of pointers to expressions.
The number of elements in the vector is explicitly present in the
vector.  The written form of a vector consists of square brackets
(@{b}[...]@{ub}) surrounding the elements, in sequence and with whitespace
separating them.  Vectors of length zero are not created; null pointers
are used instead.

   Expressions are classified by @{i}expression codes@{ui} (also called RTX
codes).  The expression code is a name defined in @{b}rtl.def@{ub}, which is
also (in upper case) a C enumeration constant.  The possible expression
codes and their meanings are machine-independent.  The code of an RTX
can be extracted with the macro @{b}GET_CODE (X)@{ub} and altered with @{b}PUT_CODE
(X, NEWCODE)@{ub}.

   The expression code determines how many operands the expression
contains, and what kinds of objects they are.  In RTL, unlike Lisp, you
cannot tell by looking at an operand what kind of object it is.
Instead, you must know from its context--from the expression code of
the containing expression.  For example, in an expression of code
@{b}subreg@{ub}, the first operand is to be regarded as an expression and the
second operand as an integer.  In an expression of code @{b}plus@{ub}, there are
two operands, both of which are to be regarded as expressions.  In a
@{b}symbol_ref@{ub} expression, there is one operand, which is to be regarded as
a string.

   Expressions are written as parentheses containing the name of the
expression type, its flags and machine mode if any, and then the
operands of the expression (separated by spaces).

   Expression code names in the @{b}md@{ub} file are written in lower case, but
when they appear in C code they are written in upper case.  In this
manual, they are shown as follows: @{b}const_int@{ub}.

   In a few contexts a null pointer is valid where an expression is
normally wanted.  The written form of this is @{b}(nil)@{ub}.


@endnode

@node "Accessors" "gcc.guide/Accessors"
@next "Flags"
@prev "RTL Objects"
@toc "RTL"

Access to Operands
==================

   For each expression type @{b}rtl.def@{ub} specifies the number of contained
objects and their kinds, with four possibilities: @{b}e@{ub} for expression
(actually a pointer to an expression), @{b}i@{ub} for integer, @{b}w@{ub} for wide
integer, @{b}s@{ub} for string, and @{b}E@{ub} for vector of expressions.  The sequence
of letters for an expression code is called its @{i}format@{ui}.  Thus, the
format of @{b}subreg@{ub} is @{b}ei@{ub}.

   A few other format characters are used occasionally:

@{b}u@{ub}
@{b}     u@{ub} is equivalent to @{b}e@{ub} except that it is printed differently in
     debugging dumps.  It is used for pointers to insns.

@{b}n@{ub}
@{b}     n@{ub} is equivalent to @{b}i@{ub} except that it is printed differently in
     debugging dumps.  It is used for the line number or code number of
     a @{b}note@{ub} insn.

@{b}S@{ub}
@{b}     S@{ub} indicates a string which is optional.  In the RTL objects in
     core, @{b}S@{ub} is equivalent to @{b}s@{ub}, but when the object is read, from an
     @{b}md@{ub} file, the string value of this operand may be omitted.  An
     omitted string is taken to be the null string.

@{b}V@{ub}
@{b}     V@{ub} indicates a vector which is optional.  In the RTL objects in
     core, @{b}V@{ub} is equivalent to @{b}E@{ub}, but when the object is read from an @{b}md@{ub}
     file, the vector value of this operand may be omitted.  An omitted
     vector is effectively the same as a vector of no elements.

@{b}0@{ub}
@{b}     0@{ub} means a slot whose contents do not fit any normal category.  @{b}0@{ub}
     slots are not printed at all in dumps, and are often used in
     special ways by small parts of the compiler.

   There are macros to get the number of operands, the format, and the
class of an expression code:

@{b}GET_RTX_LENGTH (CODE)@{ub}
     Number of operands of an RTX of code CODE.

@{b}GET_RTX_FORMAT (CODE)@{ub}
     The format of an RTX of code CODE, as a C string.

@{b}GET_RTX_CLASS (CODE)@{ub}
     A single character representing the type of RTX operation that code
     CODE performs.

     The following classes are defined:

    @{b}o@{ub}
          An RTX code that represents an actual object, such as @{b}reg@{ub} or
          @{b}mem@{ub}.  @{b}subreg@{ub} is not in this class.

    @{b}<@{ub}
          An RTX code for a comparison.  The codes in this class are
          @{b}NE@{ub}, @{b}EQ@{ub}, @{b}LE@{ub}, @{b}LT@{ub}, @{b}GE@{ub}, @{b}GT@{ub}, @{b}LEU@{ub}, @{b}LTU@{ub}, @{b}GEU@{ub}, @{b}GTU@{ub}.

    @{b}1@{ub}
          An RTX code for a unary arithmetic operation, such as @{b}neg@{ub}.

    @{b}c@{ub}
          An RTX code for a commutative binary operation, other than @{b}NE@{ub}
          and @{b}EQ@{ub} (which have class @{b}<@{ub}).

    @{b}2@{ub}
          An RTX code for a noncommutative binary operation, such as
          @{b}MINUS@{ub}.

    @{b}b@{ub}
          An RTX code for a bitfield operation, either @{b}ZERO_EXTRACT@{ub} or
          @{b}SIGN_EXTRACT@{ub}.

    @{b}3@{ub}
          An RTX code for other three input operations, such as
          @{b}IF_THEN_ELSE@{ub}.

    @{b}i@{ub}
          An RTX code for a machine insn (@{b}INSN@{ub}, @{b}JUMP_INSN@{ub}, and
          @{b}CALL_INSN@{ub}).

    @{b}m@{ub}
          An RTX code for something that matches in insns, such as
          @{b}MATCH_DUP@{ub}.

    @{b}x@{ub}
          All other RTX codes.

   Operands of expressions are accessed using the macros @{b}XEXP@{ub}, @{b}XINT@{ub},
@{b}XWINT@{ub} and @{b}XSTR@{ub}.  Each of these macros takes two arguments: an
expression-pointer (RTX) and an operand number (counting from zero).
Thus,

     XEXP (X, 2)

accesses operand 2 of expression X, as an expression.

     XINT (X, 2)

accesses the same operand as an integer.  @{b}XSTR@{ub}, used in the same
fashion, would access it as a string.

   Any operand can be accessed as an integer, as an expression or as a
string.  You must choose the correct method of access for the kind of
value actually stored in the operand.  You would do this based on the
expression code of the containing expression.  That is also how you
would know how many operands there are.

   For example, if X is a @{b}subreg@{ub} expression, you know that it has two
operands which can be correctly accessed as @{b}XEXP (X, 0)@{ub} and @{b}XINT (X,
1)@{ub}.  If you did @{b}XINT (X, 0)@{ub}, you would get the address of the
expression operand but cast as an integer; that might occasionally be
useful, but it would be cleaner to write @{b}(int) XEXP (X, 0)@{ub}.  @{b}XEXP (X,
1)@{ub} would also compile without error, and would return the second,
integer operand cast as an expression pointer, which would probably
result in a crash when accessed.  Nothing stops you from writing @{b}XEXP
(X, 28)@{ub} either, but this will access memory past the end of the
expression with unpredictable results.

   Access to operands which are vectors is more complicated.  You can
use the macro @{b}XVEC@{ub} to get the vector-pointer itself, or the macros
@{b}XVECEXP@{ub} and @{b}XVECLEN@{ub} to access the elements and length of a vector.

@{b}XVEC (EXP, IDX)@{ub}
     Access the vector-pointer which is operand number IDX in EXP.

@{b}XVECLEN (EXP, IDX)@{ub}
     Access the length (number of elements) in the vector which is in
     operand number IDX in EXP.  This value is an @{b}int@{ub}.

@{b}XVECEXP (EXP, IDX, ELTNUM)@{ub}
     Access element number ELTNUM in the vector which is in operand
     number IDX in EXP.  This value is an RTX.

     It is up to you to make sure that ELTNUM is not negative and is
     less than @{b}XVECLEN (EXP, IDX)@{ub}.

   All the macros defined in this section expand into lvalues and
therefore can be used to assign the operands, lengths and vector
elements as well as to access them.


@endnode

@node "Flags" "gcc.guide/Flags"
@next "Machine Modes"
@prev "Accessors"
@toc "RTL"

Flags in an RTL Expression
==========================

   RTL expressions contain several flags (one-bit bitfields) and other
values that are used in certain types of expression.  Most often they
are accessed with the following macros:

@{b}MEM_VOLATILE_P (X)@{ub}
     In @{b}mem@{ub} expressions, nonzero for volatile memory references.
     Stored in the @{b}volatil@{ub} field and printed as @{b}/v@{ub}.

@{b}MEM_IN_STRUCT_P (X)@{ub}
     In @{b}mem@{ub} expressions, nonzero for reference to an entire structure,
     union or array, or to a component of one.  Zero for references to
     a scalar variable or through a pointer to a scalar.  Stored in the
     @{b}in_struct@{ub} field and printed as @{b}/s@{ub}.

@{b}MEM_ALIAS_SET (X)@{ub}
     In @{b}mem@{ub} expressions, the alias set to which X belongs.  If zero, X
     is not in any alias set, and may alias anything.  If nonzero, X
     may only alias objects in the same alias set.  This value is set
     (in a language-specific manner) by the front-end.  This field is
     not a bit-field; it is in an integer, found as the second argument
     to the @{b}mem@{ub}.

@{b}REG_LOOP_TEST_P@{ub}
     In @{b}reg@{ub} expressions, nonzero if this register's entire life is
     contained in the exit test code for some loop.  Stored in the
     @{b}in_struct@{ub} field and printed as @{b}/s@{ub}.

@{b}REG_USERVAR_P (X)@{ub}
     In a @{b}reg@{ub}, nonzero if it corresponds to a variable present in the
     user's source code.  Zero for temporaries generated internally by
     the compiler.  Stored in the @{b}volatil@{ub} field and printed as @{b}/v@{ub}.

@{b}REG_FUNCTION_VALUE_P (X)@{ub}
     Nonzero in a @{b}reg@{ub} if it is the place in which this function's value
     is going to be returned.  (This happens only in a hard register.)
     Stored in the @{b}integrated@{ub} field and printed as @{b}/i@{ub}.

     The same hard register may be used also for collecting the values
     of functions called by this one, but @{b}REG_FUNCTION_VALUE_P@{ub} is zero
     in this kind of use.

@{b}SUBREG_PROMOTED_VAR_P@{ub}
     Nonzero in a @{b}subreg@{ub} if it was made when accessing an object that
     was promoted to a wider mode in accord with the @{b}PROMOTED_MODE@{ub}
     machine description macro (see @{"Storage Layout" link "Storage Layout"}).  In this case,
     the mode of the @{b}subreg@{ub} is the declared mode of the object and the
     mode of @{b}SUBREG_REG@{ub} is the mode of the register that holds the
     object.  Promoted variables are always either sign- or
     zero-extended to the wider mode on every assignment.  Stored in
     the @{b}in_struct@{ub} field and printed as @{b}/s@{ub}.

@{b}SUBREG_PROMOTED_UNSIGNED_P@{ub}
     Nonzero in a @{b}subreg@{ub} that has @{b}SUBREG_PROMOTED_VAR_P@{ub} nonzero if the
     object being referenced is kept zero-extended and zero if it is
     kept sign-extended.  Stored in the @{b}unchanging@{ub} field and printed as
     @{b}/u@{ub}.

@{b}RTX_UNCHANGING_P (X)@{ub}
     Nonzero in a @{b}reg@{ub} or @{b}mem@{ub} if the value is not changed.  (This flag
     is not set for memory references via pointers to constants.  Such
     pointers only guarantee that the object will not be changed
     explicitly by the current function.  The object might be changed by
     other functions or by aliasing.)  Stored in the @{b}unchanging@{ub} field
     and printed as @{b}/u@{ub}.

@{b}RTX_INTEGRATED_P (INSN)@{ub}
     Nonzero in an insn if it resulted from an in-line function call.
     Stored in the @{b}integrated@{ub} field and printed as @{b}/i@{ub}.

@{b}SYMBOL_REF_USED (X)@{ub}
     In a @{b}symbol_ref@{ub}, indicates that X has been used.  This is normally
     only used to ensure that X is only declared external once.  Stored
     in the @{b}used@{ub} field.

@{b}SYMBOL_REF_FLAG (X)@{ub}
     In a @{b}symbol_ref@{ub}, this is used as a flag for machine-specific
     purposes.  Stored in the @{b}volatil@{ub} field and printed as @{b}/v@{ub}.

@{b}LABEL_OUTSIDE_LOOP_P@{ub}
     In @{b}label_ref@{ub} expressions, nonzero if this is a reference to a
     label that is outside the innermost loop containing the reference
     to the label.  Stored in the @{b}in_struct@{ub} field and printed as @{b}/s@{ub}.

@{b}INSN_DELETED_P (INSN)@{ub}
     In an insn, nonzero if the insn has been deleted.  Stored in the
     @{b}volatil@{ub} field and printed as @{b}/v@{ub}.

@{b}INSN_ANNULLED_BRANCH_P (INSN)@{ub}
     In an @{b}insn@{ub} in the delay slot of a branch insn, indicates that an
     annulling branch should be used.  See the discussion under
     @{b}sequence@{ub} below.  Stored in the @{b}unchanging@{ub} field and printed as @{b}/u@{ub}.

@{b}INSN_FROM_TARGET_P (INSN)@{ub}
     In an @{b}insn@{ub} in a delay slot of a branch, indicates that the insn is
     from the target of the branch.  If the branch insn has
     @{b}INSN_ANNULLED_BRANCH_P@{ub} set, this insn will only be executed if the
     branch is taken.  For annulled branches with @{b}INSN_FROM_TARGET_P@{ub}
     clear, the insn will be executed only if the branch is not taken.
     When @{b}INSN_ANNULLED_BRANCH_P@{ub} is not set, this insn will always be
     executed.  Stored in the @{b}in_struct@{ub} field and printed as @{b}/s@{ub}.

@{b}CONSTANT_POOL_ADDRESS_P (X)@{ub}
     Nonzero in a @{b}symbol_ref@{ub} if it refers to part of the current
     function's "constants pool".  These are addresses close to the
     beginning of the function, and GNU CC assumes they can be addressed
     directly (perhaps with the help of base registers).  Stored in the
     @{b}unchanging@{ub} field and printed as @{b}/u@{ub}.

@{b}CONST_CALL_P (X)@{ub}
     In a @{b}call_insn@{ub}, indicates that the insn represents a call to a
     const function.  Stored in the @{b}unchanging@{ub} field and printed as @{b}/u@{ub}.

@{b}LABEL_PRESERVE_P (X)@{ub}
     In a @{b}code_label@{ub}, indicates that the label can never be deleted.
     Labels referenced by a non-local goto will have this bit set.
     Stored in the @{b}in_struct@{ub} field and printed as @{b}/s@{ub}.

@{b}SCHED_GROUP_P (INSN)@{ub}
     During instruction scheduling, in an insn, indicates that the
     previous insn must be scheduled together with this insn.  This is
     used to ensure that certain groups of instructions will not be
     split up by the instruction scheduling pass, for example, @{b}use@{ub}
     insns before a @{b}call_insn@{ub} may not be separated from the @{b}call_insn@{ub}.
     Stored in the @{b}in_struct@{ub} field and printed as @{b}/s@{ub}.

   These are the fields which the above macros refer to:

@{b}used@{ub}
     Normally, this flag is used only momentarily, at the end of RTL
     generation for a function, to count the number of times an
     expression appears in insns.  Expressions that appear more than
     once are copied, according to the rules for shared structure (see
     @{"Sharing" link "Sharing"}).

     In a @{b}symbol_ref@{ub}, it indicates that an external declaration for the
     symbol has already been written.

     In a @{b}reg@{ub}, it is used by the leaf register renumbering code to
     ensure that each register is only renumbered once.

@{b}volatil@{ub}
     This flag is used in @{b}mem@{ub}, @{b}symbol_ref@{ub} and @{b}reg@{ub} expressions and in
     insns.  In RTL dump files, it is printed as @{b}/v@{ub}.

     In a @{b}mem@{ub} expression, it is 1 if the memory reference is volatile.
     Volatile memory references may not be deleted, reordered or
     combined.

     In a @{b}symbol_ref@{ub} expression, it is used for machine-specific
     purposes.

     In a @{b}reg@{ub} expression, it is 1 if the value is a user-level variable.
     0 indicates an internal compiler temporary.

     In an insn, 1 means the insn has been deleted.

@{b}in_struct@{ub}
     In @{b}mem@{ub} expressions, it is 1 if the memory datum referred to is all
     or part of a structure or array; 0 if it is (or might be) a scalar
     variable.  A reference through a C pointer has 0 because the
     pointer might point to a scalar variable.  This information allows
     the compiler to determine something about possible cases of
     aliasing.

     In an insn in the delay slot of a branch, 1 means that this insn
     is from the target of the branch.

     During instruction scheduling, in an insn, 1 means that this insn
     must be scheduled as part of a group together with the previous
     insn.

     In @{b}reg@{ub} expressions, it is 1 if the register has its entire life
     contained within the test expression of some loop.

     In @{b}subreg@{ub} expressions, 1 means that the @{b}subreg@{ub} is accessing an
     object that has had its mode promoted from a wider mode.

     In @{b}label_ref@{ub} expressions, 1 means that the referenced label is
     outside the innermost loop containing the insn in which the
     @{b}label_ref@{ub} was found.

     In @{b}code_label@{ub} expressions, it is 1 if the label may never be
     deleted.  This is used for labels which are the target of
     non-local gotos.

     In an RTL dump, this flag is represented as @{b}/s@{ub}.

@{b}unchanging@{ub}
     In @{b}reg@{ub} and @{b}mem@{ub} expressions, 1 means that the value of the
     expression never changes.

     In @{b}subreg@{ub} expressions, it is 1 if the @{b}subreg@{ub} references an
     unsigned object whose mode has been promoted to a wider mode.

     In an insn, 1 means that this is an annulling branch.

     In a @{b}symbol_ref@{ub} expression, 1 means that this symbol addresses
     something in the per-function constants pool.

     In a @{b}call_insn@{ub}, 1 means that this instruction is a call to a const
     function.

     In an RTL dump, this flag is represented as @{b}/u@{ub}.

@{b}integrated@{ub}
     In some kinds of expressions, including insns, this flag means the
     rtl was produced by procedure integration.

     In a @{b}reg@{ub} expression, this flag indicates the register containing
     the value to be returned by the current function.  On machines
     that pass parameters in registers, the same register number may be
     used for parameters as well, but this flag is not set on such uses.


@endnode

@node "Machine Modes" "gcc.guide/Machine Modes"
@next "Constants"
@prev "Flags"
@toc "RTL"

Machine Modes
=============

   A machine mode describes a size of data object and the
representation used for it.  In the C code, machine modes are
represented by an enumeration type, @{b}enum machine_mode@{ub}, defined in
@{b}machmode.def@{ub}.  Each RTL expression has room for a machine mode and so
do certain kinds of tree expressions (declarations and types, to be
precise).

   In debugging dumps and machine descriptions, the machine mode of an
RTL expression is written after the expression code with a colon to
separate them.  The letters @{b}mode@{ub} which appear at the end of each
machine mode name are omitted.  For example, @{b}(reg:SI 38)@{ub} is a @{b}reg@{ub}
expression with machine mode @{b}SImode@{ub}.  If the mode is @{b}VOIDmode@{ub}, it is
not written at all.

   Here is a table of machine modes.  The term "byte" below refers to an
object of @{b}BITS_PER_UNIT@{ub} bits (see @{"Storage Layout" link "Storage Layout"}).

@{b}QImode@{ub}
     "Quarter-Integer" mode represents a single byte treated as an
     integer.

@{b}HImode@{ub}
     "Half-Integer" mode represents a two-byte integer.

@{b}PSImode@{ub}
     "Partial Single Integer" mode represents an integer which occupies
     four bytes but which doesn't really use all four.  On some
     machines, this is the right mode to use for pointers.

@{b}SImode@{ub}
     "Single Integer" mode represents a four-byte integer.

@{b}PDImode@{ub}
     "Partial Double Integer" mode represents an integer which occupies
     eight bytes but which doesn't really use all eight.  On some
     machines, this is the right mode to use for certain pointers.

@{b}DImode@{ub}
     "Double Integer" mode represents an eight-byte integer.

@{b}TImode@{ub}
     "Tetra Integer" (?) mode represents a sixteen-byte integer.

@{b}SFmode@{ub}
     "Single Floating" mode represents a single-precision (four byte)
     floating point number.

@{b}DFmode@{ub}
     "Double Floating" mode represents a double-precision (eight byte)
     floating point number.

@{b}XFmode@{ub}
     "Extended Floating" mode represents a triple-precision (twelve
     byte) floating point number.  This mode is used for IEEE extended
     floating point.  On some systems not all bits within these bytes
     will actually be used.

@{b}TFmode@{ub}
     "Tetra Floating" mode represents a quadruple-precision (sixteen
     byte) floating point number.

@{b}CCmode@{ub}
     "Condition Code" mode represents the value of a condition code,
     which is a machine-specific set of bits used to represent the
     result of a comparison operation.  Other machine-specific modes
     may also be used for the condition code.  These modes are not used
     on machines that use @{b}cc0@{ub} (see see @{"Condition Code" link "Condition Code"}).

@{b}BLKmode@{ub}
     "Block" mode represents values that are aggregates to which none of
     the other modes apply.  In RTL, only memory references can have
     this mode, and only if they appear in string-move or vector
     instructions.  On machines which have no such instructions,
     @{b}BLKmode@{ub} will not appear in RTL.

@{b}VOIDmode@{ub}
     Void mode means the absence of a mode or an unspecified mode.  For
     example, RTL expressions of code @{b}const_int@{ub} have mode @{b}VOIDmode@{ub}
     because they can be taken to have whatever mode the context
     requires.  In debugging dumps of RTL, @{b}VOIDmode@{ub} is expressed by the
     absence of any mode.

@{b}SCmode, DCmode, XCmode, TCmode@{ub}
     These modes stand for a complex number represented as a pair of
     floating point values.  The floating point values are in @{b}SFmode@{ub},
     @{b}DFmode@{ub}, @{b}XFmode@{ub}, and @{b}TFmode@{ub}, respectively.

@{b}CQImode, CHImode, CSImode, CDImode, CTImode, COImode@{ub}
     These modes stand for a complex number represented as a pair of
     integer values.  The integer values are in @{b}QImode@{ub}, @{b}HImode@{ub}, @{b}SImode@{ub},
     @{b}DImode@{ub}, @{b}TImode@{ub}, and @{b}OImode@{ub}, respectively.

   The machine description defines @{b}Pmode@{ub} as a C macro which expands
into the machine mode used for addresses.  Normally this is the mode
whose size is @{b}BITS_PER_WORD@{ub}, @{b}SImode@{ub} on 32-bit machines.

   The only modes which a machine description @{i}must@{ui} support are @{b}QImode@{ub},
and the modes corresponding to @{b}BITS_PER_WORD@{ub}, @{b}FLOAT_TYPE_SIZE@{ub} and
@{b}DOUBLE_TYPE_SIZE@{ub}.  The compiler will attempt to use @{b}DImode@{ub} for 8-byte
structures and unions, but this can be prevented by overriding the
definition of @{b}MAX_FIXED_MODE_SIZE@{ub}.  Alternatively, you can have the
compiler use @{b}TImode@{ub} for 16-byte structures and unions.  Likewise, you
can arrange for the C type @{b}short int@{ub} to avoid using @{b}HImode@{ub}.

   Very few explicit references to machine modes remain in the compiler
and these few references will soon be removed.  Instead, the machine
modes are divided into mode classes.  These are represented by the
enumeration type @{b}enum mode_class@{ub} defined in @{b}machmode.h@{ub}.  The possible
mode classes are:

@{b}MODE_INT@{ub}
     Integer modes.  By default these are @{b}QImode@{ub}, @{b}HImode@{ub}, @{b}SImode@{ub},
     @{b}DImode@{ub}, and @{b}TImode@{ub}.

@{b}MODE_PARTIAL_INT@{ub}
     The "partial integer" modes, @{b}PSImode@{ub} and @{b}PDImode@{ub}.

@{b}MODE_FLOAT@{ub}
     floating point modes.  By default these are @{b}SFmode@{ub}, @{b}DFmode@{ub}, @{b}XFmode@{ub}
     and @{b}TFmode@{ub}.

@{b}MODE_COMPLEX_INT@{ub}
     Complex integer modes.  (These are not currently implemented).

@{b}MODE_COMPLEX_FLOAT@{ub}
     Complex floating point modes.  By default these are @{b}SCmode@{ub},
     @{b}DCmode@{ub}, @{b}XCmode@{ub}, and @{b}TCmode@{ub}.

@{b}MODE_FUNCTION@{ub}
     Algol or Pascal function variables including a static chain.
     (These are not currently implemented).

@{b}MODE_CC@{ub}
     Modes representing condition code values.  These are @{b}CCmode@{ub} plus
     any modes listed in the @{b}EXTRA_CC_MODES@{ub} macro.  See @{"Jump Patterns" link "Jump Patterns"},
     also see @{"Condition Code" link "Condition Code"}.

@{b}MODE_RANDOM@{ub}
     This is a catchall mode class for modes which don't fit into the
     above classes.  Currently @{b}VOIDmode@{ub} and @{b}BLKmode@{ub} are in @{b}MODE_RANDOM@{ub}.

   Here are some C macros that relate to machine modes:

@{b}GET_MODE (X)@{ub}
     Returns the machine mode of the RTX X.

@{b}PUT_MODE (X, NEWMODE)@{ub}
     Alters the machine mode of the RTX X to be NEWMODE.

@{b}NUM_MACHINE_MODES@{ub}
     Stands for the number of machine modes available on the target
     machine.  This is one greater than the largest numeric value of any
     machine mode.

@{b}GET_MODE_NAME (M)@{ub}
     Returns the name of mode M as a string.

@{b}GET_MODE_CLASS (M)@{ub}
     Returns the mode class of mode M.

@{b}GET_MODE_WIDER_MODE (M)@{ub}
     Returns the next wider natural mode.  For example, the expression
     @{b}GET_MODE_WIDER_MODE (QImode)@{ub} returns @{b}HImode@{ub}.

@{b}GET_MODE_SIZE (M)@{ub}
     Returns the size in bytes of a datum of mode M.

@{b}GET_MODE_BITSIZE (M)@{ub}
     Returns the size in bits of a datum of mode M.

@{b}GET_MODE_MASK (M)@{ub}
     Returns a bitmask containing 1 for all bits in a word that fit
     within mode M.  This macro can only be used for modes whose
     bitsize is less than or equal to @{b}HOST_BITS_PER_INT@{ub}.

@{b}GET_MODE_ALIGNMENT (M))@{ub}
     Return the required alignment, in bits, for an object of mode M.

@{b}GET_MODE_UNIT_SIZE (M)@{ub}
     Returns the size in bytes of the subunits of a datum of mode M.
     This is the same as @{b}GET_MODE_SIZE@{ub} except in the case of complex
     modes.  For them, the unit size is the size of the real or
     imaginary part.

@{b}GET_MODE_NUNITS (M)@{ub}
     Returns the number of units contained in a mode, i.e.,
     @{b}GET_MODE_SIZE@{ub} divided by @{b}GET_MODE_UNIT_SIZE@{ub}.

@{b}GET_CLASS_NARROWEST_MODE (C)@{ub}
     Returns the narrowest mode in mode class C.

   The global variables @{b}byte_mode@{ub} and @{b}word_mode@{ub} contain modes whose
classes are @{b}MODE_INT@{ub} and whose bitsizes are either @{b}BITS_PER_UNIT@{ub} or
@{b}BITS_PER_WORD@{ub}, respectively.  On 32-bit machines, these are @{b}QImode@{ub} and
@{b}SImode@{ub}, respectively.


@endnode

@node "Constants" "gcc.guide/Constants"
@next "Regs and Memory"
@prev "Machine Modes"
@toc "RTL"

Constant Expression Types
=========================

   The simplest RTL expressions are those that represent constant
values.

@{b}(const_int I)@{ub}
     This type of expression represents the integer value I.  I is
     customarily accessed with the macro @{b}INTVAL@{ub} as in @{b}INTVAL (EXP)@{ub},
     which is equivalent to @{b}XWINT (EXP, 0)@{ub}.

     There is only one expression object for the integer value zero; it
     is the value of the variable @{b}const0_rtx@{ub}.  Likewise, the only
     expression for integer value one is found in @{b}const1_rtx@{ub}, the only
     expression for integer value two is found in @{b}const2_rtx@{ub}, and the
     only expression for integer value negative one is found in
     @{b}constm1_rtx@{ub}.  Any attempt to create an expression of code
     @{b}const_int@{ub} and value zero, one, two or negative one will return
     @{b}const0_rtx@{ub}, @{b}const1_rtx@{ub}, @{b}const2_rtx@{ub} or @{b}constm1_rtx@{ub} as appropriate.

     Similarly, there is only one object for the integer whose value is
     @{b}STORE_FLAG_VALUE@{ub}.  It is found in @{b}const_true_rtx@{ub}.  If
     @{b}STORE_FLAG_VALUE@{ub} is one, @{b}const_true_rtx@{ub} and @{b}const1_rtx@{ub} will point
     to the same object.  If @{b}STORE_FLAG_VALUE@{ub} is -1, @{b}const_true_rtx@{ub} and
     @{b}constm1_rtx@{ub} will point to the same object.

@{b}(const_double:M ADDR I0 I1 ...)@{ub}
     Represents either a floating-point constant of mode M or an
     integer constant too large to fit into @{b}HOST_BITS_PER_WIDE_INT@{ub} bits
     but small enough to fit within twice that number of bits (GNU CC
     does not provide a mechanism to represent even larger constants).
     In the latter case, M will be @{b}VOIDmode@{ub}.

     ADDR is used to contain the @{b}mem@{ub} expression that corresponds to the
     location in memory that at which the constant can be found.  If it
     has not been allocated a memory location, but is on the chain of
     all @{b}const_double@{ub} expressions in this compilation (maintained using
     an undisplayed field), ADDR contains @{b}const0_rtx@{ub}.  If it is not on
     the chain, ADDR contains @{b}cc0_rtx@{ub}.  ADDR is customarily accessed
     with the macro @{b}CONST_DOUBLE_MEM@{ub} and the chain field via
     @{b}CONST_DOUBLE_CHAIN@{ub}.

     If M is @{b}VOIDmode@{ub}, the bits of the value are stored in I0 and I1.
     I0 is customarily accessed with the macro @{b}CONST_DOUBLE_LOW@{ub} and I1
     with @{b}CONST_DOUBLE_HIGH@{ub}.

     If the constant is floating point (regardless of its precision),
     then the number of integers used to store the value depends on the
     size of @{b}REAL_VALUE_TYPE@{ub} (see @{"Cross-compilation" link "Cross-compilation"}).  The integers
     represent a floating point number, but not precisely in the target
     machine's or host machine's floating point format.  To convert
     them to the precise bit pattern used by the target machine, use
     the macro @{b}REAL_VALUE_TO_TARGET_DOUBLE@{ub} and friends (see
     @{"Data Output" link "Data Output"}).

     The macro @{b}CONST0_RTX (MODE)@{ub} refers to an expression with value 0
     in mode MODE.  If mode MODE is of mode class @{b}MODE_INT@{ub}, it returns
     @{b}const0_rtx@{ub}.  Otherwise, it returns a @{b}CONST_DOUBLE@{ub} expression in
     mode MODE.  Similarly, the macro @{b}CONST1_RTX (MODE)@{ub} refers to an
     expression with value 1 in mode MODE and similarly for @{b}CONST2_RTX@{ub}.

@{b}(const_string STR)@{ub}
     Represents a constant string with value STR.  Currently this is
     used only for insn attributes (see @{"Insn Attributes" link "Insn Attributes"}) since constant
     strings in C are placed in memory.

@{b}(symbol_ref:MODE SYMBOL)@{ub}
     Represents the value of an assembler label for data.  SYMBOL is a
     string that describes the name of the assembler label.  If it
     starts with a @{b}*@{ub}, the label is the rest of SYMBOL not including the
     @{b}*@{ub}.  Otherwise, the label is SYMBOL, usually prefixed with @{b}_@{ub}.

     The @{b}symbol_ref@{ub} contains a mode, which is usually @{b}Pmode@{ub}.  Usually
     that is the only mode for which a symbol is directly valid.

@{b}(label_ref LABEL)@{ub}
     Represents the value of an assembler label for code.  It contains
     one operand, an expression, which must be a @{b}code_label@{ub} that appears
     in the instruction sequence to identify the place where the label
     should go.

     The reason for using a distinct expression type for code label
     references is so that jump optimization can distinguish them.

@{b}(const:M EXP)@{ub}
     Represents a constant that is the result of an assembly-time
     arithmetic computation.  The operand, EXP, is an expression that
     contains only constants (@{b}const_int@{ub}, @{b}symbol_ref@{ub} and @{b}label_ref@{ub}
     expressions) combined with @{b}plus@{ub} and @{b}minus@{ub}.  However, not all
     combinations are valid, since the assembler cannot do arbitrary
     arithmetic on relocatable symbols.

     M should be @{b}Pmode@{ub}.

@{b}(high:M EXP)@{ub}
     Represents the high-order bits of EXP, usually a @{b}symbol_ref@{ub}.  The
     number of bits is machine-dependent and is normally the number of
     bits specified in an instruction that initializes the high order
     bits of a register.  It is used with @{b}lo_sum@{ub} to represent the
     typical two-instruction sequence used in RISC machines to
     reference a global memory location.

     M should be @{b}Pmode@{ub}.


@endnode

@node "Regs and Memory" "gcc.guide/Regs and Memory"
@next "Arithmetic"
@prev "Constants"
@toc "RTL"

Registers and Memory
====================

   Here are the RTL expression types for describing access to machine
registers and to main memory.

@{b}(reg:M N)@{ub}
     For small values of the integer N (those that are less than
     @{b}FIRST_PSEUDO_REGISTER@{ub}), this stands for a reference to machine
     register number N: a @{i}hard register@{ui}.  For larger values of N, it
     stands for a temporary value or @{i}pseudo register@{ui}.  The compiler's
     strategy is to generate code assuming an unlimited number of such
     pseudo registers, and later convert them into hard registers or
     into memory references.

     M is the machine mode of the reference.  It is necessary because
     machines can generally refer to each register in more than one
     mode.  For example, a register may contain a full word but there
     may be instructions to refer to it as a half word or as a single
     byte, as well as instructions to refer to it as a floating point
     number of various precisions.

     Even for a register that the machine can access in only one mode,
     the mode must always be specified.

     The symbol @{b}FIRST_PSEUDO_REGISTER@{ub} is defined by the machine
     description, since the number of hard registers on the machine is
     an invariant characteristic of the machine.  Note, however, that
     not all of the machine registers must be general registers.  All
     the machine registers that can be used for storage of data are
     given hard register numbers, even those that can be used only in
     certain instructions or can hold only certain types of data.

     A hard register may be accessed in various modes throughout one
     function, but each pseudo register is given a natural mode and is
     accessed only in that mode.  When it is necessary to describe an
     access to a pseudo register using a nonnatural mode, a @{b}subreg@{ub}
     expression is used.

     A @{b}reg@{ub} expression with a machine mode that specifies more than one
     word of data may actually stand for several consecutive registers.
     If in addition the register number specifies a hardware register,
     then it actually represents several consecutive hardware registers
     starting with the specified one.

     Each pseudo register number used in a function's RTL code is
     represented by a unique @{b}reg@{ub} expression.

     Some pseudo register numbers, those within the range of
     @{b}FIRST_VIRTUAL_REGISTER@{ub} to @{b}LAST_VIRTUAL_REGISTER@{ub} only appear during
     the RTL generation phase and are eliminated before the
     optimization phases.  These represent locations in the stack frame
     that cannot be determined until RTL generation for the function
     has been completed.  The following virtual register numbers are
     defined:

    @{b}VIRTUAL_INCOMING_ARGS_REGNUM@{ub}
          This points to the first word of the incoming arguments
          passed on the stack.  Normally these arguments are placed
          there by the caller, but the callee may have pushed some
          arguments that were previously passed in registers.

          When RTL generation is complete, this virtual register is
          replaced by the sum of the register given by
          @{b}ARG_POINTER_REGNUM@{ub} and the value of @{b}FIRST_PARM_OFFSET@{ub}.

    @{b}VIRTUAL_STACK_VARS_REGNUM@{ub}
          If @{b}FRAME_GROWS_DOWNWARD@{ub} is defined, this points to immediately
          above the first variable on the stack.  Otherwise, it points
          to the first variable on the stack.

@{b}          VIRTUAL_STACK_VARS_REGNUM@{ub} is replaced with the sum of the
          register given by @{b}FRAME_POINTER_REGNUM@{ub} and the value
          @{b}STARTING_FRAME_OFFSET@{ub}.

    @{b}VIRTUAL_STACK_DYNAMIC_REGNUM@{ub}
          This points to the location of dynamically allocated memory
          on the stack immediately after the stack pointer has been
          adjusted by the amount of memory desired.

          This virtual register is replaced by the sum of the register
          given by @{b}STACK_POINTER_REGNUM@{ub} and the value
          @{b}STACK_DYNAMIC_OFFSET@{ub}.

    @{b}VIRTUAL_OUTGOING_ARGS_REGNUM@{ub}
          This points to the location in the stack at which outgoing
          arguments should be written when the stack is pre-pushed
          (arguments pushed using push insns should always use
          @{b}STACK_POINTER_REGNUM@{ub}).

          This virtual register is replaced by the sum of the register
          given by @{b}STACK_POINTER_REGNUM@{ub} and the value
          @{b}STACK_POINTER_OFFSET@{ub}.

@{b}(subreg:M REG WORDNUM)@{ub}
@{b}     subreg@{ub} expressions are used to refer to a register in a machine
     mode other than its natural one, or to refer to one register of a
     multi-word @{b}reg@{ub} that actually refers to several registers.

     Each pseudo-register has a natural mode.  If it is necessary to
     operate on it in a different mode--for example, to perform a
     fullword move instruction on a pseudo-register that contains a
     single byte--the pseudo-register must be enclosed in a @{b}subreg@{ub}.  In
     such a case, WORDNUM is zero.

     Usually M is at least as narrow as the mode of REG, in which case
     it is restricting consideration to only the bits of REG that are
     in M.

     Sometimes M is wider than the mode of REG.  These @{b}subreg@{ub}
     expressions are often called @{i}paradoxical@{ui}.  They are used in cases
     where we want to refer to an object in a wider mode but do not
     care what value the additional bits have.  The reload pass ensures
     that paradoxical references are only made to hard registers.

     The other use of @{b}subreg@{ub} is to extract the individual registers of
     a multi-register value.  Machine modes such as @{b}DImode@{ub} and @{b}TImode@{ub}
     can indicate values longer than a word, values which usually
     require two or more consecutive registers.  To access one of the
     registers, use a @{b}subreg@{ub} with mode @{b}SImode@{ub} and a WORDNUM that says
     which register.

     Storing in a non-paradoxical @{b}subreg@{ub} has undefined results for bits
     belonging to the same word as the @{b}subreg@{ub}.  This laxity makes it
     easier to generate efficient code for such instructions.  To
     represent an instruction that preserves all the bits outside of
     those in the @{b}subreg@{ub}, use @{b}strict_low_part@{ub} around the @{b}subreg@{ub}.

     The compilation parameter @{b}WORDS_BIG_ENDIAN@{ub}, if set to 1, says that
     word number zero is the most significant part; otherwise, it is
     the least significant part.

     On a few targets, @{b}FLOAT_WORDS_BIG_ENDIAN@{ub} disagrees with
     @{b}WORDS_BIG_ENDIAN@{ub}.  However, most parts of the compiler treat
     floating point values as if they had the same endianness as
     integer values.  This works because they handle them solely as a
     collection of integer values, with no particular numerical value.
     Only real.c and the runtime libraries care about
     @{b}FLOAT_WORDS_BIG_ENDIAN@{ub}.

     Between the combiner pass and the reload pass, it is possible to
     have a paradoxical @{b}subreg@{ub} which contains a @{b}mem@{ub} instead of a @{b}reg@{ub} as
     its first operand.  After the reload pass, it is also possible to
     have a non-paradoxical @{b}subreg@{ub} which contains a @{b}mem@{ub}; this usually
     occurs when the @{b}mem@{ub} is a stack slot which replaced a pseudo
     register.

     Note that it is not valid to access a @{b}DFmode@{ub} value in @{b}SFmode@{ub} using
     a @{b}subreg@{ub}.  On some machines the most significant part of a @{b}DFmode@{ub}
     value does not have the same format as a single-precision floating
     value.

     It is also not valid to access a single word of a multi-word value
     in a hard register when less registers can hold the value than
     would be expected from its size.  For example, some 32-bit
     machines have floating-point registers that can hold an entire
     @{b}DFmode@{ub} value.  If register 10 were such a register @{b}(subreg:SI
     (reg:DF 10) 1)@{ub} would be invalid because there is no way to convert
     that reference to a single machine register.  The reload pass
     prevents @{b}subreg@{ub} expressions such as these from being formed.

     The first operand of a @{b}subreg@{ub} expression is customarily accessed
     with the @{b}SUBREG_REG@{ub} macro and the second operand is customarily
     accessed with the @{b}SUBREG_WORD@{ub} macro.

@{b}(scratch:M)@{ub}
     This represents a scratch register that will be required for the
     execution of a single instruction and not used subsequently.  It is
     converted into a @{b}reg@{ub} by either the local register allocator or the
     reload pass.

@{b}     scratch@{ub} is usually present inside a @{b}clobber@{ub} operation (see
     @{"Side Effects" link "Side Effects"}).

@{b}(cc0)@{ub}
     This refers to the machine's condition code register.  It has no
     operands and may not have a machine mode.  There are two ways to
     use it:

        * To stand for a complete set of condition code flags.  This is
          best on most machines, where each comparison sets the entire
          series of flags.

          With this technique, @{b}(cc0)@{ub} may be validly used in only two
          contexts: as the destination of an assignment (in test and
          compare instructions) and in comparison operators comparing
          against zero (@{b}const_int@{ub} with value zero; that is to say,
          @{b}const0_rtx@{ub}).

        * To stand for a single flag that is the result of a single
          condition.  This is useful on machines that have only a
          single flag bit, and in which comparison instructions must
          specify the condition to test.

          With this technique, @{b}(cc0)@{ub} may be validly used in only two
          contexts: as the destination of an assignment (in test and
          compare instructions) where the source is a comparison
          operator, and as the first operand of @{b}if_then_else@{ub} (in a
          conditional branch).

     There is only one expression object of code @{b}cc0@{ub}; it is the value
     of the variable @{b}cc0_rtx@{ub}.  Any attempt to create an expression of
     code @{b}cc0@{ub} will return @{b}cc0_rtx@{ub}.

     Instructions can set the condition code implicitly.  On many
     machines, nearly all instructions set the condition code based on
     the value that they compute or store.  It is not necessary to
     record these actions explicitly in the RTL because the machine
     description includes a prescription for recognizing the
     instructions that do so (by means of the macro @{b}NOTICE_UPDATE_CC@{ub}).
     See @{"Condition Code" link "Condition Code"}.  Only instructions whose sole purpose is to
     set the condition code, and instructions that use the condition
     code, need mention @{b}(cc0)@{ub}.

     On some machines, the condition code register is given a register
     number and a @{b}reg@{ub} is used instead of @{b}(cc0)@{ub}.  This is usually the
     preferable approach if only a small subset of instructions modify
     the condition code.  Other machines store condition codes in
     general registers; in such cases a pseudo register should be used.

     Some machines, such as the Sparc and RS/6000, have two sets of
     arithmetic instructions, one that sets and one that does not set
     the condition code.  This is best handled by normally generating
     the instruction that does not set the condition code, and making a
     pattern that both performs the arithmetic and sets the condition
     code register (which would not be @{b}(cc0)@{ub} in this case).  For
     examples, search for @{b}addcc@{ub} and @{b}andcc@{ub} in @{b}sparc.md@{ub}.

@{b}(pc)@{ub}
     This represents the machine's program counter.  It has no operands
     and may not have a machine mode.  @{b}(pc)@{ub} may be validly used only in
     certain specific contexts in jump instructions.

     There is only one expression object of code @{b}pc@{ub}; it is the value of
     the variable @{b}pc_rtx@{ub}.  Any attempt to create an expression of code
     @{b}pc@{ub} will return @{b}pc_rtx@{ub}.

     All instructions that do not jump alter the program counter
     implicitly by incrementing it, but there is no need to mention
     this in the RTL.

@{b}(mem:M ADDR)@{ub}
     This RTX represents a reference to main memory at an address
     represented by the expression ADDR.  M specifies how large a unit
     of memory is accessed.

@{b}(addressof:M REG)@{ub}
     This RTX represents a request for the address of register REG.
     Its mode is always @{b}Pmode@{ub}.  If there are any @{b}addressof@{ub} expressions
     left in the function after CSE, REG is forced into the stack and
     the @{b}addressof@{ub} expression is replaced with a @{b}plus@{ub} expression for
     the address of its stack slot.


@endnode

@node "Arithmetic" "gcc.guide/Arithmetic"
@next "Comparisons"
@prev "Regs and Memory"
@toc "RTL"

RTL Expressions for Arithmetic
==============================

   Unless otherwise specified, all the operands of arithmetic
expressions must be valid for mode M.  An operand is valid for mode M
if it has mode M, or if it is a @{b}const_int@{ub} or @{b}const_double@{ub} and M is a
mode of class @{b}MODE_INT@{ub}.

   For commutative binary operations, constants should be placed in the
second operand.

@{b}(plus:M X Y)@{ub}
     Represents the sum of the values represented by X and Y carried
     out in machine mode M.

@{b}(lo_sum:M X Y)@{ub}
     Like @{b}plus@{ub}, except that it represents that sum of X and the
     low-order bits of Y.  The number of low order bits is
     machine-dependent but is normally the number of bits in a @{b}Pmode@{ub}
     item minus the number of bits set by the @{b}high@{ub} code (see
     @{"Constants" link "Constants"}).

     M should be @{b}Pmode@{ub}.

@{b}(minus:M X Y)@{ub}
     Like @{b}plus@{ub} but represents subtraction.

@{b}(compare:M X Y)@{ub}
     Represents the result of subtracting Y from X for purposes of
     comparison.  The result is computed without overflow, as if with
     infinite precision.

     Of course, machines can't really subtract with infinite precision.
     However, they can pretend to do so when only the sign of the
     result will be used, which is the case when the result is stored
     in the condition code.   And that is the only way this kind of
     expression may validly be used: as a value to be stored in the
     condition codes.

     The mode M is not related to the modes of X and Y, but instead is
     the mode of the condition code value.  If @{b}(cc0)@{ub} is used, it is
     @{b}VOIDmode@{ub}.  Otherwise it is some mode in class @{b}MODE_CC@{ub}, often
     @{b}CCmode@{ub}.  See @{"Condition Code" link "Condition Code"}.

     Normally, X and Y must have the same mode.  Otherwise, @{b}compare@{ub} is
     valid only if the mode of X is in class @{b}MODE_INT@{ub} and Y is a
     @{b}const_int@{ub} or @{b}const_double@{ub} with mode @{b}VOIDmode@{ub}.  The mode of X
     determines what mode the comparison is to be done in; thus it must
     not be @{b}VOIDmode@{ub}.

     If one of the operands is a constant, it should be placed in the
     second operand and the comparison code adjusted as appropriate.

     A @{b}compare@{ub} specifying two @{b}VOIDmode@{ub} constants is not valid since
     there is no way to know in what mode the comparison is to be
     performed; the comparison must either be folded during the
     compilation or the first operand must be loaded into a register
     while its mode is still known.

@{b}(neg:M X)@{ub}
     Represents the negation (subtraction from zero) of the value
     represented by X, carried out in mode M.

@{b}(mult:M X Y)@{ub}
     Represents the signed product of the values represented by X and Y
     carried out in machine mode M.

     Some machines support a multiplication that generates a product
     wider than the operands.  Write the pattern for this as

          (mult:M (sign_extend:M X) (sign_extend:M Y))

     where M is wider than the modes of X and Y, which need not be the
     same.

     Write patterns for unsigned widening multiplication similarly using
     @{b}zero_extend@{ub}.

@{b}(div:M X Y)@{ub}
     Represents the quotient in signed division of X by Y, carried out
     in machine mode M.  If M is a floating point mode, it represents
     the exact quotient; otherwise, the integerized quotient.

     Some machines have division instructions in which the operands and
     quotient widths are not all the same; you should represent such
     instructions using @{b}truncate@{ub} and @{b}sign_extend@{ub} as in,

          (truncate:M1 (div:M2 X (sign_extend:M2 Y)))

@{b}(udiv:M X Y)@{ub}
     Like @{b}div@{ub} but represents unsigned division.

@{b}(mod:M X Y)@{ub}
@{b}(umod:M X Y)@{ub}
     Like @{b}div@{ub} and @{b}udiv@{ub} but represent the remainder instead of the
     quotient.

@{b}(smin:M X Y)@{ub}
@{b}(smax:M X Y)@{ub}
     Represents the smaller (for @{b}smin@{ub}) or larger (for @{b}smax@{ub}) of X and Y,
     interpreted as signed integers in mode M.

@{b}(umin:M X Y)@{ub}
@{b}(umax:M X Y)@{ub}
     Like @{b}smin@{ub} and @{b}smax@{ub}, but the values are interpreted as unsigned
     integers.

@{b}(not:M X)@{ub}
     Represents the bitwise complement of the value represented by X,
     carried out in mode M, which must be a fixed-point machine mode.

@{b}(and:M X Y)@{ub}
     Represents the bitwise logical-and of the values represented by X
     and Y, carried out in machine mode M, which must be a fixed-point
     machine mode.

@{b}(ior:M X Y)@{ub}
     Represents the bitwise inclusive-or of the values represented by X
     and Y, carried out in machine mode M, which must be a fixed-point
     mode.

@{b}(xor:M X Y)@{ub}
     Represents the bitwise exclusive-or of the values represented by X
     and Y, carried out in machine mode M, which must be a fixed-point
     mode.

@{b}(ashift:M X C)@{ub}
     Represents the result of arithmetically shifting X left by C
     places.  X have mode M, a fixed-point machine mode.  C be a
     fixed-point mode or be a constant with mode @{b}VOIDmode@{ub}; which mode
     is determined by the mode called for in the machine description
     entry for the left-shift instruction.  For example, on the Vax,
     the mode of C is @{b}QImode@{ub} regardless of M.

@{b}(lshiftrt:M X C)@{ub}
@{b}(ashiftrt:M X C)@{ub}
     Like @{b}ashift@{ub} but for right shift.  Unlike the case for left shift,
     these two operations are distinct.

@{b}(rotate:M X C)@{ub}
@{b}(rotatert:M X C)@{ub}
     Similar but represent left and right rotate.  If C is a constant,
     use @{b}rotate@{ub}.

@{b}(abs:M X)@{ub}
     Represents the absolute value of X, computed in mode M.

@{b}(sqrt:M X)@{ub}
     Represents the square root of X, computed in mode M.  Most often M
     will be a floating point mode.

@{b}(ffs:M X)@{ub}
     Represents one plus the index of the least significant 1-bit in X,
     represented as an integer of mode M.  (The value is zero if X is
     zero.)  The mode of X need not be M; depending on the target
     machine, various mode combinations may be valid.


@endnode

@node "Comparisons" "gcc.guide/Comparisons"
@next "Bit Fields"
@prev "Arithmetic"
@toc "RTL"

Comparison Operations
=====================

   Comparison operators test a relation on two operands and are
considered to represent a machine-dependent nonzero value described by,
but not necessarily equal to, @{b}STORE_FLAG_VALUE@{ub} (see @{"Misc" link "Misc"}) if the
relation holds, or zero if it does not.  The mode of the comparison
operation is independent of the mode of the data being compared.  If
the comparison operation is being tested (e.g., the first operand of an
@{b}if_then_else@{ub}), the mode must be @{b}VOIDmode@{ub}.  If the comparison operation
is producing data to be stored in some variable, the mode must be in
class @{b}MODE_INT@{ub}.  All comparison operations producing data must use the
same mode, which is machine-specific.

   There are two ways that comparison operations may be used.  The
comparison operators may be used to compare the condition codes @{b}(cc0)@{ub}
against zero, as in @{b}(eq (cc0) (const_int 0))@{ub}.  Such a construct
actually refers to the result of the preceding instruction in which the
condition codes were set.  The instructing setting the condition code
must be adjacent to the instruction using the condition code; only @{b}note@{ub}
insns may separate them.

   Alternatively, a comparison operation may directly compare two data
objects.  The mode of the comparison is determined by the operands; they
must both be valid for a common machine mode.  A comparison with both
operands constant would be invalid as the machine mode could not be
deduced from it, but such a comparison should never exist in RTL due to
constant folding.

   In the example above, if @{b}(cc0)@{ub} were last set to @{b}(compare X Y)@{ub}, the
comparison operation is identical to @{b}(eq X Y)@{ub}.  Usually only one style
of comparisons is supported on a particular machine, but the combine
pass will try to merge the operations to produce the @{b}eq@{ub} shown in case
it exists in the context of the particular insn involved.

   Inequality comparisons come in two flavors, signed and unsigned.
Thus, there are distinct expression codes @{b}gt@{ub} and @{b}gtu@{ub} for signed and
unsigned greater-than.  These can produce different results for the same
pair of integer values: for example, 1 is signed greater-than -1 but not
unsigned greater-than, because -1 when regarded as unsigned is actually
@{b}0xffffffff@{ub} which is greater than 1.

   The signed comparisons are also used for floating point values.
Floating point comparisons are distinguished by the machine modes of
the operands.

@{b}(eq:M X Y)@{ub}
     1 if the values represented by X and Y are equal, otherwise 0.

@{b}(ne:M X Y)@{ub}
     1 if the values represented by X and Y are not equal, otherwise 0.

@{b}(gt:M X Y)@{ub}
     1 if the X is greater than Y.  If they are fixed-point, the
     comparison is done in a signed sense.

@{b}(gtu:M X Y)@{ub}
     Like @{b}gt@{ub} but does unsigned comparison, on fixed-point numbers only.

@{b}(lt:M X Y)@{ub}
@{b}(ltu:M X Y)@{ub}
     Like @{b}gt@{ub} and @{b}gtu@{ub} but test for "less than".

@{b}(ge:M X Y)@{ub}
@{b}(geu:M X Y)@{ub}
     Like @{b}gt@{ub} and @{b}gtu@{ub} but test for "greater than or equal".

@{b}(le:M X Y)@{ub}
@{b}(leu:M X Y)@{ub}
     Like @{b}gt@{ub} and @{b}gtu@{ub} but test for "less than or equal".

@{b}(if_then_else COND THEN ELSE)@{ub}
     This is not a comparison operation but is listed here because it is
     always used in conjunction with a comparison operation.  To be
     precise, COND is a comparison expression.  This expression
     represents a choice, according to COND, between the value
     represented by THEN and the one represented by ELSE.

     On most machines, @{b}if_then_else@{ub} expressions are valid only to
     express conditional jumps.

@{b}(cond [TEST1 VALUE1 TEST2 VALUE2 ...] DEFAULT)@{ub}
     Similar to @{b}if_then_else@{ub}, but more general.  Each of TEST1, TEST2,
     ... is performed in turn.  The result of this expression is the
     VALUE corresponding to the first non-zero test, or DEFAULT if none
     of the tests are non-zero expressions.

     This is currently not valid for instruction patterns and is
     supported only for insn attributes.  See @{"Insn Attributes" link "Insn Attributes"}.


@endnode

@node "Bit Fields" "gcc.guide/Bit Fields"
@next "Conversions"
@prev "Comparisons"
@toc "RTL"

Bit Fields
==========

   Special expression codes exist to represent bitfield instructions.
These types of expressions are lvalues in RTL; they may appear on the
left side of an assignment, indicating insertion of a value into the
specified bit field.

@{b}(sign_extract:M LOC SIZE POS)@{ub}
     This represents a reference to a sign-extended bit field contained
     or starting in LOC (a memory or register reference).  The bit field
     is SIZE bits wide and starts at bit POS.  The compilation option
     @{b}BITS_BIG_ENDIAN@{ub} says which end of the memory unit POS counts from.

     If LOC is in memory, its mode must be a single-byte integer mode.
     If LOC is in a register, the mode to use is specified by the
     operand of the @{b}insv@{ub} or @{b}extv@{ub} pattern (see @{"Standard Names" link "Standard Names"}) and is
     usually a full-word integer mode, which is the default if none is
     specified.

     The mode of POS is machine-specific and is also specified in the
     @{b}insv@{ub} or @{b}extv@{ub} pattern.

     The mode M is the same as the mode that would be used for LOC if
     it were a register.

@{b}(zero_extract:M LOC SIZE POS)@{ub}
     Like @{b}sign_extract@{ub} but refers to an unsigned or zero-extended bit
     field.  The same sequence of bits are extracted, but they are
     filled to an entire word with zeros instead of by sign-extension.


@endnode

@node "Conversions" "gcc.guide/Conversions"
@next "RTL Declarations"
@prev "Bit Fields"
@toc "RTL"

Conversions
===========

   All conversions between machine modes must be represented by
explicit conversion operations.  For example, an expression which is
the sum of a byte and a full word cannot be written as @{b}(plus:SI (reg:QI
34) (reg:SI 80))@{ub} because the @{b}plus@{ub} operation requires two operands of
the same machine mode.  Therefore, the byte-sized operand is enclosed
in a conversion operation, as in

     (plus:SI (sign_extend:SI (reg:QI 34)) (reg:SI 80))

   The conversion operation is not a mere placeholder, because there
may be more than one way of converting from a given starting mode to
the desired final mode.  The conversion operation code says how to do
it.

   For all conversion operations, X must not be @{b}VOIDmode@{ub} because the
mode in which to do the conversion would not be known.  The conversion
must either be done at compile-time or X must be placed into a register.

@{b}(sign_extend:M X)@{ub}
     Represents the result of sign-extending the value X to machine
     mode M.  M must be a fixed-point mode and X a fixed-point value of
     a mode narrower than M.

@{b}(zero_extend:M X)@{ub}
     Represents the result of zero-extending the value X to machine
     mode M.  M must be a fixed-point mode and X a fixed-point value of
     a mode narrower than M.

@{b}(float_extend:M X)@{ub}
     Represents the result of extending the value X to machine mode M.
     M must be a floating point mode and X a floating point value of a
     mode narrower than M.

@{b}(truncate:M X)@{ub}
     Represents the result of truncating the value X to machine mode M.
     M must be a fixed-point mode and X a fixed-point value of a mode
     wider than M.

@{b}(float_truncate:M X)@{ub}
     Represents the result of truncating the value X to machine mode M.
     M must be a floating point mode and X a floating point value of a
     mode wider than M.

@{b}(float:M X)@{ub}
     Represents the result of converting fixed point value X, regarded
     as signed, to floating point mode M.

@{b}(unsigned_float:M X)@{ub}
     Represents the result of converting fixed point value X, regarded
     as unsigned, to floating point mode M.

@{b}(fix:M X)@{ub}
     When M is a fixed point mode, represents the result of converting
     floating point value X to mode M, regarded as signed.  How
     rounding is done is not specified, so this operation may be used
     validly in compiling C code only for integer-valued operands.

@{b}(unsigned_fix:M X)@{ub}
     Represents the result of converting floating point value X to
     fixed point mode M, regarded as unsigned.  How rounding is done is
     not specified.

@{b}(fix:M X)@{ub}
     When M is a floating point mode, represents the result of
     converting floating point value X (valid for mode M) to an
     integer, still represented in floating point mode M, by rounding
     towards zero.


@endnode

@node "RTL Declarations" "gcc.guide/RTL Declarations"
@next "Side Effects"
@prev "Conversions"
@toc "RTL"

Declarations
============

   Declaration expression codes do not represent arithmetic operations
but rather state assertions about their operands.

@{b}(strict_low_part (subreg:M (reg:N R) 0))@{ub}
     This expression code is used in only one context: as the
     destination operand of a @{b}set@{ub} expression.  In addition, the operand
     of this expression must be a non-paradoxical @{b}subreg@{ub} expression.

     The presence of @{b}strict_low_part@{ub} says that the part of the register
     which is meaningful in mode N, but is not part of mode M, is not
     to be altered.  Normally, an assignment to such a subreg is
     allowed to have undefined effects on the rest of the register when
     M is less than a word.


@endnode

@node "Side Effects" "gcc.guide/Side Effects"
@next "Incdec"
@prev "RTL Declarations"
@toc "RTL"

Side Effect Expressions
=======================

   The expression codes described so far represent values, not actions.
But machine instructions never produce values; they are meaningful only
for their side effects on the state of the machine.  Special expression
codes are used to represent side effects.

   The body of an instruction is always one of these side effect codes;
the codes described above, which represent values, appear only as the
operands of these.

@{b}(set LVAL X)@{ub}
     Represents the action of storing the value of X into the place
     represented by LVAL.  LVAL must be an expression representing a
     place that can be stored in: @{b}reg@{ub} (or @{b}subreg@{ub} or @{b}strict_low_part@{ub}),
     @{b}mem@{ub}, @{b}pc@{ub} or @{b}cc0@{ub}.

     If LVAL is a @{b}reg@{ub}, @{b}subreg@{ub} or @{b}mem@{ub}, it has a machine mode; then X
     must be valid for that mode.

     If LVAL is a @{b}reg@{ub} whose machine mode is less than the full width of
     the register, then it means that the part of the register
     specified by the machine mode is given the specified value and the
     rest of the register receives an undefined value.  Likewise, if
     LVAL is a @{b}subreg@{ub} whose machine mode is narrower than the mode of
     the register, the rest of the register can be changed in an
     undefined way.

     If LVAL is a @{b}strict_low_part@{ub} of a @{b}subreg@{ub}, then the part of the
     register specified by the machine mode of the @{b}subreg@{ub} is given the
     value X and the rest of the register is not changed.

     If LVAL is @{b}(cc0)@{ub}, it has no machine mode, and X may be either a
     @{b}compare@{ub} expression or a value that may have any mode.  The latter
     case represents a "test" instruction.  The expression @{b}(set (cc0)
     (reg:M N))@{ub} is equivalent to @{b}(set (cc0) (compare (reg:M N)
     (const_int 0)))@{ub}.  Use the former expression to save space during
     the compilation.

     If LVAL is @{b}(pc)@{ub}, we have a jump instruction, and the possibilities
     for X are very limited.  It may be a @{b}label_ref@{ub} expression
     (unconditional jump).  It may be an @{b}if_then_else@{ub} (conditional
     jump), in which case either the second or the third operand must
     be @{b}(pc)@{ub} (for the case which does not jump) and the other of the
     two must be a @{b}label_ref@{ub} (for the case which does jump).  X may
     also be a @{b}mem@{ub} or @{b}(plus:SI (pc) Y)@{ub}, where Y may be a @{b}reg@{ub} or a @{b}mem@{ub};
     these unusual patterns are used to represent jumps through branch
     tables.

     If LVAL is neither @{b}(cc0)@{ub} nor @{b}(pc)@{ub}, the mode of LVAL must not be
     @{b}VOIDmode@{ub} and the mode of X must be valid for the mode of LVAL.

     LVAL is customarily accessed with the @{b}SET_DEST@{ub} macro and X with
     the @{b}SET_SRC@{ub} macro.

@{b}(return)@{ub}
     As the sole expression in a pattern, represents a return from the
     current function, on machines where this can be done with one
     instruction, such as Vaxes.  On machines where a multi-instruction
     "epilogue" must be executed in order to return from the function,
     returning is done by jumping to a label which precedes the
     epilogue, and the @{b}return@{ub} expression code is never used.

     Inside an @{b}if_then_else@{ub} expression, represents the value to be
     placed in @{b}pc@{ub} to return to the caller.

     Note that an insn pattern of @{b}(return)@{ub} is logically equivalent to
     @{b}(set (pc) (return))@{ub}, but the latter form is never used.

@{b}(call FUNCTION NARGS)@{ub}
     Represents a function call.  FUNCTION is a @{b}mem@{ub} expression whose
     address is the address of the function to be called.  NARGS is an
     expression which can be used for two purposes: on some machines it
     represents the number of bytes of stack argument; on others, it
     represents the number of argument registers.

     Each machine has a standard machine mode which FUNCTION must have.
     The machine description defines macro @{b}FUNCTION_MODE@{ub} to expand
     into the requisite mode name.  The purpose of this mode is to
     specify what kind of addressing is allowed, on machines where the
     allowed kinds of addressing depend on the machine mode being
     addressed.

@{b}(clobber X)@{ub}
     Represents the storing or possible storing of an unpredictable,
     undescribed value into X, which must be a @{b}reg@{ub}, @{b}scratch@{ub} or @{b}mem@{ub}
     expression.

     One place this is used is in string instructions that store
     standard values into particular hard registers.  It may not be
     worth the trouble to describe the values that are stored, but it
     is essential to inform the compiler that the registers will be
     altered, lest it attempt to keep data in them across the string
     instruction.

     If X is @{b}(mem:BLK (const_int 0))@{ub}, it means that all memory
     locations must be presumed clobbered.

     Note that the machine description classifies certain hard
     registers as "call-clobbered".  All function call instructions are
     assumed by default to clobber these registers, so there is no need
     to use @{b}clobber@{ub} expressions to indicate this fact.  Also, each
     function call is assumed to have the potential to alter any memory
     location, unless the function is declared @{b}const@{ub}.

     If the last group of expressions in a @{b}parallel@{ub} are each a @{b}clobber@{ub}
     expression whose arguments are @{b}reg@{ub} or @{b}match_scratch@{ub} (see
     @{"RTL Template" link "RTL Template"}) expressions, the combiner phase can add the
     appropriate @{b}clobber@{ub} expressions to an insn it has constructed when
     doing so will cause a pattern to be matched.

     This feature can be used, for example, on a machine that whose
     multiply and add instructions don't use an MQ register but which
     has an add-accumulate instruction that does clobber the MQ
     register.  Similarly, a combined instruction might require a
     temporary register while the constituent instructions might not.

     When a @{b}clobber@{ub} expression for a register appears inside a @{b}parallel@{ub}
     with other side effects, the register allocator guarantees that
     the register is unoccupied both before and after that insn.
     However, the reload phase may allocate a register used for one of
     the inputs unless the @{b}&@{ub} constraint is specified for the selected
     alternative (see @{"Modifiers" link "Modifiers"}).  You can clobber either a specific
     hard register, a pseudo register, or a @{b}scratch@{ub} expression; in the
     latter two cases, GNU CC will allocate a hard register that is
     available there for use as a temporary.

     For instructions that require a temporary register, you should use
     @{b}scratch@{ub} instead of a pseudo-register because this will allow the
     combiner phase to add the @{b}clobber@{ub} when required.  You do this by
     coding (@{b}clobber@{ub} (@{b}match_scratch@{ub} ...)).  If you do clobber a pseudo
     register, use one which appears nowhere else--generate a new one
     each time.  Otherwise, you may confuse CSE.

     There is one other known use for clobbering a pseudo register in a
     @{b}parallel@{ub}: when one of the input operands of the insn is also
     clobbered by the insn.  In this case, using the same pseudo
     register in the clobber and elsewhere in the insn produces the
     expected results.

@{b}(use X)@{ub}
     Represents the use of the value of X.  It indicates that the value
     in X at this point in the program is needed, even though it may
     not be apparent why this is so.  Therefore, the compiler will not
     attempt to delete previous instructions whose only effect is to
     store a value in X.  X must be a @{b}reg@{ub} expression.

     During the reload phase, an insn that has a @{b}use@{ub} as pattern can
     carry a reg_equal note.  These @{b}use@{ub} insns will be deleted before
     the reload phase exits.

     During the delayed branch scheduling phase, X may be an insn.
     This indicates that X previously was located at this place in the
     code and its data dependencies need to be taken into account.
     These @{b}use@{ub} insns will be deleted before the delayed branch
     scheduling phase exits.

@{b}(parallel [X0 X1 ...])@{ub}
     Represents several side effects performed in parallel.  The square
     brackets stand for a vector; the operand of @{b}parallel@{ub} is a vector
     of expressions.  X0, X1 and so on are individual side effect
     expressions--expressions of code @{b}set@{ub}, @{b}call@{ub}, @{b}return@{ub}, @{b}clobber@{ub} or @{b}use@{ub}.

     "In parallel" means that first all the values used in the
     individual side-effects are computed, and second all the actual
     side-effects are performed.  For example,

          (parallel [(set (reg:SI 1) (mem:SI (reg:SI 1)))
                     (set (mem:SI (reg:SI 1)) (reg:SI 1))])

     says unambiguously that the values of hard register 1 and the
     memory location addressed by it are interchanged.  In both places
     where @{b}(reg:SI 1)@{ub} appears as a memory address it refers to the value
     in register 1 @{i}before@{ui} the execution of the insn.

     It follows that it is @{i}incorrect@{ui} to use @{b}parallel@{ub} and expect the
     result of one @{b}set@{ub} to be available for the next one.  For example,
     people sometimes attempt to represent a jump-if-zero instruction
     this way:

          (parallel [(set (cc0) (reg:SI 34))
                     (set (pc) (if_then_else
                                  (eq (cc0) (const_int 0))
                                  (label_ref ...)
                                  (pc)))])

     But this is incorrect, because it says that the jump condition
     depends on the condition code value @{i}before@{ui} this instruction, not
     on the new value that is set by this instruction.

     Peephole optimization, which takes place together with final
     assembly code output, can produce insns whose patterns consist of
     a @{b}parallel@{ub} whose elements are the operands needed to output the
     resulting assembler code--often @{b}reg@{ub}, @{b}mem@{ub} or constant expressions.
     This would not be well-formed RTL at any other stage in
     compilation, but it is ok then because no further optimization
     remains to be done.  However, the definition of the macro
     @{b}NOTICE_UPDATE_CC@{ub}, if any, must deal with such insns if you define
     any peephole optimizations.

@{b}(sequence [INSNS ...])@{ub}
     Represents a sequence of insns.  Each of the INSNS that appears in
     the vector is suitable for appearing in the chain of insns, so it
     must be an @{b}insn@{ub}, @{b}jump_insn@{ub}, @{b}call_insn@{ub}, @{b}code_label@{ub}, @{b}barrier@{ub} or @{b}note@{ub}.

     A @{b}sequence@{ub} RTX is never placed in an actual insn during RTL
     generation.  It represents the sequence of insns that result from a
     @{b}define_expand@{ub} @{i}before@{ui} those insns are passed to @{b}emit_insn@{ub} to insert
     them in the chain of insns.  When actually inserted, the
     individual sub-insns are separated out and the @{b}sequence@{ub} is
     forgotten.

     After delay-slot scheduling is completed, an insn and all the
     insns that reside in its delay slots are grouped together into a
     @{b}sequence@{ub}.  The insn requiring the delay slot is the first insn in
     the vector; subsequent insns are to be placed in the delay slot.

@{b}     INSN_ANNULLED_BRANCH_P@{ub} is set on an insn in a delay slot to
     indicate that a branch insn should be used that will conditionally
     annul the effect of the insns in the delay slots.  In such a case,
     @{b}INSN_FROM_TARGET_P@{ub} indicates that the insn is from the target of
     the branch and should be executed only if the branch is taken;
     otherwise the insn should be executed only if the branch is not
     taken.  See @{"Delay Slots" link "Delay Slots"}.

   These expression codes appear in place of a side effect, as the body
of an insn, though strictly speaking they do not always describe side
effects as such:

@{b}(asm_input S)@{ub}
     Represents literal assembler code as described by the string S.

@{b}(unspec [OPERANDS ...] INDEX)@{ub}
@{b}(unspec_volatile [OPERANDS ...] INDEX)@{ub}
     Represents a machine-specific operation on OPERANDS.  INDEX
     selects between multiple machine-specific operations.
     @{b}unspec_volatile@{ub} is used for volatile operations and operations
     that may trap; @{b}unspec@{ub} is used for other operations.

     These codes may appear inside a @{b}pattern@{ub} of an insn, inside a
     @{b}parallel@{ub}, or inside an expression.

@{b}(addr_vec:M [LR0 LR1 ...])@{ub}
     Represents a table of jump addresses.  The vector elements LR0,
     etc., are @{b}label_ref@{ub} expressions.  The mode M specifies how much
     space is given to each address; normally M would be @{b}Pmode@{ub}.

@{b}(addr_diff_vec:M BASE [LR0 LR1 ...] MIN MAX FLAGS)@{ub}
     Represents a table of jump addresses expressed as offsets from
     BASE.  The vector elements LR0, etc., are @{b}label_ref@{ub} expressions
     and so is BASE.  The mode M specifies how much space is given to
     each address-difference.  MIN and MAX are set up by branch
     shortening and hold a label with a minimum and a maximum address,
     respectively.  FLAGS indicates the relative position of BASE, MIN
     and MAX to the cointaining insn and of MIN and MAX to BASE.  See
     rtl.def for details.


@endnode

@node "Incdec" "gcc.guide/Incdec"
@next "Assembler"
@prev "Side Effects"
@toc "RTL"

Embedded Side-Effects on Addresses
==================================

   Four special side-effect expression codes appear as memory addresses.

@{b}(pre_dec:M X)@{ub}
     Represents the side effect of decrementing X by a standard amount
     and represents also the value that X has after being decremented.
     X must be a @{b}reg@{ub} or @{b}mem@{ub}, but most machines allow only a @{b}reg@{ub}.  M
     must be the machine mode for pointers on the machine in use.  The
     amount X is decremented by is the length in bytes of the machine
     mode of the containing memory reference of which this expression
     serves as the address.  Here is an example of its use:

          (mem:DF (pre_dec:SI (reg:SI 39)))

     This says to decrement pseudo register 39 by the length of a @{b}DFmode@{ub}
     value and use the result to address a @{b}DFmode@{ub} value.

@{b}(pre_inc:M X)@{ub}
     Similar, but specifies incrementing X instead of decrementing it.

@{b}(post_dec:M X)@{ub}
     Represents the same side effect as @{b}pre_dec@{ub} but a different value.
     The value represented here is the value X has @{i}before@{ui} being
     decremented.

@{b}(post_inc:M X)@{ub}
     Similar, but specifies incrementing X instead of decrementing it.

   These embedded side effect expressions must be used with care.
Instruction patterns may not use them.  Until the @{b}flow@{ub} pass of the
compiler, they may occur only to represent pushes onto the stack.  The
@{b}flow@{ub} pass finds cases where registers are incremented or decremented in
one instruction and used as an address shortly before or after; these
cases are then transformed to use pre- or post-increment or -decrement.

   If a register used as the operand of these expressions is used in
another address in an insn, the original value of the register is used.
Uses of the register outside of an address are not permitted within the
same insn as a use in an embedded side effect expression because such
insns behave differently on different machines and hence must be treated
as ambiguous and disallowed.

   An instruction that can be represented with an embedded side effect
could also be represented using @{b}parallel@{ub} containing an additional @{b}set@{ub}
to describe how the address register is altered.  This is not done
because machines that allow these operations at all typically allow
them wherever a memory address is called for.  Describing them as
additional parallel stores would require doubling the number of entries
in the machine description.


@endnode

@node "Assembler" "gcc.guide/Assembler"
@next "Insns"
@prev "Incdec"
@toc "RTL"

Assembler Instructions as Expressions
=====================================

   The RTX code @{b}asm_operands@{ub} represents a value produced by a
user-specified assembler instruction.  It is used to represent an @{b}asm@{ub}
statement with arguments.  An @{b}asm@{ub} statement with a single output
operand, like this:

     asm ("foo %1,%2,%0" : "=a" (outputvar) : "g" (x + y), "di" (*z));

is represented using a single @{b}asm_operands@{ub} RTX which represents the
value that is stored in @{b}outputvar@{ub}:

     (set RTX-FOR-OUTPUTVAR
          (asm_operands "foo %1,%2,%0" "a" 0
                        [RTX-FOR-ADDITION-RESULT RTX-FOR-*Z]
                        [(asm_input:M1 "g")
                         (asm_input:M2 "di")]))

Here the operands of the @{b}asm_operands@{ub} RTX are the assembler template
string, the output-operand's constraint, the index-number of the output
operand among the output operands specified, a vector of input operand
RTX's, and a vector of input-operand modes and constraints.  The mode
M1 is the mode of the sum @{b}x+y@{ub}; M2 is that of @{b}*z@{ub}.

   When an @{b}asm@{ub} statement has multiple output values, its insn has
several such @{b}set@{ub} RTX's inside of a @{b}parallel@{ub}.  Each @{b}set@{ub} contains a
@{b}asm_operands@{ub}; all of these share the same assembler template and
vectors, but each contains the constraint for the respective output
operand.  They are also distinguished by the output-operand index
number, which is 0, 1, ... for successive output operands.


@endnode

@node "Insns" "gcc.guide/Insns"
@next "Calls"
@prev "Assembler"
@toc "RTL"

Insns
=====

   The RTL representation of the code for a function is a doubly-linked
chain of objects called @{i}insns@{ui}.  Insns are expressions with special
codes that are used for no other purpose.  Some insns are actual
instructions; others represent dispatch tables for @{b}switch@{ub} statements;
others represent labels to jump to or various sorts of declarative
information.

   In addition to its own specific data, each insn must have a unique
id-number that distinguishes it from all other insns in the current
function (after delayed branch scheduling, copies of an insn with the
same id-number may be present in multiple places in a function, but
these copies will always be identical and will only appear inside a
@{b}sequence@{ub}), and chain pointers to the preceding and following insns.
These three fields occupy the same position in every insn, independent
of the expression code of the insn.  They could be accessed with @{b}XEXP@{ub}
and @{b}XINT@{ub}, but instead three special macros are always used:

@{b}INSN_UID (I)@{ub}
     Accesses the unique id of insn I.

@{b}PREV_INSN (I)@{ub}
     Accesses the chain pointer to the insn preceding I.  If I is the
     first insn, this is a null pointer.

@{b}NEXT_INSN (I)@{ub}
     Accesses the chain pointer to the insn following I.  If I is the
     last insn, this is a null pointer.

   The first insn in the chain is obtained by calling @{b}get_insns@{ub}; the
last insn is the result of calling @{b}get_last_insn@{ub}.  Within the chain
delimited by these insns, the @{b}NEXT_INSN@{ub} and @{b}PREV_INSN@{ub} pointers must
always correspond: if INSN is not the first insn,

     NEXT_INSN (PREV_INSN (INSN)) == INSN

is always true and if INSN is not the last insn,

     PREV_INSN (NEXT_INSN (INSN)) == INSN

is always true.

   After delay slot scheduling, some of the insns in the chain might be
@{b}sequence@{ub} expressions, which contain a vector of insns.  The value of
@{b}NEXT_INSN@{ub} in all but the last of these insns is the next insn in the
vector; the value of @{b}NEXT_INSN@{ub} of the last insn in the vector is the
same as the value of @{b}NEXT_INSN@{ub} for the @{b}sequence@{ub} in which it is
contained.  Similar rules apply for @{b}PREV_INSN@{ub}.

   This means that the above invariants are not necessarily true for
insns inside @{b}sequence@{ub} expressions.  Specifically, if INSN is the first
insn in a @{b}sequence@{ub}, @{b}NEXT_INSN (PREV_INSN (INSN))@{ub} is the insn containing
the @{b}sequence@{ub} expression, as is the value of @{b}PREV_INSN (NEXT_INSN
(INSN))@{ub} is INSN is the last insn in the @{b}sequence@{ub} expression.  You can
use these expressions to find the containing @{b}sequence@{ub} expression.

   Every insn has one of the following six expression codes:

@{b}insn@{ub}
     The expression code @{b}insn@{ub} is used for instructions that do not jump
     and do not do function calls.  @{b}sequence@{ub} expressions are always
     contained in insns with code @{b}insn@{ub} even if one of those insns
     should jump or do function calls.

     Insns with code @{b}insn@{ub} have four additional fields beyond the three
     mandatory ones listed above.  These four are described in a table
     below.

@{b}jump_insn@{ub}
     The expression code @{b}jump_insn@{ub} is used for instructions that may
     jump (or, more generally, may contain @{b}label_ref@{ub} expressions).  If
     there is an instruction to return from the current function, it is
     recorded as a @{b}jump_insn@{ub}.

@{b}     jump_insn@{ub} insns have the same extra fields as @{b}insn@{ub} insns, accessed
     in the same way and in addition contain a field @{b}JUMP_LABEL@{ub} which
     is defined once jump optimization has completed.

     For simple conditional and unconditional jumps, this field
     contains the @{b}code_label@{ub} to which this insn will (possibly
     conditionally) branch.  In a more complex jump, @{b}JUMP_LABEL@{ub} records
     one of the labels that the insn refers to; the only way to find
     the others is to scan the entire body of the insn.

     Return insns count as jumps, but since they do not refer to any
     labels, they have zero in the @{b}JUMP_LABEL@{ub} field.

@{b}call_insn@{ub}
     The expression code @{b}call_insn@{ub} is used for instructions that may do
     function calls.  It is important to distinguish these instructions
     because they imply that certain registers and memory locations may
     be altered unpredictably.

@{b}     call_insn@{ub} insns have the same extra fields as @{b}insn@{ub} insns, accessed
     in the same way and in addition contain a field
     @{b}CALL_INSN_FUNCTION_USAGE@{ub}, which contains a list (chain of
     @{b}expr_list@{ub} expressions) containing @{b}use@{ub} and @{b}clobber@{ub} expressions that
     denote hard registers used or clobbered by the called function.  A
     register specified in a @{b}clobber@{ub} in this list is modified @{i}after@{ui} the
     execution of the @{b}call_insn@{ub}, while a register in a @{b}clobber@{ub} in the
     body of the @{b}call_insn@{ub} is clobbered before the insn completes
     execution.  @{b}clobber@{ub} expressions in this list augment registers
     specified in @{b}CALL_USED_REGISTERS@{ub} (see @{"Register Basics" link "Register Basics"}).

@{b}code_label@{ub}
     A @{b}code_label@{ub} insn represents a label that a jump insn can jump to.
     It contains two special fields of data in addition to the three
     standard ones.  @{b}CODE_LABEL_NUMBER@{ub} is used to hold the @{i}label
     number@{ui}, a number that identifies this label uniquely among all the
     labels in the compilation (not just in the current function).
     Ultimately, the label is represented in the assembler output as an
     assembler label, usually of the form @{b}LN@{ub} where N is the label
     number.

     When a @{b}code_label@{ub} appears in an RTL expression, it normally
     appears within a @{b}label_ref@{ub} which represents the address of the
     label, as a number.

     The field @{b}LABEL_NUSES@{ub} is only defined once the jump optimization
     phase is completed and contains the number of times this label is
     referenced in the current function.

@{b}barrier@{ub}
     Barriers are placed in the instruction stream when control cannot
     flow past them.  They are placed after unconditional jump
     instructions to indicate that the jumps are unconditional and
     after calls to @{b}volatile@{ub} functions, which do not return (e.g.,
     @{b}exit@{ub}).  They contain no information beyond the three standard
     fields.

@{b}note@{ub}
@{b}     note@{ub} insns are used to represent additional debugging and
     declarative information.  They contain two nonstandard fields, an
     integer which is accessed with the macro @{b}NOTE_LINE_NUMBER@{ub} and a
     string accessed with @{b}NOTE_SOURCE_FILE@{ub}.

     If @{b}NOTE_LINE_NUMBER@{ub} is positive, the note represents the position
     of a source line and @{b}NOTE_SOURCE_FILE@{ub} is the source file name that
     the line came from.  These notes control generation of line number
     data in the assembler output.

     Otherwise, @{b}NOTE_LINE_NUMBER@{ub} is not really a line number but a code
     with one of the following values (and @{b}NOTE_SOURCE_FILE@{ub} must
     contain a null pointer):

    @{b}NOTE_INSN_DELETED@{ub}
          Such a note is completely ignorable.  Some passes of the
          compiler delete insns by altering them into notes of this
          kind.

    @{b}NOTE_INSN_BLOCK_BEG@{ub}
    @{b}NOTE_INSN_BLOCK_END@{ub}
          These types of notes indicate the position of the beginning
          and end of a level of scoping of variable names.  They
          control the output of debugging information.

    @{b}NOTE_INSN_EH_REGION_BEG@{ub}
    @{b}NOTE_INSN_EH_REGION_END@{ub}
          These types of notes indicate the position of the beginning
          and end of a level of scoping for exception handling.
          @{b}NOTE_BLOCK_NUMBER@{ub} identifies which @{b}CODE_LABEL@{ub} is associated
          with the given region.

    @{b}NOTE_INSN_LOOP_BEG@{ub}
    @{b}NOTE_INSN_LOOP_END@{ub}
          These types of notes indicate the position of the beginning
          and end of a @{b}while@{ub} or @{b}for@{ub} loop.  They enable the loop
          optimizer to find loops quickly.

    @{b}NOTE_INSN_LOOP_CONT@{ub}
          Appears at the place in a loop that @{b}continue@{ub} statements jump
          to.

    @{b}NOTE_INSN_LOOP_VTOP@{ub}
          This note indicates the place in a loop where the exit test
          begins for those loops in which the exit test has been
          duplicated.  This position becomes another virtual start of
          the loop when considering loop invariants.

    @{b}NOTE_INSN_FUNCTION_END@{ub}
          Appears near the end of the function body, just before the
          label that @{b}return@{ub} statements jump to (on machine where a
          single instruction does not suffice for returning).  This
          note may be deleted by jump optimization.

    @{b}NOTE_INSN_SETJMP@{ub}
          Appears following each call to @{b}setjmp@{ub} or a related function.

     These codes are printed symbolically when they appear in debugging
     dumps.

   The machine mode of an insn is normally @{b}VOIDmode@{ub}, but some phases
use the mode for various purposes; for example, the reload pass sets it
to @{b}HImode@{ub} if the insn needs reloading but not register elimination and
@{b}QImode@{ub} if both are required.  The common subexpression elimination pass
sets the mode of an insn to @{b}QImode@{ub} when it is the first insn in a block
that has already been processed.

   Here is a table of the extra fields of @{b}insn@{ub}, @{b}jump_insn@{ub} and @{b}call_insn@{ub}
insns:

@{b}PATTERN (I)@{ub}
     An expression for the side effect performed by this insn.  This
     must be one of the following codes: @{b}set@{ub}, @{b}call@{ub}, @{b}use@{ub}, @{b}clobber@{ub},
     @{b}return@{ub}, @{b}asm_input@{ub}, @{b}asm_output@{ub}, @{b}addr_vec@{ub}, @{b}addr_diff_vec@{ub}, @{b}trap_if@{ub},
     @{b}unspec@{ub}, @{b}unspec_volatile@{ub}, @{b}parallel@{ub}, or @{b}sequence@{ub}.  If it is a
     @{b}parallel@{ub}, each element of the @{b}parallel@{ub} must be one these codes,
     except that @{b}parallel@{ub} expressions cannot be nested and @{b}addr_vec@{ub} and
     @{b}addr_diff_vec@{ub} are not permitted inside a @{b}parallel@{ub} expression.

@{b}INSN_CODE (I)@{ub}
     An integer that says which pattern in the machine description
     matches this insn, or -1 if the matching has not yet been
     attempted.

     Such matching is never attempted and this field remains -1 on an
     insn whose pattern consists of a single @{b}use@{ub}, @{b}clobber@{ub}, @{b}asm_input@{ub},
     @{b}addr_vec@{ub} or @{b}addr_diff_vec@{ub} expression.

     Matching is also never attempted on insns that result from an @{b}asm@{ub}
     statement.  These contain at least one @{b}asm_operands@{ub} expression.
     The function @{b}asm_noperands@{ub} returns a non-negative value for such
     insns.

     In the debugging output, this field is printed as a number
     followed by a symbolic representation that locates the pattern in
     the @{b}md@{ub} file as some small positive or negative offset from a named
     pattern.

@{b}LOG_LINKS (I)@{ub}
     A list (chain of @{b}insn_list@{ub} expressions) giving information about
     dependencies between instructions within a basic block.  Neither a
     jump nor a label may come between the related insns.

@{b}REG_NOTES (I)@{ub}
     A list (chain of @{b}expr_list@{ub} and @{b}insn_list@{ub} expressions) giving
     miscellaneous information about the insn.  It is often information
     pertaining to the registers used in this insn.

   The @{b}LOG_LINKS@{ub} field of an insn is a chain of @{b}insn_list@{ub} expressions.
Each of these has two operands: the first is an insn, and the second is
another @{b}insn_list@{ub} expression (the next one in the chain).  The last
@{b}insn_list@{ub} in the chain has a null pointer as second operand.  The
significant thing about the chain is which insns appear in it (as first
operands of @{b}insn_list@{ub} expressions).  Their order is not significant.

   This list is originally set up by the flow analysis pass; it is a
null pointer until then.  Flow only adds links for those data
dependencies which can be used for instruction combination.  For each
insn, the flow analysis pass adds a link to insns which store into
registers values that are used for the first time in this insn.  The
instruction scheduling pass adds extra links so that every dependence
will be represented.  Links represent data dependencies,
antidependencies and output dependencies; the machine mode of the link
distinguishes these three types: antidependencies have mode
@{b}REG_DEP_ANTI@{ub}, output dependencies have mode @{b}REG_DEP_OUTPUT@{ub}, and data
dependencies have mode @{b}VOIDmode@{ub}.

   The @{b}REG_NOTES@{ub} field of an insn is a chain similar to the @{b}LOG_LINKS@{ub}
field but it includes @{b}expr_list@{ub} expressions in addition to @{b}insn_list@{ub}
expressions.  There are several kinds of register notes, which are
distinguished by the machine mode, which in a register note is really
understood as being an @{b}enum reg_note@{ub}.  The first operand OP of the note
is data whose meaning depends on the kind of note.

   The macro @{b}REG_NOTE_KIND (X)@{ub} returns the kind of register note.  Its
counterpart, the macro @{b}PUT_REG_NOTE_KIND (X, NEWKIND)@{ub} sets the register
note type of X to be NEWKIND.

   Register notes are of three classes: They may say something about an
input to an insn, they may say something about an output of an insn, or
they may create a linkage between two insns.  There are also a set of
values that are only used in @{b}LOG_LINKS@{ub}.

   These register notes annotate inputs to an insn:

@{b}REG_DEAD@{ub}
     The value in OP dies in this insn; that is to say, altering the
     value immediately after this insn would not affect the future
     behavior of the program.

     This does not necessarily mean that the register OP has no useful
     value after this insn since it may also be an output of the insn.
     In such a case, however, a @{b}REG_DEAD@{ub} note would be redundant and is
     usually not present until after the reload pass, but no code
     relies on this fact.

@{b}REG_INC@{ub}
     The register OP is incremented (or decremented; at this level
     there is no distinction) by an embedded side effect inside this
     insn.  This means it appears in a @{b}post_inc@{ub}, @{b}pre_inc@{ub}, @{b}post_dec@{ub} or
     @{b}pre_dec@{ub} expression.

@{b}REG_NONNEG@{ub}
     The register OP is known to have a nonnegative value when this
     insn is reached.  This is used so that decrement and branch until
     zero instructions, such as the m68k dbra, can be matched.

     The @{b}REG_NONNEG@{ub} note is added to insns only if the machine
     description has a @{b}decrement_and_branch_until_zero@{ub} pattern.

@{b}REG_NO_CONFLICT@{ub}
     This insn does not cause a conflict between OP and the item being
     set by this insn even though it might appear that it does.  In
     other words, if the destination register and OP could otherwise be
     assigned the same register, this insn does not prevent that
     assignment.

     Insns with this note are usually part of a block that begins with a
     @{b}clobber@{ub} insn specifying a multi-word pseudo register (which will
     be the output of the block), a group of insns that each set one
     word of the value and have the @{b}REG_NO_CONFLICT@{ub} note attached, and
     a final insn that copies the output to itself with an attached
     @{b}REG_EQUAL@{ub} note giving the expression being computed.  This block
     is encapsulated with @{b}REG_LIBCALL@{ub} and @{b}REG_RETVAL@{ub} notes on the first
     and last insns, respectively.

@{b}REG_LABEL@{ub}
     This insn uses OP, a @{b}code_label@{ub}, but is not a @{b}jump_insn@{ub}.  The
     presence of this note allows jump optimization to be aware that OP
     is, in fact, being used.

   The following notes describe attributes of outputs of an insn:

@{b}REG_EQUIV@{ub}
@{b}REG_EQUAL@{ub}
     This note is only valid on an insn that sets only one register and
     indicates that that register will be equal to OP at run time; the
     scope of this equivalence differs between the two types of notes.
     The value which the insn explicitly copies into the register may
     look different from OP, but they will be equal at run time.  If the
     output of the single @{b}set@{ub} is a @{b}strict_low_part@{ub} expression, the note
     refers to the register that is contained in @{b}SUBREG_REG@{ub} of the
     @{b}subreg@{ub} expression.

     For @{b}REG_EQUIV@{ub}, the register is equivalent to OP throughout the
     entire function, and could validly be replaced in all its
     occurrences by OP.  ("Validly" here refers to the data flow of the
     program; simple replacement may make some insns invalid.)  For
     example, when a constant is loaded into a register that is never
     assigned any other value, this kind of note is used.

     When a parameter is copied into a pseudo-register at entry to a
     function, a note of this kind records that the register is
     equivalent to the stack slot where the parameter was passed.
     Although in this case the register may be set by other insns, it
     is still valid to replace the register by the stack slot
     throughout the function.

     A @{b}REG_EQUIV@{ub} note is also used on an instruction which copies a
     register parameter into a pseudo-register at entry to a function,
     if there is a stack slot where that parameter could be stored.
     Although other insns may set the pseudo-register, it is valid for
     the compiler to replace the pseudo-register by stack slot
     throughout the function, provided the compiler ensures that the
     stack slot is properly initialized by making the replacement in
     the initial copy instruction as well.  This is used on machines
     for which the calling convention allocates stack space for
     register parameters.  See @{b}REG_PARM_STACK_SPACE@{ub} in @{"Stack Arguments" link "Stack Arguments"}.

     In the case of @{b}REG_EQUAL@{ub}, the register that is set by this insn
     will be equal to OP at run time at the end of this insn but not
     necessarily elsewhere in the function.  In this case, OP is
     typically an arithmetic expression.  For example, when a sequence
     of insns such as a library call is used to perform an arithmetic
     operation, this kind of note is attached to the insn that produces
     or copies the final value.

     These two notes are used in different ways by the compiler passes.
     @{b}REG_EQUAL@{ub} is used by passes prior to register allocation (such as
     common subexpression elimination and loop optimization) to tell
     them how to think of that value.  @{b}REG_EQUIV@{ub} notes are used by
     register allocation to indicate that there is an available
     substitute expression (either a constant or a @{b}mem@{ub} expression for
     the location of a parameter on the stack) that may be used in
     place of a register if insufficient registers are available.

     Except for stack homes for parameters, which are indicated by a
     @{b}REG_EQUIV@{ub} note and are not useful to the early optimization passes
     and pseudo registers that are equivalent to a memory location
     throughout there entire life, which is not detected until later in
     the compilation, all equivalences are initially indicated by an
     attached @{b}REG_EQUAL@{ub} note.  In the early stages of register
     allocation, a @{b}REG_EQUAL@{ub} note is changed into a @{b}REG_EQUIV@{ub} note if
     OP is a constant and the insn represents the only set of its
     destination register.

     Thus, compiler passes prior to register allocation need only check
     for @{b}REG_EQUAL@{ub} notes and passes subsequent to register allocation
     need only check for @{b}REG_EQUIV@{ub} notes.

@{b}REG_UNUSED@{ub}
     The register OP being set by this insn will not be used in a
     subsequent insn.  This differs from a @{b}REG_DEAD@{ub} note, which
     indicates that the value in an input will not be used subsequently.
     These two notes are independent; both may be present for the same
     register.

@{b}REG_WAS_0@{ub}
     The single output of this insn contained zero before this insn.
     OP is the insn that set it to zero.  You can rely on this note if
     it is present and OP has not been deleted or turned into a @{b}note@{ub};
     its absence implies nothing.

   These notes describe linkages between insns.  They occur in pairs:
one insn has one of a pair of notes that points to a second insn, which
has the inverse note pointing back to the first insn.

@{b}REG_RETVAL@{ub}
     This insn copies the value of a multi-insn sequence (for example, a
     library call), and OP is the first insn of the sequence (for a
     library call, the first insn that was generated to set up the
     arguments for the library call).

     Loop optimization uses this note to treat such a sequence as a
     single operation for code motion purposes and flow analysis uses
     this note to delete such sequences whose results are dead.

     A @{b}REG_EQUAL@{ub} note will also usually be attached to this insn to
     provide the expression being computed by the sequence.

@{b}REG_LIBCALL@{ub}
     This is the inverse of @{b}REG_RETVAL@{ub}: it is placed on the first insn
     of a multi-insn sequence, and it points to the last one.

@{b}REG_CC_SETTER@{ub}
@{b}REG_CC_USER@{ub}
     On machines that use @{b}cc0@{ub}, the insns which set and use @{b}cc0@{ub} set and
     use @{b}cc0@{ub} are adjacent.  However, when branch delay slot filling is
     done, this may no longer be true.  In this case a @{b}REG_CC_USER@{ub} note
     will be placed on the insn setting @{b}cc0@{ub} to point to the insn using
     @{b}cc0@{ub} and a @{b}REG_CC_SETTER@{ub} note will be placed on the insn using @{b}cc0@{ub}
     to point to the insn setting @{b}cc0@{ub}.

   These values are only used in the @{b}LOG_LINKS@{ub} field, and indicate the
type of dependency that each link represents.  Links which indicate a
data dependence (a read after write dependence) do not use any code,
they simply have mode @{b}VOIDmode@{ub}, and are printed without any descriptive
text.

@{b}REG_DEP_ANTI@{ub}
     This indicates an anti dependence (a write after read dependence).

@{b}REG_DEP_OUTPUT@{ub}
     This indicates an output dependence (a write after write
     dependence).

   These notes describe information gathered from gcov profile data.
They are stored in the @{b}REG_NOTES@{ub} field of an insn as an @{b}expr_list@{ub}.

@{b}REG_EXEC_COUNT@{ub}
     This is used to indicate the number of times a basic block was
     executed according to the profile data.  The note is attached to
     the first insn in the basic block.

@{b}REG_BR_PROB@{ub}
     This is used to specify the ratio of branches to non-branches of a
     branch insn according to the profile data.  The value is stored as
     a value between 0 and REG_BR_PROB_BASE; larger values indicate a
     higher probability that the branch will be taken.

@{b}REG_BR_PRED@{ub}
     These notes are found in JUMP insns after delayed branch scheduling
     has taken place.  They indicate both the direction and the
     likelyhood of the JUMP.  The format is a bitmask of ATTR_FLAG_*
     values.

   For convenience, the machine mode in an @{b}insn_list@{ub} or @{b}expr_list@{ub} is
printed using these symbolic codes in debugging dumps.

   The only difference between the expression codes @{b}insn_list@{ub} and
@{b}expr_list@{ub} is that the first operand of an @{b}insn_list@{ub} is assumed to be an
insn and is printed in debugging dumps as the insn's unique id; the
first operand of an @{b}expr_list@{ub} is printed in the ordinary way as an
expression.


@endnode

@node "Calls" "gcc.guide/Calls"
@next "Sharing"
@prev "Insns"
@toc "RTL"

RTL Representation of Function-Call Insns
=========================================

   Insns that call subroutines have the RTL expression code @{b}call_insn@{ub}.
These insns must satisfy special rules, and their bodies must use a
special RTL expression code, @{b}call@{ub}.

   A @{b}call@{ub} expression has two operands, as follows:

     (call (mem:FM ADDR) NBYTES)

Here NBYTES is an operand that represents the number of bytes of
argument data being passed to the subroutine, FM is a machine mode
(which must equal as the definition of the @{b}FUNCTION_MODE@{ub} macro in the
machine description) and ADDR represents the address of the subroutine.

   For a subroutine that returns no value, the @{b}call@{ub} expression as shown
above is the entire body of the insn, except that the insn might also
contain @{b}use@{ub} or @{b}clobber@{ub} expressions.

   For a subroutine that returns a value whose mode is not @{b}BLKmode@{ub}, the
value is returned in a hard register.  If this register's number is R,
then the body of the call insn looks like this:

     (set (reg:M R)
          (call (mem:FM ADDR) NBYTES))

This RTL expression makes it clear (to the optimizer passes) that the
appropriate register receives a useful value in this insn.

   When a subroutine returns a @{b}BLKmode@{ub} value, it is handled by passing
to the subroutine the address of a place to store the value.  So the
call insn itself does not "return" any value, and it has the same RTL
form as a call that returns nothing.

   On some machines, the call instruction itself clobbers some register,
for example to contain the return address.  @{b}call_insn@{ub} insns on these
machines should have a body which is a @{b}parallel@{ub} that contains both the
@{b}call@{ub} expression and @{b}clobber@{ub} expressions that indicate which registers
are destroyed.  Similarly, if the call instruction requires some
register other than the stack pointer that is not explicitly mentioned
it its RTL, a @{b}use@{ub} subexpression should mention that register.

   Functions that are called are assumed to modify all registers listed
in the configuration macro @{b}CALL_USED_REGISTERS@{ub} (see @{"Register Basics" link "Register Basics"})
and, with the exception of @{b}const@{ub} functions and library calls, to modify
all of memory.

   Insns containing just @{b}use@{ub} expressions directly precede the @{b}call_insn@{ub}
insn to indicate which registers contain inputs to the function.
Similarly, if registers other than those in @{b}CALL_USED_REGISTERS@{ub} are
clobbered by the called function, insns containing a single @{b}clobber@{ub}
follow immediately after the call to indicate which registers.


@endnode

@node "Sharing" "gcc.guide/Sharing"
@next "Reading RTL"
@prev "Calls"
@toc "RTL"

Structure Sharing Assumptions
=============================

   The compiler assumes that certain kinds of RTL expressions are
unique; there do not exist two distinct objects representing the same
value.  In other cases, it makes an opposite assumption: that no RTL
expression object of a certain kind appears in more than one place in
the containing structure.

   These assumptions refer to a single function; except for the RTL
objects that describe global variables and external functions, and a
few standard objects such as small integer constants, no RTL objects
are common to two functions.

   * Each pseudo-register has only a single @{b}reg@{ub} object to represent it,
     and therefore only a single machine mode.

   * For any symbolic label, there is only one @{b}symbol_ref@{ub} object
     referring to it.

   * There is only one @{b}const_int@{ub} expression with value 0, only one with
     value 1, and only one with value -1.  Some other integer values
     are also stored uniquely.

   * There is only one @{b}pc@{ub} expression.

   * There is only one @{b}cc0@{ub} expression.

   * There is only one @{b}const_double@{ub} expression with value 0 for each
     floating point mode.  Likewise for values 1 and 2.

   * No @{b}label_ref@{ub} or @{b}scratch@{ub} appears in more than one place in the RTL
     structure; in other words, it is safe to do a tree-walk of all the
     insns in the function and assume that each time a @{b}label_ref@{ub} or
     @{b}scratch@{ub} is seen it is distinct from all others that are seen.

   * Only one @{b}mem@{ub} object is normally created for each static variable
     or stack slot, so these objects are frequently shared in all the
     places they appear.  However, separate but equal objects for these
     variables are occasionally made.

   * When a single @{b}asm@{ub} statement has multiple output operands, a
     distinct @{b}asm_operands@{ub} expression is made for each output operand.
     However, these all share the vector which contains the sequence of
     input operands.  This sharing is used later on to test whether two
     @{b}asm_operands@{ub} expressions come from the same statement, so all
     optimizations must carefully preserve the sharing if they copy the
     vector at all.

   * No RTL object appears in more than one place in the RTL structure
     except as described above.  Many passes of the compiler rely on
     this by assuming that they can modify RTL objects in place without
     unwanted side-effects on other insns.

   * During initial RTL generation, shared structure is freely
     introduced.  After all the RTL for a function has been generated,
     all shared structure is copied by @{b}unshare_all_rtl@{ub} in @{b}emit-rtl.c@{ub},
     after which the above rules are guaranteed to be followed.

   * During the combiner pass, shared structure within an insn can exist
     temporarily.  However, the shared structure is copied before the
     combiner is finished with the insn.  This is done by calling
     @{b}copy_rtx_if_shared@{ub}, which is a subroutine of @{b}unshare_all_rtl@{ub}.


@endnode

@node "Reading RTL" "gcc.guide/Reading RTL"
@prev "Sharing"
@toc "RTL"

Reading RTL
===========

   To read an RTL object from a file, call @{b}read_rtx@{ub}.  It takes one
argument, a stdio stream, and returns a single RTL object.

   Reading RTL from a file is very slow.  This is not currently a
problem since reading RTL occurs only as part of building the compiler.

   People frequently have the idea of using RTL stored as text in a
file as an interface between a language front end and the bulk of GNU
CC.  This idea is not feasible.

   GNU CC was designed to use RTL internally only.  Correct RTL for a
given program is very dependent on the particular target machine.  And
the RTL does not contain all the information about the program.

   The proper way to interface GNU CC to a new language front end is
with the "tree" data structure.  There is no manual for this data
structure, but it is described in the files @{b}tree.h@{ub} and @{b}tree.def@{ub}.


@endnode

@node "Machine Desc" "gcc.guide/Machine Desc"
@next "Target Macros"
@prev "RTL"
@toc "Main"

Machine Descriptions
********************

   A machine description has two parts: a file of instruction patterns
(@{b}.md@{ub} file) and a C header file of macro definitions.

   The @{b}.md@{ub} file for a target machine contains a pattern for each
instruction that the target machine supports (or at least each
instruction that is worth telling the compiler about).  It may also
contain comments.  A semicolon causes the rest of the line to be a
comment, unless the semicolon is inside a quoted string.

   See the next chapter for information on the C header file.


 @{" Patterns           " link "Patterns"}  How to write instruction patterns.
 @{" Example            " link "Example"}  An explained example of a @{b}define_insn@{ub} pattern.
 @{" RTL Template       " link "RTL Template"}  The RTL template defines what insns match a pattern.
 @{" Output Template    " link "Output Template"}  The output template says how to make assembler code
                          from such an insn.
 @{" Output Statement   " link "Output Statement"}  For more generality, write C code to output
                          the assembler code.
 @{" Constraints        " link "Constraints"}  When not all operands are general operands.
 @{" Standard Names     " link "Standard Names"}  Names mark patterns to use for code generation.
 @{" Pattern Ordering   " link "Pattern Ordering"}  When the order of patterns makes a difference.
 @{" Dependent Patterns " link "Dependent Patterns"}  Having one pattern may make you need another.
 @{" Jump Patterns      " link "Jump Patterns"}  Special considerations for patterns for jump insns.
 @{" Insn Canonicalizations " link "Insn Canonicalizations"}  Canonicalization of Instructions
 @{" Peephole Definitions " link "Peephole Definitions"}  Defining machine-specific peephole optimizations.
 @{" Expander Definitions " link "Expander Definitions"}  Generating a sequence of several RTL insns
                         for a standard operation.
 @{" Insn Splitting     " link "Insn Splitting"}  Splitting Instructions into Multiple Instructions
 @{" Insn Attributes    " link "Insn Attributes"}  Specifying the value of attributes for generated insns.


@endnode

@node "Patterns" "gcc.guide/Patterns"
@next "Example"
@toc "Machine Desc"

Everything about Instruction Patterns
=====================================

   Each instruction pattern contains an incomplete RTL expression, with
pieces to be filled in later, operand constraints that restrict how the
pieces can be filled in, and an output pattern or C code to generate
the assembler output, all wrapped up in a @{b}define_insn@{ub} expression.

   A @{b}define_insn@{ub} is an RTL expression containing four or five operands:

  1. An optional name.  The presence of a name indicate that this
     instruction pattern can perform a certain standard job for the
     RTL-generation pass of the compiler.  This pass knows certain
     names and will use the instruction patterns with those names, if
     the names are defined in the machine description.

     The absence of a name is indicated by writing an empty string
     where the name should go.  Nameless instruction patterns are never
     used for generating RTL code, but they may permit several simpler
     insns to be combined later on.

     Names that are not thus known and used in RTL-generation have no
     effect; they are equivalent to no name at all.

  2. The @{i}RTL template@{ui} (see @{"RTL Template" link "RTL Template"}) is a vector of incomplete RTL
     expressions which show what the instruction should look like.  It
     is incomplete because it may contain @{b}match_operand@{ub},
     @{b}match_operator@{ub}, and @{b}match_dup@{ub} expressions that stand for operands
     of the instruction.

     If the vector has only one element, that element is the template
     for the instruction pattern.  If the vector has multiple elements,
     then the instruction pattern is a @{b}parallel@{ub} expression containing
     the elements described.

  3. A condition.  This is a string which contains a C expression that
     is the final test to decide whether an insn body matches this
     pattern.

     For a named pattern, the condition (if present) may not depend on
     the data in the insn being matched, but only the
     target-machine-type flags.  The compiler needs to test these
     conditions during initialization in order to learn exactly which
     named instructions are available in a particular run.

     For nameless patterns, the condition is applied only when matching
     an individual insn, and only after the insn has matched the
     pattern's recognition template.  The insn's operands may be found
     in the vector @{b}operands@{ub}.

  4. The @{i}output template@{ui}: a string that says how to output matching
     insns as assembler code.  @{b}%@{ub} in this string specifies where to
     substitute the value of an operand.  See @{"Output Template" link "Output Template"}.

     When simple substitution isn't general enough, you can specify a
     piece of C code to compute the output.  See @{"Output Statement" link "Output Statement"}.

  5. Optionally, a vector containing the values of attributes for insns
     matching this pattern.  See @{"Insn Attributes" link "Insn Attributes"}.


@endnode

@node "Example" "gcc.guide/Example"
@next "RTL Template"
@prev "Patterns"
@toc "Machine Desc"

Example of @{b}define_insn@{ub}
======================

   Here is an actual example of an instruction pattern, for the
68000/68020.

     (define_insn "tstsi"
       [(set (cc0)
             (match_operand:SI 0 "general_operand" "rm"))]
       ""
       "*
     { if (TARGET_68020 || ! ADDRESS_REG_P (operands[0]))
         return \\"tstl %0\\";
       return \\"cmpl #0,%0\\"; }")

   This is an instruction that sets the condition codes based on the
value of a general operand.  It has no condition, so any insn whose RTL
description has the form shown may be handled according to this
pattern.  The name @{b}tstsi@{ub} means "test a @{b}SImode@{ub} value" and tells the RTL
generation pass that, when it is necessary to test such a value, an
insn to do so can be constructed using this pattern.

   The output control string is a piece of C code which chooses which
output template to return based on the kind of operand and the specific
type of CPU for which code is being generated.

@{b}   "rm"@{ub} is an operand constraint.  Its meaning is explained below.


@endnode

@node "RTL Template" "gcc.guide/RTL Template"
@next "Output Template"
@prev "Example"
@toc "Machine Desc"

RTL Template
============

   The RTL template is used to define which insns match the particular
pattern and how to find their operands.  For named patterns, the RTL
template also says how to construct an insn from specified operands.

   Construction involves substituting specified operands into a copy of
the template.  Matching involves determining the values that serve as
the operands in the insn being matched.  Both of these activities are
controlled by special expression types that direct matching and
substitution of the operands.

@{b}(match_operand:M N PREDICATE CONSTRAINT)@{ub}
     This expression is a placeholder for operand number N of the insn.
     When constructing an insn, operand number N will be substituted
     at this point.  When matching an insn, whatever appears at this
     position in the insn will be taken as operand number N; but it
     must satisfy PREDICATE or this instruction pattern will not match
     at all.

     Operand numbers must be chosen consecutively counting from zero in
     each instruction pattern.  There may be only one @{b}match_operand@{ub}
     expression in the pattern for each operand number.  Usually
     operands are numbered in the order of appearance in @{b}match_operand@{ub}
     expressions.  In the case of a @{b}define_expand@{ub}, any operand numbers
     used only in @{b}match_dup@{ub} expressions have higher values than all
     other operand numbers.

     PREDICATE is a string that is the name of a C function that
     accepts two arguments, an expression and a machine mode.  During
     matching, the function will be called with the putative operand as
     the expression and M as the mode argument (if M is not specified,
     @{b}VOIDmode@{ub} will be used, which normally causes PREDICATE to accept
     any mode).  If it returns zero, this instruction pattern fails to
     match.  PREDICATE may be an empty string; then it means no test is
     to be done on the operand, so anything which occurs in this
     position is valid.

     Most of the time, PREDICATE will reject modes other than M--but
     not always.  For example, the predicate @{b}address_operand@{ub} uses M as
     the mode of memory ref that the address should be valid for.  Many
     predicates accept @{b}const_int@{ub} nodes even though their mode is
     @{b}VOIDmode@{ub}.

     CONSTRAINT controls reloading and the choice of the best register
     class to use for a value, as explained later (see @{"Constraints" link "Constraints"}).

     People are often unclear on the difference between the constraint
     and the predicate.  The predicate helps decide whether a given
     insn matches the pattern.  The constraint plays no role in this
     decision; instead, it controls various decisions in the case of an
     insn which does match.

     On CISC machines, the most common PREDICATE is @{b}"general_operand"@{ub}.
     This function checks that the putative operand is either a
     constant, a register or a memory reference, and that it is valid
     for mode M.

     For an operand that must be a register, PREDICATE should be
     @{b}"register_operand"@{ub}.  Using @{b}"general_operand"@{ub} would be valid, since
     the reload pass would copy any non-register operands through
     registers, but this would make GNU CC do extra work, it would
     prevent invariant operands (such as constant) from being removed
     from loops, and it would prevent the register allocator from doing
     the best possible job.  On RISC machines, it is usually most
     efficient to allow PREDICATE to accept only objects that the
     constraints allow.

     For an operand that must be a constant, you must be sure to either
     use @{b}"immediate_operand"@{ub} for PREDICATE, or make the instruction
     pattern's extra condition require a constant, or both.  You cannot
     expect the constraints to do this work!  If the constraints allow
     only constants, but the predicate allows something else, the
     compiler will crash when that case arises.

@{b}(match_scratch:M N CONSTRAINT)@{ub}
     This expression is also a placeholder for operand number N and
     indicates that operand must be a @{b}scratch@{ub} or @{b}reg@{ub} expression.

     When matching patterns, this is equivalent to

          (match_operand:M N "scratch_operand" PRED)

     but, when generating RTL, it produces a (@{b}scratch@{ub}:M) expression.

     If the last few expressions in a @{b}parallel@{ub} are @{b}clobber@{ub} expressions
     whose operands are either a hard register or @{b}match_scratch@{ub}, the
     combiner can add or delete them when necessary.  See @{"Side Effects" link "Side Effects"}.

@{b}(match_dup N)@{ub}
     This expression is also a placeholder for operand number N.  It is
     used when the operand needs to appear more than once in the insn.

     In construction, @{b}match_dup@{ub} acts just like @{b}match_operand@{ub}: the
     operand is substituted into the insn being constructed.  But in
     matching, @{b}match_dup@{ub} behaves differently.  It assumes that operand
     number N has already been determined by a @{b}match_operand@{ub} appearing
     earlier in the recognition template, and it matches only an
     identical-looking expression.

@{b}(match_operator:M N PREDICATE [OPERANDS...])@{ub}
     This pattern is a kind of placeholder for a variable RTL expression
     code.

     When constructing an insn, it stands for an RTL expression whose
     expression code is taken from that of operand N, and whose
     operands are constructed from the patterns OPERANDS.

     When matching an expression, it matches an expression if the
     function PREDICATE returns nonzero on that expression @{i}and@{ui} the
     patterns OPERANDS match the operands of the expression.

     Suppose that the function @{b}commutative_operator@{ub} is defined as
     follows, to match any expression whose operator is one of the
     commutative arithmetic operators of RTL and whose mode is MODE:

          int
          commutative_operator (x, mode)
               rtx x;
               enum machine_mode mode;
          {
            enum rtx_code code = GET_CODE (x);
            if (GET_MODE (x) != mode)
              return 0;
            return (GET_RTX_CLASS (code) == 'c'
                    || code == EQ || code == NE);
          }

     Then the following pattern will match any RTL expression consisting
     of a commutative operator applied to two general operands:

          (match_operator:SI 3 "commutative_operator"
            [(match_operand:SI 1 "general_operand" "g")
             (match_operand:SI 2 "general_operand" "g")])

     Here the vector @{b}[OPERANDS...]@{ub} contains two patterns because the
     expressions to be matched all contain two operands.

     When this pattern does match, the two operands of the commutative
     operator are recorded as operands 1 and 2 of the insn.  (This is
     done by the two instances of @{b}match_operand@{ub}.)  Operand 3 of the insn
     will be the entire commutative expression: use @{b}GET_CODE
     (operands[3])@{ub} to see which commutative operator was used.

     The machine mode M of @{b}match_operator@{ub} works like that of
     @{b}match_operand@{ub}: it is passed as the second argument to the
     predicate function, and that function is solely responsible for
     deciding whether the expression to be matched "has" that mode.

     When constructing an insn, argument 3 of the gen-function will
     specify the operation (i.e. the expression code) for the
     expression to be made.  It should be an RTL expression, whose
     expression code is copied into a new expression whose operands are
     arguments 1 and 2 of the gen-function.  The subexpressions of
     argument 3 are not used; only its expression code matters.

     When @{b}match_operator@{ub} is used in a pattern for matching an insn, it
     usually best if the operand number of the @{b}match_operator@{ub} is higher
     than that of the actual operands of the insn.  This improves
     register allocation because the register allocator often looks at
     operands 1 and 2 of insns to see if it can do register tying.

     There is no way to specify constraints in @{b}match_operator@{ub}.  The
     operand of the insn which corresponds to the @{b}match_operator@{ub} never
     has any constraints because it is never reloaded as a whole.
     However, if parts of its OPERANDS are matched by @{b}match_operand@{ub}
     patterns, those parts may have constraints of their own.

@{b}(match_op_dup:M N[OPERANDS...])@{ub}
     Like @{b}match_dup@{ub}, except that it applies to operators instead of
     operands.  When constructing an insn, operand number N will be
     substituted at this point.  But in matching, @{b}match_op_dup@{ub} behaves
     differently.  It assumes that operand number N has already been
     determined by a @{b}match_operator@{ub} appearing earlier in the
     recognition template, and it matches only an identical-looking
     expression.

@{b}(match_parallel N PREDICATE [SUBPAT...])@{ub}
     This pattern is a placeholder for an insn that consists of a
     @{b}parallel@{ub} expression with a variable number of elements.  This
     expression should only appear at the top level of an insn pattern.

     When constructing an insn, operand number N will be substituted at
     this point.  When matching an insn, it matches if the body of the
     insn is a @{b}parallel@{ub} expression with at least as many elements as the
     vector of SUBPAT expressions in the @{b}match_parallel@{ub}, if each SUBPAT
     matches the corresponding element of the @{b}parallel@{ub}, @{i}and@{ui} the
     function PREDICATE returns nonzero on the @{b}parallel@{ub} that is the
     body of the insn.  It is the responsibility of the predicate to
     validate elements of the @{b}parallel@{ub} beyond those listed in the
     @{b}match_parallel@{ub}.

     A typical use of @{b}match_parallel@{ub} is to match load and store
     multiple expressions, which can contain a variable number of
     elements in a @{b}parallel@{ub}.  For example,

          (define_insn ""
            [(match_parallel 0 "load_multiple_operation"
               [(set (match_operand:SI 1 "gpc_reg_operand" "=r")
                     (match_operand:SI 2 "memory_operand" "m"))
                (use (reg:SI 179))
                (clobber (reg:SI 179))])]
            ""
            "loadm 0,0,%1,%2")

     This example comes from @{b}a29k.md@{ub}.  The function
     @{b}load_multiple_operations@{ub} is defined in @{b}a29k.c@{ub} and checks that
     subsequent elements in the @{b}parallel@{ub} are the same as the @{b}set@{ub} in the
     pattern, except that they are referencing subsequent registers and
     memory locations.

     An insn that matches this pattern might look like:

          (parallel
           [(set (reg:SI 20) (mem:SI (reg:SI 100)))
            (use (reg:SI 179))
            (clobber (reg:SI 179))
            (set (reg:SI 21)
                 (mem:SI (plus:SI (reg:SI 100)
                                  (const_int 4))))
            (set (reg:SI 22)
                 (mem:SI (plus:SI (reg:SI 100)
                                  (const_int 8))))])

@{b}(match_par_dup N [SUBPAT...])@{ub}
     Like @{b}match_op_dup@{ub}, but for @{b}match_parallel@{ub} instead of
     @{b}match_operator@{ub}.

@{b}(match_insn PREDICATE)@{ub}
     Match a complete insn.  Unlike the other @{b}match_*@{ub} recognizers,
     @{b}match_insn@{ub} does not take an operand number.

     The machine mode M of @{b}match_insn@{ub} works like that of @{b}match_operand@{ub}:
     it is passed as the second argument to the predicate function, and
     that function is solely responsible for deciding whether the
     expression to be matched "has" that mode.

@{b}(match_insn2 N PREDICATE)@{ub}
     Match a complete insn.

     The machine mode M of @{b}match_insn2@{ub} works like that of
     @{b}match_operand@{ub}: it is passed as the second argument to the
     predicate function, and that function is solely responsible for
     deciding whether the expression to be matched "has" that mode.

@{b}(address (match_operand:M N "address_operand" ""))@{ub}
     This complex of expressions is a placeholder for an operand number
     N in a "load address" instruction: an operand which specifies a
     memory location in the usual way, but for which the actual operand
     value used is the address of the location, not the contents of the
     location.

@{b}     address@{ub} expressions never appear in RTL code, only in machine
     descriptions.  And they are used only in machine descriptions that
     do not use the operand constraint feature.  When operand
     constraints are in use, the letter @{b}p@{ub} in the constraint serves this
     purpose.

     M is the machine mode of the @{i}memory location being addressed@{ui}, not
     the machine mode of the address itself.  That mode is always the
     same on a given target machine (it is @{b}Pmode@{ub}, which normally is
     @{b}SImode@{ub}), so there is no point in mentioning it; thus, no machine
     mode is written in the @{b}address@{ub} expression.  If some day support is
     added for machines in which addresses of different kinds of
     objects appear differently or are used differently (such as the
     PDP-10), different formats would perhaps need different machine
     modes and these modes might be written in the @{b}address@{ub} expression.


@endnode

@node "Output Template" "gcc.guide/Output Template"
@next "Output Statement"
@prev "RTL Template"
@toc "Machine Desc"

Output Templates and Operand Substitution
=========================================

   The @{i}output template@{ui} is a string which specifies how to output the
assembler code for an instruction pattern.  Most of the template is a
fixed string which is output literally.  The character @{b}%@{ub} is used to
specify where to substitute an operand; it can also be used to identify
places where different variants of the assembler require different
syntax.

   In the simplest case, a @{b}%@{ub} followed by a digit N says to output
operand N at that point in the string.

@{b}   %@{ub} followed by a letter and a digit says to output an operand in an
alternate fashion.  Four letters have standard, built-in meanings
described below.  The machine description macro @{b}PRINT_OPERAND@{ub} can define
additional letters with nonstandard meanings.

@{b}   %cDIGIT@{ub} can be used to substitute an operand that is a constant
value without the syntax that normally indicates an immediate operand.

@{b}   %nDIGIT@{ub} is like @{b}%cDIGIT@{ub} except that the value of the constant is
negated before printing.

@{b}   %aDIGIT@{ub} can be used to substitute an operand as if it were a memory
reference, with the actual operand treated as the address.  This may be
useful when outputting a "load address" instruction, because often the
assembler syntax for such an instruction requires you to write the
operand as if it were a memory reference.

@{b}   %lDIGIT@{ub} is used to substitute a @{b}label_ref@{ub} into a jump instruction.

@{b}   %=@{ub} outputs a number which is unique to each instruction in the
entire compilation.  This is useful for making local labels to be
referred to more than once in a single template that generates multiple
assembler instructions.

@{b}   %@{ub} followed by a punctuation character specifies a substitution that
does not use an operand.  Only one case is standard: @{b}%%@{ub} outputs a @{b}%@{ub}
into the assembler code.  Other nonstandard cases can be defined in the
@{b}PRINT_OPERAND@{ub} macro.  You must also define which punctuation characters
are valid with the @{b}PRINT_OPERAND_PUNCT_VALID_P@{ub} macro.

   The template may generate multiple assembler instructions.  Write
the text for the instructions, with @{b}\\;@{ub} between them.

   When the RTL contains two operands which are required by constraint
to match each other, the output template must refer only to the
lower-numbered operand.  Matching operands are not always identical,
and the rest of the compiler arranges to put the proper RTL expression
for printing into the lower-numbered operand.

   One use of nonstandard letters or punctuation following @{b}%@{ub} is to
distinguish between different assembler languages for the same machine;
for example, Motorola syntax versus MIT syntax for the 68000.  Motorola
syntax requires periods in most opcode names, while MIT syntax does
not.  For example, the opcode @{b}movel@{ub} in MIT syntax is @{b}move.l@{ub} in Motorola
syntax.  The same file of patterns is used for both kinds of output
syntax, but the character sequence @{b}%.@{ub} is used in each place where
Motorola syntax wants a period.  The @{b}PRINT_OPERAND@{ub} macro for Motorola
syntax defines the sequence to output a period; the macro for MIT
syntax defines it to do nothing.

   As a special case, a template consisting of the single character @{b}#@{ub}
instructs the compiler to first split the insn, and then output the
resulting instructions separately.  This helps eliminate redundancy in
the output templates.   If you have a @{b}define_insn@{ub} that needs to emit
multiple assembler instructions, and there is an matching @{b}define_split@{ub}
already defined, then you can simply use @{b}#@{ub} as the output template
instead of writing an output template that emits the multiple assembler
instructions.

   If the macro @{b}ASSEMBLER_DIALECT@{ub} is defined, you can use construct of
the form @{b}{option0|option1|option2}@{ub} in the templates.  These describe
multiple variants of assembler language syntax.  See
@{"Instruction Output" link "Instruction Output"}.


@endnode

@node "Output Statement" "gcc.guide/Output Statement"
@next "Constraints"
@prev "Output Template"
@toc "Machine Desc"

C Statements for Assembler Output
=================================

   Often a single fixed template string cannot produce correct and
efficient assembler code for all the cases that are recognized by a
single instruction pattern.  For example, the opcodes may depend on the
kinds of operands; or some unfortunate combinations of operands may
require extra machine instructions.

   If the output control string starts with a @{b}\@@{ub}, then it is actually a
series of templates, each on a separate line.  (Blank lines and leading
spaces and tabs are ignored.)  The templates correspond to the
pattern's constraint alternatives (see @{"Multi-Alternative" link "Multi-Alternative"}).  For
example, if a target machine has a two-address add instruction @{b}addr@{ub} to
add into a register and another @{b}addm@{ub} to add a register to memory, you
might write this pattern:

     (define_insn "addsi3"
       [(set (match_operand:SI 0 "general_operand" "=r,m")
             (plus:SI (match_operand:SI 1 "general_operand" "0,0")
                      (match_operand:SI 2 "general_operand" "g,r")))]
       ""
       "@
        addr %2,%0
        addm %2,%0")

   If the output control string starts with a @{b}*@{ub}, then it is not an
output template but rather a piece of C program that should compute a
template.  It should execute a @{b}return@{ub} statement to return the
template-string you want.  Most such templates use C string literals,
which require doublequote characters to delimit them.  To include these
doublequote characters in the string, prefix each one with @{b}\\ @{ub}.

   The operands may be found in the array @{b}operands@{ub}, whose C data type
is @{b}rtx []@{ub}.

   It is very common to select different ways of generating assembler
code based on whether an immediate operand is within a certain range.
Be careful when doing this, because the result of @{b}INTVAL@{ub} is an integer
on the host machine.  If the host machine has more bits in an @{b}int@{ub} than
the target machine has in the mode in which the constant will be used,
then some of the bits you get from @{b}INTVAL@{ub} will be superfluous.  For
proper results, you must carefully disregard the values of those bits.

   It is possible to output an assembler instruction and then go on to
output or compute more of them, using the subroutine @{b}output_asm_insn@{ub}.
This receives two arguments: a template-string and a vector of
operands.  The vector may be @{b}operands@{ub}, or it may be another array of @{b}rtx@{ub}
that you declare locally and initialize yourself.

   When an insn pattern has multiple alternatives in its constraints,
often the appearance of the assembler code is determined mostly by
which alternative was matched.  When this is so, the C code can test
the variable @{b}which_alternative@{ub}, which is the ordinal number of the
alternative that was actually satisfied (0 for the first, 1 for the
second alternative, etc.).

   For example, suppose there are two opcodes for storing zero, @{b}clrreg@{ub}
for registers and @{b}clrmem@{ub} for memory locations.  Here is how a pattern
could use @{b}which_alternative@{ub} to choose between them:

     (define_insn ""
       [(set (match_operand:SI 0 "general_operand" "=r,m")
             (const_int 0))]
       ""
       "*
       return (which_alternative == 0
               ? \\"clrreg %0\\" : \\"clrmem %0\\");
       ")

   The example above, where the assembler code to generate was @{i}solely@{ui}
determined by the alternative, could also have been specified as
follows, having the output control string start with a @{b}\@@{ub}:

     (define_insn ""
       [(set (match_operand:SI 0 "general_operand" "=r,m")
             (const_int 0))]
       ""
       "@
        clrreg %0
        clrmem %0")


@endnode

@node "Constraints" "gcc.guide/Constraints"
@next "Standard Names"
@prev "Output Statement"
@toc "Machine Desc"

Operand Constraints
===================

   Each @{b}match_operand@{ub} in an instruction pattern can specify a
constraint for the type of operands allowed.  Constraints can say
whether an operand may be in a register, and which kinds of register;
whether the operand can be a memory reference, and which kinds of
address; whether the operand may be an immediate constant, and which
possible values it may have.  Constraints can also require two operands
to match.


 @{" Simple Constraints " link "Simple Constraints"}  Basic use of constraints.
 @{" Multi-Alternative  " link "Multi-Alternative"}  When an insn has two alternative constraint-patterns.
 @{" Class Preferences  " link "Class Preferences"}  Constraints guide which hard register to put things in.
 @{" Modifiers          " link "Modifiers"}  More precise control over effects of constraints.
 @{" Machine Constraints " link "Machine Constraints"}  Existing constraints for some particular machines.
 @{" No Constraints     " link "No Constraints"}  Describing a clean machine without constraints.


@endnode

@node "Simple Constraints" "gcc.guide/Simple Constraints"
@next "Multi-Alternative"
@toc "Constraints"

Simple Constraints
------------------

   The simplest kind of constraint is a string full of letters, each of
which describes one kind of operand that is permitted.  Here are the
letters that are allowed:

@{b}m@{ub}
     A memory operand is allowed, with any kind of address that the
     machine supports in general.

@{b}o@{ub}
     A memory operand is allowed, but only if the address is
     @{i}offsettable@{ui}.  This means that adding a small integer (actually,
     the width in bytes of the operand, as determined by its machine
     mode) may be added to the address and the result is also a valid
     memory address.

     For example, an address which is constant is offsettable; so is an
     address that is the sum of a register and a constant (as long as a
     slightly larger constant is also within the range of
     address-offsets supported by the machine); but an autoincrement or
     autodecrement address is not offsettable.  More complicated
     indirect/indexed addresses may or may not be offsettable depending
     on the other addressing modes that the machine supports.

     Note that in an output operand which can be matched by another
     operand, the constraint letter @{b}o@{ub} is valid only when accompanied by
     both @{b}<@{ub} (if the target machine has predecrement addressing) and @{b}>@{ub}
     (if the target machine has preincrement addressing).

@{b}V@{ub}
     A memory operand that is not offsettable.  In other words,
     anything that would fit the @{b}m@{ub} constraint but not the @{b}o@{ub} constraint.

@{b}<@{ub}
     A memory operand with autodecrement addressing (either
     predecrement or postdecrement) is allowed.

@{b}>@{ub}
     A memory operand with autoincrement addressing (either
     preincrement or postincrement) is allowed.

@{b}r@{ub}
     A register operand is allowed provided that it is in a general
     register.

@{b}d@{ub}, @{b}a@{ub}, @{b}f@{ub}, ...
     Other letters can be defined in machine-dependent fashion to stand
     for particular classes of registers.  @{b}d@{ub}, @{b}a@{ub} and @{b}f@{ub} are defined on
     the 68000/68020 to stand for data, address and floating point
     registers.

@{b}i@{ub}
     An immediate integer operand (one with constant value) is allowed.
     This includes symbolic constants whose values will be known only at
     assembly time.

@{b}n@{ub}
     An immediate integer operand with a known numeric value is allowed.
     Many systems cannot support assembly-time constants for operands
     less than a word wide.  Constraints for these operands should use @{b}n@{ub}
     rather than @{b}i@{ub}.

@{b}I@{ub}, @{b}J@{ub}, @{b}K@{ub}, ... @{b}P@{ub}
     Other letters in the range @{b}I@{ub} through @{b}P@{ub} may be defined in a
     machine-dependent fashion to permit immediate integer operands with
     explicit integer values in specified ranges.  For example, on the
     68000, @{b}I@{ub} is defined to stand for the range of values 1 to 8.  This
     is the range permitted as a shift count in the shift instructions.

@{b}E@{ub}
     An immediate floating operand (expression code @{b}const_double@{ub}) is
     allowed, but only if the target floating point format is the same
     as that of the host machine (on which the compiler is running).

@{b}F@{ub}
     An immediate floating operand (expression code @{b}const_double@{ub}) is
     allowed.

@{b}G@{ub}, @{b}H@{ub}
@{b}     G@{ub} and @{b}H@{ub} may be defined in a machine-dependent fashion to permit
     immediate floating operands in particular ranges of values.

@{b}s@{ub}
     An immediate integer operand whose value is not an explicit
     integer is allowed.

     This might appear strange; if an insn allows a constant operand
     with a value not known at compile time, it certainly must allow
     any known value.  So why use @{b}s@{ub} instead of @{b}i@{ub}?  Sometimes it allows
     better code to be generated.

     For example, on the 68000 in a fullword instruction it is possible
     to use an immediate operand; but if the immediate value is between
     -128 and 127, better code results from loading the value into a
     register and using the register.  This is because the load into
     the register can be done with a @{b}moveq@{ub} instruction.  We arrange for
     this to happen by defining the letter @{b}K@{ub} to mean "any integer
     outside the range -128 to 127", and then specifying @{b}Ks@{ub} in the
     operand constraints.

@{b}g@{ub}
     Any register, memory or immediate integer operand is allowed,
     except for registers that are not general registers.

@{b}X@{ub}
     Any operand whatsoever is allowed, even if it does not satisfy
     @{b}general_operand@{ub}.  This is normally used in the constraint of a
     @{b}match_scratch@{ub} when certain alternatives will not actually require
     a scratch register.

@{b}0@{ub}, @{b}1@{ub}, @{b}2@{ub}, ... @{b}9@{ub}
     An operand that matches the specified operand number is allowed.
     If a digit is used together with letters within the same
     alternative, the digit should come last.

     This is called a @{i}matching constraint@{ui} and what it really means is
     that the assembler has only a single operand that fills two roles
     considered separate in the RTL insn.  For example, an add insn has
     two input operands and one output operand in the RTL, but on most
     CISC machines an add instruction really has only two operands, one
     of them an input-output operand:

          addl #35,r12

     Matching constraints are used in these circumstances.  More
     precisely, the two operands that match must include one input-only
     operand and one output-only operand.  Moreover, the digit must be a
     smaller number than the number of the operand that uses it in the
     constraint.

     For operands to match in a particular case usually means that they
     are identical-looking RTL expressions.  But in a few special cases
     specific kinds of dissimilarity are allowed.  For example, @{b}*x@{ub} as
     an input operand will match @{b}*x++@{ub} as an output operand.  For proper
     results in such cases, the output template should always use the
     output-operand's number when printing the operand.

@{b}p@{ub}
     An operand that is a valid memory address is allowed.  This is for
     "load address" and "push address" instructions.

@{b}     p@{ub} in the constraint must be accompanied by @{b}address_operand@{ub} as the
     predicate in the @{b}match_operand@{ub}.  This predicate interprets the
     mode specified in the @{b}match_operand@{ub} as the mode of the memory
     reference for which the address would be valid.

@{b}Q@{ub}, @{b}R@{ub}, @{b}S@{ub}, ... @{b}U@{ub}
     Letters in the range @{b}Q@{ub} through @{b}U@{ub} may be defined in a
     machine-dependent fashion to stand for arbitrary operand types.
     The machine description macro @{b}EXTRA_CONSTRAINT@{ub} is passed the
     operand as its first argument and the constraint letter as its
     second operand.

     A typical use for this would be to distinguish certain types of
     memory references that affect other insn operands.

     Do not define these constraint letters to accept register
     references (@{b}reg@{ub}); the reload pass does not expect this and would
     not handle it properly.

   In order to have valid assembler code, each operand must satisfy its
constraint.  But a failure to do so does not prevent the pattern from
applying to an insn.  Instead, it directs the compiler to modify the
code so that the constraint will be satisfied.  Usually this is done by
copying an operand into a register.

   Contrast, therefore, the two instruction patterns that follow:

     (define_insn ""
       [(set (match_operand:SI 0 "general_operand" "=r")
             (plus:SI (match_dup 0)
                      (match_operand:SI 1 "general_operand" "r")))]
       ""
       "...")

which has two operands, one of which must appear in two places, and

     (define_insn ""
       [(set (match_operand:SI 0 "general_operand" "=r")
             (plus:SI (match_operand:SI 1 "general_operand" "0")
                      (match_operand:SI 2 "general_operand" "r")))]
       ""
       "...")

which has three operands, two of which are required by a constraint to
be identical.  If we are considering an insn of the form

     (insn N PREV NEXT
       (set (reg:SI 3)
            (plus:SI (reg:SI 6) (reg:SI 109)))
       ...)

the first pattern would not apply at all, because this insn does not
contain two identical subexpressions in the right place.  The pattern
would say, "That does not look like an add instruction; try other
patterns."  The second pattern would say, "Yes, that's an add
instruction, but there is something wrong with it."  It would direct
the reload pass of the compiler to generate additional insns to make
the constraint true.  The results might look like this:

     (insn N2 PREV N
       (set (reg:SI 3) (reg:SI 6))
       ...)
     
     (insn N N2 NEXT
       (set (reg:SI 3)
            (plus:SI (reg:SI 3) (reg:SI 109)))
       ...)

   It is up to you to make sure that each operand, in each pattern, has
constraints that can handle any RTL expression that could be present for
that operand.  (When multiple alternatives are in use, each pattern
must, for each possible combination of operand expressions, have at
least one alternative which can handle that combination of operands.)
The constraints don't need to @{i}allow@{ui} any possible operand--when this is
the case, they do not constrain--but they must at least point the way to
reloading any possible operand so that it will fit.

   * If the constraint accepts whatever operands the predicate permits,
     there is no problem: reloading is never necessary for this operand.

     For example, an operand whose constraints permit everything except
     registers is safe provided its predicate rejects registers.

     An operand whose predicate accepts only constant values is safe
     provided its constraints include the letter @{b}i@{ub}.  If any possible
     constant value is accepted, then nothing less than @{b}i@{ub} will do; if
     the predicate is more selective, then the constraints may also be
     more selective.

   * Any operand expression can be reloaded by copying it into a
     register.  So if an operand's constraints allow some kind of
     register, it is certain to be safe.  It need not permit all
     classes of registers; the compiler knows how to copy a register
     into another register of the proper class in order to make an
     instruction valid.

   * A nonoffsettable memory reference can be reloaded by copying the
     address into a register.  So if the constraint uses the letter @{b}o@{ub},
     all memory references are taken care of.

   * A constant operand can be reloaded by allocating space in memory to
     hold it as preinitialized data.  Then the memory reference can be
     used in place of the constant.  So if the constraint uses the
     letters @{b}o@{ub} or @{b}m@{ub}, constant operands are not a problem.

   * If the constraint permits a constant and a pseudo register used in
     an insn was not allocated to a hard register and is equivalent to
     a constant, the register will be replaced with the constant.  If
     the predicate does not permit a constant and the insn is
     re-recognized for some reason, the compiler will crash.  Thus the
     predicate must always recognize any objects allowed by the
     constraint.

   If the operand's predicate can recognize registers, but the
constraint does not permit them, it can make the compiler crash.  When
this operand happens to be a register, the reload pass will be stymied,
because it does not know how to copy a register temporarily into memory.

   If the predicate accepts a unary operator, the constraint applies to
the operand.  For example, the MIPS processor at ISA level 3 supports an
instruction which adds two registers in @{b}SImode@{ub} to produce a @{b}DImode@{ub}
result, but only if the registers are correctly sign extended.  This
predicate for the input operands accepts a @{b}sign_extend@{ub} of an @{b}SImode@{ub}
register.  Write the constraint to indicate the type of register that
is required for the operand of the @{b}sign_extend@{ub}.


@endnode

@node "Multi-Alternative" "gcc.guide/Multi-Alternative"
@next "Class Preferences"
@prev "Simple Constraints"
@toc "Constraints"

Multiple Alternative Constraints
--------------------------------

   Sometimes a single instruction has multiple alternative sets of
possible operands.  For example, on the 68000, a logical-or instruction
can combine register or an immediate value into memory, or it can
combine any kind of operand into a register; but it cannot combine one
memory location into another.

   These constraints are represented as multiple alternatives.  An
alternative can be described by a series of letters for each operand.
The overall constraint for an operand is made from the letters for this
operand from the first alternative, a comma, the letters for this
operand from the second alternative, a comma, and so on until the last
alternative.  Here is how it is done for fullword logical-or on the
68000:

     (define_insn "iorsi3"
       [(set (match_operand:SI 0 "general_operand" "=m,d")
             (ior:SI (match_operand:SI 1 "general_operand" "%0,0")
                     (match_operand:SI 2 "general_operand" "dKs,dmKs")))]
       ...)

   The first alternative has @{b}m@{ub} (memory) for operand 0, @{b}0@{ub} for operand 1
(meaning it must match operand 0), and @{b}dKs@{ub} for operand 2.  The second
alternative has @{b}d@{ub} (data register) for operand 0, @{b}0@{ub} for operand 1, and
@{b}dmKs@{ub} for operand 2.  The @{b}=@{ub} and @{b}%@{ub} in the constraints apply to all the
alternatives; their meaning is explained in the next section (see
@{"Class Preferences" link "Class Preferences"}).

   If all the operands fit any one alternative, the instruction is
valid.  Otherwise, for each alternative, the compiler counts how many
instructions must be added to copy the operands so that that
alternative applies.  The alternative requiring the least copying is
chosen.  If two alternatives need the same amount of copying, the one
that comes first is chosen.  These choices can be altered with the @{b}?@{ub}
and @{b}!@{ub} characters:

@{b}?@{ub}
     Disparage slightly the alternative that the @{b}?@{ub} appears in, as a
     choice when no alternative applies exactly.  The compiler regards
     this alternative as one unit more costly for each @{b}?@{ub} that appears
     in it.

@{b}!@{ub}
     Disparage severely the alternative that the @{b}!@{ub} appears in.  This
     alternative can still be used if it fits without reloading, but if
     reloading is needed, some other alternative will be used.

   When an insn pattern has multiple alternatives in its constraints,
often the appearance of the assembler code is determined mostly by which
alternative was matched.  When this is so, the C code for writing the
assembler code can use the variable @{b}which_alternative@{ub}, which is the
ordinal number of the alternative that was actually satisfied (0 for
the first, 1 for the second alternative, etc.).  See @{"Output Statement" link "Output Statement"}.


@endnode

@node "Class Preferences" "gcc.guide/Class Preferences"
@next "Modifiers"
@prev "Multi-Alternative"
@toc "Constraints"

Register Class Preferences
--------------------------

   The operand constraints have another function: they enable the
compiler to decide which kind of hardware register a pseudo register is
best allocated to.  The compiler examines the constraints that apply to
the insns that use the pseudo register, looking for the
machine-dependent letters such as @{b}d@{ub} and @{b}a@{ub} that specify classes of
registers.  The pseudo register is put in whichever class gets the most
"votes".  The constraint letters @{b}g@{ub} and @{b}r@{ub} also vote: they vote in favor
of a general register.  The machine description says which registers
are considered general.

   Of course, on some machines all registers are equivalent, and no
register classes are defined.  Then none of this complexity is relevant.


@endnode

@node "Modifiers" "gcc.guide/Modifiers"
@next "Machine Constraints"
@prev "Class Preferences"
@toc "Constraints"

Constraint Modifier Characters
------------------------------

   Here are constraint modifier characters.

@{b}=@{ub}
     Means that this operand is write-only for this instruction: the
     previous value is discarded and replaced by output data.

@{b}+@{ub}
     Means that this operand is both read and written by the
     instruction.

     When the compiler fixes up the operands to satisfy the constraints,
     it needs to know which operands are inputs to the instruction and
     which are outputs from it.  @{b}=@{ub} identifies an output; @{b}+@{ub} identifies
     an operand that is both input and output; all other operands are
     assumed to be input only.

@{b}&@{ub}
     Means (in a particular alternative) that this operand is an
     @{i}earlyclobber@{ui} operand, which is modified before the instruction is
     finished using the input operands.  Therefore, this operand may
     not lie in a register that is used as an input operand or as part
     of any memory address.

@{b}     &@{ub} applies only to the alternative in which it is written.  In
     constraints with multiple alternatives, sometimes one alternative
     requires @{b}&@{ub} while others do not.  See, for example, the @{b}movdf@{ub} insn
     of the 68000.

     An input operand can be tied to an earlyclobber operand if its only
     use as an input occurs before the early result is written.  Adding
     alternatives of this form often allows GCC to produce better code
     when only some of the inputs can be affected by the earlyclobber.
     See, for example, the @{b}mulsi3@{ub} insn of the ARM.

@{b}     &@{ub} does not obviate the need to write @{b}=@{ub}.

@{b}%@{ub}
     Declares the instruction to be commutative for this operand and the
     following operand.  This means that the compiler may interchange
     the two operands if that is the cheapest way to make all operands
     fit the constraints.  This is often used in patterns for addition
     instructions that really have only two operands: the result must
     go in one of the arguments.  Here for example, is how the 68000
     halfword-add instruction is defined:

          (define_insn "addhi3"
            [(set (match_operand:HI 0 "general_operand" "=m,r")
               (plus:HI (match_operand:HI 1 "general_operand" "%0,0")
                        (match_operand:HI 2 "general_operand" "di,g")))]
            ...)

@{b}#@{ub}
     Says that all following characters, up to the next comma, are to be
     ignored as a constraint.  They are significant only for choosing
     register preferences.

@{b}*@{ub}
     Says that the following character should be ignored when choosing
     register preferences.  @{b}*@{ub} has no effect on the meaning of the
     constraint as a constraint, and no effect on reloading.

     Here is an example: the 68000 has an instruction to sign-extend a
     halfword in a data register, and can also sign-extend a value by
     copying it into an address register.  While either kind of
     register is acceptable, the constraints on an address-register
     destination are less strict, so it is best if register allocation
     makes an address register its goal.  Therefore, @{b}*@{ub} is used so that
     the @{b}d@{ub} constraint letter (for data register) is ignored when
     computing register preferences.

          (define_insn "extendhisi2"
            [(set (match_operand:SI 0 "general_operand" "=*d,a")
                  (sign_extend:SI
                   (match_operand:HI 1 "general_operand" "0,g")))]
            ...)


@endnode

@node "Machine Constraints" "gcc.guide/Machine Constraints"
@next "No Constraints"
@prev "Modifiers"
@toc "Constraints"

Constraints for Particular Machines
-----------------------------------

   Whenever possible, you should use the general-purpose constraint
letters in @{b}asm@{ub} arguments, since they will convey meaning more readily to
people reading your code.  Failing that, use the constraint letters
that usually have very similar meanings across architectures.  The most
commonly used constraints are @{b}m@{ub} and @{b}r@{ub} (for memory and general-purpose
registers respectively; see @{"Simple Constraints" link "Simple Constraints"}), and @{b}I@{ub}, usually the
letter indicating the most common immediate-constant format.

   For each machine architecture, the @{b}config/MACHINE.h@{ub} file defines
additional constraints.  These constraints are used by the compiler
itself for instruction generation, as well as for @{b}asm@{ub} statements;
therefore, some of the constraints are not particularly interesting for
@{b}asm@{ub}.  The constraints are defined through these macros:

@{b}REG_CLASS_FROM_LETTER@{ub}
     Register class constraints (usually lower case).

@{b}CONST_OK_FOR_LETTER_P@{ub}
     Immediate constant constraints, for non-floating point constants of
     word size or smaller precision (usually upper case).

@{b}CONST_DOUBLE_OK_FOR_LETTER_P@{ub}
     Immediate constant constraints, for all floating point constants
     and for constants of greater than word size precision (usually
     upper case).

@{b}EXTRA_CONSTRAINT@{ub}
     Special cases of registers or memory.  This macro is not required,
     and is only defined for some machines.

   Inspecting these macro definitions in the compiler source for your
machine is the best way to be certain you have the right constraints.
However, here is a summary of the machine-dependent constraints
available on some particular machines.

@{i}ARM family--@{b}arm.h@{ub}@{ui}

    @{b}f@{ub}
          Floating-point register

    @{b}F@{ub}
          One of the floating-point constants 0.0, 0.5, 1.0, 2.0, 3.0,
          4.0, 5.0 or 10.0

    @{b}G@{ub}
          Floating-point constant that would satisfy the constraint @{b}F@{ub}
          if it were negated

    @{b}I@{ub}
          Integer that is valid as an immediate operand in a data
          processing instruction.  That is, an integer in the range 0
          to 255 rotated by a multiple of 2

    @{b}J@{ub}
          Integer in the range -4095 to 4095

    @{b}K@{ub}
          Integer that satisfies constraint @{b}I@{ub} when inverted (ones
          complement)

    @{b}L@{ub}
          Integer that satisfies constraint @{b}I@{ub} when negated (twos
          complement)

    @{b}M@{ub}
          Integer in the range 0 to 32

    @{b}Q@{ub}
          A memory reference where the exact address is in a single
          register (`@{b}m@{ub}' is preferable for @{b}asm@{ub} statements)

    @{b}R@{ub}
          An item in the constant pool

    @{b}S@{ub}
          A symbol in the text segment of the current file

@{i}AMD 29000 family--@{b}a29k.h@{ub}@{ui}

    @{b}l@{ub}
          Local register 0

    @{b}b@{ub}
          Byte Pointer (@{b}BP@{ub}) register

    @{b}q@{ub}
@{b}          Q@{ub} register

    @{b}h@{ub}
          Special purpose register

    @{b}A@{ub}
          First accumulator register

    @{b}a@{ub}
          Other accumulator register

    @{b}f@{ub}
          Floating point register

    @{b}I@{ub}
          Constant greater than 0, less than 0x100

    @{b}J@{ub}
          Constant greater than 0, less than 0x10000

    @{b}K@{ub}
          Constant whose high 24 bits are on (1)

    @{b}L@{ub}
          16 bit constant whose high 8 bits are on (1)

    @{b}M@{ub}
          32 bit constant whose high 16 bits are on (1)

    @{b}N@{ub}
          32 bit negative constant that fits in 8 bits

    @{b}O@{ub}
          The constant 0x80000000 or, on the 29050, any 32 bit constant
          whose low 16 bits are 0.

    @{b}P@{ub}
          16 bit negative constant that fits in 8 bits

    @{b}G@{ub}
    @{b}H@{ub}
          A floating point constant (in @{b}asm@{ub} statements, use the machine
          independent @{b}E@{ub} or @{b}F@{ub} instead)

@{i}IBM RS6000--@{b}rs6000.h@{ub}@{ui}

    @{b}b@{ub}
          Address base register

    @{b}f@{ub}
          Floating point register

    @{b}h@{ub}
@{b}          MQ@{ub}, @{b}CTR@{ub}, or @{b}LINK@{ub} register

    @{b}q@{ub}
@{b}          MQ@{ub} register

    @{b}c@{ub}
@{b}          CTR@{ub} register

    @{b}l@{ub}
@{b}          LINK@{ub} register

    @{b}x@{ub}
@{b}          CR@{ub} register (condition register) number 0

    @{b}y@{ub}
@{b}          CR@{ub} register (condition register)

    @{b}I@{ub}
          Signed 16 bit constant

    @{b}J@{ub}
          Constant whose low 16 bits are 0

    @{b}K@{ub}
          Constant whose high 16 bits are 0

    @{b}L@{ub}
          Constant suitable as a mask operand

    @{b}M@{ub}
          Constant larger than 31

    @{b}N@{ub}
          Exact power of 2

    @{b}O@{ub}
          Zero

    @{b}P@{ub}
          Constant whose negation is a signed 16 bit constant

    @{b}G@{ub}
          Floating point constant that can be loaded into a register
          with one instruction per word

    @{b}Q@{ub}
          Memory operand that is an offset from a register (@{b}m@{ub} is
          preferable for @{b}asm@{ub} statements)

    @{b}R@{ub}
          AIX TOC entry

    @{b}S@{ub}
          Windows NT SYMBOL_REF

    @{b}T@{ub}
          Windows NT LABEL_REF

    @{b}U@{ub}
          System V Release 4 small data area reference

@{i}Intel 386--@{b}i386.h@{ub}@{ui}

    @{b}q@{ub}
@{b}          a@{ub}, @{b}b@{ub}, @{b}c@{ub}, or @{b}d@{ub} register

    @{b}A@{ub}
@{b}          a@{ub}, or @{b}d@{ub} register (for 64-bit ints)

    @{b}f@{ub}
          Floating point register

    @{b}t@{ub}
          First (top of stack) floating point register

    @{b}u@{ub}
          Second floating point register

    @{b}a@{ub}
@{b}          a@{ub} register

    @{b}b@{ub}
@{b}          b@{ub} register

    @{b}c@{ub}
@{b}          c@{ub} register

    @{b}d@{ub}
@{b}          d@{ub} register

    @{b}D@{ub}
@{b}          di@{ub} register

    @{b}S@{ub}
@{b}          si@{ub} register

    @{b}I@{ub}
          Constant in range 0 to 31 (for 32 bit shifts)

    @{b}J@{ub}
          Constant in range 0 to 63 (for 64 bit shifts)

    @{b}K@{ub}
@{b}          0xff@{ub}

    @{b}L@{ub}
@{b}          0xffff@{ub}

    @{b}M@{ub}
          0, 1, 2, or 3 (shifts for @{b}lea@{ub} instruction)

    @{b}N@{ub}
          Constant in range 0 to 255 (for @{b}out@{ub} instruction)

    @{b}G@{ub}
          Standard 80387 floating point constant

@{i}Intel 960--@{b}i960.h@{ub}@{ui}

    @{b}f@{ub}
          Floating point register (@{b}fp0@{ub} to @{b}fp3@{ub})

    @{b}l@{ub}
          Local register (@{b}r0@{ub} to @{b}r15@{ub})

    @{b}b@{ub}
          Global register (@{b}g0@{ub} to @{b}g15@{ub})

    @{b}d@{ub}
          Any local or global register

    @{b}I@{ub}
          Integers from 0 to 31

    @{b}J@{ub}
          0

    @{b}K@{ub}
          Integers from -31 to 0

    @{b}G@{ub}
          Floating point 0

    @{b}H@{ub}
          Floating point 1

@{i}MIPS--@{b}mips.h@{ub}@{ui}

    @{b}d@{ub}
          General-purpose integer register

    @{b}f@{ub}
          Floating-point register (if available)

    @{b}h@{ub}
@{b}          Hi@{ub} register

    @{b}l@{ub}
@{b}          Lo@{ub} register

    @{b}x@{ub}
@{b}          Hi@{ub} or @{b}Lo@{ub} register

    @{b}y@{ub}
          General-purpose integer register

    @{b}z@{ub}
          Floating-point status register

    @{b}I@{ub}
          Signed 16 bit constant (for arithmetic instructions)

    @{b}J@{ub}
          Zero

    @{b}K@{ub}
          Zero-extended 16-bit constant (for logic instructions)

    @{b}L@{ub}
          Constant with low 16 bits zero (can be loaded with @{b}lui@{ub})

    @{b}M@{ub}
          32 bit constant which requires two instructions to load (a
          constant which is not @{b}I@{ub}, @{b}K@{ub}, or @{b}L@{ub})

    @{b}N@{ub}
          Negative 16 bit constant

    @{b}O@{ub}
          Exact power of two

    @{b}P@{ub}
          Positive 16 bit constant

    @{b}G@{ub}
          Floating point zero

    @{b}Q@{ub}
          Memory reference that can be loaded with more than one
          instruction (@{b}m@{ub} is preferable for @{b}asm@{ub} statements)

    @{b}R@{ub}
          Memory reference that can be loaded with one instruction (@{b}m@{ub}
          is preferable for @{b}asm@{ub} statements)

    @{b}S@{ub}
          Memory reference in external OSF/rose PIC format (@{b}m@{ub} is
          preferable for @{b}asm@{ub} statements)

@{i}Motorola 680x0--@{b}m68k.h@{ub}@{ui}

    @{b}a@{ub}
          Address register

    @{b}d@{ub}
          Data register

    @{b}f@{ub}
          68881 floating-point register, if available

    @{b}x@{ub}
          Sun FPA (floating-point) register, if available

    @{b}y@{ub}
          First 16 Sun FPA registers, if available

    @{b}I@{ub}
          Integer in the range 1 to 8

    @{b}J@{ub}
          16 bit signed number

    @{b}K@{ub}
          Signed number whose magnitude is greater than 0x80

    @{b}L@{ub}
          Integer in the range -8 to -1

    @{b}M@{ub}
          Signed number whose magnitude is greater than 0x100

    @{b}G@{ub}
          Floating point constant that is not a 68881 constant

    @{b}H@{ub}
          Floating point constant that can be used by Sun FPA

@{i}SPARC--@{b}sparc.h@{ub}@{ui}

    @{b}f@{ub}
          Floating-point register that can hold 32 or 64 bit values.

    @{b}e@{ub}
          Floating-point register that can hold 64 or 128 bit values.

    @{b}I@{ub}
          Signed 13 bit constant

    @{b}J@{ub}
          Zero

    @{b}K@{ub}
          32 bit constant with the low 12 bits clear (a constant that
          can be loaded with the @{b}sethi@{ub} instruction)

    @{b}G@{ub}
          Floating-point zero

    @{b}H@{ub}
          Signed 13 bit constant, sign-extended to 32 or 64 bits

    @{b}Q@{ub}
          Memory reference that can be loaded with one instruction  (@{b}m@{ub}
          is more appropriate for @{b}asm@{ub} statements)

    @{b}S@{ub}
          Constant, or memory address

    @{b}T@{ub}
          Memory address aligned to an 8-byte boundary

    @{b}U@{ub}
          Even register


@endnode

@node "No Constraints" "gcc.guide/No Constraints"
@prev "Machine Constraints"
@toc "Constraints"

Not Using Constraints
---------------------

   Some machines are so clean that operand constraints are not
required.  For example, on the Vax, an operand valid in one context is
valid in any other context.  On such a machine, every operand
constraint would be @{b}g@{ub}, excepting only operands of "load address"
instructions which are written as if they referred to a memory
location's contents but actual refer to its address.  They would have
constraint @{b}p@{ub}.

   For such machines, instead of writing @{b}g@{ub} and @{b}p@{ub} for all the
constraints, you can choose to write a description with empty
constraints.  Then you write @{b}""@{ub} for the constraint in every
@{b}match_operand@{ub}.  Address operands are identified by writing an @{b}address@{ub}
expression around the @{b}match_operand@{ub}, not by their constraints.

   When the machine description has just empty constraints, certain
parts of compilation are skipped, making the compiler faster.  However,
few machines actually do not need constraints; all machine descriptions
now in existence use constraints.


@endnode

@node "Standard Names" "gcc.guide/Standard Names"
@next "Pattern Ordering"
@prev "Constraints"
@toc "Machine Desc"

Standard Pattern Names For Generation
=====================================

   Here is a table of the instruction names that are meaningful in the
RTL generation pass of the compiler.  Giving one of these names to an
instruction pattern tells the RTL generation pass that it can use the
pattern to accomplish a certain task.

@{b}movM@{ub}
     Here M stands for a two-letter machine mode name, in lower case.
     This instruction pattern moves data with that machine mode from
     operand 1 to operand 0.  For example, @{b}movsi@{ub} moves full-word data.

     If operand 0 is a @{b}subreg@{ub} with mode M of a register whose own mode
     is wider than M, the effect of this instruction is to store the
     specified value in the part of the register that corresponds to
     mode M.  The effect on the rest of the register is undefined.

     This class of patterns is special in several ways.  First of all,
     each of these names @{i}must@{ui} be defined, because there is no other way
     to copy a datum from one place to another.

     Second, these patterns are not used solely in the RTL generation
     pass.  Even the reload pass can generate move insns to copy values
     from stack slots into temporary registers.  When it does so, one
     of the operands is a hard register and the other is an operand
     that can need to be reloaded into a register.

     Therefore, when given such a pair of operands, the pattern must
     generate RTL which needs no reloading and needs no temporary
     registers--no registers other than the operands.  For example, if
     you support the pattern with a @{b}define_expand@{ub}, then in such a case
     the @{b}define_expand@{ub} mustn't call @{b}force_reg@{ub} or any other such
     function which might generate new pseudo registers.

     This requirement exists even for subword modes on a RISC machine
     where fetching those modes from memory normally requires several
     insns and some temporary registers.  Look in @{b}spur.md@{ub} to see how the
     requirement can be satisfied.

     During reload a memory reference with an invalid address may be
     passed as an operand.  Such an address will be replaced with a
     valid address later in the reload pass.  In this case, nothing may
     be done with the address except to use it as it stands.  If it is
     copied, it will not be replaced with a valid address.  No attempt
     should be made to make such an address into a valid address and no
     routine (such as @{b}change_address@{ub}) that will do so may be called.
     Note that @{b}general_operand@{ub} will fail when applied to such an
     address.

     The global variable @{b}reload_in_progress@{ub} (which must be explicitly
     declared if required) can be used to determine whether such special
     handling is required.

     The variety of operands that have reloads depends on the rest of
     the machine description, but typically on a RISC machine these can
     only be pseudo registers that did not get hard registers, while on
     other machines explicit memory references will get optional
     reloads.

     If a scratch register is required to move an object to or from
     memory, it can be allocated using @{b}gen_reg_rtx@{ub} prior to reload.
     But this is impossible during and after reload.  If there are
     cases needing scratch registers after reload, you must define
     @{b}SECONDARY_INPUT_RELOAD_CLASS@{ub} and perhaps also
     @{b}SECONDARY_OUTPUT_RELOAD_CLASS@{ub} to detect them, and provide patterns
     @{b}reload_inM@{ub} or @{b}reload_outM@{ub} to handle them.  See @{"Register Classes" link "Register Classes"}.

     The constraints on a @{b}movM@{ub} must permit moving any hard register to
     any other hard register provided that @{b}HARD_REGNO_MODE_OK@{ub} permits
     mode M in both registers and @{b}REGISTER_MOVE_COST@{ub} applied to their
     classes returns a value of 2.

     It is obligatory to support floating point @{b}movM@{ub} instructions into
     and out of any registers that can hold fixed point values, because
     unions and structures (which have modes @{b}SImode@{ub} or @{b}DImode@{ub}) can be
     in those registers and they may have floating point members.

     There may also be a need to support fixed point @{b}movM@{ub} instructions
     in and out of floating point registers.  Unfortunately, I have
     forgotten why this was so, and I don't know whether it is still
     true.  If @{b}HARD_REGNO_MODE_OK@{ub} rejects fixed point values in
     floating point registers, then the constraints of the fixed point
     @{b}movM@{ub} instructions must be designed to avoid ever trying to reload
     into a floating point register.

@{b}reload_inM@{ub}
@{b}reload_outM@{ub}
     Like @{b}movM@{ub}, but used when a scratch register is required to move
     between operand 0 and operand 1.  Operand 2 describes the scratch
     register.  See the discussion of the @{b}SECONDARY_RELOAD_CLASS@{ub} macro
     in see @{"Register Classes" link "Register Classes"}.

@{b}movstrictM@{ub}
     Like @{b}movM@{ub} except that if operand 0 is a @{b}subreg@{ub} with mode M of a
     register whose natural mode is wider, the @{b}movstrictM@{ub} instruction
     is guaranteed not to alter any of the register except the part
     which belongs to mode M.

@{b}load_multiple@{ub}
     Load several consecutive memory locations into consecutive
     registers.  Operand 0 is the first of the consecutive registers,
     operand 1 is the first memory location, and operand 2 is a
     constant: the number of consecutive registers.

     Define this only if the target machine really has such an
     instruction; do not define this if the most efficient way of
     loading consecutive registers from memory is to do them one at a
     time.

     On some machines, there are restrictions as to which consecutive
     registers can be stored into memory, such as particular starting or
     ending register numbers or only a range of valid counts.  For those
     machines, use a @{b}define_expand@{ub} (see @{"Expander Definitions" link "Expander Definitions"}) and make
     the pattern fail if the restrictions are not met.

     Write the generated insn as a @{b}parallel@{ub} with elements being a @{b}set@{ub}
     of one register from the appropriate memory location (you may also
     need @{b}use@{ub} or @{b}clobber@{ub} elements).  Use a @{b}match_parallel@{ub} (see
     @{"RTL Template" link "RTL Template"}) to recognize the insn.  See @{b}a29k.md@{ub} and @{b}rs6000.md@{ub}
     for examples of the use of this insn pattern.

@{b}store_multiple@{ub}
     Similar to @{b}load_multiple@{ub}, but store several consecutive registers
     into consecutive memory locations.  Operand 0 is the first of the
     consecutive memory locations, operand 1 is the first register, and
     operand 2 is a constant: the number of consecutive registers.

@{b}addM3@{ub}
     Add operand 2 and operand 1, storing the result in operand 0.  All
     operands must have mode M.  This can be used even on two-address
     machines, by means of constraints requiring operands 1 and 0 to be
     the same location.

@{b}subM3@{ub}, @{b}mulM3@{ub}
@{b}divM3@{ub}, @{b}udivM3@{ub}, @{b}modM3@{ub}, @{b}umodM3@{ub}
@{b}sminM3@{ub}, @{b}smaxM3@{ub}, @{b}uminM3@{ub}, @{b}umaxM3@{ub}
@{b}andM3@{ub}, @{b}iorM3@{ub}, @{b}xorM3@{ub}
     Similar, for other arithmetic operations.

@{b}mulhisi3@{ub}
     Multiply operands 1 and 2, which have mode @{b}HImode@{ub}, and store a
     @{b}SImode@{ub} product in operand 0.

@{b}mulqihi3@{ub}, @{b}mulsidi3@{ub}
     Similar widening-multiplication instructions of other widths.

@{b}umulqihi3@{ub}, @{b}umulhisi3@{ub}, @{b}umulsidi3@{ub}
     Similar widening-multiplication instructions that do unsigned
     multiplication.

@{b}mulM3_highpart@{ub}
     Perform a signed multiplication of operands 1 and 2, which have
     mode M, and store the most significant half of the product in
     operand 0.  The least significant half of the product is discarded.

@{b}umulM3_highpart@{ub}
     Similar, but the multiplication is unsigned.

@{b}divmodM4@{ub}
     Signed division that produces both a quotient and a remainder.
     Operand 1 is divided by operand 2 to produce a quotient stored in
     operand 0 and a remainder stored in operand 3.

     For machines with an instruction that produces both a quotient and
     a remainder, provide a pattern for @{b}divmodM4@{ub} but do not provide
     patterns for @{b}divM3@{ub} and @{b}modM3@{ub}.  This allows optimization in the
     relatively common case when both the quotient and remainder are
     computed.

     If an instruction that just produces a quotient or just a remainder
     exists and is more efficient than the instruction that produces
     both, write the output routine of @{b}divmodM4@{ub} to call @{b}find_reg_note@{ub}
     and look for a @{b}REG_UNUSED@{ub} note on the quotient or remainder and
     generate the appropriate instruction.

@{b}udivmodM4@{ub}
     Similar, but does unsigned division.

@{b}ashlM3@{ub}
     Arithmetic-shift operand 1 left by a number of bits specified by
     operand 2, and store the result in operand 0.  Here M is the mode
     of operand 0 and operand 1; operand 2's mode is specified by the
     instruction pattern, and the compiler will convert the operand to
     that mode before generating the instruction.

@{b}ashrM3@{ub}, @{b}lshrM3@{ub}, @{b}rotlM3@{ub}, @{b}rotrM3@{ub}
     Other shift and rotate instructions, analogous to the @{b}ashlM3@{ub}
     instructions.

@{b}negM2@{ub}
     Negate operand 1 and store the result in operand 0.

@{b}absM2@{ub}
     Store the absolute value of operand 1 into operand 0.

@{b}sqrtM2@{ub}
     Store the square root of operand 1 into operand 0.

     The @{b}sqrt@{ub} built-in function of C always uses the mode which
     corresponds to the C data type @{b}double@{ub}.

@{b}ffsM2@{ub}
     Store into operand 0 one plus the index of the least significant
     1-bit of operand 1.  If operand 1 is zero, store zero.  M is the
     mode of operand 0; operand 1's mode is specified by the instruction
     pattern, and the compiler will convert the operand to that mode
     before generating the instruction.

     The @{b}ffs@{ub} built-in function of C always uses the mode which
     corresponds to the C data type @{b}int@{ub}.

@{b}one_cmplM2@{ub}
     Store the bitwise-complement of operand 1 into operand 0.

@{b}cmpM@{ub}
     Compare operand 0 and operand 1, and set the condition codes.  The
     RTL pattern should look like this:

          (set (cc0) (compare (match_operand:M 0 ...)
                              (match_operand:M 1 ...)))

@{b}tstM@{ub}
     Compare operand 0 against zero, and set the condition codes.  The
     RTL pattern should look like this:

          (set (cc0) (match_operand:M 0 ...))

@{b}     tstM@{ub} patterns should not be defined for machines that do not use
     @{b}(cc0)@{ub}.  Doing so would confuse the optimizer since it would no
     longer be clear which @{b}set@{ub} operations were comparisons.  The @{b}cmpM@{ub}
     patterns should be used instead.

@{b}movstrM@{ub}
     Block move instruction.  The addresses of the destination and
     source strings are the first two operands, and both are in mode
     @{b}Pmode@{ub}.

     The number of bytes to move is the third operand, in mode M.
     Usually, you specify @{b}word_mode@{ub} for M.  However, if you can
     generate better code knowing the range of valid lengths is smaller
     than those representable in a full word, you should provide a
     pattern with a mode corresponding to the range of values you can
     handle efficiently (e.g., @{b}QImode@{ub} for values in the range 0-127;
     note we avoid numbers that appear negative) and also a pattern
     with @{b}word_mode@{ub}.

     The fourth operand is the known shared alignment of the source and
     destination, in the form of a @{b}const_int@{ub} rtx.  Thus, if the
     compiler knows that both source and destination are word-aligned,
     it may provide the value 4 for this operand.

     Descriptions of multiple @{b}movstrM@{ub} patterns can only be beneficial
     if the patterns for smaller modes have fewer restrictions on their
     first, second and fourth operands.  Note that the mode M in
     @{b}movstrM@{ub} does not impose any restriction on the mode of
     individually moved data units in the block.

     These patterns need not give special consideration to the
     possibility that the source and destination strings might overlap.

@{b}clrstrM@{ub}
     Block clear instruction.  The addresses of the destination string
     is the first operand, in mode @{b}Pmode@{ub}.  The number of bytes to clear
     is the second operand, in mode M.  See @{b}movstrM@{ub} for a discussion of
     the choice of mode.

     The third operand is the known alignment of the destination, in
     the form of a @{b}const_int@{ub} rtx.  Thus, if the compiler knows that the
     destination is word-aligned, it may provide the value 4 for this
     operand.

     The use for multiple @{b}clrstrM@{ub} is as for @{b}movstrM@{ub}.

@{b}cmpstrM@{ub}
     Block compare instruction, with five operands.  Operand 0 is the
     output; it has mode M.  The remaining four operands are like the
     operands of @{b}movstrM@{ub}.  The two memory blocks specified are compared
     byte by byte in lexicographic order.  The effect of the
     instruction is to store a value in operand 0 whose sign indicates
     the result of the comparison.

@{b}strlenM@{ub}
     Compute the length of a string, with three operands.  Operand 0 is
     the result (of mode M), operand 1 is a @{b}mem@{ub} referring to the first
     character of the string, operand 2 is the character to search for
     (normally zero), and operand 3 is a constant describing the known
     alignment of the beginning of the string.

@{b}floatMN2@{ub}
     Convert signed integer operand 1 (valid for fixed point mode M) to
     floating point mode N and store in operand 0 (which has mode N).

@{b}floatunsMN2@{ub}
     Convert unsigned integer operand 1 (valid for fixed point mode M)
     to floating point mode N and store in operand 0 (which has mode N).

@{b}fixMN2@{ub}
     Convert operand 1 (valid for floating point mode M) to fixed point
     mode N as a signed number and store in operand 0 (which has mode
     N).  This instruction's result is defined only when the value of
     operand 1 is an integer.

@{b}fixunsMN2@{ub}
     Convert operand 1 (valid for floating point mode M) to fixed point
     mode N as an unsigned number and store in operand 0 (which has
     mode N).  This instruction's result is defined only when the value
     of operand 1 is an integer.

@{b}ftruncM2@{ub}
     Convert operand 1 (valid for floating point mode M) to an integer
     value, still represented in floating point mode M, and store it in
     operand 0 (valid for floating point mode M).

@{b}fix_truncMN2@{ub}
     Like @{b}fixMN2@{ub} but works for any floating point value of mode M by
     converting the value to an integer.

@{b}fixuns_truncMN2@{ub}
     Like @{b}fixunsMN2@{ub} but works for any floating point value of mode M by
     converting the value to an integer.

@{b}truncMN2@{ub}
     Truncate operand 1 (valid for mode M) to mode N and store in
     operand 0 (which has mode N).  Both modes must be fixed point or
     both floating point.

@{b}extendMN2@{ub}
     Sign-extend operand 1 (valid for mode M) to mode N and store in
     operand 0 (which has mode N).  Both modes must be fixed point or
     both floating point.

@{b}zero_extendMN2@{ub}
     Zero-extend operand 1 (valid for mode M) to mode N and store in
     operand 0 (which has mode N).  Both modes must be fixed point.

@{b}extv@{ub}
     Extract a bit field from operand 1 (a register or memory operand),
     where operand 2 specifies the width in bits and operand 3 the
     starting bit, and store it in operand 0.  Operand 0 must have mode
     @{b}word_mode@{ub}.  Operand 1 may have mode @{b}byte_mode@{ub} or @{b}word_mode@{ub}; often
     @{b}word_mode@{ub} is allowed only for registers.  Operands 2 and 3 must be
     valid for @{b}word_mode@{ub}.

     The RTL generation pass generates this instruction only with
     constants for operands 2 and 3.

     The bit-field value is sign-extended to a full word integer before
     it is stored in operand 0.

@{b}extzv@{ub}
     Like @{b}extv@{ub} except that the bit-field value is zero-extended.

@{b}insv@{ub}
     Store operand 3 (which must be valid for @{b}word_mode@{ub}) into a bit
     field in operand 0, where operand 1 specifies the width in bits and
     operand 2 the starting bit.  Operand 0 may have mode @{b}byte_mode@{ub} or
     @{b}word_mode@{ub}; often @{b}word_mode@{ub} is allowed only for registers.
     Operands 1 and 2 must be valid for @{b}word_mode@{ub}.

     The RTL generation pass generates this instruction only with
     constants for operands 1 and 2.

@{b}movMODEcc@{ub}
     Conditionally move operand 2 or operand 3 into operand 0 according
     to the comparison in operand 1.  If the comparison is true,
     operand 2 is moved into operand 0, otherwise operand 3 is moved.

     The mode of the operands being compared need not be the same as
     the operands being moved.  Some machines, sparc64 for example,
     have instructions that conditionally move an integer value based
     on the floating point condition codes and vice versa.

     If the machine does not have conditional move instructions, do not
     define these patterns.

@{b}sCOND@{ub}
     Store zero or nonzero in the operand according to the condition
     codes.  Value stored is nonzero iff the condition COND is true.
     COND is the name of a comparison operation expression code, such
     as @{b}eq@{ub}, @{b}lt@{ub} or @{b}leu@{ub}.

     You specify the mode that the operand must have when you write the
     @{b}match_operand@{ub} expression.  The compiler automatically sees which
     mode you have used and supplies an operand of that mode.

     The value stored for a true condition must have 1 as its low bit,
     or else must be negative.  Otherwise the instruction is not
     suitable and you should omit it from the machine description.  You
     describe to the compiler exactly which value is stored by defining
     the macro @{b}STORE_FLAG_VALUE@{ub} (see @{"Misc" link "Misc"}).  If a description cannot be
     found that can be used for all the @{b}sCOND@{ub} patterns, you should omit
     those operations from the machine description.

     These operations may fail, but should do so only in relatively
     uncommon cases; if they would fail for common cases involving
     integer comparisons, it is best to omit these patterns.

     If these operations are omitted, the compiler will usually
     generate code that copies the constant one to the target and
     branches around an assignment of zero to the target.  If this code
     is more efficient than the potential instructions used for the
     @{b}sCOND@{ub} pattern followed by those required to convert the result
     into a 1 or a zero in @{b}SImode@{ub}, you should omit the @{b}sCOND@{ub} operations
     from the machine description.

@{b}bCOND@{ub}
     Conditional branch instruction.  Operand 0 is a @{b}label_ref@{ub} that
     refers to the label to jump to.  Jump if the condition codes meet
     condition COND.

     Some machines do not follow the model assumed here where a
     comparison instruction is followed by a conditional branch
     instruction.  In that case, the @{b}cmpM@{ub} (and @{b}tstM@{ub}) patterns should
     simply store the operands away and generate all the required insns
     in a @{b}define_expand@{ub} (see @{"Expander Definitions" link "Expander Definitions"}) for the conditional
     branch operations.  All calls to expand @{b}bCOND@{ub} patterns are
     immediately preceded by calls to expand either a @{b}cmpM@{ub} pattern or a
     @{b}tstM@{ub} pattern.

     Machines that use a pseudo register for the condition code value,
     or where the mode used for the comparison depends on the condition
     being tested, should also use the above mechanism.  See
     @{"Jump Patterns" link "Jump Patterns"}.

     The above discussion also applies to the @{b}movMODEcc@{ub} and @{b}sCOND@{ub}
     patterns.

@{b}call@{ub}
     Subroutine call instruction returning no value.  Operand 0 is the
     function to call; operand 1 is the number of bytes of arguments
     pushed as a @{b}const_int@{ub}; operand 2 is the number of registers used as
     operands.

     On most machines, operand 2 is not actually stored into the RTL
     pattern.  It is supplied for the sake of some RISC machines which
     need to put this information into the assembler code; they can put
     it in the RTL instead of operand 1.

     Operand 0 should be a @{b}mem@{ub} RTX whose address is the address of the
     function.  Note, however, that this address can be a @{b}symbol_ref@{ub}
     expression even if it would not be a legitimate memory address on
     the target machine.  If it is also not a valid argument for a call
     instruction, the pattern for this operation should be a
     @{b}define_expand@{ub} (see @{"Expander Definitions" link "Expander Definitions"}) that places the address
     into a register and uses that register in the call instruction.

@{b}call_value@{ub}
     Subroutine call instruction returning a value.  Operand 0 is the
     hard register in which the value is returned.  There are three more
     operands, the same as the three operands of the @{b}call@{ub} instruction
     (but with numbers increased by one).

     Subroutines that return @{b}BLKmode@{ub} objects use the @{b}call@{ub} insn.

@{b}call_pop@{ub}, @{b}call_value_pop@{ub}
     Similar to @{b}call@{ub} and @{b}call_value@{ub}, except used if defined and if
     @{b}RETURN_POPS_ARGS@{ub} is non-zero.  They should emit a @{b}parallel@{ub} that
     contains both the function call and a @{b}set@{ub} to indicate the
     adjustment made to the frame pointer.

     For machines where @{b}RETURN_POPS_ARGS@{ub} can be non-zero, the use of
     these patterns increases the number of functions for which the
     frame pointer can be eliminated, if desired.

@{b}untyped_call@{ub}
     Subroutine call instruction returning a value of any type.
     Operand 0 is the function to call; operand 1 is a memory location
     where the result of calling the function is to be stored; operand
     2 is a @{b}parallel@{ub} expression where each element is a @{b}set@{ub} expression
     that indicates the saving of a function return value into the
     result block.

     This instruction pattern should be defined to support
     @{b}__builtin_apply@{ub} on machines where special instructions are needed
     to call a subroutine with arbitrary arguments or to save the value
     returned.  This instruction pattern is required on machines that
     have multiple registers that can hold a return value (i.e.
     @{b}FUNCTION_VALUE_REGNO_P@{ub} is true for more than one register).

@{b}return@{ub}
     Subroutine return instruction.  This instruction pattern name
     should be defined only if a single instruction can do all the work
     of returning from a function.

     Like the @{b}movM@{ub} patterns, this pattern is also used after the RTL
     generation phase.  In this case it is to support machines where
     multiple instructions are usually needed to return from a
     function, but some class of functions only requires one
     instruction to implement a return.  Normally, the applicable
     functions are those which do not need to save any registers or
     allocate stack space.

     For such machines, the condition specified in this pattern should
     only be true when @{b}reload_completed@{ub} is non-zero and the function's
     epilogue would only be a single instruction.  For machines with
     register windows, the routine @{b}leaf_function_p@{ub} may be used to
     determine if a register window push is required.

     Machines that have conditional return instructions should define
     patterns such as

          (define_insn ""
            [(set (pc)
                  (if_then_else (match_operator
                                   0 "comparison_operator"
                                   [(cc0) (const_int 0)])
                                (return)
                                (pc)))]
            "CONDITION"
            "...")

     where CONDITION would normally be the same condition specified on
     the named @{b}return@{ub} pattern.

@{b}untyped_return@{ub}
     Untyped subroutine return instruction.  This instruction pattern
     should be defined to support @{b}__builtin_return@{ub} on machines where
     special instructions are needed to return a value of any type.

     Operand 0 is a memory location where the result of calling a
     function with @{b}__builtin_apply@{ub} is stored; operand 1 is a @{b}parallel@{ub}
     expression where each element is a @{b}set@{ub} expression that indicates
     the restoring of a function return value from the result block.

@{b}nop@{ub}
     No-op instruction.  This instruction pattern name should always be
     defined to output a no-op in assembler code.  @{b}(const_int 0)@{ub} will
     do as an RTL pattern.

@{b}indirect_jump@{ub}
     An instruction to jump to an address which is operand zero.  This
     pattern name is mandatory on all machines.

@{b}casesi@{ub}
     Instruction to jump through a dispatch table, including bounds
     checking.  This instruction takes five operands:

       1. The index to dispatch on, which has mode @{b}SImode@{ub}.

       2. The lower bound for indices in the table, an integer constant.

       3. The total range of indices in the table--the largest index
          minus the smallest one (both inclusive).

       4. A label that precedes the table itself.

       5. A label to jump to if the index has a value outside the
          bounds.  (If the machine-description macro @{b}CASE_DROPS_THROUGH@{ub}
          is defined, then an out-of-bounds index drops through to the
          code following the jump table instead of jumping to this
          label.  In that case, this label is not actually used by the
          @{b}casesi@{ub} instruction, but it is always provided as an operand.)

     The table is a @{b}addr_vec@{ub} or @{b}addr_diff_vec@{ub} inside of a @{b}jump_insn@{ub}.
     The number of elements in the table is one plus the difference
     between the upper bound and the lower bound.

@{b}tablejump@{ub}
     Instruction to jump to a variable address.  This is a low-level
     capability which can be used to implement a dispatch table when
     there is no @{b}casesi@{ub} pattern.

     This pattern requires two operands: the address or offset, and a
     label which should immediately precede the jump table.  If the
     macro @{b}CASE_VECTOR_PC_RELATIVE@{ub} evaluates to a nonzero value then
     the first operand is an offset which counts from the address of
     the table; otherwise, it is an absolute address to jump to.  In
     either case, the first operand has mode @{b}Pmode@{ub}.

     The @{b}tablejump@{ub} insn is always the last insn before the jump table
     it uses.  Its assembler code normally has no need to use the
     second operand, but you should incorporate it in the RTL pattern so
     that the jump optimizer will not delete the table as unreachable
     code.

@{b}canonicalize_funcptr_for_compare@{ub}
     Canonicalize the function pointer in operand 1 and store the result
     into operand 0.

     Operand 0 is always a @{b}reg@{ub} and has mode @{b}Pmode@{ub}; operand 1 may be a
     @{b}reg@{ub}, @{b}mem@{ub}, @{b}symbol_ref@{ub}, @{b}const_int@{ub}, etc and also has mode @{b}Pmode@{ub}.

     Canonicalization of a function pointer usually involves computing
     the address of the function which would be called if the function
     pointer were used in an indirect call.

     Only define this pattern if function pointers on the target machine
     can have different values but still call the same function when
     used in an indirect call.

@{b}save_stack_block@{ub}
@{b}save_stack_function@{ub}
@{b}save_stack_nonlocal@{ub}
@{b}restore_stack_block@{ub}
@{b}restore_stack_function@{ub}
@{b}restore_stack_nonlocal@{ub}
     Most machines save and restore the stack pointer by copying it to
     or from an object of mode @{b}Pmode@{ub}.  Do not define these patterns on
     such machines.

     Some machines require special handling for stack pointer saves and
     restores.  On those machines, define the patterns corresponding to
     the non-standard cases by using a @{b}define_expand@{ub} (see
     @{"Expander Definitions" link "Expander Definitions"}) that produces the required insns.  The
     three types of saves and restores are:

       1. @{b}save_stack_block@{ub} saves the stack pointer at the start of a
          block that allocates a variable-sized object, and
          @{b}restore_stack_block@{ub} restores the stack pointer when the block
          is exited.

       2. @{b}save_stack_function@{ub} and @{b}restore_stack_function@{ub} do a similar
          job for the outermost block of a function and are used when
          the function allocates variable-sized objects or calls
          @{b}alloca@{ub}.  Only the epilogue uses the restored stack pointer,
          allowing a simpler save or restore sequence on some machines.

       3. @{b}save_stack_nonlocal@{ub} is used in functions that contain labels
          branched to by nested functions.  It saves the stack pointer
          in such a way that the inner function can use
          @{b}restore_stack_nonlocal@{ub} to restore the stack pointer.  The
          compiler generates code to restore the frame and argument
          pointer registers, but some machines require saving and
          restoring additional data such as register window information
          or stack backchains.  Place insns in these patterns to save
          and restore any such required data.

     When saving the stack pointer, operand 0 is the save area and
     operand 1 is the stack pointer.  The mode used to allocate the
     save area defaults to @{b}Pmode@{ub} but you can override that choice by
     defining the @{b}STACK_SAVEAREA_MODE@{ub} macro (see @{"Storage Layout" link "Storage Layout"}).  You
     must specify an integral mode, or @{b}VOIDmode@{ub} if no save area is
     needed for a particular type of save (either because no save is
     needed or because a machine-specific save area can be used).
     Operand 0 is the stack pointer and operand 1 is the save area for
     restore operations.  If @{b}save_stack_block@{ub} is defined, operand 0
     must not be @{b}VOIDmode@{ub} since these saves can be arbitrarily nested.

     A save area is a @{b}mem@{ub} that is at a constant offset from
     @{b}virtual_stack_vars_rtx@{ub} when the stack pointer is saved for use by
     nonlocal gotos and a @{b}reg@{ub} in the other two cases.

@{b}allocate_stack@{ub}
     Subtract (or add if @{b}STACK_GROWS_DOWNWARD@{ub} is undefined) operand 1
     from the stack pointer to create space for dynamically allocated
     data.

     Store the resultant pointer to this space into operand 0.  If you
     are allocating space from the main stack, do this by emitting a
     move insn to copy @{b}virtual_stack_dynamic_rtx@{ub} to operand 0.  If you
     are allocating the space elsewhere, generate code to copy the
     location of the space to operand 0.  In the latter case, you must
     ensure this space gets freed when the corresponding space on the
     main stack is free.

     Do not define this pattern if all that must be done is the
     subtraction.  Some machines require other operations such as stack
     probes or maintaining the back chain.  Define this pattern to emit
     those operations in addition to updating the stack pointer.

@{b}probe@{ub}
     Some machines require instructions to be executed after space is
     allocated from the stack, for example to generate a reference at
     the bottom of the stack.

     If you need to emit instructions before the stack has been
     adjusted, put them into the @{b}allocate_stack@{ub} pattern.  Otherwise,
     define this pattern to emit the required instructions.

     No operands are provided.

@{b}check_stack@{ub}
     If stack checking cannot be done on your system by probing the
     stack with a load or store instruction (see @{"Stack Checking" link "Stack Checking"}),
     define this pattern to perform the needed check and signaling an
     error if the stack has overflowed.  The single operand is the
     location in the stack furthest from the current stack pointer that
     you need to validate.  Normally, on machines where this pattern is
     needed, you would obtain the stack limit from a global or
     thread-specific variable or register.

@{b}nonlocal_goto@{ub}
     Emit code to generate a non-local goto, e.g., a jump from one
     function to a label in an outer function.  This pattern has four
     arguments, each representing a value to be used in the jump.  The
     first argument is to be loaded into the frame pointer, the second
     is the address to branch to (code to dispatch to the actual label),
     the third is the address of a location where the stack is saved,
     and the last is the address of the label, to be placed in the
     location for the incoming static chain.

     On most machines you need not define this pattern, since GNU CC
     will already generate the correct code, which is to load the frame
     pointer and static chain, restore the stack (using the
     @{b}restore_stack_nonlocal@{ub} pattern, if defined), and jump indirectly
     to the dispatcher.  You need only define this pattern if this code
     will not work on your machine.

@{b}nonlocal_goto_receiver@{ub}
     This pattern, if defined, contains code needed at the target of a
     nonlocal goto after the code already generated by GNU CC.  You
     will not normally need to define this pattern.  A typical reason
     why you might need this pattern is if some value, such as a
     pointer to a global table, must be restored when the frame pointer
     is restored.  Note that a nonlocal goto only ocurrs within a
     unit-of-translation, so a global table pointer that is shared by
     all functions of a given module need not be restored.  There are
     no arguments.

@{b}exception_receiver@{ub}
     This pattern, if defined, contains code needed at the site of an
     exception handler that isn't needed at the site of a nonlocal
     goto.  You will not normally need to define this pattern.  A
     typical reason why you might need this pattern is if some value,
     such as a pointer to a global table, must be restored after
     control flow is branched to the handler of an exception.  There
     are no arguments.

@{b}builtin_setjmp_setup@{ub}
     This pattern, if defined, contains additional code needed to
     initialize the @{b}jmp_buf@{ub}.  You will not normally need to define this
     pattern.  A typical reason why you might need this pattern is if
     some value, such as a pointer to a global table, must be restored.
     Though it is preferred that the pointer value be recalculated if
     possible (given the address of a label for instance).  The single
     argument is a pointer to the @{b}jmp_buf@{ub}.  Note that the buffer is
     five words long and that the first three are normally used by the
     generic mechanism.

@{b}builtin_setjmp_receiver@{ub}
     This pattern, if defined, contains code needed at the site of an
     builtin setjmp that isn't needed at the site of a nonlocal goto.
     You will not normally need to define this pattern.  A typical
     reason why you might need this pattern is if some value, such as a
     pointer to a global table, must be restored.  It takes one
     argument, which is the label to which builtin_longjmp transfered
     control; this pattern may be emitted at a small offset from that
     label.

@{b}builtin_longjmp@{ub}
     This pattern, if defined, performs the entire action of the
     longjmp.  You will not normally need to define this pattern unless
     you also define @{b}builtin_setjmp_setup@{ub}.  The single argument is a
     pointer to the @{b}jmp_buf@{ub}.


@endnode

@node "Pattern Ordering" "gcc.guide/Pattern Ordering"
@next "Dependent Patterns"
@prev "Standard Names"
@toc "Machine Desc"

When the Order of Patterns Matters
==================================

   Sometimes an insn can match more than one instruction pattern.  Then
the pattern that appears first in the machine description is the one
used.  Therefore, more specific patterns (patterns that will match
fewer things) and faster instructions (those that will produce better
code when they do match) should usually go first in the description.

   In some cases the effect of ordering the patterns can be used to hide
a pattern when it is not valid.  For example, the 68000 has an
instruction for converting a fullword to floating point and another for
converting a byte to floating point.  An instruction converting an
integer to floating point could match either one.  We put the pattern
to convert the fullword first to make sure that one will be used rather
than the other.  (Otherwise a large integer might be generated as a
single-byte immediate quantity, which would not work.)  Instead of
using this pattern ordering it would be possible to make the pattern
for convert-a-byte smart enough to deal properly with any constant
value.


@endnode

@node "Dependent Patterns" "gcc.guide/Dependent Patterns"
@next "Jump Patterns"
@prev "Pattern Ordering"
@toc "Machine Desc"

Interdependence of Patterns
===========================

   Every machine description must have a named pattern for each of the
conditional branch names @{b}bCOND@{ub}.  The recognition template must always
have the form

     (set (pc)
          (if_then_else (COND (cc0) (const_int 0))
                        (label_ref (match_operand 0 "" ""))
                        (pc)))

In addition, every machine description must have an anonymous pattern
for each of the possible reverse-conditional branches.  Their templates
look like

     (set (pc)
          (if_then_else (COND (cc0) (const_int 0))
                        (pc)
                        (label_ref (match_operand 0 "" ""))))

They are necessary because jump optimization can turn direct-conditional
branches into reverse-conditional branches.

   It is often convenient to use the @{b}match_operator@{ub} construct to reduce
the number of patterns that must be specified for branches.  For
example,

     (define_insn ""
       [(set (pc)
             (if_then_else (match_operator 0 "comparison_operator"
                                           [(cc0) (const_int 0)])
                           (pc)
                           (label_ref (match_operand 1 "" ""))))]
       "CONDITION"
       "...")

   In some cases machines support instructions identical except for the
machine mode of one or more operands.  For example, there may be
"sign-extend halfword" and "sign-extend byte" instructions whose
patterns are

     (set (match_operand:SI 0 ...)
          (extend:SI (match_operand:HI 1 ...)))
     
     (set (match_operand:SI 0 ...)
          (extend:SI (match_operand:QI 1 ...)))

Constant integers do not specify a machine mode, so an instruction to
extend a constant value could match either pattern.  The pattern it
actually will match is the one that appears first in the file.  For
correct results, this must be the one for the widest possible mode
(@{b}HImode@{ub}, here).  If the pattern matches the @{b}QImode@{ub} instruction, the
results will be incorrect if the constant value does not actually fit
that mode.

   Such instructions to extend constants are rarely generated because
they are optimized away, but they do occasionally happen in nonoptimized
compilations.

   If a constraint in a pattern allows a constant, the reload pass may
replace a register with a constant permitted by the constraint in some
cases.  Similarly for memory references.  Because of this substitution,
you should not provide separate patterns for increment and decrement
instructions.  Instead, they should be generated from the same pattern
that supports register-register add insns by examining the operands and
generating the appropriate machine instruction.


@endnode

@node "Jump Patterns" "gcc.guide/Jump Patterns"
@next "Insn Canonicalizations"
@prev "Dependent Patterns"
@toc "Machine Desc"

Defining Jump Instruction Patterns
==================================

   For most machines, GNU CC assumes that the machine has a condition
code.  A comparison insn sets the condition code, recording the results
of both signed and unsigned comparison of the given operands.  A
separate branch insn tests the condition code and branches or not
according its value.  The branch insns come in distinct signed and
unsigned flavors.  Many common machines, such as the Vax, the 68000 and
the 32000, work this way.

   Some machines have distinct signed and unsigned compare
instructions, and only one set of conditional branch instructions.  The
easiest way to handle these machines is to treat them just like the
others until the final stage where assembly code is written.  At this
time, when outputting code for the compare instruction, peek ahead at
the following branch using @{b}next_cc0_user (insn)@{ub}.  (The variable @{b}insn@{ub}
refers to the insn being output, in the output-writing code in an
instruction pattern.)  If the RTL says that is an unsigned branch,
output an unsigned compare; otherwise output a signed compare.  When
the branch itself is output, you can treat signed and unsigned branches
identically.

   The reason you can do this is that GNU CC always generates a pair of
consecutive RTL insns, possibly separated by @{b}note@{ub} insns, one to set the
condition code and one to test it, and keeps the pair inviolate until
the end.

   To go with this technique, you must define the machine-description
macro @{b}NOTICE_UPDATE_CC@{ub} to do @{b}CC_STATUS_INIT@{ub}; in other words, no compare
instruction is superfluous.

   Some machines have compare-and-branch instructions and no condition
code.  A similar technique works for them.  When it is time to "output"
a compare instruction, record its operands in two static variables.
When outputting the branch-on-condition-code instruction that follows,
actually output a compare-and-branch instruction that uses the
remembered operands.

   It also works to define patterns for compare-and-branch instructions.
In optimizing compilation, the pair of compare and branch instructions
will be combined according to these patterns.  But this does not happen
if optimization is not requested.  So you must use one of the solutions
above in addition to any special patterns you define.

   In many RISC machines, most instructions do not affect the condition
code and there may not even be a separate condition code register.  On
these machines, the restriction that the definition and use of the
condition code be adjacent insns is not necessary and can prevent
important optimizations.  For example, on the IBM RS/6000, there is a
delay for taken branches unless the condition code register is set three
instructions earlier than the conditional branch.  The instruction
scheduler cannot perform this optimization if it is not permitted to
separate the definition and use of the condition code register.

   On these machines, do not use @{b}(cc0)@{ub}, but instead use a register to
represent the condition code.  If there is a specific condition code
register in the machine, use a hard register.  If the condition code or
comparison result can be placed in any general register, or if there are
multiple condition registers, use a pseudo register.

   On some machines, the type of branch instruction generated may
depend on the way the condition code was produced; for example, on the
68k and Sparc, setting the condition code directly from an add or
subtract instruction does not clear the overflow bit the way that a test
instruction does, so a different branch instruction must be used for
some conditional branches.  For machines that use @{b}(cc0)@{ub}, the set and
use of the condition code must be adjacent (separated only by @{b}note@{ub}
insns) allowing flags in @{b}cc_status@{ub} to be used.  (See @{"Condition Code" link "Condition Code"}.)
Also, the comparison and branch insns can be located from each other by
using the functions @{b}prev_cc0_setter@{ub} and @{b}next_cc0_user@{ub}.

   However, this is not true on machines that do not use @{b}(cc0)@{ub}.  On
those machines, no assumptions can be made about the adjacency of the
compare and branch insns and the above methods cannot be used.  Instead,
we use the machine mode of the condition code register to record
different formats of the condition code register.

   Registers used to store the condition code value should have a mode
that is in class @{b}MODE_CC@{ub}.  Normally, it will be @{b}CCmode@{ub}.  If additional
modes are required (as for the add example mentioned above in the
Sparc), define the macro @{b}EXTRA_CC_MODES@{ub} to list the additional modes
required (see @{"Condition Code" link "Condition Code"}).  Also define @{b}EXTRA_CC_NAMES@{ub} to list the
names of those modes and @{b}SELECT_CC_MODE@{ub} to choose a mode given an
operand of a compare.

   If it is known during RTL generation that a different mode will be
required (for example, if the machine has separate compare instructions
for signed and unsigned quantities, like most IBM processors), they can
be specified at that time.

   If the cases that require different modes would be made by
instruction combination, the macro @{b}SELECT_CC_MODE@{ub} determines which
machine mode should be used for the comparison result.  The patterns
should be written using that mode.  To support the case of the add on
the Sparc discussed above, we have the pattern

     (define_insn ""
       [(set (reg:CC_NOOV 0)
             (compare:CC_NOOV
               (plus:SI (match_operand:SI 0 "register_operand" "%r")
                        (match_operand:SI 1 "arith_operand" "rI"))
               (const_int 0)))]
       ""
       "...")

   The @{b}SELECT_CC_MODE@{ub} macro on the Sparc returns @{b}CC_NOOVmode@{ub} for
comparisons whose argument is a @{b}plus@{ub}.


@endnode

@node "Insn Canonicalizations" "gcc.guide/Insn Canonicalizations"
@next "Peephole Definitions"
@prev "Jump Patterns"
@toc "Machine Desc"

Canonicalization of Instructions
================================

   There are often cases where multiple RTL expressions could represent
an operation performed by a single machine instruction.  This situation
is most commonly encountered with logical, branch, and
multiply-accumulate instructions.  In such cases, the compiler attempts
to convert these multiple RTL expressions into a single canonical form
to reduce the number of insn patterns required.

   In addition to algebraic simplifications, following canonicalizations
are performed:

   * For commutative and comparison operators, a constant is always
     made the second operand.  If a machine only supports a constant as
     the second operand, only patterns that match a constant in the
     second operand need be supplied.

     For these operators, if only one operand is a @{b}neg@{ub}, @{b}not@{ub}, @{b}mult@{ub},
     @{b}plus@{ub}, or @{b}minus@{ub} expression, it will be the first operand.

   * For the @{b}compare@{ub} operator, a constant is always the second operand
     on machines where @{b}cc0@{ub} is used (see @{"Jump Patterns" link "Jump Patterns"}).  On other
     machines, there are rare cases where the compiler might want to
     construct a @{b}compare@{ub} with a constant as the first operand.
     However, these cases are not common enough for it to be worthwhile
     to provide a pattern matching a constant as the first operand
     unless the machine actually has such an instruction.

     An operand of @{b}neg@{ub}, @{b}not@{ub}, @{b}mult@{ub}, @{b}plus@{ub}, or @{b}minus@{ub} is made the first
     operand under the same conditions as above.

   * @{b}(minus X (const_int N))@{ub} is converted to @{b}(plus X (const_int -N))@{ub}.

   * Within address computations (i.e., inside @{b}mem@{ub}), a left shift is
     converted into the appropriate multiplication by a power of two.

   * De`Morgan's Law is used to move bitwise negation inside a bitwise
     logical-and or logical-or operation.  If this results in only one
     operand being a @{b}not@{ub} expression, it will be the first one.

     A machine that has an instruction that performs a bitwise
     logical-and of one operand with the bitwise negation of the other
     should specify the pattern for that instruction as

          (define_insn ""
            [(set (match_operand:M 0 ...)
                  (and:M (not:M (match_operand:M 1 ...))
                               (match_operand:M 2 ...)))]
            "..."
            "...")

     Similarly, a pattern for a "NAND" instruction should be written

          (define_insn ""
            [(set (match_operand:M 0 ...)
                  (ior:M (not:M (match_operand:M 1 ...))
                               (not:M (match_operand:M 2 ...))))]
            "..."
            "...")

     In both cases, it is not necessary to include patterns for the many
     logically equivalent RTL expressions.

   * The only possible RTL expressions involving both bitwise
     exclusive-or and bitwise negation are @{b}(xor:M X Y)@{ub} and @{b}(not:M
     (xor:M X Y))@{ub}.

   * The sum of three items, one of which is a constant, will only
     appear in the form

          (plus:M (plus:M X Y) CONSTANT)

   * On machines that do not use @{b}cc0@{ub}, @{b}(compare X (const_int 0))@{ub} will be
     converted to X.

   * Equality comparisons of a group of bits (usually a single bit)
     with zero will be written using @{b}zero_extract@{ub} rather than the
     equivalent @{b}and@{ub} or @{b}sign_extract@{ub} operations.


@endnode

@node "Peephole Definitions" "gcc.guide/Peephole Definitions"
@next "Expander Definitions"
@prev "Insn Canonicalizations"
@toc "Machine Desc"

Machine-Specific Peephole Optimizers
====================================

   In addition to instruction patterns the @{b}md@{ub} file may contain
definitions of machine-specific peephole optimizations.

   The combiner does not notice certain peephole optimizations when the
data flow in the program does not suggest that it should try them.  For
example, sometimes two consecutive insns related in purpose can be
combined even though the second one does not appear to use a register
computed in the first one.  A machine-specific peephole optimizer can
detect such opportunities.

   A definition looks like this:

     (define_peephole
       [INSN-PATTERN-1
        INSN-PATTERN-2
        ...]
       "CONDITION"
       "TEMPLATE"
       "OPTIONAL INSN-ATTRIBUTES")

The last string operand may be omitted if you are not using any
machine-specific information in this machine description.  If present,
it must obey the same rules as in a @{b}define_insn@{ub}.

   In this skeleton, INSN-PATTERN-1 and so on are patterns to match
consecutive insns.  The optimization applies to a sequence of insns when
INSN-PATTERN-1 matches the first one, INSN-PATTERN-2 matches the next,
and so on.

   Each of the insns matched by a peephole must also match a
@{b}define_insn@{ub}.  Peepholes are checked only at the last stage just before
code generation, and only optionally.  Therefore, any insn which would
match a peephole but no @{b}define_insn@{ub} will cause a crash in code
generation in an unoptimized compilation, or at various optimization
stages.

   The operands of the insns are matched with @{b}match_operands@{ub},
@{b}match_operator@{ub}, and @{b}match_dup@{ub}, as usual.  What is not usual is that the
operand numbers apply to all the insn patterns in the definition.  So,
you can check for identical operands in two insns by using
@{b}match_operand@{ub} in one insn and @{b}match_dup@{ub} in the other.

   The operand constraints used in @{b}match_operand@{ub} patterns do not have
any direct effect on the applicability of the peephole, but they will
be validated afterward, so make sure your constraints are general enough
to apply whenever the peephole matches.  If the peephole matches but
the constraints are not satisfied, the compiler will crash.

   It is safe to omit constraints in all the operands of the peephole;
or you can write constraints which serve as a double-check on the
criteria previously tested.

   Once a sequence of insns matches the patterns, the CONDITION is
checked.  This is a C expression which makes the final decision whether
to perform the optimization (we do so if the expression is nonzero).  If
CONDITION is omitted (in other words, the string is empty) then the
optimization is applied to every sequence of insns that matches the
patterns.

   The defined peephole optimizations are applied after register
allocation is complete.  Therefore, the peephole definition can check
which operands have ended up in which kinds of registers, just by
looking at the operands.

   The way to refer to the operands in CONDITION is to write
@{b}operands[I]@{ub} for operand number I (as matched by @{b}(match_operand I ...)@{ub}).
Use the variable @{b}insn@{ub} to refer to the last of the insns being matched;
use @{b}prev_active_insn@{ub} to find the preceding insns.

   When optimizing computations with intermediate results, you can use
CONDITION to match only when the intermediate results are not used
elsewhere.  Use the C expression @{b}dead_or_set_p (INSN, OP)@{ub}, where INSN
is the insn in which you expect the value to be used for the last time
(from the value of @{b}insn@{ub}, together with use of @{b}prev_nonnote_insn@{ub}), and
OP is the intermediate value (from @{b}operands[I]@{ub}).

   Applying the optimization means replacing the sequence of insns with
one new insn.  The TEMPLATE controls ultimate output of assembler code
for this combined insn.  It works exactly like the template of a
@{b}define_insn@{ub}.  Operand numbers in this template are the same ones used
in matching the original sequence of insns.

   The result of a defined peephole optimizer does not need to match
any of the insn patterns in the machine description; it does not even
have an opportunity to match them.  The peephole optimizer definition
itself serves as the insn pattern to control how the insn is output.

   Defined peephole optimizers are run as assembler code is being
output, so the insns they produce are never combined or rearranged in
any way.

   Here is an example, taken from the 68000 machine description:

     (define_peephole
       [(set (reg:SI 15) (plus:SI (reg:SI 15) (const_int 4)))
        (set (match_operand:DF 0 "register_operand" "=f")
             (match_operand:DF 1 "register_operand" "ad"))]
       "FP_REG_P (operands[0]) && ! FP_REG_P (operands[1])"
       "*
     {
       rtx xoperands[2];
       xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);
     #ifdef MOTOROLA
       output_asm_insn (\\"move.l %1,(sp)\\", xoperands);
       output_asm_insn (\\"move.l %1,-(sp)\\", operands);
       return \\"fmove.d (sp)+,%0\\";
     #else
       output_asm_insn (\\"movel %1,sp@\\", xoperands);
       output_asm_insn (\\"movel %1,sp@-\\", operands);
       return \\"fmoved sp@+,%0\\";
     #endif
     }
     ")

   The effect of this optimization is to change

     jbsr _foobar
     addql #4,sp
     movel d1,sp@-
     movel d0,sp@-
     fmoved sp@+,fp0

into

     jbsr _foobar
     movel d1,sp@
     movel d0,sp@-
     fmoved sp@+,fp0

   INSN-PATTERN-1 and so on look @{i}almost@{ui} like the second operand of
@{b}define_insn@{ub}.  There is one important difference: the second operand of
@{b}define_insn@{ub} consists of one or more RTX's enclosed in square brackets.
Usually, there is only one: then the same action can be written as an
element of a @{b}define_peephole@{ub}.  But when there are multiple actions in a
@{b}define_insn@{ub}, they are implicitly enclosed in a @{b}parallel@{ub}.  Then you must
explicitly write the @{b}parallel@{ub}, and the square brackets within it, in the
@{b}define_peephole@{ub}.  Thus, if an insn pattern looks like this,

     (define_insn "divmodsi4"
       [(set (match_operand:SI 0 "general_operand" "=d")
             (div:SI (match_operand:SI 1 "general_operand" "0")
                     (match_operand:SI 2 "general_operand" "dmsK")))
        (set (match_operand:SI 3 "general_operand" "=d")
             (mod:SI (match_dup 1) (match_dup 2)))]
       "TARGET_68020"
       "divsl%.l %2,%3:%0")

then the way to mention this insn in a peephole is as follows:

     (define_peephole
       [...
        (parallel
         [(set (match_operand:SI 0 "general_operand" "=d")
               (div:SI (match_operand:SI 1 "general_operand" "0")
                       (match_operand:SI 2 "general_operand" "dmsK")))
          (set (match_operand:SI 3 "general_operand" "=d")
               (mod:SI (match_dup 1) (match_dup 2)))])
        ...]
       ...)


@endnode

@node "Expander Definitions" "gcc.guide/Expander Definitions"
@next "Insn Splitting"
@prev "Peephole Definitions"
@toc "Machine Desc"

Defining RTL Sequences for Code Generation
==========================================

   On some target machines, some standard pattern names for RTL
generation cannot be handled with single insn, but a sequence of RTL
insns can represent them.  For these target machines, you can write a
@{b}define_expand@{ub} to specify how to generate the sequence of RTL.

   A @{b}define_expand@{ub} is an RTL expression that looks almost like a
@{b}define_insn@{ub}; but, unlike the latter, a @{b}define_expand@{ub} is used only for
RTL generation and it can produce more than one RTL insn.

   A @{b}define_expand@{ub} RTX has four operands:

   * The name.  Each @{b}define_expand@{ub} must have a name, since the only use
     for it is to refer to it by name.

   * The RTL template.  This is just like the RTL template for a
     @{b}define_peephole@{ub} in that it is a vector of RTL expressions each
     being one insn.

   * The condition, a string containing a C expression.  This
     expression is used to express how the availability of this pattern
     depends on subclasses of target machine, selected by command-line
     options when GNU CC is run.  This is just like the condition of a
     @{b}define_insn@{ub} that has a standard name.  Therefore, the condition
     (if present) may not depend on the data in the insn being matched,
     but only the target-machine-type flags.  The compiler needs to
     test these conditions during initialization in order to learn
     exactly which named instructions are available in a particular run.

   * The preparation statements, a string containing zero or more C
     statements which are to be executed before RTL code is generated
     from the RTL template.

     Usually these statements prepare temporary registers for use as
     internal operands in the RTL template, but they can also generate
     RTL insns directly by calling routines such as @{b}emit_insn@{ub}, etc.
     Any such insns precede the ones that come from the RTL template.

   Every RTL insn emitted by a @{b}define_expand@{ub} must match some
@{b}define_insn@{ub} in the machine description.  Otherwise, the compiler will
crash when trying to generate code for the insn or trying to optimize
it.

   The RTL template, in addition to controlling generation of RTL insns,
also describes the operands that need to be specified when this pattern
is used.  In particular, it gives a predicate for each operand.

   A true operand, which needs to be specified in order to generate RTL
from the pattern, should be described with a @{b}match_operand@{ub} in its first
occurrence in the RTL template.  This enters information on the
operand's predicate into the tables that record such things.  GNU CC
uses the information to preload the operand into a register if that is
required for valid RTL code.  If the operand is referred to more than
once, subsequent references should use @{b}match_dup@{ub}.

   The RTL template may also refer to internal "operands" which are
temporary registers or labels used only within the sequence made by the
@{b}define_expand@{ub}.  Internal operands are substituted into the RTL template
with @{b}match_dup@{ub}, never with @{b}match_operand@{ub}.  The values of the internal
operands are not passed in as arguments by the compiler when it
requests use of this pattern.  Instead, they are computed within the
pattern, in the preparation statements.  These statements compute the
values and store them into the appropriate elements of @{b}operands@{ub} so that
@{b}match_dup@{ub} can find them.

   There are two special macros defined for use in the preparation
statements: @{b}DONE@{ub} and @{b}FAIL@{ub}.  Use them with a following semicolon, as a
statement.

@{b}DONE@{ub}
     Use the @{b}DONE@{ub} macro to end RTL generation for the pattern.  The
     only RTL insns resulting from the pattern on this occasion will be
     those already emitted by explicit calls to @{b}emit_insn@{ub} within the
     preparation statements; the RTL template will not be generated.

@{b}FAIL@{ub}
     Make the pattern fail on this occasion.  When a pattern fails, it
     means that the pattern was not truly available.  The calling
     routines in the compiler will try other strategies for code
     generation using other patterns.

     Failure is currently supported only for binary (addition,
     multiplication, shifting, etc.) and bitfield (@{b}extv@{ub}, @{b}extzv@{ub}, and
     @{b}insv@{ub}) operations.

   Here is an example, the definition of left-shift for the SPUR chip:

     (define_expand "ashlsi3"
       [(set (match_operand:SI 0 "register_operand" "")
             (ashift:SI

     (match_operand:SI 1 "register_operand" "")
               (match_operand:SI 2 "nonmemory_operand" "")))]
       ""
       "

     {
       if (GET_CODE (operands[2]) != CONST_INT
           || (unsigned) INTVAL (operands[2]) > 3)
         FAIL;
     }")

This example uses @{b}define_expand@{ub} so that it can generate an RTL insn for
shifting when the shift-count is in the supported range of 0 to 3 but
fail in other cases where machine insns aren't available.  When it
fails, the compiler tries another strategy using different patterns
(such as, a library call).

   If the compiler were able to handle nontrivial condition-strings in
patterns with names, then it would be possible to use a @{b}define_insn@{ub} in
that case.  Here is another case (zero-extension on the 68000) which
makes more use of the power of @{b}define_expand@{ub}:

     (define_expand "zero_extendhisi2"
       [(set (match_operand:SI 0 "general_operand" "")
             (const_int 0))
        (set (strict_low_part
               (subreg:HI
                 (match_dup 0)
                 0))
             (match_operand:HI 1 "general_operand" ""))]
       ""
       "operands[1] = make_safe_from (operands[1], operands[0]);")

Here two RTL insns are generated, one to clear the entire output operand
and the other to copy the input operand into its low half.  This
sequence is incorrect if the input operand refers to [the old value of]
the output operand, so the preparation statement makes sure this isn't
so.  The function @{b}make_safe_from@{ub} copies the @{b}operands[1]@{ub} into a
temporary register if it refers to @{b}operands[0]@{ub}.  It does this by
emitting another RTL insn.

   Finally, a third example shows the use of an internal operand.
Zero-extension on the SPUR chip is done by @{b}and@{ub}-ing the result against a
halfword mask.  But this mask cannot be represented by a @{b}const_int@{ub}
because the constant value is too large to be legitimate on this
machine.  So it must be copied into a register with @{b}force_reg@{ub} and then
the register used in the @{b}and@{ub}.

     (define_expand "zero_extendhisi2"
       [(set (match_operand:SI 0 "register_operand" "")
             (and:SI (subreg:SI
                       (match_operand:HI 1 "register_operand" "")
                       0)
                     (match_dup 2)))]
       ""
       "operands[2]
          = force_reg (SImode, GEN_INT (65535)); ")

@{b}   Note:@{ub} If the @{b}define_expand@{ub} is used to serve a standard binary or
unary arithmetic operation or a bitfield operation, then the last insn
it generates must not be a @{b}code_label@{ub}, @{b}barrier@{ub} or @{b}note@{ub}.  It must be an
@{b}insn@{ub}, @{b}jump_insn@{ub} or @{b}call_insn@{ub}.  If you don't need a real insn at the
end, emit an insn to copy the result of the operation into itself.
Such an insn will generate no code, but it can avoid problems in the
compiler.


@endnode

@node "Insn Splitting" "gcc.guide/Insn Splitting"
@next "Insn Attributes"
@prev "Expander Definitions"
@toc "Machine Desc"

Defining How to Split Instructions
==================================

   There are two cases where you should specify how to split a pattern
into multiple insns.  On machines that have instructions requiring delay
slots (see @{"Delay Slots" link "Delay Slots"}) or that have instructions whose output is not
available for multiple cycles (see @{"Function Units" link "Function Units"}), the compiler
phases that optimize these cases need to be able to move insns into
one-instruction delay slots.  However, some insns may generate more
than one machine instruction.  These insns cannot be placed into a
delay slot.

   Often you can rewrite the single insn as a list of individual insns,
each corresponding to one machine instruction.  The disadvantage of
doing so is that it will cause the compilation to be slower and require
more space.  If the resulting insns are too complex, it may also
suppress some optimizations.  The compiler splits the insn if there is a
reason to believe that it might improve instruction or delay slot
scheduling.

   The insn combiner phase also splits putative insns.  If three insns
are merged into one insn with a complex expression that cannot be
matched by some @{b}define_insn@{ub} pattern, the combiner phase attempts to
split the complex pattern into two insns that are recognized.  Usually
it can break the complex pattern into two patterns by splitting out some
subexpression.  However, in some other cases, such as performing an
addition of a large constant in two insns on a RISC machine, the way to
split the addition into two insns is machine-dependent.

   The @{b}define_split@{ub} definition tells the compiler how to split a
complex insn into several simpler insns.  It looks like this:

     (define_split
       [INSN-PATTERN]
       "CONDITION"
       [NEW-INSN-PATTERN-1
        NEW-INSN-PATTERN-2
        ...]
       "PREPARATION STATEMENTS")

   INSN-PATTERN is a pattern that needs to be split and CONDITION is
the final condition to be tested, as in a @{b}define_insn@{ub}.  When an insn
matching INSN-PATTERN and satisfying CONDITION is found, it is replaced
in the insn list with the insns given by NEW-INSN-PATTERN-1,
NEW-INSN-PATTERN-2, etc.

   The PREPARATION STATEMENTS are similar to those statements that are
specified for @{b}define_expand@{ub} (see @{"Expander Definitions" link "Expander Definitions"}) and are
executed before the new RTL is generated to prepare for the generated
code or emit some insns whose pattern is not fixed.  Unlike those in
@{b}define_expand@{ub}, however, these statements must not generate any new
pseudo-registers.  Once reload has completed, they also must not
allocate any space in the stack frame.

   Patterns are matched against INSN-PATTERN in two different
circumstances.  If an insn needs to be split for delay slot scheduling
or insn scheduling, the insn is already known to be valid, which means
that it must have been matched by some @{b}define_insn@{ub} and, if
@{b}reload_completed@{ub} is non-zero, is known to satisfy the constraints of
that @{b}define_insn@{ub}.  In that case, the new insn patterns must also be
insns that are matched by some @{b}define_insn@{ub} and, if @{b}reload_completed@{ub} is
non-zero, must also satisfy the constraints of those definitions.

   As an example of this usage of @{b}define_split@{ub}, consider the following
example from @{b}a29k.md@{ub}, which splits a @{b}sign_extend@{ub} from @{b}HImode@{ub} to @{b}SImode@{ub}
into a pair of shift insns:

     (define_split
       [(set (match_operand:SI 0 "gen_reg_operand" "")
             (sign_extend:SI (match_operand:HI 1 "gen_reg_operand" "")))]
       ""
       [(set (match_dup 0)
             (ashift:SI (match_dup 1)
                        (const_int 16)))
        (set (match_dup 0)
             (ashiftrt:SI (match_dup 0)
                          (const_int 16)))]
       "
     { operands[1] = gen_lowpart (SImode, operands[1]); }")

   When the combiner phase tries to split an insn pattern, it is always
the case that the pattern is @{i}not@{ui} matched by any @{b}define_insn@{ub}.  The
combiner pass first tries to split a single @{b}set@{ub} expression and then the
same @{b}set@{ub} expression inside a @{b}parallel@{ub}, but followed by a @{b}clobber@{ub} of a
pseudo-reg to use as a scratch register.  In these cases, the combiner
expects exactly two new insn patterns to be generated.  It will verify
that these patterns match some @{b}define_insn@{ub} definitions, so you need not
do this test in the @{b}define_split@{ub} (of course, there is no point in
writing a @{b}define_split@{ub} that will never produce insns that match).

   Here is an example of this use of @{b}define_split@{ub}, taken from @{b}rs6000.md@{ub}:

     (define_split
       [(set (match_operand:SI 0 "gen_reg_operand" "")
             (plus:SI (match_operand:SI 1 "gen_reg_operand" "")
                      (match_operand:SI 2 "non_add_cint_operand" "")))]
       ""
       [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 3)))
        (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 4)))]
     "
     {
       int low = INTVAL (operands[2]) & 0xffff;
       int high = (unsigned) INTVAL (operands[2]) >> 16;
     
       if (low & 0x8000)
         high++, low |= 0xffff0000;
     
       operands[3] = GEN_INT (high << 16);
       operands[4] = GEN_INT (low);
     }")

   Here the predicate @{b}non_add_cint_operand@{ub} matches any @{b}const_int@{ub} that
is @{i}not@{ui} a valid operand of a single add insn.  The add with the smaller
displacement is written so that it can be substituted into the address
of a subsequent operation.

   An example that uses a scratch register, from the same file,
generates an equality comparison of a register and a large constant:

     (define_split
       [(set (match_operand:CC 0 "cc_reg_operand" "")
             (compare:CC (match_operand:SI 1 "gen_reg_operand" "")
                         (match_operand:SI 2 "non_short_cint_operand" "")))
        (clobber (match_operand:SI 3 "gen_reg_operand" ""))]
       "find_single_use (operands[0], insn, 0)
        && (GET_CODE (*find_single_use (operands[0], insn, 0)) == EQ
            || GET_CODE (*find_single_use (operands[0], insn, 0)) == NE)"
       [(set (match_dup 3) (xor:SI (match_dup 1) (match_dup 4)))
        (set (match_dup 0) (compare:CC (match_dup 3) (match_dup 5)))]
       "
     {
       /* Get the constant we are comparing against, C, and see what it
          looks like sign-extended to 16 bits.  Then see what constant
          could be XOR'ed with C to get the sign-extended value.  */
     
       int c = INTVAL (operands[2]);
       int sextc = (c << 16) >> 16;
       int xorv = c ^ sextc;
     
       operands[4] = GEN_INT (xorv);
       operands[5] = GEN_INT (sextc);
     }")

   To avoid confusion, don't write a single @{b}define_split@{ub} that accepts
some insns that match some @{b}define_insn@{ub} as well as some insns that
don't.  Instead, write two separate @{b}define_split@{ub} definitions, one for
the insns that are valid and one for the insns that are not valid.


@endnode

@node "Insn Attributes" "gcc.guide/Insn Attributes"
@prev "Insn Splitting"
@toc "Machine Desc"

Instruction Attributes
======================

   In addition to describing the instruction supported by the target
machine, the @{b}md@{ub} file also defines a group of @{i}attributes@{ui} and a set of
values for each.  Every generated insn is assigned a value for each
attribute.  One possible attribute would be the effect that the insn
has on the machine's condition code.  This attribute can then be used
by @{b}NOTICE_UPDATE_CC@{ub} to track the condition codes.


 @{" Defining Attributes " link "Defining Attributes"}  Specifying attributes and their values.
 @{" Expressions        " link "Expressions"}  Valid expressions for attribute values.
 @{" Tagging Insns      " link "Tagging Insns"}  Assigning attribute values to insns.
 @{" Attr Example       " link "Attr Example"}  An example of assigning attributes.
 @{" Insn Lengths       " link "Insn Lengths"}  Computing the length of insns.
 @{" Constant Attributes " link "Constant Attributes"}  Defining attributes that are constant.
 @{" Delay Slots        " link "Delay Slots"}  Defining delay slots required for a machine.
 @{" Function Units     " link "Function Units"}  Specifying information for insn scheduling.


@endnode

@node "Defining Attributes" "gcc.guide/Defining Attributes"
@next "Expressions"
@toc "Insn Attributes"

Defining Attributes and their Values
------------------------------------

   The @{b}define_attr@{ub} expression is used to define each attribute required
by the target machine.  It looks like:

     (define_attr NAME LIST-OF-VALUES DEFAULT)

   NAME is a string specifying the name of the attribute being defined.

   LIST-OF-VALUES is either a string that specifies a comma-separated
list of values that can be assigned to the attribute, or a null string
to indicate that the attribute takes numeric values.

   DEFAULT is an attribute expression that gives the value of this
attribute for insns that match patterns whose definition does not
include an explicit value for this attribute.  See @{"Attr Example" link "Attr Example"}, for
more information on the handling of defaults.  See @{"Constant Attributes" link "Constant Attributes"},
for information on attributes that do not depend on any particular insn.

   For each defined attribute, a number of definitions are written to
the @{b}insn-attr.h@{ub} file.  For cases where an explicit set of values is
specified for an attribute, the following are defined:

   * A @{b}#define@{ub} is written for the symbol @{b}HAVE_ATTR_NAME@{ub}.

   * An enumeral class is defined for @{b}attr_NAME@{ub} with elements of the
     form @{b}UPPER-NAME_UPPER-VALUE@{ub} where the attribute name and value are
     first converted to upper case.

   * A function @{b}get_attr_NAME@{ub} is defined that is passed an insn and
     returns the attribute value for that insn.

   For example, if the following is present in the @{b}md@{ub} file:

     (define_attr "type" "branch,fp,load,store,arith" ...)

the following lines will be written to the file @{b}insn-attr.h@{ub}.

     #define HAVE_ATTR_type
     enum attr_type {TYPE_BRANCH, TYPE_FP, TYPE_LOAD,
                      TYPE_STORE, TYPE_ARITH};
     extern enum attr_type get_attr_type ();

   If the attribute takes numeric values, no @{b}enum@{ub} type will be defined
and the function to obtain the attribute's value will return @{b}int@{ub}.


@endnode

@node "Expressions" "gcc.guide/Expressions"
@next "Tagging Insns"
@prev "Defining Attributes"
@toc "Insn Attributes"

Attribute Expressions
---------------------

   RTL expressions used to define attributes use the codes described
above plus a few specific to attribute definitions, to be discussed
below.  Attribute value expressions must have one of the following
forms:

@{b}(const_int I)@{ub}
     The integer I specifies the value of a numeric attribute.  I must
     be non-negative.

     The value of a numeric attribute can be specified either with a
     @{b}const_int@{ub} or as an integer represented as a string in
     @{b}const_string@{ub}, @{b}eq_attr@{ub} (see below), and @{b}set_attr@{ub} (see
     @{"Tagging Insns" link "Tagging Insns"}) expressions.

@{b}(const_string VALUE)@{ub}
     The string VALUE specifies a constant attribute value.  If VALUE
     is specified as @{b}"*"@{ub}, it means that the default value of the
     attribute is to be used for the insn containing this expression.
     @{b}"*"@{ub} obviously cannot be used in the DEFAULT expression of a
     @{b}define_attr@{ub}.

     If the attribute whose value is being specified is numeric, VALUE
     must be a string containing a non-negative integer (normally
     @{b}const_int@{ub} would be used in this case).  Otherwise, it must contain
     one of the valid values for the attribute.

@{b}(if_then_else TEST TRUE-VALUE FALSE-VALUE)@{ub}
     TEST specifies an attribute test, whose format is defined below.
     The value of this expression is TRUE-VALUE if TEST is true,
     otherwise it is FALSE-VALUE.

@{b}(cond [TEST1 VALUE1 ...] DEFAULT)@{ub}
     The first operand of this expression is a vector containing an even
     number of expressions and consisting of pairs of TEST and VALUE
     expressions.  The value of the @{b}cond@{ub} expression is that of the
     VALUE corresponding to the first true TEST expression.  If none of
     the TEST expressions are true, the value of the @{b}cond@{ub} expression is
     that of the DEFAULT expression.

   TEST expressions can have one of the following forms:

@{b}(const_int I)@{ub}
     This test is true if I is non-zero and false otherwise.

@{b}(not TEST)@{ub}
@{b}(ior TEST1 TEST2)@{ub}
@{b}(and TEST1 TEST2)@{ub}
     These tests are true if the indicated logical function is true.

@{b}(match_operand:M N PRED CONSTRAINTS)@{ub}
     This test is true if operand N of the insn whose attribute value
     is being determined has mode M (this part of the test is ignored
     if M is @{b}VOIDmode@{ub}) and the function specified by the string PRED
     returns a non-zero value when passed operand N and mode M (this
     part of the test is ignored if PRED is the null string).

     The CONSTRAINTS operand is ignored and should be the null string.

@{b}(le ARITH1 ARITH2)@{ub}
@{b}(leu ARITH1 ARITH2)@{ub}
@{b}(lt ARITH1 ARITH2)@{ub}
@{b}(ltu ARITH1 ARITH2)@{ub}
@{b}(gt ARITH1 ARITH2)@{ub}
@{b}(gtu ARITH1 ARITH2)@{ub}
@{b}(ge ARITH1 ARITH2)@{ub}
@{b}(geu ARITH1 ARITH2)@{ub}
@{b}(ne ARITH1 ARITH2)@{ub}
@{b}(eq ARITH1 ARITH2)@{ub}
     These tests are true if the indicated comparison of the two
     arithmetic expressions is true.  Arithmetic expressions are formed
     with @{b}plus@{ub}, @{b}minus@{ub}, @{b}mult@{ub}, @{b}div@{ub}, @{b}mod@{ub}, @{b}abs@{ub}, @{b}neg@{ub}, @{b}and@{ub}, @{b}ior@{ub}, @{b}xor@{ub}, @{b}not@{ub},
     @{b}ashift@{ub}, @{b}lshiftrt@{ub}, and @{b}ashiftrt@{ub} expressions.

@{b}     const_int@{ub} and @{b}symbol_ref@{ub} are always valid terms (see
     @{"Insn Lengths" link "Insn Lengths"},for additional forms).  @{b}symbol_ref@{ub} is a string
     denoting a C expression that yields an @{b}int@{ub} when evaluated by the
     @{b}get_attr_...@{ub} routine.  It should normally be a global variable.

@{b}(eq_attr NAME VALUE)@{ub}
     NAME is a string specifying the name of an attribute.

     VALUE is a string that is either a valid value for attribute NAME,
     a comma-separated list of values, or @{b}!@{ub} followed by a value or
     list.  If VALUE does not begin with a @{b}!@{ub}, this test is true if the
     value of the NAME attribute of the current insn is in the list
     specified by VALUE.  If VALUE begins with a @{b}!@{ub}, this test is true
     if the attribute's value is @{i}not@{ui} in the specified list.

     For example,

          (eq_attr "type" "load,store")

     is equivalent to

          (ior (eq_attr "type" "load") (eq_attr "type" "store"))

     If NAME specifies an attribute of @{b}alternative@{ub}, it refers to the
     value of the compiler variable @{b}which_alternative@{ub} (see
     @{"Output Statement" link "Output Statement"}) and the values must be small integers.  For
     example,

          (eq_attr "alternative" "2,3")

     is equivalent to

          (ior (eq (symbol_ref "which_alternative") (const_int 2))
               (eq (symbol_ref "which_alternative") (const_int 3)))

     Note that, for most attributes, an @{b}eq_attr@{ub} test is simplified in
     cases where the value of the attribute being tested is known for
     all insns matching a particular pattern.  This is by far the most
     common case.

@{b}(attr_flag NAME)@{ub}
     The value of an @{b}attr_flag@{ub} expression is true if the flag specified
     by NAME is true for the @{b}insn@{ub} currently being scheduled.

     NAME is a string specifying one of a fixed set of flags to test.
     Test the flags @{b}forward@{ub} and @{b}backward@{ub} to determine the direction of
     a conditional branch.  Test the flags @{b}very_likely@{ub}, @{b}likely@{ub},
     @{b}very_unlikely@{ub}, and @{b}unlikely@{ub} to determine if a conditional branch
     is expected to be taken.

     If the @{b}very_likely@{ub} flag is true, then the @{b}likely@{ub} flag is also
     true.  Likewise for the @{b}very_unlikely@{ub} and @{b}unlikely@{ub} flags.

     This example describes a conditional branch delay slot which can
     be nullified for forward branches that are taken (annul-true) or
     for backward branches which are not taken (annul-false).

          (define_delay (eq_attr "type" "cbranch")
            [(eq_attr "in_branch_delay" "true")
             (and (eq_attr "in_branch_delay" "true")
                  (attr_flag "forward"))
             (and (eq_attr "in_branch_delay" "true")
                  (attr_flag "backward"))])

     The @{b}forward@{ub} and @{b}backward@{ub} flags are false if the current @{b}insn@{ub} being
     scheduled is not a conditional branch.

     The @{b}very_likely@{ub} and @{b}likely@{ub} flags are true if the @{b}insn@{ub} being
     scheduled is not a conditional branch.  The @{b}very_unlikely@{ub} and
     @{b}unlikely@{ub} flags are false if the @{b}insn@{ub} being scheduled is not a
     conditional branch.

@{b}     attr_flag@{ub} is only used during delay slot scheduling and has no
     meaning to other passes of the compiler.


@endnode

@node "Tagging Insns" "gcc.guide/Tagging Insns"
@next "Attr Example"
@prev "Expressions"
@toc "Insn Attributes"

Assigning Attribute Values to Insns
-----------------------------------

   The value assigned to an attribute of an insn is primarily
determined by which pattern is matched by that insn (or which
@{b}define_peephole@{ub} generated it).  Every @{b}define_insn@{ub} and @{b}define_peephole@{ub}
can have an optional last argument to specify the values of attributes
for matching insns.  The value of any attribute not specified in a
particular insn is set to the default value for that attribute, as
specified in its @{b}define_attr@{ub}.  Extensive use of default values for
attributes permits the specification of the values for only one or two
attributes in the definition of most insn patterns, as seen in the
example in the next section.

   The optional last argument of @{b}define_insn@{ub} and @{b}define_peephole@{ub} is a
vector of expressions, each of which defines the value for a single
attribute.  The most general way of assigning an attribute's value is
to use a @{b}set@{ub} expression whose first operand is an @{b}attr@{ub} expression
giving the name of the attribute being set.  The second operand of the
@{b}set@{ub} is an attribute expression (see @{"Expressions" link "Expressions"}) giving the value of
the attribute.

   When the attribute value depends on the @{b}alternative@{ub} attribute (i.e.,
which is the applicable alternative in the constraint of the insn), the
@{b}set_attr_alternative@{ub} expression can be used.  It allows the
specification of a vector of attribute expressions, one for each
alternative.

   When the generality of arbitrary attribute expressions is not
required, the simpler @{b}set_attr@{ub} expression can be used, which allows
specifying a string giving either a single attribute value or a list of
attribute values, one for each alternative.

   The form of each of the above specifications is shown below.  In
each case, NAME is a string specifying the attribute to be set.

@{b}(set_attr NAME VALUE-STRING)@{ub}
     VALUE-STRING is either a string giving the desired attribute value,
     or a string containing a comma-separated list giving the values for
     succeeding alternatives.  The number of elements must match the
     number of alternatives in the constraint of the insn pattern.

     Note that it may be useful to specify @{b}*@{ub} for some alternative, in
     which case the attribute will assume its default value for insns
     matching that alternative.

@{b}(set_attr_alternative NAME [VALUE1 VALUE2 ...])@{ub}
     Depending on the alternative of the insn, the value will be one of
     the specified values.  This is a shorthand for using a @{b}cond@{ub} with
     tests on the @{b}alternative@{ub} attribute.

@{b}(set (attr NAME) VALUE)@{ub}
     The first operand of this @{b}set@{ub} must be the special RTL expression
     @{b}attr@{ub}, whose sole operand is a string giving the name of the
     attribute being set.  VALUE is the value of the attribute.

   The following shows three different ways of representing the same
attribute value specification:

     (set_attr "type" "load,store,arith")
     
     (set_attr_alternative "type"
                           [(const_string "load") (const_string "store")
                            (const_string "arith")])
     
     (set (attr "type")
          (cond [(eq_attr "alternative" "1") (const_string "load")
                 (eq_attr "alternative" "2") (const_string "store")]
                (const_string "arith")))

   The @{b}define_asm_attributes@{ub} expression provides a mechanism to specify
the attributes assigned to insns produced from an @{b}asm@{ub} statement.  It
has the form:

     (define_asm_attributes [ATTR-SETS])

where ATTR-SETS is specified the same as for both the @{b}define_insn@{ub} and
the @{b}define_peephole@{ub} expressions.

   These values will typically be the "worst case" attribute values.
For example, they might indicate that the condition code will be
clobbered.

   A specification for a @{b}length@{ub} attribute is handled specially.  The
way to compute the length of an @{b}asm@{ub} insn is to multiply the length
specified in the expression @{b}define_asm_attributes@{ub} by the number of
machine instructions specified in the @{b}asm@{ub} statement, determined by
counting the number of semicolons and newlines in the string.
Therefore, the value of the @{b}length@{ub} attribute specified in a
@{b}define_asm_attributes@{ub} should be the maximum possible length of a single
machine instruction.


@endnode

@node "Attr Example" "gcc.guide/Attr Example"
@next "Insn Lengths"
@prev "Tagging Insns"
@toc "Insn Attributes"

Example of Attribute Specifications
-----------------------------------

   The judicious use of defaulting is important in the efficient use of
insn attributes.  Typically, insns are divided into @{i}types@{ui} and an
attribute, customarily called @{b}type@{ub}, is used to represent this value.
This attribute is normally used only to define the default value for
other attributes.  An example will clarify this usage.

   Assume we have a RISC machine with a condition code and in which only
full-word operations are performed in registers.  Let us assume that we
can divide all insns into loads, stores, (integer) arithmetic
operations, floating point operations, and branches.

   Here we will concern ourselves with determining the effect of an
insn on the condition code and will limit ourselves to the following
possible effects:  The condition code can be set unpredictably
(clobbered), not be changed, be set to agree with the results of the
operation, or only changed if the item previously set into the
condition code has been modified.

   Here is part of a sample @{b}md@{ub} file for such a machine:

     (define_attr "type" "load,store,arith,fp,branch" (const_string "arith"))
     
     (define_attr "cc" "clobber,unchanged,set,change0"
                  (cond [(eq_attr "type" "load")
                             (const_string "change0")
                         (eq_attr "type" "store,branch")
                             (const_string "unchanged")
                         (eq_attr "type" "arith")
                             (if_then_else (match_operand:SI 0 "" "")
                                           (const_string "set")
                                           (const_string "clobber"))]
                        (const_string "clobber")))
     
     (define_insn ""
       [(set (match_operand:SI 0 "general_operand" "=r,r,m")
             (match_operand:SI 1 "general_operand" "r,m,r"))]
       ""
       "@
        move %0,%1
        load %0,%1
        store %0,%1"
       [(set_attr "type" "arith,load,store")])

   Note that we assume in the above example that arithmetic operations
performed on quantities smaller than a machine word clobber the
condition code since they will set the condition code to a value
corresponding to the full-word result.


@endnode

@node "Insn Lengths" "gcc.guide/Insn Lengths"
@next "Constant Attributes"
@prev "Attr Example"
@toc "Insn Attributes"

Computing the Length of an Insn
-------------------------------

   For many machines, multiple types of branch instructions are
provided, each for different length branch displacements.  In most
cases, the assembler will choose the correct instruction to use.
However, when the assembler cannot do so, GCC can when a special
attribute, the @{b}length@{ub} attribute, is defined.  This attribute must be
defined to have numeric values by specifying a null string in its
@{b}define_attr@{ub}.

   In the case of the @{b}length@{ub} attribute, two additional forms of
arithmetic terms are allowed in test expressions:

@{b}(match_dup N)@{ub}
     This refers to the address of operand N of the current insn, which
     must be a @{b}label_ref@{ub}.

@{b}(pc)@{ub}
     This refers to the address of the @{i}current@{ui} insn.  It might have
     been more consistent with other usage to make this the address of
     the @{i}next@{ui} insn but this would be confusing because the length of the
     current insn is to be computed.

   For normal insns, the length will be determined by value of the
@{b}length@{ub} attribute.  In the case of @{b}addr_vec@{ub} and @{b}addr_diff_vec@{ub} insn
patterns, the length is computed as the number of vectors multiplied by
the size of each vector.

   Lengths are measured in addressable storage units (bytes).

   The following macros can be used to refine the length computation:

@{b}FIRST_INSN_ADDRESS@{ub}
     When the @{b}length@{ub} insn attribute is used, this macro specifies the
     value to be assigned to the address of the first insn in a
     function.  If not specified, 0 is used.

@{b}ADJUST_INSN_LENGTH (INSN, LENGTH)@{ub}
     If defined, modifies the length assigned to instruction INSN as a
     function of the context in which it is used.  LENGTH is an lvalue
     that contains the initially computed length of the insn and should
     be updated with the correct length of the insn.

     This macro will normally not be required.  A case in which it is
     required is the ROMP.  On this machine, the size of an @{b}addr_vec@{ub}
     insn must be increased by two to compensate for the fact that
     alignment may be required.

   The routine that returns @{b}get_attr_length@{ub} (the value of the @{b}length@{ub}
attribute) can be used by the output routine to determine the form of
the branch instruction to be written, as the example below illustrates.

   As an example of the specification of variable-length branches,
consider the IBM 360.  If we adopt the convention that a register will
be set to the starting address of a function, we can jump to labels
within 4k of the start using a four-byte instruction.  Otherwise, we
need a six-byte sequence to load the address from memory and then
branch to it.

   On such a machine, a pattern for a branch instruction might be
specified as follows:

     (define_insn "jump"
       [(set (pc)
             (label_ref (match_operand 0 "" "")))]
       ""
       "*
     {
        return (get_attr_length (insn) == 4
                ? \\"b %l0\\" : \\"l r15,=a(%l0); br r15\\");
     }"
       [(set (attr "length") (if_then_else (lt (match_dup 0) (const_int 4096))
                                           (const_int 4)
                                           (const_int 6)))])


@endnode

@node "Constant Attributes" "gcc.guide/Constant Attributes"
@next "Delay Slots"
@prev "Insn Lengths"
@toc "Insn Attributes"

Constant Attributes
-------------------

   A special form of @{b}define_attr@{ub}, where the expression for the default
value is a @{b}const@{ub} expression, indicates an attribute that is constant
for a given run of the compiler.  Constant attributes may be used to
specify which variety of processor is used.  For example,

     (define_attr "cpu" "m88100,m88110,m88000"
      (const
       (cond [(symbol_ref "TARGET_88100") (const_string "m88100")
              (symbol_ref "TARGET_88110") (const_string "m88110")]
             (const_string "m88000"))))
     
     (define_attr "memory" "fast,slow"
      (const
       (if_then_else (symbol_ref "TARGET_FAST_MEM")
                     (const_string "fast")
                     (const_string "slow"))))

   The routine generated for constant attributes has no parameters as it
does not depend on any particular insn.  RTL expressions used to define
the value of a constant attribute may use the @{b}symbol_ref@{ub} form, but may
not use either the @{b}match_operand@{ub} form or @{b}eq_attr@{ub} forms involving insn
attributes.


@endnode

@node "Delay Slots" "gcc.guide/Delay Slots"
@next "Function Units"
@prev "Constant Attributes"
@toc "Insn Attributes"

Delay Slot Scheduling
---------------------

   The insn attribute mechanism can be used to specify the requirements
for delay slots, if any, on a target machine.  An instruction is said to
require a @{i}delay slot@{ui} if some instructions that are physically after the
instruction are executed as if they were located before it.  Classic
examples are branch and call instructions, which often execute the
following instruction before the branch or call is performed.

   On some machines, conditional branch instructions can optionally
@{i}annul@{ui} instructions in the delay slot.  This means that the instruction
will not be executed for certain branch outcomes.  Both instructions
that annul if the branch is true and instructions that annul if the
branch is false are supported.

   Delay slot scheduling differs from instruction scheduling in that
determining whether an instruction needs a delay slot is dependent only
on the type of instruction being generated, not on data flow between the
instructions.  See the next section for a discussion of data-dependent
instruction scheduling.

   The requirement of an insn needing one or more delay slots is
indicated via the @{b}define_delay@{ub} expression.  It has the following form:

     (define_delay TEST
                   [DELAY-1 ANNUL-TRUE-1 ANNUL-FALSE-1
                    DELAY-2 ANNUL-TRUE-2 ANNUL-FALSE-2
                    ...])

   TEST is an attribute test that indicates whether this @{b}define_delay@{ub}
applies to a particular insn.  If so, the number of required delay
slots is determined by the length of the vector specified as the second
argument.  An insn placed in delay slot N must satisfy attribute test
DELAY-N.  ANNUL-TRUE-N is an attribute test that specifies which insns
may be annulled if the branch is true.  Similarly, ANNUL-FALSE-N
specifies which insns in the delay slot may be annulled if the branch
is false.  If annulling is not supported for that delay slot, @{b}(nil)@{ub}
should be coded.

   For example, in the common case where branch and call insns require
a single delay slot, which may contain any insn other than a branch or
call, the following would be placed in the @{b}md@{ub} file:

     (define_delay (eq_attr "type" "branch,call")
                   [(eq_attr "type" "!branch,call") (nil) (nil)])

   Multiple @{b}define_delay@{ub} expressions may be specified.  In this case,
each such expression specifies different delay slot requirements and
there must be no insn for which tests in two @{b}define_delay@{ub} expressions
are both true.

   For example, if we have a machine that requires one delay slot for
branches but two for calls,  no delay slot can contain a branch or call
insn, and any valid insn in the delay slot for the branch can be
annulled if the branch is true, we might represent this as follows:

     (define_delay (eq_attr "type" "branch")
        [(eq_attr "type" "!branch,call")
         (eq_attr "type" "!branch,call")
         (nil)])
     
     (define_delay (eq_attr "type" "call")
                   [(eq_attr "type" "!branch,call") (nil) (nil)
                    (eq_attr "type" "!branch,call") (nil) (nil)])


@endnode

@node "Function Units" "gcc.guide/Function Units"
@prev "Delay Slots"
@toc "Insn Attributes"

Specifying Function Units
-------------------------

   On most RISC machines, there are instructions whose results are not
available for a specific number of cycles.  Common cases are
instructions that load data from memory.  On many machines, a pipeline
stall will result if the data is referenced too soon after the load
instruction.

   In addition, many newer microprocessors have multiple function
units, usually one for integer and one for floating point, and often
will incur pipeline stalls when a result that is needed is not yet
ready.

   The descriptions in this section allow the specification of how much
time must elapse between the execution of an instruction and the time
when its result is used.  It also allows specification of when the
execution of an instruction will delay execution of similar instructions
due to function unit conflicts.

   For the purposes of the specifications in this section, a machine is
divided into @{i}function units@{ui}, each of which execute a specific class of
instructions in first-in-first-out order.  Function units that accept
one instruction each cycle and allow a result to be used in the
succeeding instruction (usually via forwarding) need not be specified.
Classic RISC microprocessors will normally have a single function unit,
which we can call @{b}memory@{ub}.  The newer "superscalar" processors will
often have function units for floating point operations, usually at
least a floating point adder and multiplier.

   Each usage of a function units by a class of insns is specified with
a @{b}define_function_unit@{ub} expression, which looks like this:

     (define_function_unit NAME MULTIPLICITY SIMULTANEITY
                           TEST READY-DELAY ISSUE-DELAY
                          [CONFLICT-LIST])

   NAME is a string giving the name of the function unit.

   MULTIPLICITY is an integer specifying the number of identical units
in the processor.  If more than one unit is specified, they will be
scheduled independently.  Only truly independent units should be
counted; a pipelined unit should be specified as a single unit.  (The
only common example of a machine that has multiple function units for a
single instruction class that are truly independent and not pipelined
are the two multiply and two increment units of the CDC 6600.)

   SIMULTANEITY specifies the maximum number of insns that can be
executing in each instance of the function unit simultaneously or zero
if the unit is pipelined and has no limit.

   All @{b}define_function_unit@{ub} definitions referring to function unit NAME
must have the same name and values for MULTIPLICITY and SIMULTANEITY.

   TEST is an attribute test that selects the insns we are describing
in this definition.  Note that an insn may use more than one function
unit and a function unit may be specified in more than one
@{b}define_function_unit@{ub}.

   READY-DELAY is an integer that specifies the number of cycles after
which the result of the instruction can be used without introducing any
stalls.

   ISSUE-DELAY is an integer that specifies the number of cycles after
the instruction matching the TEST expression begins using this unit
until a subsequent instruction can begin.  A cost of N indicates an N-1
cycle delay.  A subsequent instruction may also be delayed if an
earlier instruction has a longer READY-DELAY value.  This blocking
effect is computed using the SIMULTANEITY, READY-DELAY, ISSUE-DELAY,
and CONFLICT-LIST terms.  For a normal non-pipelined function unit,
SIMULTANEITY is one, the unit is taken to block for the READY-DELAY
cycles of the executing insn, and smaller values of ISSUE-DELAY are
ignored.

   CONFLICT-LIST is an optional list giving detailed conflict costs for
this unit.  If specified, it is a list of condition test expressions to
be applied to insns chosen to execute in NAME following the particular
insn matching TEST that is already executing in NAME.  For each insn in
the list, ISSUE-DELAY specifies the conflict cost; for insns not in the
list, the cost is zero.  If not specified, CONFLICT-LIST defaults to
all instructions that use the function unit.

   Typical uses of this vector are where a floating point function unit
can pipeline either single- or double-precision operations, but not
both, or where a memory unit can pipeline loads, but not stores, etc.

   As an example, consider a classic RISC machine where the result of a
load instruction is not available for two cycles (a single "delay"
instruction is required) and where only one load instruction can be
executed simultaneously.  This would be specified as:

     (define_function_unit "memory" 1 1 (eq_attr "type" "load") 2 0)

   For the case of a floating point function unit that can pipeline
either single or double precision, but not both, the following could be
specified:

     (define_function_unit
        "fp" 1 0 (eq_attr "type" "sp_fp") 4 4 [(eq_attr "type" "dp_fp")])
     (define_function_unit
        "fp" 1 0 (eq_attr "type" "dp_fp") 4 4 [(eq_attr "type" "sp_fp")])

@{b}   Note:@{ub} The scheduler attempts to avoid function unit conflicts and
uses all the specifications in the @{b}define_function_unit@{ub} expression.  It
has recently come to our attention that these specifications may not
allow modeling of some of the newer "superscalar" processors that have
insns using multiple pipelined units.  These insns will cause a
potential conflict for the second unit used during their execution and
there is no way of representing that conflict.  We welcome any examples
of how function unit conflicts work in such processors and suggestions
for their representation.


@endnode

@node "Target Macros" "gcc.guide/Target Macros"
@next "Config"
@prev "Machine Desc"
@toc "Main"

Target Description Macros
*************************

   In addition to the file @{b}MACHINE.md@{ub}, a machine description includes a
C header file conventionally given the name @{b}MACHINE.h@{ub}.  This header
file defines numerous macros that convey the information about the
target machine that does not fit into the scheme of the @{b}.md@{ub} file.  The
file @{b}tm.h@{ub} should be a link to @{b}MACHINE.h@{ub}.  The header file @{b}config.h@{ub}
includes @{b}tm.h@{ub} and most compiler source files include @{b}config.h@{ub}.


 @{" Driver             " link "Driver"}  Controlling how the driver runs the compilation passes.
 @{" Run-time Target    " link "Run-time Target"}  Defining @{b}-m@{ub} options like @{b}-m68000@{ub} and @{b}-m68020@{ub}.
 @{" Storage Layout     " link "Storage Layout"}  Defining sizes and alignments of data.
 @{" Type Layout        " link "Type Layout"}  Defining sizes and properties of basic user data types.
 @{" Registers          " link "Registers"}  Naming and describing the hardware registers.
 @{" Register Classes   " link "Register Classes"}  Defining the classes of hardware registers.
 @{" Stack and Calling  " link "Stack and Calling"}  Defining which way the stack grows and by how much.
 @{" Varargs            " link "Varargs"}  Defining the varargs macros.
 @{" Trampolines        " link "Trampolines"}  Code set up at run time to enter a nested function.
 @{" Library Calls      " link "Library Calls"}  Controlling how library routines are implicitly called.
 @{" Addressing Modes   " link "Addressing Modes"}  Defining addressing modes valid for memory operands.
 @{" Condition Code     " link "Condition Code"}  Defining how insns update the condition code.
 @{" Costs              " link "Costs"}  Defining relative costs of different operations.
 @{" Sections           " link "Sections"}  Dividing storage into text, data, and other sections.
 @{" PIC                " link "PIC"}  Macros for position independent code.
 @{" Assembler Format   " link "Assembler Format"}  Defining how to write insns and pseudo-ops to output.
 @{" Debugging Info     " link "Debugging Info"}  Defining the format of debugging output.
 @{" Cross-compilation  " link "Cross-compilation"}  Handling floating point for cross-compilers.
 @{" Misc               " link "Misc"}  Everything else.


@endnode

@node "Driver" "gcc.guide/Driver"
@next "Run-time Target"
@toc "Target Macros"

Controlling the Compilation Driver, @{b}gcc@{ub}
=======================================

   You can control the compilation driver.

@{b}SWITCH_TAKES_ARG (CHAR)@{ub}
     A C expression which determines whether the option @{b}-CHAR@{ub} takes
     arguments.  The value should be the number of arguments that
     option takes-zero, for many options.

     By default, this macro is defined as @{b}DEFAULT_SWITCH_TAKES_ARG@{ub},
     which handles the standard options properly.  You need not define
     @{b}SWITCH_TAKES_ARG@{ub} unless you wish to add additional options which
     take arguments.  Any redefinition should call
     @{b}DEFAULT_SWITCH_TAKES_ARG@{ub} and then check for additional options.

@{b}WORD_SWITCH_TAKES_ARG (NAME)@{ub}
     A C expression which determines whether the option @{b}-NAME@{ub} takes
     arguments.  The value should be the number of arguments that
     option takes-zero, for many options.  This macro rather than
     @{b}SWITCH_TAKES_ARG@{ub} is used for multi-character option names.

     By default, this macro is defined as
     @{b}DEFAULT_WORD_SWITCH_TAKES_ARG@{ub}, which handles the standard options
     properly.  You need not define @{b}WORD_SWITCH_TAKES_ARG@{ub} unless you
     wish to add additional options which take arguments.  Any
     redefinition should call @{b}DEFAULT_WORD_SWITCH_TAKES_ARG@{ub} and then
     check for additional options.

@{b}SWITCH_CURTAILS_COMPILATION (CHAR)@{ub}
     A C expression which determines whether the option @{b}-CHAR@{ub} stops
     compilation before the generation of an executable.  The value is
     boolean, non-zero if the option does stop an executable from being
     generated, zero otherwise.

     By default, this macro is defined as
     @{b}DEFAULT_SWITCH_CURTAILS_COMPILATION@{ub}, which handles the standard
     options properly.  You need not define @{b}SWITCH_CURTAILS_COMPILATION@{ub}
     unless you wish to add additional options which affect the
     generation of an executable.  Any redefinition should call
     @{b}DEFAULT_SWITCH_CURTAILS_COMPILATION@{ub} and then check for additional
     options.

@{b}SWITCHES_NEED_SPACES@{ub}
     A string-valued C expression which enumerates the options for which
     the linker needs a space between the option and its argument.

     If this macro is not defined, the default value is @{b}""@{ub}.

@{b}CPP_SPEC@{ub}
     A C string constant that tells the GNU CC driver program options to
     pass to CPP.  It can also specify how to translate options you
     give to GNU CC into options for GNU CC to pass to the CPP.

     Do not define this macro if it does not need to do anything.

@{b}NO_BUILTIN_SIZE_TYPE@{ub}
     If this macro is defined, the preprocessor will not define the
     builtin macro @{b}__SIZE_TYPE__@{ub}.  The macro @{b}__SIZE_TYPE__@{ub} must then be
     defined by @{b}CPP_SPEC@{ub} instead.

     This should be defined if @{b}SIZE_TYPE@{ub} depends on target dependent
     flags which are not accessible to the preprocessor.  Otherwise, it
     should not be defined.

@{b}NO_BUILTIN_PTRDIFF_TYPE@{ub}
     If this macro is defined, the preprocessor will not define the
     builtin macro @{b}__PTRDIFF_TYPE__@{ub}.  The macro @{b}__PTRDIFF_TYPE__@{ub} must
     then be defined by @{b}CPP_SPEC@{ub} instead.

     This should be defined if @{b}PTRDIFF_TYPE@{ub} depends on target dependent
     flags which are not accessible to the preprocessor.  Otherwise, it
     should not be defined.

@{b}SIGNED_CHAR_SPEC@{ub}
     A C string constant that tells the GNU CC driver program options to
     pass to CPP.  By default, this macro is defined to pass the option
     @{b}-D__CHAR_UNSIGNED__@{ub} to CPP if @{b}char@{ub} will be treated as @{b}unsigned
     char@{ub} by @{b}cc1@{ub}.

     Do not define this macro unless you need to override the default
     definition.

@{b}CC1_SPEC@{ub}
     A C string constant that tells the GNU CC driver program options to
     pass to @{b}cc1@{ub}.  It can also specify how to translate options you
     give to GNU CC into options for GNU CC to pass to the @{b}cc1@{ub}.

     Do not define this macro if it does not need to do anything.

@{b}CC1PLUS_SPEC@{ub}
     A C string constant that tells the GNU CC driver program options to
     pass to @{b}cc1plus@{ub}.  It can also specify how to translate options you
     give to GNU CC into options for GNU CC to pass to the @{b}cc1plus@{ub}.

     Do not define this macro if it does not need to do anything.

@{b}ASM_SPEC@{ub}
     A C string constant that tells the GNU CC driver program options to
     pass to the assembler.  It can also specify how to translate
     options you give to GNU CC into options for GNU CC to pass to the
     assembler.  See the file @{b}sun3.h@{ub} for an example of this.

     Do not define this macro if it does not need to do anything.

@{b}ASM_FINAL_SPEC@{ub}
     A C string constant that tells the GNU CC driver program how to
     run any programs which cleanup after the normal assembler.
     Normally, this is not needed.  See the file @{b}mips.h@{ub} for an example
     of this.

     Do not define this macro if it does not need to do anything.

@{b}LINK_SPEC@{ub}
     A C string constant that tells the GNU CC driver program options to
     pass to the linker.  It can also specify how to translate options
     you give to GNU CC into options for GNU CC to pass to the linker.

     Do not define this macro if it does not need to do anything.

@{b}LIB_SPEC@{ub}
     Another C string constant used much like @{b}LINK_SPEC@{ub}.  The difference
     between the two is that @{b}LIB_SPEC@{ub} is used at the end of the command
     given to the linker.

     If this macro is not defined, a default is provided that loads the
     standard C library from the usual place.  See @{b}gcc.c@{ub}.

@{b}LIBGCC_SPEC@{ub}
     Another C string constant that tells the GNU CC driver program how
     and when to place a reference to @{b}libgcc.a@{ub} into the linker command
     line.  This constant is placed both before and after the value of
     @{b}LIB_SPEC@{ub}.

     If this macro is not defined, the GNU CC driver provides a default
     that passes the string @{b}-lgcc@{ub} to the linker unless the @{b}-shared@{ub}
     option is specified.

@{b}STARTFILE_SPEC@{ub}
     Another C string constant used much like @{b}LINK_SPEC@{ub}.  The
     difference between the two is that @{b}STARTFILE_SPEC@{ub} is used at the
     very beginning of the command given to the linker.

     If this macro is not defined, a default is provided that loads the
     standard C startup file from the usual place.  See @{b}gcc.c@{ub}.

@{b}ENDFILE_SPEC@{ub}
     Another C string constant used much like @{b}LINK_SPEC@{ub}.  The
     difference between the two is that @{b}ENDFILE_SPEC@{ub} is used at the
     very end of the command given to the linker.

     Do not define this macro if it does not need to do anything.

@{b}EXTRA_SPECS@{ub}
     Define this macro to provide additional specifications to put in
     the @{b}specs@{ub} file that can be used in various specifications like
     @{b}CC1_SPEC@{ub}.

     The definition should be an initializer for an array of structures,
     containing a string constant, that defines the specification name,
     and a string constant that provides the specification.

     Do not define this macro if it does not need to do anything.

@{b}     EXTRA_SPECS@{ub} is useful when an architecture contains several
     related targets, which have various @{b}..._SPECS@{ub} which are similar to
     each other, and the maintainer would like one central place to keep
     these definitions.

     For example, the PowerPC System V.4 targets use @{b}EXTRA_SPECS@{ub} to
     define either @{b}_CALL_SYSV@{ub} when the System V calling sequence is
     used or @{b}_CALL_AIX@{ub} when the older AIX-based calling sequence is
     used.

     The @{b}config/rs6000/rs6000.h@{ub} target file defines:

          #define EXTRA_SPECS \\
            { "cpp_sysv_default", CPP_SYSV_DEFAULT },
          
          #define CPP_SYS_DEFAULT ""

     The @{b}config/rs6000/sysv.h@{ub} target file defines:
          #undef CPP_SPEC
          #define CPP_SPEC \\
          "%{posix: -D_POSIX_SOURCE } \\
          %{mcall-sysv: -D_CALL_SYSV } %{mcall-aix: -D_CALL_AIX } \\
          %{!mcall-sysv: %{!mcall-aix: %(cpp_sysv_default) }} \\
          %{msoft-float: -D_SOFT_FLOAT} %{mcpu=403: -D_SOFT_FLOAT}"
          
          #undef CPP_SYSV_DEFAULT
          #define CPP_SYSV_DEFAULT "-D_CALL_SYSV"

     while the @{b}config/rs6000/eabiaix.h@{ub} target file defines
     @{b}CPP_SYSV_DEFAULT@{ub} as:

          #undef CPP_SYSV_DEFAULT
          #define CPP_SYSV_DEFAULT "-D_CALL_AIX"

@{b}LINK_LIBGCC_SPECIAL@{ub}
     Define this macro if the driver program should find the library
     @{b}libgcc.a@{ub} itself and should not pass @{b}-L@{ub} options to the linker.  If
     you do not define this macro, the driver program will pass the
     argument @{b}-lgcc@{ub} to tell the linker to do the search and will pass
     @{b}-L@{ub} options to it.

@{b}LINK_LIBGCC_SPECIAL_1@{ub}
     Define this macro if the driver program should find the library
     @{b}libgcc.a@{ub}.  If you do not define this macro, the driver program
     will pass the argument @{b}-lgcc@{ub} to tell the linker to do the search.
     This macro is similar to @{b}LINK_LIBGCC_SPECIAL@{ub}, except that it does
     not affect @{b}-L@{ub} options.

@{b}LINK_COMMAND_SPEC@{ub}
     A C string constant giving the complete command line need to
     execute the linker.  When you do this, you will need to update
     your port each time a change is made to the link command line
     within @{b}gcc.c@{ub}.  Therefore, define this macro only if you need to
     completely redefine the command line for invoking the linker and
     there is no other way to accomplish the effect you need.

@{b}MULTILIB_DEFAULTS@{ub}
     Define this macro as a C expression for the initializer of an
     array of string to tell the driver program which options are
     defaults for this target and thus do not need to be handled
     specially when using @{b}MULTILIB_OPTIONS@{ub}.

     Do not define this macro if @{b}MULTILIB_OPTIONS@{ub} is not defined in the
     target makefile fragment or if none of the options listed in
     @{b}MULTILIB_OPTIONS@{ub} are set by default.  See @{"Target Fragment" link "Target Fragment"}.

@{b}RELATIVE_PREFIX_NOT_LINKDIR@{ub}
     Define this macro to tell @{b}gcc@{ub} that it should only translate a @{b}-B@{ub}
     prefix into a @{b}-L@{ub} linker option if the prefix indicates an absolute
     file name.

@{b}STANDARD_EXEC_PREFIX@{ub}
     Define this macro as a C string constant if you wish to override
     the standard choice of @{b}/usr/local/lib/gcc-lib/@{ub} as the default
     prefix to try when searching for the executable files of the
     compiler.

@{b}MD_EXEC_PREFIX@{ub}
     If defined, this macro is an additional prefix to try after
     @{b}STANDARD_EXEC_PREFIX@{ub}.  @{b}MD_EXEC_PREFIX@{ub} is not searched when the @{b}-b@{ub}
     option is used, or the compiler is built as a cross compiler.

@{b}STANDARD_STARTFILE_PREFIX@{ub}
     Define this macro as a C string constant if you wish to override
     the standard choice of @{b}/usr/local/lib/@{ub} as the default prefix to
     try when searching for startup files such as @{b}crt0.o@{ub}.

@{b}MD_STARTFILE_PREFIX@{ub}
     If defined, this macro supplies an additional prefix to try after
     the standard prefixes.  @{b}MD_EXEC_PREFIX@{ub} is not searched when the @{b}-b@{ub}
     option is used, or when the compiler is built as a cross compiler.

@{b}MD_STARTFILE_PREFIX_1@{ub}
     If defined, this macro supplies yet another prefix to try after the
     standard prefixes.  It is not searched when the @{b}-b@{ub} option is used,
     or when the compiler is built as a cross compiler.

@{b}INIT_ENVIRONMENT@{ub}
     Define this macro as a C string constant if you wish to set
     environment variables for programs called by the driver, such as
     the assembler and loader.  The driver passes the value of this
     macro to @{b}putenv@{ub} to initialize the necessary environment variables.

@{b}LOCAL_INCLUDE_DIR@{ub}
     Define this macro as a C string constant if you wish to override
     the standard choice of @{b}/usr/local/include@{ub} as the default prefix to
     try when searching for local header files.  @{b}LOCAL_INCLUDE_DIR@{ub}
     comes before @{b}SYSTEM_INCLUDE_DIR@{ub} in the search order.

     Cross compilers do not use this macro and do not search either
     @{b}/usr/local/include@{ub} or its replacement.

@{b}SYSTEM_INCLUDE_DIR@{ub}
     Define this macro as a C string constant if you wish to specify a
     system-specific directory to search for header files before the
     standard directory.  @{b}SYSTEM_INCLUDE_DIR@{ub} comes before
     @{b}STANDARD_INCLUDE_DIR@{ub} in the search order.

     Cross compilers do not use this macro and do not search the
     directory specified.

@{b}STANDARD_INCLUDE_DIR@{ub}
     Define this macro as a C string constant if you wish to override
     the standard choice of @{b}/usr/include@{ub} as the default prefix to try
     when searching for header files.

     Cross compilers do not use this macro and do not search either
     @{b}/usr/include@{ub} or its replacement.

@{b}STANDARD_INCLUDE_COMPONENT@{ub}
     The "component" corresponding to @{b}STANDARD_INCLUDE_DIR@{ub}.  See
     @{b}INCLUDE_DEFAULTS@{ub}, below, for the description of components.  If
     you do not define this macro, no component is used.

@{b}INCLUDE_DEFAULTS@{ub}
     Define this macro if you wish to override the entire default
     search path for include files.  For a native compiler, the default
     search path usually consists of @{b}GCC_INCLUDE_DIR@{ub}, @{b}LOCAL_INCLUDE_DIR@{ub},
     @{b}SYSTEM_INCLUDE_DIR@{ub}, @{b}GPLUSPLUS_INCLUDE_DIR@{ub}, and
     @{b}STANDARD_INCLUDE_DIR@{ub}.  In addition, @{b}GPLUSPLUS_INCLUDE_DIR@{ub} and
     @{b}GCC_INCLUDE_DIR@{ub} are defined automatically by @{b}Makefile@{ub}, and specify
     private search areas for GCC.  The directory @{b}GPLUSPLUS_INCLUDE_DIR@{ub}
     is used only for C++ programs.

     The definition should be an initializer for an array of structures.
     Each array element should have four elements: the directory name (a
     string constant), the component name, and flag for C++-only
     directories, and a flag showing that the includes in the directory
     don't need to be wrapped in @{b}extern @{b}C@{ub}@{ub} when compiling C++.  Mark the
     end of the array with a null element.

     The component name denotes what GNU package the include file is
     part of, if any, in all upper-case letters.  For example, it might
     be @{b}GCC@{ub} or @{b}BINUTILS@{ub}.  If the package is part of the a
     vendor-supplied operating system, code the component name as @{b}0@{ub}.

     For example, here is the definition used for VAX/VMS:

          #define INCLUDE_DEFAULTS \\
          {                                       \\
            { "GNU_GXX_INCLUDE:", "G++", 1, 1},   \\
            { "GNU_CC_INCLUDE:", "GCC", 0, 0},    \\
            { "SYS$SYSROOT:[SYSLIB.]", 0, 0, 0},  \\
            { ".", 0, 0, 0},                      \\
            { 0, 0, 0, 0}                         \\
          }

   Here is the order of prefixes tried for exec files:

  1. Any prefixes specified by the user with @{b}-B@{ub}.

  2. The environment variable @{b}GCC_EXEC_PREFIX@{ub}, if any.

  3. The directories specified by the environment variable
     @{b}COMPILER_PATH@{ub}.

  4. The macro @{b}STANDARD_EXEC_PREFIX@{ub}.

  5. @{b}/usr/lib/gcc/@{ub}.

  6. The macro @{b}MD_EXEC_PREFIX@{ub}, if any.

   Here is the order of prefixes tried for startfiles:

  1. Any prefixes specified by the user with @{b}-B@{ub}.

  2. The environment variable @{b}GCC_EXEC_PREFIX@{ub}, if any.

  3. The directories specified by the environment variable @{b}LIBRARY_PATH@{ub}
     (native only, cross compilers do not use this).

  4. The macro @{b}STANDARD_EXEC_PREFIX@{ub}.

  5. @{b}/usr/lib/gcc/@{ub}.

  6. The macro @{b}MD_EXEC_PREFIX@{ub}, if any.

  7. The macro @{b}MD_STARTFILE_PREFIX@{ub}, if any.

  8. The macro @{b}STANDARD_STARTFILE_PREFIX@{ub}.

  9. @{b}/lib/@{ub}.

 10. @{b}/usr/lib/@{ub}.


@endnode

@node "Run-time Target" "gcc.guide/Run-time Target"
@next "Storage Layout"
@prev "Driver"
@toc "Target Macros"

Run-time Target Specification
=============================

   Here are run-time target specifications.

@{b}CPP_PREDEFINES@{ub}
     Define this to be a string constant containing @{b}-D@{ub} options to
     define the predefined macros that identify this machine and system.
     These macros will be predefined unless the @{b}-ansi@{ub} option is
     specified.

     In addition, a parallel set of macros are predefined, whose names
     are made by appending @{b}__@{ub} at the beginning and at the end.  These
     @{b}__@{ub} macros are permitted by the ANSI standard, so they are
     predefined regardless of whether @{b}-ansi@{ub} is specified.

     For example, on the Sun, one can use the following value:

          "-Dmc68000 -Dsun -Dunix"

     The result is to define the macros @{b}__mc68000__@{ub}, @{b}__sun__@{ub} and
     @{b}__unix__@{ub} unconditionally, and the macros @{b}mc68000@{ub}, @{b}sun@{ub} and @{b}unix@{ub}
     provided @{b}-ansi@{ub} is not specified.

@{b}extern int target_flags;@{ub}
     This declaration should be present.

@{b}TARGET_...@{ub}
     This series of macros is to allow compiler command arguments to
     enable or disable the use of optional features of the target
     machine.  For example, one machine description serves both the
     68000 and the 68020; a command argument tells the compiler whether
     it should use 68020-only instructions or not.  This command
     argument works by means of a macro @{b}TARGET_68020@{ub} that tests a bit in
     @{b}target_flags@{ub}.

     Define a macro @{b}TARGET_FEATURENAME@{ub} for each such option.  Its
     definition should test a bit in @{b}target_flags@{ub}; for example:

          #define TARGET_68020 (target_flags & 1)

     One place where these macros are used is in the
     condition-expressions of instruction patterns.  Note how
     @{b}TARGET_68020@{ub} appears frequently in the 68000 machine description
     file, @{b}m68k.md@{ub}.  Another place they are used is in the definitions
     of the other macros in the @{b}MACHINE.h@{ub} file.

@{b}TARGET_SWITCHES@{ub}
     This macro defines names of command options to set and clear bits
     in @{b}target_flags@{ub}.  Its definition is an initializer with a
     subgrouping for each command option.

     Each subgrouping contains a string constant, that defines the
     option name, a number, which contains the bits to set in
     @{b}target_flags@{ub}, and a second string which is the description
     displayed by -help.  If the number is negative then the bits
     specified by the number are cleared instead of being set.  If the
     description string is present but empty, then no help information
     will be displayed for that option, but it will not count as an
     undocumented option.  The actual option name is made by appending
     @{b}-m@{ub} to the specified name.

     One of the subgroupings should have a null string.  The number in
     this grouping is the default value for @{b}target_flags@{ub}.  Any target
     options act starting with that value.

     Here is an example which defines @{b}-m68000@{ub} and @{b}-m68020@{ub} with opposite
     meanings, and picks the latter as the default:

          #define TARGET_SWITCHES \\
            { { "68020", 1, "" },      \\
              { "68000", -1, "Compile for the 68000" }, \\
              { "", 1, "" }}

@{b}TARGET_OPTIONS@{ub}
     This macro is similar to @{b}TARGET_SWITCHES@{ub} but defines names of
     command options that have values.  Its definition is an
     initializer with a subgrouping for each command option.

     Each subgrouping contains a string constant, that defines the
     fixed part of the option name, the address of a variable, and a
     description string.  The variable, type @{b}char *@{ub}, is set to the
     variable part of the given option if the fixed part matches.  The
     actual option name is made by appending @{b}-m@{ub} to the specified name.

     Here is an example which defines @{b}-mshort-data-NUMBER@{ub}.  If the
     given option is @{b}-mshort-data-512@{ub}, the variable @{b}m88k_short_data@{ub}
     will be set to the string @{b}"512"@{ub}.

          extern char *m88k_short_data;
          #define TARGET_OPTIONS \\
           { { "short-data-", &m88k_short_data, "Specify the size of the short data section" } }

@{b}TARGET_VERSION@{ub}
     This macro is a C statement to print on @{b}stderr@{ub} a string describing
     the particular machine description choice.  Every machine
     description should define @{b}TARGET_VERSION@{ub}.  For example:

          #ifdef MOTOROLA
          #define TARGET_VERSION \\
            fprintf (stderr, " (68k, Motorola syntax)");
          #else
          #define TARGET_VERSION \\
            fprintf (stderr, " (68k, MIT syntax)");
          #endif

@{b}OVERRIDE_OPTIONS@{ub}
     Sometimes certain combinations of command options do not make
     sense on a particular target machine.  You can define a macro
     @{b}OVERRIDE_OPTIONS@{ub} to take account of this.  This macro, if defined,
     is executed once just after all the command options have been
     parsed.

     Don't use this macro to turn on various extra optimizations for
     @{b}-O@{ub}.  That is what @{b}OPTIMIZATION_OPTIONS@{ub} is for.

@{b}OPTIMIZATION_OPTIONS (LEVEL, SIZE)@{ub}
     Some machines may desire to change what optimizations are
     performed for various optimization levels.   This macro, if
     defined, is executed once just after the optimization level is
     determined and before the remainder of the command options have
     been parsed.  Values set in this macro are used as the default
     values for the other command line options.

     LEVEL is the optimization level specified; 2 if @{b}-O2@{ub} is specified,
     1 if @{b}-O@{ub} is specified, and 0 if neither is specified.

     SIZE is non-zero if @{b}-Os@{ub} is specified and zero otherwise.

     You should not use this macro to change options that are not
     machine-specific.  These should uniformly selected by the same
     optimization level on all supported machines.  Use this macro to
     enable machine-specific optimizations.

@{b}     Do not examine @{b}write_symbols@{ub} in this macro!@{ub} The debugging options
     are not supposed to alter the generated code.

@{b}CAN_DEBUG_WITHOUT_FP@{ub}
     Define this macro if debugging can be performed even without a
     frame pointer.  If this macro is defined, GNU CC will turn on the
     @{b}-fomit-frame-pointer@{ub} option whenever @{b}-O@{ub} is specified.


@endnode

@node "Storage Layout" "gcc.guide/Storage Layout"
@next "Type Layout"
@prev "Run-time Target"
@toc "Target Macros"

Storage Layout
==============

   Note that the definitions of the macros in this table which are
sizes or alignments measured in bits do not need to be constant.  They
can be C expressions that refer to static variables, such as the
@{b}target_flags@{ub}.  See @{"Run-time Target" link "Run-time Target"}.

@{b}BITS_BIG_ENDIAN@{ub}
     Define this macro to have the value 1 if the most significant bit
     in a byte has the lowest number; otherwise define it to have the
     value zero.  This means that bit-field instructions count from the
     most significant bit.  If the machine has no bit-field
     instructions, then this must still be defined, but it doesn't
     matter which value it is defined to.  This macro need not be a
     constant.

     This macro does not affect the way structure fields are packed into
     bytes or words; that is controlled by @{b}BYTES_BIG_ENDIAN@{ub}.

@{b}BYTES_BIG_ENDIAN@{ub}
     Define this macro to have the value 1 if the most significant byte
     in a word has the lowest number.  This macro need not be a
     constant.

@{b}WORDS_BIG_ENDIAN@{ub}
     Define this macro to have the value 1 if, in a multiword object,
     the most significant word has the lowest number.  This applies to
     both memory locations and registers; GNU CC fundamentally assumes
     that the order of words in memory is the same as the order in
     registers.  This macro need not be a constant.

@{b}LIBGCC2_WORDS_BIG_ENDIAN@{ub}
     Define this macro if WORDS_BIG_ENDIAN is not constant.  This must
     be a constant value with the same meaning as WORDS_BIG_ENDIAN,
     which will be used only when compiling libgcc2.c.  Typically the
     value will be set based on preprocessor defines.

@{b}FLOAT_WORDS_BIG_ENDIAN@{ub}
     Define this macro to have the value 1 if @{b}DFmode@{ub}, @{b}XFmode@{ub} or @{b}TFmode@{ub}
     floating point numbers are stored in memory with the word
     containing the sign bit at the lowest address; otherwise define it
     to have the value 0.  This macro need not be a constant.

     You need not define this macro if the ordering is the same as for
     multi-word integers.

@{b}BITS_PER_UNIT@{ub}
     Define this macro to be the number of bits in an addressable
     storage unit (byte); normally 8.

@{b}BITS_PER_WORD@{ub}
     Number of bits in a word; normally 32.

@{b}MAX_BITS_PER_WORD@{ub}
     Maximum number of bits in a word.  If this is undefined, the
     default is @{b}BITS_PER_WORD@{ub}.  Otherwise, it is the constant value
     that is the largest value that @{b}BITS_PER_WORD@{ub} can have at run-time.

@{b}UNITS_PER_WORD@{ub}
     Number of storage units in a word; normally 4.

@{b}MIN_UNITS_PER_WORD@{ub}
     Minimum number of units in a word.  If this is undefined, the
     default is @{b}UNITS_PER_WORD@{ub}.  Otherwise, it is the constant value
     that is the smallest value that @{b}UNITS_PER_WORD@{ub} can have at
     run-time.

@{b}POINTER_SIZE@{ub}
     Width of a pointer, in bits.  You must specify a value no wider
     than the width of @{b}Pmode@{ub}.  If it is not equal to the width of @{b}Pmode@{ub},
     you must define @{b}POINTERS_EXTEND_UNSIGNED@{ub}.

@{b}POINTERS_EXTEND_UNSIGNED@{ub}
     A C expression whose value is nonzero if pointers that need to be
     extended from being @{b}POINTER_SIZE@{ub} bits wide to @{b}Pmode@{ub} are to be
     zero-extended and zero if they are to be sign-extended.

     You need not define this macro if the @{b}POINTER_SIZE@{ub} is equal to the
     width of @{b}Pmode@{ub}.

@{b}PROMOTE_MODE (M, UNSIGNEDP, TYPE)@{ub}
     A macro to update M and UNSIGNEDP when an object whose type is
     TYPE and which has the specified mode and signedness is to be
     stored in a register.  This macro is only called when TYPE is a
     scalar type.

     On most RISC machines, which only have operations that operate on
     a full register, define this macro to set M to @{b}word_mode@{ub} if M is
     an integer mode narrower than @{b}BITS_PER_WORD@{ub}.  In most cases, only
     integer modes should be widened because wider-precision
     floating-point operations are usually more expensive than their
     narrower counterparts.

     For most machines, the macro definition does not change UNSIGNEDP.
     However, some machines, have instructions that preferentially
     handle either signed or unsigned quantities of certain modes.  For
     example, on the DEC Alpha, 32-bit loads from memory and 32-bit add
     instructions sign-extend the result to 64 bits.  On such machines,
     set UNSIGNEDP according to which kind of extension is more
     efficient.

     Do not define this macro if it would never modify M.

@{b}PROMOTE_FUNCTION_ARGS@{ub}
     Define this macro if the promotion described by @{b}PROMOTE_MODE@{ub}
     should also be done for outgoing function arguments.

@{b}PROMOTE_FUNCTION_RETURN@{ub}
     Define this macro if the promotion described by @{b}PROMOTE_MODE@{ub}
     should also be done for the return value of functions.

     If this macro is defined, @{b}FUNCTION_VALUE@{ub} must perform the same
     promotions done by @{b}PROMOTE_MODE@{ub}.

@{b}PROMOTE_FOR_CALL_ONLY@{ub}
     Define this macro if the promotion described by @{b}PROMOTE_MODE@{ub}
     should @{i}only@{ui} be performed for outgoing function arguments or
     function return values, as specified by @{b}PROMOTE_FUNCTION_ARGS@{ub} and
     @{b}PROMOTE_FUNCTION_RETURN@{ub}, respectively.

@{b}PARM_BOUNDARY@{ub}
     Normal alignment required for function parameters on the stack, in
     bits.  All stack parameters receive at least this much alignment
     regardless of data type.  On most machines, this is the same as the
     size of an integer.

@{b}STACK_BOUNDARY@{ub}
     Define this macro if you wish to preserve a certain alignment for
     the stack pointer.  The definition is a C expression for the
     desired alignment (measured in bits).

     If @{b}PUSH_ROUNDING@{ub} is not defined, the stack will always be aligned
     to the specified boundary.  If @{b}PUSH_ROUNDING@{ub} is defined and
     specifies a less strict alignment than @{b}STACK_BOUNDARY@{ub}, the stack
     may be momentarily unaligned while pushing arguments.

@{b}FUNCTION_BOUNDARY@{ub}
     Alignment required for a function entry point, in bits.

@{b}BIGGEST_ALIGNMENT@{ub}
     Biggest alignment that any data type can require on this machine,
     in bits.

@{b}MINIMUM_ATOMIC_ALIGNMENT@{ub}
     If defined, the smallest alignment, in bits, that can be given to
     an object that can be referenced in one operation, without
     disturbing any nearby object.  Normally, this is @{b}BITS_PER_UNIT@{ub},
     but may be larger on machines that don't have byte or half-word
     store operations.

@{b}BIGGEST_FIELD_ALIGNMENT@{ub}
     Biggest alignment that any structure field can require on this
     machine, in bits.  If defined, this overrides @{b}BIGGEST_ALIGNMENT@{ub} for
     structure fields only.

@{b}ADJUST_FIELD_ALIGN (FIELD, COMPUTED)@{ub}
     An expression for the alignment of a structure field FIELD if the
     alignment computed in the usual way is COMPUTED.  GNU CC uses this
     value instead of the value in @{b}BIGGEST_ALIGNMENT@{ub} or
     @{b}BIGGEST_FIELD_ALIGNMENT@{ub}, if defined, for structure fields only.

@{b}MAX_OFILE_ALIGNMENT@{ub}
     Biggest alignment supported by the object file format of this
     machine.  Use this macro to limit the alignment which can be
     specified using the @{b}__attribute__ ((aligned (N)))@{ub} construct.  If
     not defined, the default value is @{b}BIGGEST_ALIGNMENT@{ub}.

@{b}DATA_ALIGNMENT (TYPE, BASIC-ALIGN)@{ub}
     If defined, a C expression to compute the alignment for a
     variables in the static store.  TYPE is the data type, and
     BASIC-ALIGN is the alignment that the object would ordinarily
     have.  The value of this macro is used instead of that alignment
     to align the object.

     If this macro is not defined, then BASIC-ALIGN is used.

     One use of this macro is to increase alignment of medium-size data
     to make it all fit in fewer cache lines.  Another is to cause
     character arrays to be word-aligned so that @{b}strcpy@{ub} calls that copy
     constants to character arrays can be done inline.

@{b}CONSTANT_ALIGNMENT (CONSTANT, BASIC-ALIGN)@{ub}
     If defined, a C expression to compute the alignment given to a
     constant that is being placed in memory.  CONSTANT is the constant
     and BASIC-ALIGN is the alignment that the object would ordinarily
     have.  The value of this macro is used instead of that alignment to
     align the object.

     If this macro is not defined, then BASIC-ALIGN is used.

     The typical use of this macro is to increase alignment for string
     constants to be word aligned so that @{b}strcpy@{ub} calls that copy
     constants can be done inline.

@{b}EMPTY_FIELD_BOUNDARY@{ub}
     Alignment in bits to be given to a structure bit field that
     follows an empty field such as @{b}int : 0;@{ub}.

     Note that @{b}PCC_BITFIELD_TYPE_MATTERS@{ub} also affects the alignment
     that results from an empty field.

@{b}STRUCTURE_SIZE_BOUNDARY@{ub}
     Number of bits which any structure or union's size must be a
     multiple of.  Each structure or union's size is rounded up to a
     multiple of this.

     If you do not define this macro, the default is the same as
     @{b}BITS_PER_UNIT@{ub}.

@{b}STRICT_ALIGNMENT@{ub}
     Define this macro to be the value 1 if instructions will fail to
     work if given data not on the nominal alignment.  If instructions
     will merely go slower in that case, define this macro as 0.

@{b}PCC_BITFIELD_TYPE_MATTERS@{ub}
     Define this if you wish to imitate the way many other C compilers
     handle alignment of bitfields and the structures that contain them.

     The behavior is that the type written for a bitfield (@{b}int@{ub}, @{b}short@{ub},
     or other integer type) imposes an alignment for the entire
     structure, as if the structure really did contain an ordinary
     field of that type.  In addition, the bitfield is placed within the
     structure so that it would fit within such a field, not crossing a
     boundary for it.

     Thus, on most machines, a bitfield whose type is written as @{b}int@{ub}
     would not cross a four-byte boundary, and would force four-byte
     alignment for the whole structure.  (The alignment used may not be
     four bytes; it is controlled by the other alignment parameters.)

     If the macro is defined, its definition should be a C expression;
     a nonzero value for the expression enables this behavior.

     Note that if this macro is not defined, or its value is zero, some
     bitfields may cross more than one alignment boundary.  The
     compiler can support such references if there are @{b}insv@{ub}, @{b}extv@{ub}, and
     @{b}extzv@{ub} insns that can directly reference memory.

     The other known way of making bitfields work is to define
     @{b}STRUCTURE_SIZE_BOUNDARY@{ub} as large as @{b}BIGGEST_ALIGNMENT@{ub}.  Then every
     structure can be accessed with fullwords.

     Unless the machine has bitfield instructions or you define
     @{b}STRUCTURE_SIZE_BOUNDARY@{ub} that way, you must define
     @{b}PCC_BITFIELD_TYPE_MATTERS@{ub} to have a nonzero value.

     If your aim is to make GNU CC use the same conventions for laying
     out bitfields as are used by another compiler, here is how to
     investigate what the other compiler does.  Compile and run this
     program:

          struct foo1
          {
            char x;
            char :0;
            char y;
          };
          
          struct foo2
          {
            char x;
            int :0;
            char y;
          };
          
          main ()
          {
            printf ("Size of foo1 is %d\\n",
                    sizeof (struct foo1));
            printf ("Size of foo2 is %d\\n",
                    sizeof (struct foo2));
            exit (0);
          }

     If this prints 2 and 5, then the compiler's behavior is what you
     would get from @{b}PCC_BITFIELD_TYPE_MATTERS@{ub}.

@{b}BITFIELD_NBYTES_LIMITED@{ub}
     Like PCC_BITFIELD_TYPE_MATTERS except that its effect is limited to
     aligning a bitfield within the structure.

@{b}ROUND_TYPE_SIZE (STRUCT, SIZE, ALIGN)@{ub}
     Define this macro as an expression for the overall size of a
     structure (given by STRUCT as a tree node) when the size computed
     from the fields is SIZE and the alignment is ALIGN.

     The default is to round SIZE up to a multiple of ALIGN.

@{b}ROUND_TYPE_ALIGN (STRUCT, COMPUTED, SPECIFIED)@{ub}
     Define this macro as an expression for the alignment of a structure
     (given by STRUCT as a tree node) if the alignment computed in the
     usual way is COMPUTED and the alignment explicitly specified was
     SPECIFIED.

     The default is to use SPECIFIED if it is larger; otherwise, use
     the smaller of COMPUTED and @{b}BIGGEST_ALIGNMENT@{ub}

@{b}MAX_FIXED_MODE_SIZE@{ub}
     An integer expression for the size in bits of the largest integer
     machine mode that should actually be used.  All integer machine
     modes of this size or smaller can be used for structures and
     unions with the appropriate sizes.  If this macro is undefined,
     @{b}GET_MODE_BITSIZE (DImode)@{ub} is assumed.

@{b}STACK_SAVEAREA_MODE (SAVE_LEVEL)@{ub}
     If defined, an expression of type @{b}enum machine_mode@{ub} that specifies
     the mode of the save area operand of a @{b}save_stack_LEVEL@{ub} named
     pattern (see @{"Standard Names" link "Standard Names"}).  SAVE_LEVEL is one of @{b}SAVE_BLOCK@{ub},
     @{b}SAVE_FUNCTION@{ub}, or @{b}SAVE_NONLOCAL@{ub} and selects which of the three
     named patterns is having its mode specified.

     You need not define this macro if it always returns @{b}Pmode@{ub}.  You
     would most commonly define this macro if the @{b}save_stack_LEVEL@{ub}
     patterns need to support both a 32- and a 64-bit mode.

@{b}STACK_SIZE_MODE@{ub}
     If defined, an expression of type @{b}enum machine_mode@{ub} that specifies
     the mode of the size increment operand of an @{b}allocate_stack@{ub} named
     pattern (see @{"Standard Names" link "Standard Names"}).

     You need not define this macro if it always returns @{b}word_mode@{ub}.
     You would most commonly define this macro if the @{b}allocate_stack@{ub}
     pattern needs to support both a 32- and a 64-bit mode.

@{b}CHECK_FLOAT_VALUE (MODE, VALUE, OVERFLOW)@{ub}
     A C statement to validate the value VALUE (of type @{b}double@{ub}) for
     mode MODE.  This means that you check whether VALUE fits within
     the possible range of values for mode MODE on this target machine.
     The mode MODE is always a mode of class @{b}MODE_FLOAT@{ub}.  OVERFLOW is
     nonzero if the value is already known to be out of range.

     If VALUE is not valid or if OVERFLOW is nonzero, you should set
     OVERFLOW to 1 and then assign some valid value to VALUE.  Allowing
     an invalid value to go through the compiler can produce incorrect
     assembler code which may even cause Unix assemblers to crash.

     This macro need not be defined if there is no work for it to do.

@{b}TARGET_FLOAT_FORMAT@{ub}
     A code distinguishing the floating point format of the target
     machine.  There are three defined values:

    @{b}IEEE_FLOAT_FORMAT@{ub}
          This code indicates IEEE floating point.  It is the default;
          there is no need to define this macro when the format is IEEE.

    @{b}VAX_FLOAT_FORMAT@{ub}
          This code indicates the peculiar format used on the Vax.

    @{b}UNKNOWN_FLOAT_FORMAT@{ub}
          This code indicates any other format.

     The value of this macro is compared with @{b}HOST_FLOAT_FORMAT@{ub} (see
     @{"Config" link "Config"}) to determine whether the target machine has the same
     format as the host machine.  If any other formats are actually in
     use on supported machines, new codes should be defined for them.

     The ordering of the component words of floating point values
     stored in memory is controlled by @{b}FLOAT_WORDS_BIG_ENDIAN@{ub} for the
     target machine and @{b}HOST_FLOAT_WORDS_BIG_ENDIAN@{ub} for the host.

@{b}DEFAULT_VTABLE_THUNKS@{ub}
     GNU CC supports two ways of implementing C++ vtables:  traditional
     or with so-called "thunks".  The flag @{b}-fvtable-thunk@{ub} chooses
     between them.  Define this macro to be a C expression for the
     default value of that flag.  If @{b}DEFAULT_VTABLE_THUNKS@{ub} is 0, GNU CC
     uses the traditional implementation by default.  The "thunk"
     implementation is more efficient (especially if you have provided
     an implementation of @{b}ASM_OUTPUT_MI_THUNK@{ub}, see @{"Function Entry" link "Function Entry"}),
     but is not binary compatible with code compiled using the
     traditional implementation.  If you are writing a new ports,
     define @{b}DEFAULT_VTABLE_THUNKS@{ub} to 1.

     If you do not define this macro, the default for @{b}-fvtable-thunk@{ub} is
     0.


@endnode

@node "Type Layout" "gcc.guide/Type Layout"
@next "Registers"
@prev "Storage Layout"
@toc "Target Macros"

Layout of Source Language Data Types
====================================

   These macros define the sizes and other characteristics of the
standard basic data types used in programs being compiled.  Unlike the
macros in the previous section, these apply to specific features of C
and related languages, rather than to fundamental aspects of storage
layout.

@{b}INT_TYPE_SIZE@{ub}
     A C expression for the size in bits of the type @{b}int@{ub} on the target
     machine.  If you don't define this, the default is one word.

@{b}MAX_INT_TYPE_SIZE@{ub}
     Maximum number for the size in bits of the type @{b}int@{ub} on the target
     machine.  If this is undefined, the default is @{b}INT_TYPE_SIZE@{ub}.
     Otherwise, it is the constant value that is the largest value that
     @{b}INT_TYPE_SIZE@{ub} can have at run-time.  This is used in @{b}cpp@{ub}.

@{b}SHORT_TYPE_SIZE@{ub}
     A C expression for the size in bits of the type @{b}short@{ub} on the
     target machine.  If you don't define this, the default is half a
     word.  (If this would be less than one storage unit, it is rounded
     up to one unit.)

@{b}LONG_TYPE_SIZE@{ub}
     A C expression for the size in bits of the type @{b}long@{ub} on the target
     machine.  If you don't define this, the default is one word.

@{b}MAX_LONG_TYPE_SIZE@{ub}
     Maximum number for the size in bits of the type @{b}long@{ub} on the target
     machine.  If this is undefined, the default is @{b}LONG_TYPE_SIZE@{ub}.
     Otherwise, it is the constant value that is the largest value that
     @{b}LONG_TYPE_SIZE@{ub} can have at run-time.  This is used in @{b}cpp@{ub}.

@{b}LONG_LONG_TYPE_SIZE@{ub}
     A C expression for the size in bits of the type @{b}long long@{ub} on the
     target machine.  If you don't define this, the default is two
     words.  If you want to support GNU Ada on your machine, the value
     of macro must be at least 64.

@{b}CHAR_TYPE_SIZE@{ub}
     A C expression for the size in bits of the type @{b}char@{ub} on the target
     machine.  If you don't define this, the default is one quarter of
     a word.  (If this would be less than one storage unit, it is
     rounded up to one unit.)

@{b}MAX_CHAR_TYPE_SIZE@{ub}
     Maximum number for the size in bits of the type @{b}char@{ub} on the target
     machine.  If this is undefined, the default is @{b}CHAR_TYPE_SIZE@{ub}.
     Otherwise, it is the constant value that is the largest value that
     @{b}CHAR_TYPE_SIZE@{ub} can have at run-time.  This is used in @{b}cpp@{ub}.

@{b}FLOAT_TYPE_SIZE@{ub}
     A C expression for the size in bits of the type @{b}float@{ub} on the
     target machine.  If you don't define this, the default is one word.

@{b}DOUBLE_TYPE_SIZE@{ub}
     A C expression for the size in bits of the type @{b}double@{ub} on the
     target machine.  If you don't define this, the default is two
     words.

@{b}LONG_DOUBLE_TYPE_SIZE@{ub}
     A C expression for the size in bits of the type @{b}long double@{ub} on the
     target machine.  If you don't define this, the default is two
     words.

@{b}WIDEST_HARDWARE_FP_SIZE@{ub}
     A C expression for the size in bits of the widest floating-point
     format supported by the hardware.  If you define this macro, you
     must specify a value less than or equal to the value of
     @{b}LONG_DOUBLE_TYPE_SIZE@{ub}.  If you do not define this macro, the value
     of @{b}LONG_DOUBLE_TYPE_SIZE@{ub} is the default.

@{b}DEFAULT_SIGNED_CHAR@{ub}
     An expression whose value is 1 or 0, according to whether the type
     @{b}char@{ub} should be signed or unsigned by default.  The user can always
     override this default with the options @{b}-fsigned-char@{ub} and
     @{b}-funsigned-char@{ub}.

@{b}DEFAULT_SHORT_ENUMS@{ub}
     A C expression to determine whether to give an @{b}enum@{ub} type only as
     many bytes as it takes to represent the range of possible values
     of that type.  A nonzero value means to do that; a zero value
     means all @{b}enum@{ub} types should be allocated like @{b}int@{ub}.

     If you don't define the macro, the default is 0.

@{b}SIZE_TYPE@{ub}
     A C expression for a string describing the name of the data type
     to use for size values.  The typedef name @{b}size_t@{ub} is defined using
     the contents of the string.

     The string can contain more than one keyword.  If so, separate
     them with spaces, and write first any length keyword, then
     @{b}unsigned@{ub} if appropriate, and finally @{b}int@{ub}.  The string must exactly
     match one of the data type names defined in the function
     @{b}init_decl_processing@{ub} in the file @{b}c-decl.c@{ub}.  You may not omit @{b}int@{ub}
     or change the order--that would cause the compiler to crash on
     startup.

     If you don't define this macro, the default is @{b}"long unsigned int"@{ub}.

@{b}PTRDIFF_TYPE@{ub}
     A C expression for a string describing the name of the data type
     to use for the result of subtracting two pointers.  The typedef
     name @{b}ptrdiff_t@{ub} is defined using the contents of the string.  See
     @{b}SIZE_TYPE@{ub} above for more information.

     If you don't define this macro, the default is @{b}"long int"@{ub}.

@{b}WCHAR_TYPE@{ub}
     A C expression for a string describing the name of the data type
     to use for wide characters.  The typedef name @{b}wchar_t@{ub} is defined
     using the contents of the string.  See @{b}SIZE_TYPE@{ub} above for more
     information.

     If you don't define this macro, the default is @{b}"int"@{ub}.

@{b}WCHAR_TYPE_SIZE@{ub}
     A C expression for the size in bits of the data type for wide
     characters.  This is used in @{b}cpp@{ub}, which cannot make use of
     @{b}WCHAR_TYPE@{ub}.

@{b}MAX_WCHAR_TYPE_SIZE@{ub}
     Maximum number for the size in bits of the data type for wide
     characters.  If this is undefined, the default is @{b}WCHAR_TYPE_SIZE@{ub}.
     Otherwise, it is the constant value that is the largest value
     that @{b}WCHAR_TYPE_SIZE@{ub} can have at run-time.  This is used in @{b}cpp@{ub}.

@{b}OBJC_INT_SELECTORS@{ub}
     Define this macro if the type of Objective C selectors should be
     @{b}int@{ub}.

     If this macro is not defined, then selectors should have the type
     @{b}struct objc_selector *@{ub}.

@{b}OBJC_SELECTORS_WITHOUT_LABELS@{ub}
     Define this macro if the compiler can group all the selectors
     together into a vector and use just one label at the beginning of
     the vector.  Otherwise, the compiler must give each selector its
     own assembler label.

     On certain machines, it is important to have a separate label for
     each selector because this enables the linker to eliminate
     duplicate selectors.

@{b}TARGET_BELL@{ub}
     A C constant expression for the integer value for escape sequence
     @{b}\\a@{ub}.

@{b}TARGET_BS@{ub}
@{b}TARGET_TAB@{ub}
@{b}TARGET_NEWLINE@{ub}
     C constant expressions for the integer values for escape sequences
     @{b}\\b@{ub}, @{b}\\t@{ub} and @{b}\\n@{ub}.

@{b}TARGET_VT@{ub}
@{b}TARGET_FF@{ub}
@{b}TARGET_CR@{ub}
     C constant expressions for the integer values for escape sequences
     @{b}\\v@{ub}, @{b}\\f@{ub} and @{b}\\r@{ub}.


@endnode

@node "Registers" "gcc.guide/Registers"
@next "Register Classes"
@prev "Type Layout"
@toc "Target Macros"

Register Usage
==============

   This section explains how to describe what registers the target
machine has, and how (in general) they can be used.

   The description of which registers a specific instruction can use is
done with register classes; see @{"Register Classes" link "Register Classes"}.  For information on
using registers to access a stack frame, see @{"Frame Registers" link "Frame Registers"}.  For
passing values in registers, see @{"Register Arguments" link "Register Arguments"}.  For returning
values in registers, see @{"Scalar Return" link "Scalar Return"}.


 @{" Register Basics        " link "Register Basics"}  Number and kinds of registers.
 @{" Allocation Order       " link "Allocation Order"}  Order in which registers are allocated.
 @{" Values in Registers    " link "Values in Registers"}  What kinds of values each reg can hold.
 @{" Leaf Functions         " link "Leaf Functions"}  Renumbering registers for leaf functions.
 @{" Stack Registers        " link "Stack Registers"}  Handling a register stack such as 80387.
 @{" Obsolete Register Macros " link "Obsolete Register Macros"}  Macros formerly used for the 80387.


@endnode

@node "Register Basics" "gcc.guide/Register Basics"
@next "Allocation Order"
@toc "Registers"

Basic Characteristics of Registers
----------------------------------

   Registers have various characteristics.

@{b}FIRST_PSEUDO_REGISTER@{ub}
     Number of hardware registers known to the compiler.  They receive
     numbers 0 through @{b}FIRST_PSEUDO_REGISTER-1@{ub}; thus, the first pseudo
     register's number really is assigned the number
     @{b}FIRST_PSEUDO_REGISTER@{ub}.

@{b}FIXED_REGISTERS@{ub}
     An initializer that says which registers are used for fixed
     purposes all throughout the compiled code and are therefore not
     available for general allocation.  These would include the stack
     pointer, the frame pointer (except on machines where that can be
     used as a general register when no frame pointer is needed), the
     program counter on machines where that is considered one of the
     addressable registers, and any other numbered register with a
     standard use.

     This information is expressed as a sequence of numbers, separated
     by commas and surrounded by braces.  The Nth number is 1 if
     register N is fixed, 0 otherwise.

     The table initialized from this macro, and the table initialized by
     the following one, may be overridden at run time either
     automatically, by the actions of the macro
     @{b}CONDITIONAL_REGISTER_USAGE@{ub}, or by the user with the command
     options @{b}-ffixed-REG@{ub}, @{b}-fcall-used-REG@{ub} and @{b}-fcall-saved-REG@{ub}.

@{b}CALL_USED_REGISTERS@{ub}
     Like @{b}FIXED_REGISTERS@{ub} but has 1 for each register that is clobbered
     (in general) by function calls as well as for fixed registers.
     This macro therefore identifies the registers that are not
     available for general allocation of values that must live across
     function calls.

     If a register has 0 in @{b}CALL_USED_REGISTERS@{ub}, the compiler
     automatically saves it on function entry and restores it on
     function exit, if the register is used within the function.

@{b}CONDITIONAL_REGISTER_USAGE@{ub}
     Zero or more C statements that may conditionally modify two
     variables @{b}fixed_regs@{ub} and @{b}call_used_regs@{ub} (both of type @{b}char []@{ub})
     after they have been initialized from the two preceding macros.

     This is necessary in case the fixed or call-clobbered registers
     depend on target flags.

     You need not define this macro if it has no work to do.

     If the usage of an entire class of registers depends on the target
     flags, you may indicate this to GCC by using this macro to modify
     @{b}fixed_regs@{ub} and @{b}call_used_regs@{ub} to 1 for each of the registers in
     the classes which should not be used by GCC.  Also define the
     macro @{b}REG_CLASS_FROM_LETTER@{ub} to return @{b}NO_REGS@{ub} if it is called with
     a letter for a class that shouldn't be used.

     (However, if this class is not included in @{b}GENERAL_REGS@{ub} and all of
     the insn patterns whose constraints permit this class are
     controlled by target switches, then GCC will automatically avoid
     using these registers when the target switches are opposed to
     them.)

@{b}NON_SAVING_SETJMP@{ub}
     If this macro is defined and has a nonzero value, it means that
     @{b}setjmp@{ub} and related functions fail to save the registers, or that
     @{b}longjmp@{ub} fails to restore them.  To compensate, the compiler avoids
     putting variables in registers in functions that use @{b}setjmp@{ub}.

@{b}INCOMING_REGNO (OUT)@{ub}
     Define this macro if the target machine has register windows.
     This C expression returns the register number as seen by the
     called function corresponding to the register number OUT as seen
     by the calling function.  Return OUT if register number OUT is not
     an outbound register.

@{b}OUTGOING_REGNO (IN)@{ub}
     Define this macro if the target machine has register windows.
     This C expression returns the register number as seen by the
     calling function corresponding to the register number IN as seen
     by the called function.  Return IN if register number IN is not an
     inbound register.


@endnode

@node "Allocation Order" "gcc.guide/Allocation Order"
@next "Values in Registers"
@prev "Register Basics"
@toc "Registers"

Order of Allocation of Registers
--------------------------------

   Registers are allocated in order.

@{b}REG_ALLOC_ORDER@{ub}
     If defined, an initializer for a vector of integers, containing the
     numbers of hard registers in the order in which GNU CC should
     prefer to use them (from most preferred to least).

     If this macro is not defined, registers are used lowest numbered
     first (all else being equal).

     One use of this macro is on machines where the highest numbered
     registers must always be saved and the save-multiple-registers
     instruction supports only sequences of consecutive registers.  On
     such machines, define @{b}REG_ALLOC_ORDER@{ub} to be an initializer that
     lists the highest numbered allocable register first.

@{b}ORDER_REGS_FOR_LOCAL_ALLOC@{ub}
     A C statement (sans semicolon) to choose the order in which to
     allocate hard registers for pseudo-registers local to a basic
     block.

     Store the desired register order in the array @{b}reg_alloc_order@{ub}.
     Element 0 should be the register to allocate first; element 1, the
     next register; and so on.

     The macro body should not assume anything about the contents of
     @{b}reg_alloc_order@{ub} before execution of the macro.

     On most machines, it is not necessary to define this macro.


@endnode

@node "Values in Registers" "gcc.guide/Values in Registers"
@next "Leaf Functions"
@prev "Allocation Order"
@toc "Registers"

How Values Fit in Registers
---------------------------

   This section discusses the macros that describe which kinds of values
(specifically, which machine modes) each register can hold, and how many
consecutive registers are needed for a given mode.

@{b}HARD_REGNO_NREGS (REGNO, MODE)@{ub}
     A C expression for the number of consecutive hard registers,
     starting at register number REGNO, required to hold a value of mode
     MODE.

     On a machine where all registers are exactly one word, a suitable
     definition of this macro is

          #define HARD_REGNO_NREGS(REGNO, MODE)            \\
             ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1)  \\
              / UNITS_PER_WORD))

@{b}ALTER_HARD_SUBREG (TGT_MODE, WORD, SRC_MODE, REGNO)@{ub}
     A C expression that returns an adjusted hard register number for

          (subreg:TGT_MODE (reg:SRC_MODE REGNO) WORD)

     This may be needed if the target machine has mixed sized big-endian
     registers, like Sparc v9.

@{b}HARD_REGNO_MODE_OK (REGNO, MODE)@{ub}
     A C expression that is nonzero if it is permissible to store a
     value of mode MODE in hard register number REGNO (or in several
     registers starting with that one).  For a machine where all
     registers are equivalent, a suitable definition is

          #define HARD_REGNO_MODE_OK(REGNO, MODE) 1

     You need not include code to check for the numbers of fixed
     registers, because the allocation mechanism considers them to be
     always occupied.

     On some machines, double-precision values must be kept in even/odd
     register pairs.  You can implement that by defining this macro to
     reject odd register numbers for such modes.

     The minimum requirement for a mode to be OK in a register is that
     the @{b}movMODE@{ub} instruction pattern support moves between the register
     and other hard register in the same class and that moving a value
     into the register and back out not alter it.

     Since the same instruction used to move @{b}word_mode@{ub} will work for
     all narrower integer modes, it is not necessary on any machine for
     @{b}HARD_REGNO_MODE_OK@{ub} to distinguish between these modes, provided
     you define patterns @{b}movhi@{ub}, etc., to take advantage of this.  This
     is useful because of the interaction between @{b}HARD_REGNO_MODE_OK@{ub}
     and @{b}MODES_TIEABLE_P@{ub}; it is very desirable for all integer modes to
     be tieable.

     Many machines have special registers for floating point arithmetic.
     Often people assume that floating point machine modes are allowed
     only in floating point registers.  This is not true.  Any
     registers that can hold integers can safely @{i}hold@{ui} a floating point
     machine mode, whether or not floating arithmetic can be done on it
     in those registers.  Integer move instructions can be used to move
     the values.

     On some machines, though, the converse is true: fixed-point machine
     modes may not go in floating registers.  This is true if the
     floating registers normalize any value stored in them, because
     storing a non-floating value there would garble it.  In this case,
     @{b}HARD_REGNO_MODE_OK@{ub} should reject fixed-point machine modes in
     floating registers.  But if the floating registers do not
     automatically normalize, if you can store any bit pattern in one
     and retrieve it unchanged without a trap, then any machine mode
     may go in a floating register, so you can define this macro to say
     so.

     The primary significance of special floating registers is rather
     that they are the registers acceptable in floating point arithmetic
     instructions.  However, this is of no concern to
     @{b}HARD_REGNO_MODE_OK@{ub}.  You handle it by writing the proper
     constraints for those instructions.

     On some machines, the floating registers are especially slow to
     access, so that it is better to store a value in a stack frame
     than in such a register if floating point arithmetic is not being
     done.  As long as the floating registers are not in class
     @{b}GENERAL_REGS@{ub}, they will not be used unless some pattern's
     constraint asks for one.

@{b}MODES_TIEABLE_P (MODE1, MODE2)@{ub}
     A C expression that is nonzero if a value of mode MODE1 is
     accessible in mode MODE2 without copying.

     If @{b}HARD_REGNO_MODE_OK (R, MODE1)@{ub} and @{b}HARD_REGNO_MODE_OK (R, MODE2)@{ub}
     are always the same for any R, then @{b}MODES_TIEABLE_P (MODE1, MODE2)@{ub}
     should be nonzero.  If they differ for any R, you should define
     this macro to return zero unless some other mechanism ensures the
     accessibility of the value in a narrower mode.

     You should define this macro to return nonzero in as many cases as
     possible since doing so will allow GNU CC to perform better
     register allocation.

@{b}AVOID_CCMODE_COPIES@{ub}
     Define this macro if the compiler should avoid copies to/from
     @{b}CCmode@{ub} registers.  You should only define this macro if support fo
     copying to/from @{b}CCmode@{ub} is incomplete.


@endnode

@node "Leaf Functions" "gcc.guide/Leaf Functions"
@next "Stack Registers"
@prev "Values in Registers"
@toc "Registers"

Handling Leaf Functions
-----------------------

   On some machines, a leaf function (i.e., one which makes no calls)
can run more efficiently if it does not make its own register window.
Often this means it is required to receive its arguments in the
registers where they are passed by the caller, instead of the registers
where they would normally arrive.

   The special treatment for leaf functions generally applies only when
other conditions are met; for example, often they may use only those
registers for its own variables and temporaries.  We use the term "leaf
function" to mean a function that is suitable for this special
handling, so that functions with no calls are not necessarily "leaf
functions".

   GNU CC assigns register numbers before it knows whether the function
is suitable for leaf function treatment.  So it needs to renumber the
registers in order to output a leaf function.  The following macros
accomplish this.

@{b}LEAF_REGISTERS@{ub}
     A C initializer for a vector, indexed by hard register number,
     which contains 1 for a register that is allowable in a candidate
     for leaf function treatment.

     If leaf function treatment involves renumbering the registers,
     then the registers marked here should be the ones before
     renumbering--those that GNU CC would ordinarily allocate.  The
     registers which will actually be used in the assembler code, after
     renumbering, should not be marked with 1 in this vector.

     Define this macro only if the target machine offers a way to
     optimize the treatment of leaf functions.

@{b}LEAF_REG_REMAP (REGNO)@{ub}
     A C expression whose value is the register number to which REGNO
     should be renumbered, when a function is treated as a leaf
     function.

     If REGNO is a register number which should not appear in a leaf
     function before renumbering, then the expression should yield -1,
     which will cause the compiler to abort.

     Define this macro only if the target machine offers a way to
     optimize the treatment of leaf functions, and registers need to be
     renumbered to do this.

   Normally, @{b}FUNCTION_PROLOGUE@{ub} and @{b}FUNCTION_EPILOGUE@{ub} must treat leaf
functions specially.  It can test the C variable @{b}leaf_function@{ub} which is
nonzero for leaf functions.  (The variable @{b}leaf_function@{ub} is defined
only if @{b}LEAF_REGISTERS@{ub} is defined.)


@endnode

@node "Stack Registers" "gcc.guide/Stack Registers"
@next "Obsolete Register Macros"
@prev "Leaf Functions"
@toc "Registers"

Registers That Form a Stack
---------------------------

   There are special features to handle computers where some of the
"registers" form a stack, as in the 80387 coprocessor for the 80386.
Stack registers are normally written by pushing onto the stack, and are
numbered relative to the top of the stack.

   Currently, GNU CC can only handle one group of stack-like registers,
and they must be consecutively numbered.

@{b}STACK_REGS@{ub}
     Define this if the machine has any stack-like registers.

@{b}FIRST_STACK_REG@{ub}
     The number of the first stack-like register.  This one is the top
     of the stack.

@{b}LAST_STACK_REG@{ub}
     The number of the last stack-like register.  This one is the
     bottom of the stack.


@endnode

@node "Obsolete Register Macros" "gcc.guide/Obsolete Register Macros"
@prev "Stack Registers"
@toc "Registers"

Obsolete Macros for Controlling Register Usage
----------------------------------------------

   These features do not work very well.  They exist because they used
to be required to generate correct code for the 80387 coprocessor of the
80386.  They are no longer used by that machine description and may be
removed in a later version of the compiler.  Don't use them!

@{b}OVERLAPPING_REGNO_P (REGNO)@{ub}
     If defined, this is a C expression whose value is nonzero if hard
     register number REGNO is an overlapping register.  This means a
     hard register which overlaps a hard register with a different
     number.  (Such overlap is undesirable, but occasionally it allows
     a machine to be supported which otherwise could not be.)  This
     macro must return nonzero for @{i}all@{ui} the registers which overlap each
     other.  GNU CC can use an overlapping register only in certain
     limited ways.  It can be used for allocation within a basic block,
     and may be spilled for reloading; that is all.

     If this macro is not defined, it means that none of the hard
     registers overlap each other.  This is the usual situation.

@{b}INSN_CLOBBERS_REGNO_P (INSN, REGNO)@{ub}
     If defined, this is a C expression whose value should be nonzero if
     the insn INSN has the effect of mysteriously clobbering the
     contents of hard register number REGNO.  By "mysterious" we mean
     that the insn's RTL expression doesn't describe such an effect.

     If this macro is not defined, it means that no insn clobbers
     registers mysteriously.  This is the usual situation; all else
     being equal, it is best for the RTL expression to show all the
     activity.

@{b}PRESERVE_DEATH_INFO_REGNO_P (REGNO)@{ub}
     If defined, this is a C expression whose value is nonzero if
     correct @{b}REG_DEAD@{ub} notes are needed for hard register number REGNO
     after reload.

     You would arrange to preserve death info for a register when some
     of the code in the machine description which is executed to write
     the assembler code looks at the death notes.  This is necessary
     only when the actual hardware feature which GNU CC thinks of as a
     register is not actually a register of the usual sort.  (It might,
     for example, be a hardware stack.)

     It is also useful for peepholes and linker relaxation.

     If this macro is not defined, it means that no death notes need to
     be preserved, and some may even be incorrect.  This is the usual
     situation.


@endnode

@node "Register Classes" "gcc.guide/Register Classes"
@next "Stack and Calling"
@prev "Registers"
@toc "Target Macros"

Register Classes
================

   On many machines, the numbered registers are not all equivalent.
For example, certain registers may not be allowed for indexed
addressing; certain registers may not be allowed in some instructions.
These machine restrictions are described to the compiler using @{i}register
classes@{ui}.

   You define a number of register classes, giving each one a name and
saying which of the registers belong to it.  Then you can specify
register classes that are allowed as operands to particular instruction
patterns.

   In general, each register will belong to several classes.  In fact,
one class must be named @{b}ALL_REGS@{ub} and contain all the registers.  Another
class must be named @{b}NO_REGS@{ub} and contain no registers.  Often the union
of two classes will be another class; however, this is not required.

   One of the classes must be named @{b}GENERAL_REGS@{ub}.  There is nothing
terribly special about the name, but the operand constraint letters @{b}r@{ub}
and @{b}g@{ub} specify this class.  If @{b}GENERAL_REGS@{ub} is the same as @{b}ALL_REGS@{ub},
just define it as a macro which expands to @{b}ALL_REGS@{ub}.

   Order the classes so that if class X is contained in class Y then X
has a lower class number than Y.

   The way classes other than @{b}GENERAL_REGS@{ub} are specified in operand
constraints is through machine-dependent operand constraint letters.
You can define such letters to correspond to various classes, then use
them in operand constraints.

   You should define a class for the union of two classes whenever some
instruction allows both classes.  For example, if an instruction allows
either a floating point (coprocessor) register or a general register
for a certain operand, you should define a class @{b}FLOAT_OR_GENERAL_REGS@{ub}
which includes both of them.  Otherwise you will get suboptimal code.

   You must also specify certain redundant information about the
register classes: for each class, which classes contain it and which
ones are contained in it; for each pair of classes, the largest class
contained in their union.

   When a value occupying several consecutive registers is expected in a
certain class, all the registers used must belong to that class.
Therefore, register classes cannot be used to enforce a requirement for
a register pair to start with an even-numbered register.  The way to
specify this requirement is with @{b}HARD_REGNO_MODE_OK@{ub}.

   Register classes used for input-operands of bitwise-and or shift
instructions have a special requirement: each such class must have, for
each fixed-point machine mode, a subclass whose registers can transfer
that mode to or from memory.  For example, on some machines, the
operations for single-byte values (@{b}QImode@{ub}) are limited to certain
registers.  When this is so, each register class that is used in a
bitwise-and or shift instruction must have a subclass consisting of
registers from which single-byte values can be loaded or stored.  This
is so that @{b}PREFERRED_RELOAD_CLASS@{ub} can always have a possible value to
return.

@{b}enum reg_class@{ub}
     An enumeral type that must be defined with all the register class
     names as enumeral values.  @{b}NO_REGS@{ub} must be first.  @{b}ALL_REGS@{ub} must
     be the last register class, followed by one more enumeral value,
     @{b}LIM_REG_CLASSES@{ub}, which is not a register class but rather tells
     how many classes there are.

     Each register class has a number, which is the value of casting
     the class name to type @{b}int@{ub}.  The number serves as an index in many
     of the tables described below.

@{b}N_REG_CLASSES@{ub}
     The number of distinct register classes, defined as follows:

          #define N_REG_CLASSES (int) LIM_REG_CLASSES

@{b}REG_CLASS_NAMES@{ub}
     An initializer containing the names of the register classes as C
     string constants.  These names are used in writing some of the
     debugging dumps.

@{b}REG_CLASS_CONTENTS@{ub}
     An initializer containing the contents of the register classes, as
     integers which are bit masks.  The Nth integer specifies the
     contents of class N.  The way the integer MASK is interpreted is
     that register R is in the class if @{b}MASK & (1 << R)@{ub} is 1.

     When the machine has more than 32 registers, an integer does not
     suffice.  Then the integers are replaced by sub-initializers,
     braced groupings containing several integers.  Each
     sub-initializer must be suitable as an initializer for the type
     @{b}HARD_REG_SET@{ub} which is defined in @{b}hard-reg-set.h@{ub}.

@{b}REGNO_REG_CLASS (REGNO)@{ub}
     A C expression whose value is a register class containing hard
     register REGNO.  In general there is more than one such class;
     choose a class which is @{i}minimal@{ui}, meaning that no smaller class
     also contains the register.

@{b}BASE_REG_CLASS@{ub}
     A macro whose definition is the name of the class to which a valid
     base register must belong.  A base register is one used in an
     address which is the register value plus a displacement.

@{b}INDEX_REG_CLASS@{ub}
     A macro whose definition is the name of the class to which a valid
     index register must belong.  An index register is one used in an
     address where its value is either multiplied by a scale factor or
     added to another register (as well as added to a displacement).

@{b}REG_CLASS_FROM_LETTER (CHAR)@{ub}
     A C expression which defines the machine-dependent operand
     constraint letters for register classes.  If CHAR is such a
     letter, the value should be the register class corresponding to
     it.  Otherwise, the value should be @{b}NO_REGS@{ub}.  The register letter
     @{b}r@{ub}, corresponding to class @{b}GENERAL_REGS@{ub}, will not be passed to this
     macro; you do not need to handle it.

@{b}REGNO_OK_FOR_BASE_P (NUM)@{ub}
     A C expression which is nonzero if register number NUM is suitable
     for use as a base register in operand addresses.  It may be either
     a suitable hard register or a pseudo register that has been
     allocated such a hard register.

@{b}REGNO_MODE_OK_FOR_BASE_P (NUM, MODE)@{ub}
     A C expression that is just like @{b}REGNO_OK_FOR_BASE_P@{ub}, except that
     that expression may examine the mode of the memory reference in
     MODE.  You should define this macro if the mode of the memory
     reference affects whether a register may be used as a base
     register.  If you define this macro, the compiler will use it
     instead of @{b}REGNO_OK_FOR_BASE_P@{ub}.

@{b}REGNO_OK_FOR_INDEX_P (NUM)@{ub}
     A C expression which is nonzero if register number NUM is suitable
     for use as an index register in operand addresses.  It may be
     either a suitable hard register or a pseudo register that has been
     allocated such a hard register.

     The difference between an index register and a base register is
     that the index register may be scaled.  If an address involves the
     sum of two registers, neither one of them scaled, then either one
     may be labeled the "base" and the other the "index"; but whichever
     labeling is used must fit the machine's constraints of which
     registers may serve in each capacity.  The compiler will try both
     labelings, looking for one that is valid, and will reload one or
     both registers only if neither labeling works.

@{b}PREFERRED_RELOAD_CLASS (X, CLASS)@{ub}
     A C expression that places additional restrictions on the register
     class to use when it is necessary to copy value X into a register
     in class CLASS.  The value is a register class; perhaps CLASS, or
     perhaps another, smaller class.  On many machines, the following
     definition is safe:

          #define PREFERRED_RELOAD_CLASS(X,CLASS) CLASS

     Sometimes returning a more restrictive class makes better code.
     For example, on the 68000, when X is an integer constant that is
     in range for a @{b}moveq@{ub} instruction, the value of this macro is always
     @{b}DATA_REGS@{ub} as long as CLASS includes the data registers.  Requiring
     a data register guarantees that a @{b}moveq@{ub} will be used.

     If X is a @{b}const_double@{ub}, by returning @{b}NO_REGS@{ub} you can force X into
     a memory constant.  This is useful on certain machines where
     immediate floating values cannot be loaded into certain kinds of
     registers.

@{b}PREFERRED_OUTPUT_RELOAD_CLASS (X, CLASS)@{ub}
     Like @{b}PREFERRED_RELOAD_CLASS@{ub}, but for output reloads instead of
     input reloads.  If you don't define this macro, the default is to
     use CLASS, unchanged.

@{b}LIMIT_RELOAD_CLASS (MODE, CLASS)@{ub}
     A C expression that places additional restrictions on the register
     class to use when it is necessary to be able to hold a value of
     mode MODE in a reload register for which class CLASS would
     ordinarily be used.

     Unlike @{b}PREFERRED_RELOAD_CLASS@{ub}, this macro should be used when
     there are certain modes that simply can't go in certain reload
     classes.

     The value is a register class; perhaps CLASS, or perhaps another,
     smaller class.

     Don't define this macro unless the target machine has limitations
     which require the macro to do something nontrivial.

@{b}SECONDARY_RELOAD_CLASS (CLASS, MODE, X)@{ub}
@{b}SECONDARY_INPUT_RELOAD_CLASS (CLASS, MODE, X)@{ub}
@{b}SECONDARY_OUTPUT_RELOAD_CLASS (CLASS, MODE, X)@{ub}
     Many machines have some registers that cannot be copied directly
     to or from memory or even from other types of registers.  An
     example is the @{b}MQ@{ub} register, which on most machines, can only be
     copied to or from general registers, but not memory.  Some
     machines allow copying all registers to and from memory, but
     require a scratch register for stores to some memory locations
     (e.g., those with symbolic address on the RT, and those with
     certain symbolic address on the Sparc when compiling PIC).  In
     some cases, both an intermediate and a scratch register are
     required.

     You should define these macros to indicate to the reload phase
     that it may need to allocate at least one register for a reload in
     addition to the register to contain the data.  Specifically, if
     copying X to a register CLASS in MODE requires an intermediate
     register, you should define @{b}SECONDARY_INPUT_RELOAD_CLASS@{ub} to return
     the largest register class all of whose registers can be used as
     intermediate registers or scratch registers.

     If copying a register CLASS in MODE to X requires an intermediate
     or scratch register, @{b}SECONDARY_OUTPUT_RELOAD_CLASS@{ub} should be
     defined to return the largest register class required.  If the
     requirements for input and output reloads are the same, the macro
     @{b}SECONDARY_RELOAD_CLASS@{ub} should be used instead of defining both
     macros identically.

     The values returned by these macros are often @{b}GENERAL_REGS@{ub}.
     Return @{b}NO_REGS@{ub} if no spare register is needed; i.e., if X can be
     directly copied to or from a register of CLASS in MODE without
     requiring a scratch register.  Do not define this macro if it
     would always return @{b}NO_REGS@{ub}.

     If a scratch register is required (either with or without an
     intermediate register), you should define patterns for @{b}reload_inM@{ub}
     or @{b}reload_outM@{ub}, as required (see @{"Standard Names" link "Standard Names"}.  These patterns,
     which will normally be implemented with a @{b}define_expand@{ub}, should be
     similar to the @{b}movM@{ub} patterns, except that operand 2 is the scratch
     register.

     Define constraints for the reload register and scratch register
     that contain a single register class.  If the original reload
     register (whose class is CLASS) can meet the constraint given in
     the pattern, the value returned by these macros is used for the
     class of the scratch register.  Otherwise, two additional reload
     registers are required.  Their classes are obtained from the
     constraints in the insn pattern.

     X might be a pseudo-register or a @{b}subreg@{ub} of a pseudo-register,
     which could either be in a hard register or in memory.  Use
     @{b}true_regnum@{ub} to find out; it will return -1 if the pseudo is in
     memory and the hard register number if it is in a register.

     These macros should not be used in the case where a particular
     class of registers can only be copied to memory and not to another
     class of registers.  In that case, secondary reload registers are
     not needed and would not be helpful.  Instead, a stack location
     must be used to perform the copy and the @{b}movM@{ub} pattern should use
     memory as a intermediate storage.  This case often occurs between
     floating-point and general registers.

@{b}SECONDARY_MEMORY_NEEDED (CLASS1, CLASS2, M)@{ub}
     Certain machines have the property that some registers cannot be
     copied to some other registers without using memory.  Define this
     macro on those machines to be a C expression that is non-zero if
     objects of mode M in registers of CLASS1 can only be copied to
     registers of class CLASS2 by storing a register of CLASS1 into
     memory and loading that memory location into a register of CLASS2.

     Do not define this macro if its value would always be zero.

@{b}SECONDARY_MEMORY_NEEDED_RTX (MODE)@{ub}
     Normally when @{b}SECONDARY_MEMORY_NEEDED@{ub} is defined, the compiler
     allocates a stack slot for a memory location needed for register
     copies.  If this macro is defined, the compiler instead uses the
     memory location defined by this macro.

     Do not define this macro if you do not define
     @{b}SECONDARY_MEMORY_NEEDED@{ub}.

@{b}SECONDARY_MEMORY_NEEDED_MODE (MODE)@{ub}
     When the compiler needs a secondary memory location to copy
     between two registers of mode MODE, it normally allocates
     sufficient memory to hold a quantity of @{b}BITS_PER_WORD@{ub} bits and
     performs the store and load operations in a mode that many bits
     wide and whose class is the same as that of MODE.

     This is right thing to do on most machines because it ensures that
     all bits of the register are copied and prevents accesses to the
     registers in a narrower mode, which some machines prohibit for
     floating-point registers.

     However, this default behavior is not correct on some machines,
     such as the DEC Alpha, that store short integers in floating-point
     registers differently than in integer registers.  On those
     machines, the default widening will not work correctly and you
     must define this macro to suppress that widening in some cases.
     See the file @{b}alpha.h@{ub} for details.

     Do not define this macro if you do not define
     @{b}SECONDARY_MEMORY_NEEDED@{ub} or if widening MODE to a mode that is
     @{b}BITS_PER_WORD@{ub} bits wide is correct for your machine.

@{b}SMALL_REGISTER_CLASSES@{ub}
     Normally the compiler avoids choosing registers that have been
     explicitly mentioned in the rtl as spill registers (these
     registers are normally those used to pass parameters and return
     values).  However, some machines have so few registers of certain
     classes that there would not be enough registers to use as spill
     registers if this were done.

     Define @{b}SMALL_REGISTER_CLASSES@{ub} to be an expression with a non-zero
     value on these machines.  When this macro has a non-zero value, the
     compiler allows registers explicitly used in the rtl to be used as
     spill registers but avoids extending the lifetime of these
     registers.

     It is always safe to define this macro with a non-zero value, but
     if you unnecessarily define it, you will reduce the amount of
     optimizations that can be performed in some cases.  If you do not
     define this macro with a non-zero value when it is required, the
     compiler will run out of spill registers and print a fatal error
     message.  For most machines, you should not define this macro at
     all.

@{b}CLASS_LIKELY_SPILLED_P (CLASS)@{ub}
     A C expression whose value is nonzero if pseudos that have been
     assigned to registers of class CLASS would likely be spilled
     because registers of CLASS are needed for spill registers.

     The default value of this macro returns 1 if CLASS has exactly one
     register and zero otherwise.  On most machines, this default
     should be used.  Only define this macro to some other expression
     if pseudos allocated by @{b}local-alloc.c@{ub} end up in memory because
     their hard registers were needed for spill registers.  If this
     macro returns nonzero for those classes, those pseudos will only
     be allocated by @{b}global.c@{ub}, which knows how to reallocate the pseudo
     to another register.  If there would not be another register
     available for reallocation, you should not change the definition
     of this macro since the only effect of such a definition would be
     to slow down register allocation.

@{b}CLASS_MAX_NREGS (CLASS, MODE)@{ub}
     A C expression for the maximum number of consecutive registers of
     class CLASS needed to hold a value of mode MODE.

     This is closely related to the macro @{b}HARD_REGNO_NREGS@{ub}.  In fact,
     the value of the macro @{b}CLASS_MAX_NREGS (CLASS, MODE)@{ub} should be the
     maximum value of @{b}HARD_REGNO_NREGS (REGNO, MODE)@{ub} for all REGNO
     values in the class CLASS.

     This macro helps control the handling of multiple-word values in
     the reload pass.

@{b}CLASS_CANNOT_CHANGE_SIZE@{ub}
     If defined, a C expression for a class that contains registers
     which the compiler must always access in a mode that is the same
     size as the mode in which it loaded the register.

     For the example, loading 32-bit integer or floating-point objects
     into floating-point registers on the Alpha extends them to 64-bits.
     Therefore loading a 64-bit object and then storing it as a 32-bit
     object does not store the low-order 32-bits, as would be the case
     for a normal register.  Therefore, @{b}alpha.h@{ub} defines this macro as
     @{b}FLOAT_REGS@{ub}.

   Three other special macros describe which operands fit which
constraint letters.

@{b}CONST_OK_FOR_LETTER_P (VALUE, C)@{ub}
     A C expression that defines the machine-dependent operand
     constraint letters (@{b}I@{ub}, @{b}J@{ub}, @{b}K@{ub}, ... @{b}P@{ub}) that specify particular ranges
     of integer values.  If C is one of those letters, the expression
     should check that VALUE, an integer, is in the appropriate range
     and return 1 if so, 0 otherwise.  If C is not one of those
     letters, the value should be 0 regardless of VALUE.

@{b}CONST_DOUBLE_OK_FOR_LETTER_P (VALUE, C)@{ub}
     A C expression that defines the machine-dependent operand
     constraint letters that specify particular ranges of @{b}const_double@{ub}
     values (@{b}G@{ub} or @{b}H@{ub}).

     If C is one of those letters, the expression should check that
     VALUE, an RTX of code @{b}const_double@{ub}, is in the appropriate range
     and return 1 if so, 0 otherwise.  If C is not one of those
     letters, the value should be 0 regardless of VALUE.

@{b}     const_double@{ub} is used for all floating-point constants and for
     @{b}DImode@{ub} fixed-point constants.  A given letter can accept either or
     both kinds of values.  It can use @{b}GET_MODE@{ub} to distinguish between
     these kinds.

@{b}EXTRA_CONSTRAINT (VALUE, C)@{ub}
     A C expression that defines the optional machine-dependent
     constraint letters (@{b}Q@{ub}, @{b}R@{ub}, @{b}S@{ub}, @{b}T@{ub}, @{b}U@{ub}) that can be used to segregate
     specific types of operands, usually memory references, for the
     target machine.  Normally this macro will not be defined.  If it
     is required for a particular target machine, it should return 1 if
     VALUE corresponds to the operand type represented by the
     constraint letter C.  If C is not defined as an extra constraint,
     the value returned should be 0 regardless of VALUE.

     For example, on the ROMP, load instructions cannot have their
     output in r0 if the memory reference contains a symbolic address.
     Constraint letter @{b}Q@{ub} is defined as representing a memory address
     that does @{i}not@{ui} contain a symbolic address.  An alternative is
     specified with a @{b}Q@{ub} constraint on the input and @{b}r@{ub} on the output.
     The next alternative specifies @{b}m@{ub} on the input and a register class
     that does not include r0 on the output.


@endnode

@node "Stack and Calling" "gcc.guide/Stack and Calling"
@next "Varargs"
@prev "Register Classes"
@toc "Target Macros"

Stack Layout and Calling Conventions
====================================

   This describes the stack layout and calling conventions.


 @{" Frame Layout " link "Frame Layout"}  
 @{" Stack Checking " link "Stack Checking"}  
 @{" Frame Registers " link "Frame Registers"}  
 @{" Elimination " link "Elimination"}  
 @{" Stack Arguments " link "Stack Arguments"}  
 @{" Register Arguments " link "Register Arguments"}  
 @{" Scalar Return " link "Scalar Return"}  
 @{" Aggregate Return " link "Aggregate Return"}  
 @{" Caller Saves " link "Caller Saves"}  
 @{" Function Entry " link "Function Entry"}  
 @{" Profiling  " link "Profiling"}


@endnode

@node "Frame Layout" "gcc.guide/Frame Layout"
@next "Stack Checking"
@toc "Stack and Calling"

Basic Stack Layout
------------------

   Here is the basic stack layout.

@{b}STACK_GROWS_DOWNWARD@{ub}
     Define this macro if pushing a word onto the stack moves the stack
     pointer to a smaller address.

     When we say, "define this macro if ...," it means that the
     compiler checks this macro only with @{b}#ifdef@{ub} so the precise
     definition used does not matter.

@{b}FRAME_GROWS_DOWNWARD@{ub}
     Define this macro if the addresses of local variable slots are at
     negative offsets from the frame pointer.

@{b}ARGS_GROW_DOWNWARD@{ub}
     Define this macro if successive arguments to a function occupy
     decreasing addresses on the stack.

@{b}STARTING_FRAME_OFFSET@{ub}
     Offset from the frame pointer to the first local variable slot to
     be allocated.

     If @{b}FRAME_GROWS_DOWNWARD@{ub}, find the next slot's offset by
     subtracting the first slot's length from @{b}STARTING_FRAME_OFFSET@{ub}.
     Otherwise, it is found by adding the length of the first slot to
     the value @{b}STARTING_FRAME_OFFSET@{ub}.

@{b}STACK_POINTER_OFFSET@{ub}
     Offset from the stack pointer register to the first location at
     which outgoing arguments are placed.  If not specified, the
     default value of zero is used.  This is the proper value for most
     machines.

     If @{b}ARGS_GROW_DOWNWARD@{ub}, this is the offset to the location above
     the first location at which outgoing arguments are placed.

@{b}FIRST_PARM_OFFSET (FUNDECL)@{ub}
     Offset from the argument pointer register to the first argument's
     address.  On some machines it may depend on the data type of the
     function.

     If @{b}ARGS_GROW_DOWNWARD@{ub}, this is the offset to the location above
     the first argument's address.

@{b}STACK_DYNAMIC_OFFSET (FUNDECL)@{ub}
     Offset from the stack pointer register to an item dynamically
     allocated on the stack, e.g., by @{b}alloca@{ub}.

     The default value for this macro is @{b}STACK_POINTER_OFFSET@{ub} plus the
     length of the outgoing arguments.  The default is correct for most
     machines.  See @{b}function.c@{ub} for details.

@{b}DYNAMIC_CHAIN_ADDRESS (FRAMEADDR)@{ub}
     A C expression whose value is RTL representing the address in a
     stack frame where the pointer to the caller's frame is stored.
     Assume that FRAMEADDR is an RTL expression for the address of the
     stack frame itself.

     If you don't define this macro, the default is to return the value
     of FRAMEADDR--that is, the stack frame address is also the address
     of the stack word that points to the previous frame.

@{b}SETUP_FRAME_ADDRESSES@{ub}
     If defined, a C expression that produces the machine-specific code
     to setup the stack so that arbitrary frames can be accessed.  For
     example, on the Sparc, we must flush all of the register windows
     to the stack before we can access arbitrary stack frames.  You
     will seldom need to define this macro.

@{b}BUILTIN_SETJMP_FRAME_VALUE@{ub}
     If defined, a C expression that contains an rtx that is used to
     store the address of the current frame into the built in @{b}setjmp@{ub}
     buffer.  The default value, @{b}virtual_stack_vars_rtx@{ub}, is correct for
     most machines.  One reason you may need to define this macro is if
     @{b}hard_frame_pointer_rtx@{ub} is the appropriate value on your machine.

@{b}RETURN_ADDR_RTX (COUNT, FRAMEADDR)@{ub}
     A C expression whose value is RTL representing the value of the
     return address for the frame COUNT steps up from the current
     frame, after the prologue.  FRAMEADDR is the frame pointer of the
     COUNT frame, or the frame pointer of the COUNT - 1 frame if
     @{b}RETURN_ADDR_IN_PREVIOUS_FRAME@{ub} is defined.

     The value of the expression must always be the correct address when
     COUNT is zero, but may be @{b}NULL_RTX@{ub} if there is not way to
     determine the return address of other frames.

@{b}RETURN_ADDR_IN_PREVIOUS_FRAME@{ub}
     Define this if the return address of a particular stack frame is
     accessed from the frame pointer of the previous stack frame.

@{b}INCOMING_RETURN_ADDR_RTX@{ub}
     A C expression whose value is RTL representing the location of the
     incoming return address at the beginning of any function, before
     the prologue.  This RTL is either a @{b}REG@{ub}, indicating that the return
     value is saved in @{b}REG@{ub}, or a @{b}MEM@{ub} representing a location in the
     stack.

     You only need to define this macro if you want to support call
     frame debugging information like that provided by DWARF 2.

@{b}INCOMING_FRAME_SP_OFFSET@{ub}
     A C expression whose value is an integer giving the offset, in
     bytes, from the value of the stack pointer register to the top of
     the stack frame at the beginning of any function, before the
     prologue.  The top of the frame is defined to be the value of the
     stack pointer in the previous frame, just before the call
     instruction.

     You only need to define this macro if you want to support call
     frame debugging information like that provided by DWARF 2.


@endnode

@node "Stack Checking" "gcc.guide/Stack Checking"
@next "Frame Registers"
@prev "Frame Layout"
@toc "Stack and Calling"

Specifying How Stack Checking is Done
-------------------------------------

   GNU CC will check that stack references are within the boundaries of
the stack, if the @{b}-fstack-check@{ub} is specified, in one of three ways:

  1. If the value of the @{b}STACK_CHECK_BUILTIN@{ub} macro is nonzero, GNU CC
     will assume that you have arranged for stack checking to be done at
     appropriate places in the configuration files, e.g., in
     @{b}FUNCTION_PROLOGUE@{ub}.  GNU CC will do not other special processing.

  2. If @{b}STACK_CHECK_BUILTIN@{ub} is zero and you defined a named pattern
     called @{b}check_stack@{ub} in your @{b}md@{ub} file, GNU CC will call that pattern
     with one argument which is the address to compare the stack value
     against.  You must arrange for this pattern to report an error if
     the stack pointer is out of range.

  3. If neither of the above are true, GNU CC will generate code to
     periodically "probe" the stack pointer using the values of the
     macros defined below.

   Normally, you will use the default values of these macros, so GNU CC
will use the third approach.

@{b}STACK_CHECK_BUILTIN@{ub}
     A nonzero value if stack checking is done by the configuration
     files in a machine-dependent manner.  You should define this macro
     if stack checking is require by the ABI of your machine or if you
     would like to have to stack checking in some more efficient way
     than GNU CC's portable approach.  The default value of this macro
     is zero.

@{b}STACK_CHECK_PROBE_INTERVAL@{ub}
     An integer representing the interval at which GNU CC must generate
     stack probe instructions.  You will normally define this macro to
     be no larger than the size of the "guard pages" at the end of a
     stack area.  The default value of 4096 is suitable for most
     systems.

@{b}STACK_CHECK_PROBE_LOAD@{ub}
     A integer which is nonzero if GNU CC should perform the stack probe
     as a load instruction and zero if GNU CC should use a store
     instruction.  The default is zero, which is the most efficient
     choice on most systems.

@{b}STACK_CHECK_PROTECT@{ub}
     The number of bytes of stack needed to recover from a stack
     overflow, for languages where such a recovery is supported.  The
     default value of 75 words should be adequate for most machines.

@{b}STACK_CHECK_MAX_FRAME_SIZE@{ub}
     The maximum size of a stack frame, in bytes.  GNU CC will generate
     probe instructions in non-leaf functions to ensure at least this
     many bytes of stack are available.  If a stack frame is larger
     than this size, stack checking will not be reliable and GNU CC
     will issue a warning.  The default is chosen so that GNU CC only
     generates one instruction on most systems.  You should normally
     not change the default value of this macro.

@{b}STACK_CHECK_FIXED_FRAME_SIZE@{ub}
     GNU CC uses this value to generate the above warning message.  It
     represents the amount of fixed frame used by a function, not
     including space for any callee-saved registers, temporaries and
     user variables.  You need only specify an upper bound for this
     amount and will normally use the default of four words.

@{b}STACK_CHECK_MAX_VAR_SIZE@{ub}
     The maximum size, in bytes, of an object that GNU CC will place in
     the fixed area of the stack frame when the user specifies
     @{b}-fstack-check@{ub}.  GNU CC computed the default from the values of the
     above macros and you will normally not need to override that
     default.


@endnode

@node "Frame Registers" "gcc.guide/Frame Registers"
@next "Elimination"
@prev "Stack Checking"
@toc "Stack and Calling"

Registers That Address the Stack Frame
--------------------------------------

   This discusses registers that address the stack frame.

@{b}STACK_POINTER_REGNUM@{ub}
     The register number of the stack pointer register, which must also
     be a fixed register according to @{b}FIXED_REGISTERS@{ub}.  On most
     machines, the hardware determines which register this is.

@{b}FRAME_POINTER_REGNUM@{ub}
     The register number of the frame pointer register, which is used to
     access automatic variables in the stack frame.  On some machines,
     the hardware determines which register this is.  On other
     machines, you can choose any register you wish for this purpose.

@{b}HARD_FRAME_POINTER_REGNUM@{ub}
     On some machines the offset between the frame pointer and starting
     offset of the automatic variables is not known until after register
     allocation has been done (for example, because the saved registers
     are between these two locations).  On those machines, define
     @{b}FRAME_POINTER_REGNUM@{ub} the number of a special, fixed register to be
     used internally until the offset is known, and define
     @{b}HARD_FRAME_POINTER_REGNUM@{ub} to be the actual hard register number
     used for the frame pointer.

     You should define this macro only in the very rare circumstances
     when it is not possible to calculate the offset between the frame
     pointer and the automatic variables until after register
     allocation has been completed.  When this macro is defined, you
     must also indicate in your definition of @{b}ELIMINABLE_REGS@{ub} how to
     eliminate @{b}FRAME_POINTER_REGNUM@{ub} into either
     @{b}HARD_FRAME_POINTER_REGNUM@{ub} or @{b}STACK_POINTER_REGNUM@{ub}.

     Do not define this macro if it would be the same as
     @{b}FRAME_POINTER_REGNUM@{ub}.

@{b}ARG_POINTER_REGNUM@{ub}
     The register number of the arg pointer register, which is used to
     access the function's argument list.  On some machines, this is
     the same as the frame pointer register.  On some machines, the
     hardware determines which register this is.  On other machines,
     you can choose any register you wish for this purpose.  If this is
     not the same register as the frame pointer register, then you must
     mark it as a fixed register according to @{b}FIXED_REGISTERS@{ub}, or
     arrange to be able to eliminate it (see @{"Elimination" link "Elimination"}).

@{b}RETURN_ADDRESS_POINTER_REGNUM@{ub}
     The register number of the return address pointer register, which
     is used to access the current function's return address from the
     stack.  On some machines, the return address is not at a fixed
     offset from the frame pointer or stack pointer or argument
     pointer.  This register can be defined to point to the return
     address on the stack, and then be converted by @{b}ELIMINABLE_REGS@{ub}
     into either the frame pointer or stack pointer.

     Do not define this macro unless there is no other way to get the
     return address from the stack.

@{b}STATIC_CHAIN_REGNUM@{ub}
@{b}STATIC_CHAIN_INCOMING_REGNUM@{ub}
     Register numbers used for passing a function's static chain
     pointer.  If register windows are used, the register number as
     seen by the called function is @{b}STATIC_CHAIN_INCOMING_REGNUM@{ub}, while
     the register number as seen by the calling function is
     @{b}STATIC_CHAIN_REGNUM@{ub}.  If these registers are the same,
     @{b}STATIC_CHAIN_INCOMING_REGNUM@{ub} need not be defined.

     The static chain register need not be a fixed register.

     If the static chain is passed in memory, these macros should not be
     defined; instead, the next two macros should be defined.

@{b}STATIC_CHAIN@{ub}
@{b}STATIC_CHAIN_INCOMING@{ub}
     If the static chain is passed in memory, these macros provide rtx
     giving @{b}mem@{ub} expressions that denote where they are stored.
     @{b}STATIC_CHAIN@{ub} and @{b}STATIC_CHAIN_INCOMING@{ub} give the locations as seen
     by the calling and called functions, respectively.  Often the
     former will be at an offset from the stack pointer and the latter
     at an offset from the frame pointer.

     The variables @{b}stack_pointer_rtx@{ub}, @{b}frame_pointer_rtx@{ub}, and
     @{b}arg_pointer_rtx@{ub} will have been initialized prior to the use of
     these macros and should be used to refer to those items.

     If the static chain is passed in a register, the two previous
     macros should be defined instead.


@endnode

@node "Elimination" "gcc.guide/Elimination"
@next "Stack Arguments"
@prev "Frame Registers"
@toc "Stack and Calling"

Eliminating Frame Pointer and Arg Pointer
-----------------------------------------

   This is about eliminating the frame pointer and arg pointer.

@{b}FRAME_POINTER_REQUIRED@{ub}
     A C expression which is nonzero if a function must have and use a
     frame pointer.  This expression is evaluated  in the reload pass.
     If its value is nonzero the function will have a frame pointer.

     The expression can in principle examine the current function and
     decide according to the facts, but on most machines the constant 0
     or the constant 1 suffices.  Use 0 when the machine allows code to
     be generated with no frame pointer, and doing so saves some time
     or space.  Use 1 when there is no possible advantage to avoiding a
     frame pointer.

     In certain cases, the compiler does not know how to produce valid
     code without a frame pointer.  The compiler recognizes those cases
     and automatically gives the function a frame pointer regardless of
     what @{b}FRAME_POINTER_REQUIRED@{ub} says.  You don't need to worry about
     them.

     In a function that does not require a frame pointer, the frame
     pointer register can be allocated for ordinary usage, unless you
     mark it as a fixed register.  See @{b}FIXED_REGISTERS@{ub} for more
     information.

@{b}INITIAL_FRAME_POINTER_OFFSET (DEPTH-VAR)@{ub}
     A C statement to store in the variable DEPTH-VAR the difference
     between the frame pointer and the stack pointer values immediately
     after the function prologue.  The value would be computed from
     information such as the result of @{b}get_frame_size ()@{ub} and the tables
     of registers @{b}regs_ever_live@{ub} and @{b}call_used_regs@{ub}.

     If @{b}ELIMINABLE_REGS@{ub} is defined, this macro will be not be used and
     need not be defined.  Otherwise, it must be defined even if
     @{b}FRAME_POINTER_REQUIRED@{ub} is defined to always be true; in that case,
     you may set DEPTH-VAR to anything.

@{b}ELIMINABLE_REGS@{ub}
     If defined, this macro specifies a table of register pairs used to
     eliminate unneeded registers that point into the stack frame.  If
     it is not defined, the only elimination attempted by the compiler
     is to replace references to the frame pointer with references to
     the stack pointer.

     The definition of this macro is a list of structure
     initializations, each of which specifies an original and
     replacement register.

     On some machines, the position of the argument pointer is not
     known until the compilation is completed.  In such a case, a
     separate hard register must be used for the argument pointer.
     This register can be eliminated by replacing it with either the
     frame pointer or the argument pointer, depending on whether or not
     the frame pointer has been eliminated.

     In this case, you might specify:
          #define ELIMINABLE_REGS  \\
          {{ARG_POINTER_REGNUM, STACK_POINTER_REGNUM}, \\
           {ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM}, \\
           {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}

     Note that the elimination of the argument pointer with the stack
     pointer is specified first since that is the preferred elimination.

@{b}CAN_ELIMINATE (FROM-REG, TO-REG)@{ub}
     A C expression that returns non-zero if the compiler is allowed to
     try to replace register number FROM-REG with register number
     TO-REG.  This macro need only be defined if @{b}ELIMINABLE_REGS@{ub} is
     defined, and will usually be the constant 1, since most of the
     cases preventing register elimination are things that the compiler
     already knows about.

@{b}INITIAL_ELIMINATION_OFFSET (FROM-REG, TO-REG, OFFSET-VAR)@{ub}
     This macro is similar to @{b}INITIAL_FRAME_POINTER_OFFSET@{ub}.  It
     specifies the initial difference between the specified pair of
     registers.  This macro must be defined if @{b}ELIMINABLE_REGS@{ub} is
     defined.

@{b}LONGJMP_RESTORE_FROM_STACK@{ub}
     Define this macro if the @{b}longjmp@{ub} function restores registers from
     the stack frames, rather than from those saved specifically by
     @{b}setjmp@{ub}.  Certain quantities must not be kept in registers across a
     call to @{b}setjmp@{ub} on such machines.


@endnode

@node "Stack Arguments" "gcc.guide/Stack Arguments"
@next "Register Arguments"
@prev "Elimination"
@toc "Stack and Calling"

Passing Function Arguments on the Stack
---------------------------------------

   The macros in this section control how arguments are passed on the
stack.  See the following section for other macros that control passing
certain arguments in registers.

@{b}PROMOTE_PROTOTYPES@{ub}
     Define this macro if an argument declared in a prototype as an
     integral type smaller than @{b}int@{ub} should actually be passed as an
     @{b}int@{ub}.  In addition to avoiding errors in certain cases of mismatch,
     it also makes for better code on certain machines.

@{b}PUSH_ROUNDING (NPUSHED)@{ub}
     A C expression that is the number of bytes actually pushed onto the
     stack when an instruction attempts to push NPUSHED bytes.

     If the target machine does not have a push instruction, do not
     define this macro.  That directs GNU CC to use an alternate
     strategy: to allocate the entire argument block and then store the
     arguments into it.

     On some machines, the definition

          #define PUSH_ROUNDING(BYTES) (BYTES)

     will suffice.  But on other machines, instructions that appear to
     push one byte actually push two bytes in an attempt to maintain
     alignment.  Then the definition should be

          #define PUSH_ROUNDING(BYTES) (((BYTES) + 1) & ~1)

@{b}ACCUMULATE_OUTGOING_ARGS@{ub}
     If defined, the maximum amount of space required for outgoing
     arguments will be computed and placed into the variable
     @{b}current_function_outgoing_args_size@{ub}.  No space will be pushed onto
     the stack for each call; instead, the function prologue should
     increase the stack frame size by this amount.

     Defining both @{b}PUSH_ROUNDING@{ub} and @{b}ACCUMULATE_OUTGOING_ARGS@{ub} is not
     proper.

@{b}REG_PARM_STACK_SPACE (FNDECL)@{ub}
     Define this macro if functions should assume that stack space has
     been allocated for arguments even when their values are passed in
     registers.

     The value of this macro is the size, in bytes, of the area
     reserved for arguments passed in registers for the function
     represented by FNDECL.

     This space can be allocated by the caller, or be a part of the
     machine-dependent stack frame: @{b}OUTGOING_REG_PARM_STACK_SPACE@{ub} says
     which.

@{b}MAYBE_REG_PARM_STACK_SPACE@{ub}
@{b}FINAL_REG_PARM_STACK_SPACE (CONST_SIZE, VAR_SIZE)@{ub}
     Define these macros in addition to the one above if functions might
     allocate stack space for arguments even when their values are
     passed in registers.  These should be used when the stack space
     allocated for arguments in registers is not a simple constant
     independent of the function declaration.

     The value of the first macro is the size, in bytes, of the area
     that we should initially assume would be reserved for arguments
     passed in registers.

     The value of the second macro is the actual size, in bytes, of the
     area that will be reserved for arguments passed in registers.
     This takes two arguments: an integer representing the number of
     bytes of fixed sized arguments on the stack, and a tree
     representing the number of bytes of variable sized arguments on
     the stack.

     When these macros are defined, @{b}REG_PARM_STACK_SPACE@{ub} will only be
     called for libcall functions, the current function, or for a
     function being called when it is known that such stack space must
     be allocated.  In each case this value can be easily computed.

     When deciding whether a called function needs such stack space,
     and how much space to reserve, GNU CC uses these two macros
     instead of @{b}REG_PARM_STACK_SPACE@{ub}.

@{b}OUTGOING_REG_PARM_STACK_SPACE@{ub}
     Define this if it is the responsibility of the caller to allocate
     the area reserved for arguments passed in registers.

     If @{b}ACCUMULATE_OUTGOING_ARGS@{ub} is defined, this macro controls
     whether the space for these arguments counts in the value of
     @{b}current_function_outgoing_args_size@{ub}.

@{b}STACK_PARMS_IN_REG_PARM_AREA@{ub}
     Define this macro if @{b}REG_PARM_STACK_SPACE@{ub} is defined, but the
     stack parameters don't skip the area specified by it.

     Normally, when a parameter is not passed in registers, it is
     placed on the stack beyond the @{b}REG_PARM_STACK_SPACE@{ub} area.
     Defining this macro suppresses this behavior and causes the
     parameter to be passed on the stack in its natural location.

@{b}RETURN_POPS_ARGS (FUNDECL, FUNTYPE, STACK-SIZE)@{ub}
     A C expression that should indicate the number of bytes of its own
     arguments that a function pops on returning, or 0 if the function
     pops no arguments and the caller must therefore pop them all after
     the function returns.

     FUNDECL is a C variable whose value is a tree node that describes
     the function in question.  Normally it is a node of type
     @{b}FUNCTION_DECL@{ub} that describes the declaration of the function.
     From this you can obtain the DECL_MACHINE_ATTRIBUTES of the
     function.

     FUNTYPE is a C variable whose value is a tree node that describes
     the function in question.  Normally it is a node of type
     @{b}FUNCTION_TYPE@{ub} that describes the data type of the function.  From
     this it is possible to obtain the data types of the value and
     arguments (if known).

     When a call to a library function is being considered, FUNDECL
     will contain an identifier node for the library function.  Thus, if
     you need to distinguish among various library functions, you can
     do so by their names.  Note that "library function" in this
     context means a function used to perform arithmetic, whose name is
     known specially in the compiler and was not mentioned in the C
     code being compiled.

     STACK-SIZE is the number of bytes of arguments passed on the
     stack.  If a variable number of bytes is passed, it is zero, and
     argument popping will always be the responsibility of the calling
     function.

     On the Vax, all functions always pop their arguments, so the
     definition of this macro is STACK-SIZE.  On the 68000, using the
     standard calling convention, no functions pop their arguments, so
     the value of the macro is always 0 in this case.  But an
     alternative calling convention is available in which functions
     that take a fixed number of arguments pop them but other functions
     (such as @{b}printf@{ub}) pop nothing (the caller pops all).  When this
     convention is in use, FUNTYPE is examined to determine whether a
     function takes a fixed number of arguments.


@endnode

@node "Register Arguments" "gcc.guide/Register Arguments"
@next "Scalar Return"
@prev "Stack Arguments"
@toc "Stack and Calling"

Passing Arguments in Registers
------------------------------

   This section describes the macros which let you control how various
types of arguments are passed in registers or how they are arranged in
the stack.

@{b}FUNCTION_ARG (CUM, MODE, TYPE, NAMED)@{ub}
     A C expression that controls whether a function argument is passed
     in a register, and which register.

     The arguments are CUM, which summarizes all the previous
     arguments; MODE, the machine mode of the argument; TYPE, the data
     type of the argument as a tree node or 0 if that is not known
     (which happens for C support library functions); and NAMED, which
     is 1 for an ordinary argument and 0 for nameless arguments that
     correspond to @{b}...@{ub} in the called function's prototype.

     The value of the expression is usually either a @{b}reg@{ub} RTX for the
     hard register in which to pass the argument, or zero to pass the
     argument on the stack.

     For machines like the Vax and 68000, where normally all arguments
     are pushed, zero suffices as a definition.

     The value of the expression can also be a @{b}parallel@{ub} RTX.  This is
     used when an argument is passed in multiple locations.  The mode
     of the of the @{b}parallel@{ub} should be the mode of the entire argument.
     The @{b}parallel@{ub} holds any number of @{b}expr_list@{ub} pairs; each one
     describes where part of the argument is passed.  In each @{b}expr_list@{ub},
     the first operand can be either a @{b}reg@{ub} RTX for the hard register in
     which to pass this part of the argument, or zero to pass the
     argument on the stack.  If this operand is a @{b}reg@{ub}, then the mode
     indicates how large this part of the argument is.  The second
     operand of the @{b}expr_list@{ub} is a @{b}const_int@{ub} which gives the offset in
     bytes into the entire argument where this part starts.

     The usual way to make the ANSI library @{b}stdarg.h@{ub} work on a machine
     where some arguments are usually passed in registers, is to cause
     nameless arguments to be passed on the stack instead.  This is done
     by making @{b}FUNCTION_ARG@{ub} return 0 whenever NAMED is 0.

     You may use the macro @{b}MUST_PASS_IN_STACK (MODE, TYPE)@{ub} in the
     definition of this macro to determine if this argument is of a
     type that must be passed in the stack.  If @{b}REG_PARM_STACK_SPACE@{ub} is
     not defined and @{b}FUNCTION_ARG@{ub} returns non-zero for such an
     argument, the compiler will abort.  If @{b}REG_PARM_STACK_SPACE@{ub} is
     defined, the argument will be computed in the stack and then
     loaded into a register.

@{b}MUST_PASS_IN_STACK (MODE, TYPE)@{ub}
     Define as a C expression that evaluates to nonzero if we do not
     know how to pass TYPE solely in registers.  The file @{b}expr.h@{ub}
     defines a definition that is usually appropriate, refer to @{b}expr.h@{ub}
     for additional documentation.

@{b}FUNCTION_INCOMING_ARG (CUM, MODE, TYPE, NAMED)@{ub}
     Define this macro if the target machine has "register windows", so
     that the register in which a function sees an arguments is not
     necessarily the same as the one in which the caller passed the
     argument.

     For such machines, @{b}FUNCTION_ARG@{ub} computes the register in which the
     caller passes the value, and @{b}FUNCTION_INCOMING_ARG@{ub} should be
     defined in a similar fashion to tell the function being called
     where the arguments will arrive.

     If @{b}FUNCTION_INCOMING_ARG@{ub} is not defined, @{b}FUNCTION_ARG@{ub} serves both
     purposes.

@{b}FUNCTION_ARG_PARTIAL_NREGS (CUM, MODE, TYPE, NAMED)@{ub}
     A C expression for the number of words, at the beginning of an
     argument, must be put in registers.  The value must be zero for
     arguments that are passed entirely in registers or that are
     entirely pushed on the stack.

     On some machines, certain arguments must be passed partially in
     registers and partially in memory.  On these machines, typically
     the first N words of arguments are passed in registers, and the
     rest on the stack.  If a multi-word argument (a @{b}double@{ub} or a
     structure) crosses that boundary, its first few words must be
     passed in registers and the rest must be pushed.  This macro tells
     the compiler when this occurs, and how many of the words should go
     in registers.

@{b}     FUNCTION_ARG@{ub} for these arguments should return the first register
     to be used by the caller for this argument; likewise
     @{b}FUNCTION_INCOMING_ARG@{ub}, for the called function.

@{b}FUNCTION_ARG_PASS_BY_REFERENCE (CUM, MODE, TYPE, NAMED)@{ub}
     A C expression that indicates when an argument must be passed by
     reference.  If nonzero for an argument, a copy of that argument is
     made in memory and a pointer to the argument is passed instead of
     the argument itself.  The pointer is passed in whatever way is
     appropriate for passing a pointer to that type.

     On machines where @{b}REG_PARM_STACK_SPACE@{ub} is not defined, a suitable
     definition of this macro might be
          #define FUNCTION_ARG_PASS_BY_REFERENCE\\
          (CUM, MODE, TYPE, NAMED)  \\
            MUST_PASS_IN_STACK (MODE, TYPE)

@{b}FUNCTION_ARG_CALLEE_COPIES (CUM, MODE, TYPE, NAMED)@{ub}
     If defined, a C expression that indicates when it is the called
     function's responsibility to make a copy of arguments passed by
     invisible reference.  Normally, the caller makes a copy and passes
     the address of the copy to the routine being called.  When
     FUNCTION_ARG_CALLEE_COPIES is defined and is nonzero, the caller
     does not make a copy.  Instead, it passes a pointer to the "live"
     value.  The called function must not modify this value.  If it can
     be determined that the value won't be modified, it need not make a
     copy; otherwise a copy must be made.

@{b}CUMULATIVE_ARGS@{ub}
     A C type for declaring a variable that is used as the first
     argument of @{b}FUNCTION_ARG@{ub} and other related values.  For some
     target machines, the type @{b}int@{ub} suffices and can hold the number of
     bytes of argument so far.

     There is no need to record in @{b}CUMULATIVE_ARGS@{ub} anything about the
     arguments that have been passed on the stack.  The compiler has
     other variables to keep track of that.  For target machines on
     which all arguments are passed on the stack, there is no need to
     store anything in @{b}CUMULATIVE_ARGS@{ub}; however, the data structure
     must exist and should not be empty, so use @{b}int@{ub}.

@{b}INIT_CUMULATIVE_ARGS (CUM, FNTYPE, LIBNAME, INDIRECT)@{ub}
     A C statement (sans semicolon) for initializing the variable CUM
     for the state at the beginning of the argument list.  The variable
     has type @{b}CUMULATIVE_ARGS@{ub}.  The value of FNTYPE is the tree node
     for the data type of the function which will receive the args, or 0
     if the args are to a compiler support library function.  The value
     of INDIRECT is nonzero when processing an indirect call, for
     example a call through a function pointer.  The value of INDIRECT
     is zero for a call to an explicitly named function, a library
     function call, or when @{b}INIT_CUMULATIVE_ARGS@{ub} is used to find
     arguments for the function being compiled.

     When processing a call to a compiler support library function,
     LIBNAME identifies which one.  It is a @{b}symbol_ref@{ub} rtx which
     contains the name of the function, as a string.  LIBNAME is 0 when
     an ordinary C function call is being processed.  Thus, each time
     this macro is called, either LIBNAME or FNTYPE is nonzero, but
     never both of them at once.

@{b}INIT_CUMULATIVE_INCOMING_ARGS (CUM, FNTYPE, LIBNAME)@{ub}
     Like @{b}INIT_CUMULATIVE_ARGS@{ub} but overrides it for the purposes of
     finding the arguments for the function being compiled.  If this
     macro is undefined, @{b}INIT_CUMULATIVE_ARGS@{ub} is used instead.

     The value passed for LIBNAME is always 0, since library routines
     with special calling conventions are never compiled with GNU CC.
     The argument LIBNAME exists for symmetry with @{b}INIT_CUMULATIVE_ARGS@{ub}.

@{b}FUNCTION_ARG_ADVANCE (CUM, MODE, TYPE, NAMED)@{ub}
     A C statement (sans semicolon) to update the summarizer variable
     CUM to advance past an argument in the argument list.  The values
     MODE, TYPE and NAMED describe that argument.  Once this is done,
     the variable CUM is suitable for analyzing the @{i}following@{ui} argument
     with @{b}FUNCTION_ARG@{ub}, etc.

     This macro need not do anything if the argument in question was
     passed on the stack.  The compiler knows how to track the amount
     of stack space used for arguments without any special help.

@{b}FUNCTION_ARG_PADDING (MODE, TYPE)@{ub}
     If defined, a C expression which determines whether, and in which
     direction, to pad out an argument with extra space.  The value
     should be of type @{b}enum direction@{ub}: either @{b}upward@{ub} to pad above the
     argument, @{b}downward@{ub} to pad below, or @{b}none@{ub} to inhibit padding.

     The @{i}amount@{ui} of padding is always just enough to reach the next
     multiple of @{b}FUNCTION_ARG_BOUNDARY@{ub}; this macro does not control it.

     This macro has a default definition which is right for most
     systems.  For little-endian machines, the default is to pad
     upward.  For big-endian machines, the default is to pad downward
     for an argument of constant size shorter than an @{b}int@{ub}, and upward
     otherwise.

@{b}FUNCTION_ARG_BOUNDARY (MODE, TYPE)@{ub}
     If defined, a C expression that gives the alignment boundary, in
     bits, of an argument with the specified mode and type.  If it is
     not defined, @{b}PARM_BOUNDARY@{ub} is used for all arguments.

@{b}FUNCTION_ARG_REGNO_P (REGNO)@{ub}
     A C expression that is nonzero if REGNO is the number of a hard
     register in which function arguments are sometimes passed.  This
     does @{i}not@{ui} include implicit arguments such as the static chain and
     the structure-value address.  On many machines, no registers can be
     used for this purpose since all function arguments are pushed on
     the stack.

@{b}LOAD_ARGS_REVERSED@{ub}
     If defined, the order in which arguments are loaded into their
     respective argument registers is reversed so that the last
     argument is loaded first.  This macro only effects arguments
     passed in registers.


@endnode

@node "Scalar Return" "gcc.guide/Scalar Return"
@next "Aggregate Return"
@prev "Register Arguments"
@toc "Stack and Calling"

How Scalar Function Values Are Returned
---------------------------------------

   This section discusses the macros that control returning scalars as
values--values that can fit in registers.

@{b}TRADITIONAL_RETURN_FLOAT@{ub}
     Define this macro if @{b}-traditional@{ub} should not cause functions
     declared to return @{b}float@{ub} to convert the value to @{b}double@{ub}.

@{b}FUNCTION_VALUE (VALTYPE, FUNC)@{ub}
     A C expression to create an RTX representing the place where a
     function returns a value of data type VALTYPE.  VALTYPE is a tree
     node representing a data type.  Write @{b}TYPE_MODE (VALTYPE)@{ub} to get
     the machine mode used to represent that type.  On many machines,
     only the mode is relevant.  (Actually, on most machines, scalar
     values are returned in the same place regardless of mode).

     The value of the expression is usually a @{b}reg@{ub} RTX for the hard
     register where the return value is stored.  The value can also be a
     @{b}parallel@{ub} RTX, if the return value is in multiple places.  See
     @{b}FUNCTION_ARG@{ub} for an explanation of the @{b}parallel@{ub} form.

     If @{b}PROMOTE_FUNCTION_RETURN@{ub} is defined, you must apply the same
     promotion rules specified in @{b}PROMOTE_MODE@{ub} if VALTYPE is a scalar
     type.

     If the precise function being called is known, FUNC is a tree node
     (@{b}FUNCTION_DECL@{ub}) for it; otherwise, FUNC is a null pointer.  This
     makes it possible to use a different value-returning convention
     for specific functions when all their calls are known.

@{b}     FUNCTION_VALUE@{ub} is not used for return vales with aggregate data
     types, because these are returned in another way.  See
     @{b}STRUCT_VALUE_REGNUM@{ub} and related macros, below.

@{b}FUNCTION_OUTGOING_VALUE (VALTYPE, FUNC)@{ub}
     Define this macro if the target machine has "register windows" so
     that the register in which a function returns its value is not the
     same as the one in which the caller sees the value.

     For such machines, @{b}FUNCTION_VALUE@{ub} computes the register in which
     the caller will see the value.  @{b}FUNCTION_OUTGOING_VALUE@{ub} should be
     defined in a similar fashion to tell the function where to put the
     value.

     If @{b}FUNCTION_OUTGOING_VALUE@{ub} is not defined, @{b}FUNCTION_VALUE@{ub} serves
     both purposes.

@{b}     FUNCTION_OUTGOING_VALUE@{ub} is not used for return vales with
     aggregate data types, because these are returned in another way.
     See @{b}STRUCT_VALUE_REGNUM@{ub} and related macros, below.

@{b}LIBCALL_VALUE (MODE)@{ub}
     A C expression to create an RTX representing the place where a
     library function returns a value of mode MODE.  If the precise
     function being called is known, FUNC is a tree node
     (@{b}FUNCTION_DECL@{ub}) for it; otherwise, FUNC is a null pointer.  This
     makes it possible to use a different value-returning convention
     for specific functions when all their calls are known.

     Note that "library function" in this context means a compiler
     support routine, used to perform arithmetic, whose name is known
     specially by the compiler and was not mentioned in the C code being
     compiled.

     The definition of @{b}LIBRARY_VALUE@{ub} need not be concerned aggregate
     data types, because none of the library functions returns such
     types.

@{b}FUNCTION_VALUE_REGNO_P (REGNO)@{ub}
     A C expression that is nonzero if REGNO is the number of a hard
     register in which the values of called function may come back.

     A register whose use for returning values is limited to serving as
     the second of a pair (for a value of type @{b}double@{ub}, say) need not be
     recognized by this macro.  So for most machines, this definition
     suffices:

          #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)

     If the machine has register windows, so that the caller and the
     called function use different registers for the return value, this
     macro should recognize only the caller's register numbers.

@{b}APPLY_RESULT_SIZE@{ub}
     Define this macro if @{b}untyped_call@{ub} and @{b}untyped_return@{ub} need more
     space than is implied by @{b}FUNCTION_VALUE_REGNO_P@{ub} for saving and
     restoring an arbitrary return value.


@endnode

@node "Aggregate Return" "gcc.guide/Aggregate Return"
@next "Caller Saves"
@prev "Scalar Return"
@toc "Stack and Calling"

How Large Values Are Returned
-----------------------------

   When a function value's mode is @{b}BLKmode@{ub} (and in some other cases),
the value is not returned according to @{b}FUNCTION_VALUE@{ub} (see
@{"Scalar Return" link "Scalar Return"}).  Instead, the caller passes the address of a block of
memory in which the value should be stored.  This address is called the
@{i}structure value address@{ui}.

   This section describes how to control returning structure values in
memory.

@{b}RETURN_IN_MEMORY (TYPE)@{ub}
     A C expression which can inhibit the returning of certain function
     values in registers, based on the type of value.  A nonzero value
     says to return the function value in memory, just as large
     structures are always returned.  Here TYPE will be a C expression
     of type @{b}tree@{ub}, representing the data type of the value.

     Note that values of mode @{b}BLKmode@{ub} must be explicitly handled by
     this macro.  Also, the option @{b}-fpcc-struct-return@{ub} takes effect
     regardless of this macro.  On most systems, it is possible to
     leave the macro undefined; this causes a default definition to be
     used, whose value is the constant 1 for @{b}BLKmode@{ub} values, and 0
     otherwise.

     Do not use this macro to indicate that structures and unions
     should always be returned in memory.  You should instead use
     @{b}DEFAULT_PCC_STRUCT_RETURN@{ub} to indicate this.

@{b}DEFAULT_PCC_STRUCT_RETURN@{ub}
     Define this macro to be 1 if all structure and union return values
     must be in memory.  Since this results in slower code, this should
     be defined only if needed for compatibility with other compilers
     or with an ABI.  If you define this macro to be 0, then the
     conventions used for structure and union return values are decided
     by the @{b}RETURN_IN_MEMORY@{ub} macro.

     If not defined, this defaults to the value 1.

@{b}STRUCT_VALUE_REGNUM@{ub}
     If the structure value address is passed in a register, then
     @{b}STRUCT_VALUE_REGNUM@{ub} should be the number of that register.

@{b}STRUCT_VALUE@{ub}
     If the structure value address is not passed in a register, define
     @{b}STRUCT_VALUE@{ub} as an expression returning an RTX for the place where
     the address is passed.  If it returns 0, the address is passed as
     an "invisible" first argument.

@{b}STRUCT_VALUE_INCOMING_REGNUM@{ub}
     On some architectures the place where the structure value address
     is found by the called function is not the same place that the
     caller put it.  This can be due to register windows, or it could
     be because the function prologue moves it to a different place.

     If the incoming location of the structure value address is in a
     register, define this macro as the register number.

@{b}STRUCT_VALUE_INCOMING@{ub}
     If the incoming location is not a register, then you should define
     @{b}STRUCT_VALUE_INCOMING@{ub} as an expression for an RTX for where the
     called function should find the value.  If it should find the
     value on the stack, define this to create a @{b}mem@{ub} which refers to
     the frame pointer.  A definition of 0 means that the address is
     passed as an "invisible" first argument.

@{b}PCC_STATIC_STRUCT_RETURN@{ub}
     Define this macro if the usual system convention on the target
     machine for returning structures and unions is for the called
     function to return the address of a static variable containing the
     value.

     Do not define this if the usual system convention is for the
     caller to pass an address to the subroutine.

     This macro has effect in @{b}-fpcc-struct-return@{ub} mode, but it does
     nothing when you use @{b}-freg-struct-return@{ub} mode.


@endnode

@node "Caller Saves" "gcc.guide/Caller Saves"
@next "Function Entry"
@prev "Aggregate Return"
@toc "Stack and Calling"

Caller-Saves Register Allocation
--------------------------------

   If you enable it, GNU CC can save registers around function calls.
This makes it possible to use call-clobbered registers to hold
variables that must live across calls.

@{b}DEFAULT_CALLER_SAVES@{ub}
     Define this macro if function calls on the target machine do not
     preserve any registers; in other words, if @{b}CALL_USED_REGISTERS@{ub} has
     1 for all registers.  This macro enables @{b}-fcaller-saves@{ub} by default.
     Eventually that option will be enabled by default on all machines
     and both the option and this macro will be eliminated.

@{b}CALLER_SAVE_PROFITABLE (REFS, CALLS)@{ub}
     A C expression to determine whether it is worthwhile to consider
     placing a pseudo-register in a call-clobbered hard register and
     saving and restoring it around each function call.  The expression
     should be 1 when this is worth doing, and 0 otherwise.

     If you don't define this macro, a default is used which is good on
     most machines: @{b}4 * CALLS < REFS@{ub}.


@endnode

@node "Function Entry" "gcc.guide/Function Entry"
@next "Profiling"
@prev "Caller Saves"
@toc "Stack and Calling"

Function Entry and Exit
-----------------------

   This section describes the macros that output function entry
(@{i}prologue@{ui}) and exit (@{i}epilogue@{ui}) code.

@{b}FUNCTION_PROLOGUE (FILE, SIZE)@{ub}
     A C compound statement that outputs the assembler code for entry
     to a function.  The prologue is responsible for setting up the
     stack frame, initializing the frame pointer register, saving
     registers that must be saved, and allocating SIZE additional bytes
     of storage for the local variables.  SIZE is an integer.  FILE is
     a stdio stream to which the assembler code should be output.

     The label for the beginning of the function need not be output by
     this macro.  That has already been done when the macro is run.

     To determine which registers to save, the macro can refer to the
     array @{b}regs_ever_live@{ub}: element R is nonzero if hard register R is
     used anywhere within the function.  This implies the function
     prologue should save register R, provided it is not one of the
     call-used registers.  (@{b}FUNCTION_EPILOGUE@{ub} must likewise use
     @{b}regs_ever_live@{ub}.)

     On machines that have "register windows", the function entry code
     does not save on the stack the registers that are in the windows,
     even if they are supposed to be preserved by function calls;
     instead it takes appropriate steps to "push" the register stack,
     if any non-call-used registers are used in the function.

     On machines where functions may or may not have frame-pointers, the
     function entry code must vary accordingly; it must set up the frame
     pointer if one is wanted, and not otherwise.  To determine whether
     a frame pointer is in wanted, the macro can refer to the variable
     @{b}frame_pointer_needed@{ub}.  The variable's value will be 1 at run time
     in a function that needs a frame pointer.  See @{"Elimination" link "Elimination"}.

     The function entry code is responsible for allocating any stack
     space required for the function.  This stack space consists of the
     regions listed below.  In most cases, these regions are allocated
     in the order listed, with the last listed region closest to the
     top of the stack (the lowest address if @{b}STACK_GROWS_DOWNWARD@{ub} is
     defined, and the highest address if it is not defined).  You can
     use a different order for a machine if doing so is more convenient
     or required for compatibility reasons.  Except in cases where
     required by standard or by a debugger, there is no reason why the
     stack layout used by GCC need agree with that used by other
     compilers for a machine.

        * A region of @{b}current_function_pretend_args_size@{ub} bytes of
          uninitialized space just underneath the first argument
          arriving on the stack.  (This may not be at the very start of
          the allocated stack region if the calling sequence has pushed
          anything else since pushing the stack arguments.  But
          usually, on such machines, nothing else has been pushed yet,
          because the function prologue itself does all the pushing.)
          This region is used on machines where an argument may be
          passed partly in registers and partly in memory, and, in some
          cases to support the features in @{b}varargs.h@{ub} and @{b}stdargs.h@{ub}.

        * An area of memory used to save certain registers used by the
          function.  The size of this area, which may also include
          space for such things as the return address and pointers to
          previous stack frames, is machine-specific and usually
          depends on which registers have been used in the function.
          Machines with register windows often do not require a save
          area.

        * A region of at least SIZE bytes, possibly rounded up to an
          allocation boundary, to contain the local variables of the
          function.  On some machines, this region and the save area
          may occur in the opposite order, with the save area closer to
          the top of the stack.

        * Optionally, when @{b}ACCUMULATE_OUTGOING_ARGS@{ub} is defined, a
          region of @{b}current_function_outgoing_args_size@{ub} bytes to be
          used for outgoing argument lists of the function.  See
          @{"Stack Arguments" link "Stack Arguments"}.

     Normally, it is necessary for the macros @{b}FUNCTION_PROLOGUE@{ub} and
     @{b}FUNCTION_EPILOGUE@{ub} to treat leaf functions specially.  The C
     variable @{b}leaf_function@{ub} is nonzero for such a function.

@{b}EXIT_IGNORE_STACK@{ub}
     Define this macro as a C expression that is nonzero if the return
     instruction or the function epilogue ignores the value of the stack
     pointer; in other words, if it is safe to delete an instruction to
     adjust the stack pointer before a return from the function.

     Note that this macro's value is relevant only for functions for
     which frame pointers are maintained.  It is never safe to delete a
     final stack adjustment in a function that has no frame pointer,
     and the compiler knows this regardless of @{b}EXIT_IGNORE_STACK@{ub}.

@{b}EPILOGUE_USES (REGNO)@{ub}
     Define this macro as a C expression that is nonzero for registers
     are used by the epilogue or the @{b}return@{ub} pattern.  The stack and
     frame pointer registers are already be assumed to be used as
     needed.

@{b}FUNCTION_EPILOGUE (FILE, SIZE)@{ub}
     A C compound statement that outputs the assembler code for exit
     from a function.  The epilogue is responsible for restoring the
     saved registers and stack pointer to their values when the
     function was called, and returning control to the caller.  This
     macro takes the same arguments as the macro @{b}FUNCTION_PROLOGUE@{ub}, and
     the registers to restore are determined from @{b}regs_ever_live@{ub} and
     @{b}CALL_USED_REGISTERS@{ub} in the same way.

     On some machines, there is a single instruction that does all the
     work of returning from the function.  On these machines, give that
     instruction the name @{b}return@{ub} and do not define the macro
     @{b}FUNCTION_EPILOGUE@{ub} at all.

     Do not define a pattern named @{b}return@{ub} if you want the
     @{b}FUNCTION_EPILOGUE@{ub} to be used.  If you want the target switches to
     control whether return instructions or epilogues are used, define a
     @{b}return@{ub} pattern with a validity condition that tests the target
     switches appropriately.  If the @{b}return@{ub} pattern's validity
     condition is false, epilogues will be used.

     On machines where functions may or may not have frame-pointers, the
     function exit code must vary accordingly.  Sometimes the code for
     these two cases is completely different.  To determine whether a
     frame pointer is wanted, the macro can refer to the variable
     @{b}frame_pointer_needed@{ub}.  The variable's value will be 1 when
     compiling a function that needs a frame pointer.

     Normally, @{b}FUNCTION_PROLOGUE@{ub} and @{b}FUNCTION_EPILOGUE@{ub} must treat leaf
     functions specially.  The C variable @{b}leaf_function@{ub} is nonzero for
     such a function.  See @{"Leaf Functions" link "Leaf Functions"}.

     On some machines, some functions pop their arguments on exit while
     others leave that for the caller to do.  For example, the 68020
     when given @{b}-mrtd@{ub} pops arguments in functions that take a fixed
     number of arguments.

     Your definition of the macro @{b}RETURN_POPS_ARGS@{ub} decides which
     functions pop their own arguments.  @{b}FUNCTION_EPILOGUE@{ub} needs to
     know what was decided.  The variable that is called
     @{b}current_function_pops_args@{ub} is the number of bytes of its arguments
     that a function should pop.  See @{"Scalar Return" link "Scalar Return"}.

@{b}DELAY_SLOTS_FOR_EPILOGUE@{ub}
     Define this macro if the function epilogue contains delay slots to
     which instructions from the rest of the function can be "moved".
     The definition should be a C expression whose value is an integer
     representing the number of delay slots there.

@{b}ELIGIBLE_FOR_EPILOGUE_DELAY (INSN, N)@{ub}
     A C expression that returns 1 if INSN can be placed in delay slot
     number N of the epilogue.

     The argument N is an integer which identifies the delay slot now
     being considered (since different slots may have different rules of
     eligibility).  It is never negative and is always less than the
     number of epilogue delay slots (what @{b}DELAY_SLOTS_FOR_EPILOGUE@{ub}
     returns).  If you reject a particular insn for a given delay slot,
     in principle, it may be reconsidered for a subsequent delay slot.
     Also, other insns may (at least in principle) be considered for
     the so far unfilled delay slot.

     The insns accepted to fill the epilogue delay slots are put in an
     RTL list made with @{b}insn_list@{ub} objects, stored in the variable
     @{b}current_function_epilogue_delay_list@{ub}.  The insn for the first
     delay slot comes first in the list.  Your definition of the macro
     @{b}FUNCTION_EPILOGUE@{ub} should fill the delay slots by outputting the
     insns in this list, usually by calling @{b}final_scan_insn@{ub}.

     You need not define this macro if you did not define
     @{b}DELAY_SLOTS_FOR_EPILOGUE@{ub}.

@{b}ASM_OUTPUT_MI_THUNK (FILE, THUNK_FNDECL, DELTA, FUNCTION)@{ub}
     A C compound statement that outputs the assembler code for a thunk
     function, used to implement C++ virtual function calls with
     multiple inheritance.  The thunk acts as a wrapper around a
     virtual function, adjusting the implicit object parameter before
     handing control off to the real function.

     First, emit code to add the integer DELTA to the location that
     contains the incoming first argument.  Assume that this argument
     contains a pointer, and is the one used to pass the @{b}this@{ub} pointer
     in C++.  This is the incoming argument @{i}before@{ui} the function
     prologue, e.g. @{b}%o0@{ub} on a sparc.  The addition must preserve the
     values of all other incoming arguments.

     After the addition, emit code to jump to FUNCTION, which is a
     @{b}FUNCTION_DECL@{ub}.  This is a direct pure jump, not a call, and does
     not touch the return address.  Hence returning from FUNCTION will
     return to whoever called the current @{b}thunk@{ub}.

     The effect must be as if FUNCTION had been called directly with
     the adjusted first argument.  This macro is responsible for
     emitting all of the code for a thunk function; @{b}FUNCTION_PROLOGUE@{ub}
     and @{b}FUNCTION_EPILOGUE@{ub} are not invoked.

     The THUNK_FNDECL is redundant.  (DELTA and FUNCTION have already
     been extracted from it.)  It might possibly be useful on some
     targets, but probably not.

     If you do not define this macro, the target-independent code in
     the C++ frontend will generate a less efficient heavyweight thunk
     that calls FUNCTION instead of jumping to it.  The generic
     approach does not support varargs.


@endnode

@node "Profiling" "gcc.guide/Profiling"
@prev "Function Entry"
@toc "Stack and Calling"

Generating Code for Profiling
-----------------------------

   These macros will help you generate code for profiling.

@{b}FUNCTION_PROFILER (FILE, LABELNO)@{ub}
     A C statement or compound statement to output to FILE some
     assembler code to call the profiling subroutine @{b}mcount@{ub}.  Before
     calling, the assembler code must load the address of a counter
     variable into a register where @{b}mcount@{ub} expects to find the address.
     The name of this variable is @{b}LP@{ub} followed by the number LABELNO,
     so you would generate the name using @{b}LP%d@{ub} in a @{b}fprintf@{ub}.

     The details of how the address should be passed to @{b}mcount@{ub} are
     determined by your operating system environment, not by GNU CC.  To
     figure them out, compile a small program for profiling using the
     system's installed C compiler and look at the assembler code that
     results.

@{b}PROFILE_BEFORE_PROLOGUE@{ub}
     Define this macro if the code for function profiling should come
     before the function prologue.  Normally, the profiling code comes
     after.

@{b}FUNCTION_BLOCK_PROFILER (FILE, LABELNO)@{ub}
     A C statement or compound statement to output to FILE some
     assembler code to initialize basic-block profiling for the current
     object module.  The global compile flag @{b}profile_block_flag@{ub}
     distinguishes two profile modes.

    @{b}profile_block_flag != 2@{ub}
          Output code to call the subroutine @{b}__bb_init_func@{ub} once per
          object module, passing it as its sole argument the address of
          a block allocated in the object module.

          The name of the block is a local symbol made with this
          statement:

               ASM_GENERATE_INTERNAL_LABEL (BUFFER, "LPBX", 0);

          Of course, since you are writing the definition of
          @{b}ASM_GENERATE_INTERNAL_LABEL@{ub} as well as that of this macro, you
          can take a short cut in the definition of this macro and use
          the name that you know will result.

          The first word of this block is a flag which will be nonzero
          if the object module has already been initialized.  So test
          this word first, and do not call @{b}__bb_init_func@{ub} if the flag is
          nonzero.  BLOCK_OR_LABEL contains a unique number which may
          be used to generate a label as a branch destination when
          @{b}__bb_init_func@{ub} will not be called.

          Described in assembler language, the code to be output looks
          like:

                 cmp (LPBX0),0
                 bne local_label
                 parameter1 <- LPBX0
                 call __bb_init_func
               local_label:

    @{b}profile_block_flag == 2@{ub}
          Output code to call the subroutine @{b}__bb_init_trace_func@{ub} and
          pass two parameters to it.  The first parameter is the same as
          for @{b}__bb_init_func@{ub}.  The second parameter is the number of the
          first basic block of the function as given by BLOCK_OR_LABEL.
          Note that @{b}__bb_init_trace_func@{ub} has to be called, even if the
          object module has been initialized already.

          Described in assembler language, the code to be output looks
          like:
               parameter1 <- LPBX0
               parameter2 <- BLOCK_OR_LABEL
               call __bb_init_trace_func

@{b}BLOCK_PROFILER (FILE, BLOCKNO)@{ub}
     A C statement or compound statement to output to FILE some
     assembler code to increment the count associated with the basic
     block number BLOCKNO.  The global compile flag @{b}profile_block_flag@{ub}
     distinguishes two profile modes.

    @{b}profile_block_flag != 2@{ub}
          Output code to increment the counter directly.  Basic blocks
          are numbered separately from zero within each compilation.
          The count associated with block number BLOCKNO is at index
          BLOCKNO in a vector of words; the name of this array is a
          local symbol made with this statement:

               ASM_GENERATE_INTERNAL_LABEL (BUFFER, "LPBX", 2);

          Of course, since you are writing the definition of
          @{b}ASM_GENERATE_INTERNAL_LABEL@{ub} as well as that of this macro, you
          can take a short cut in the definition of this macro and use
          the name that you know will result.

          Described in assembler language, the code to be output looks
          like:

               inc (LPBX2+4*BLOCKNO)

    @{b}profile_block_flag == 2@{ub}
          Output code to initialize the global structure @{b}__bb@{ub} and call
          the function @{b}__bb_trace_func@{ub}, which will increment the
          counter.

@{b}          __bb@{ub} consists of two words.  In the first word, the current
          basic block number, as given by BLOCKNO, has to be stored.  In
          the second word, the address of a block allocated in the
          object module has to be stored.  The address is given by the
          label created with this statement:

               ASM_GENERATE_INTERNAL_LABEL (BUFFER, "LPBX", 0);

          Described in assembler language, the code to be output looks
          like:
               move BLOCKNO -> (__bb)
               move LPBX0 -> (__bb+4)
               call __bb_trace_func

@{b}FUNCTION_BLOCK_PROFILER_EXIT (FILE)@{ub}
     A C statement or compound statement to output to FILE assembler
     code to call function @{b}__bb_trace_ret@{ub}.  The assembler code should
     only be output if the global compile flag @{b}profile_block_flag@{ub} == 2.
     This macro has to be used at every place where code for returning
     from a function is generated (e.g. @{b}FUNCTION_EPILOGUE@{ub}).  Although
     you have to write the definition of @{b}FUNCTION_EPILOGUE@{ub} as well, you
     have to define this macro to tell the compiler, that the proper
     call to @{b}__bb_trace_ret@{ub} is produced.

@{b}MACHINE_STATE_SAVE (ID)@{ub}
     A C statement or compound statement to save all registers, which
     may be clobbered by a function call, including condition codes.
     The @{b}asm@{ub} statement will be mostly likely needed to handle this
     task.  Local labels in the assembler code can be concatenated with
     the string ID, to obtain a unique lable name.

     Registers or condition codes clobbered by @{b}FUNCTION_PROLOGUE@{ub} or
     @{b}FUNCTION_EPILOGUE@{ub} must be saved in the macros
     @{b}FUNCTION_BLOCK_PROFILER@{ub}, @{b}FUNCTION_BLOCK_PROFILER_EXIT@{ub} and
     @{b}BLOCK_PROFILER@{ub} prior calling @{b}__bb_init_trace_func@{ub}, @{b}__bb_trace_ret@{ub}
     and @{b}__bb_trace_func@{ub} respectively.

@{b}MACHINE_STATE_RESTORE (ID)@{ub}
     A C statement or compound statement to restore all registers,
     including condition codes, saved by @{b}MACHINE_STATE_SAVE@{ub}.

     Registers or condition codes clobbered by @{b}FUNCTION_PROLOGUE@{ub} or
     @{b}FUNCTION_EPILOGUE@{ub} must be restored in the macros
     @{b}FUNCTION_BLOCK_PROFILER@{ub}, @{b}FUNCTION_BLOCK_PROFILER_EXIT@{ub} and
     @{b}BLOCK_PROFILER@{ub} after calling @{b}__bb_init_trace_func@{ub}, @{b}__bb_trace_ret@{ub}
     and @{b}__bb_trace_func@{ub} respectively.

@{b}BLOCK_PROFILER_CODE@{ub}
     A C function or functions which are needed in the library to
     support block profiling.


@endnode

@node "Varargs" "gcc.guide/Varargs"
@next "Trampolines"
@prev "Stack and Calling"
@toc "Target Macros"

Implementing the Varargs Macros
===============================

   GNU CC comes with an implementation of @{b}varargs.h@{ub} and @{b}stdarg.h@{ub} that
work without change on machines that pass arguments on the stack.
Other machines require their own implementations of varargs, and the
two machine independent header files must have conditionals to include
it.

   ANSI @{b}stdarg.h@{ub} differs from traditional @{b}varargs.h@{ub} mainly in the
calling convention for @{b}va_start@{ub}.  The traditional implementation takes
just one argument, which is the variable in which to store the argument
pointer.  The ANSI implementation of @{b}va_start@{ub} takes an additional
second argument.  The user is supposed to write the last named argument
of the function here.

   However, @{b}va_start@{ub} should not use this argument.  The way to find the
end of the named arguments is with the built-in functions described
below.

@{b}__builtin_saveregs ()@{ub}
     Use this built-in function to save the argument registers in
     memory so that the varargs mechanism can access them.  Both ANSI
     and traditional versions of @{b}va_start@{ub} must use @{b}__builtin_saveregs@{ub},
     unless you use @{b}SETUP_INCOMING_VARARGS@{ub} (see below) instead.

     On some machines, @{b}__builtin_saveregs@{ub} is open-coded under the
     control of the macro @{b}EXPAND_BUILTIN_SAVEREGS@{ub}.  On other machines,
     it calls a routine written in assembler language, found in
     @{b}libgcc2.c@{ub}.

     Code generated for the call to @{b}__builtin_saveregs@{ub} appears at the
     beginning of the function, as opposed to where the call to
     @{b}__builtin_saveregs@{ub} is written, regardless of what the code is.
     This is because the registers must be saved before the function
     starts to use them for its own purposes.

@{b}__builtin_args_info (CATEGORY)@{ub}
     Use this built-in function to find the first anonymous arguments in
     registers.

     In general, a machine may have several categories of registers
     used for arguments, each for a particular category of data types.
     (For example, on some machines, floating-point registers are used
     for floating-point arguments while other arguments are passed in
     the general registers.)  To make non-varargs functions use the
     proper calling convention, you have defined the @{b}CUMULATIVE_ARGS@{ub}
     data type to record how many registers in each category have been
     used so far

@{b}     __builtin_args_info@{ub} accesses the same data structure of type
     @{b}CUMULATIVE_ARGS@{ub} after the ordinary argument layout is finished
     with it, with CATEGORY specifying which word to access.  Thus, the
     value indicates the first unused register in a given category.

     Normally, you would use @{b}__builtin_args_info@{ub} in the implementation
     of @{b}va_start@{ub}, accessing each category just once and storing the
     value in the @{b}va_list@{ub} object.  This is because @{b}va_list@{ub} will have to
     update the values, and there is no way to alter the values
     accessed by @{b}__builtin_args_info@{ub}.

@{b}__builtin_next_arg (LASTARG)@{ub}
     This is the equivalent of @{b}__builtin_args_info@{ub}, for stack
     arguments.  It returns the address of the first anonymous stack
     argument, as type @{b}void *@{ub}. If @{b}ARGS_GROW_DOWNWARD@{ub}, it returns the
     address of the location above the first anonymous stack argument.
     Use it in @{b}va_start@{ub} to initialize the pointer for fetching
     arguments from the stack.  Also use it in @{b}va_start@{ub} to verify that
     the second parameter LASTARG is the last named argument of the
     current function.

@{b}__builtin_classify_type (OBJECT)@{ub}
     Since each machine has its own conventions for which data types are
     passed in which kind of register, your implementation of @{b}va_arg@{ub}
     has to embody these conventions.  The easiest way to categorize the
     specified data type is to use @{b}__builtin_classify_type@{ub} together
     with @{b}sizeof@{ub} and @{b}__alignof__@{ub}.

@{b}     __builtin_classify_type@{ub} ignores the value of OBJECT, considering
     only its data type.  It returns an integer describing what kind of
     type that is--integer, floating, pointer, structure, and so on.

     The file @{b}typeclass.h@{ub} defines an enumeration that you can use to
     interpret the values of @{b}__builtin_classify_type@{ub}.

   These machine description macros help implement varargs:

@{b}EXPAND_BUILTIN_SAVEREGS (ARGS)@{ub}
     If defined, is a C expression that produces the machine-specific
     code for a call to @{b}__builtin_saveregs@{ub}.  This code will be moved to
     the very beginning of the function, before any parameter access
     are made.  The return value of this function should be an RTX that
     contains the value to use as the return of @{b}__builtin_saveregs@{ub}.

     The argument ARGS is a @{b}tree_list@{ub} containing the arguments that
     were passed to @{b}__builtin_saveregs@{ub}.

     If this macro is not defined, the compiler will output an ordinary
     call to the library function @{b}__builtin_saveregs@{ub}.

@{b}SETUP_INCOMING_VARARGS (ARGS_SO_FAR, MODE, TYPE,@{ub}
     PRETEND_ARGS_SIZE, SECOND_TIME) This macro offers an alternative
     to using @{b}__builtin_saveregs@{ub} and defining the macro
     @{b}EXPAND_BUILTIN_SAVEREGS@{ub}.  Use it to store the anonymous register
     arguments into the stack so that all the arguments appear to have
     been passed consecutively on the stack.  Once this is done, you
     can use the standard implementation of varargs that works for
     machines that pass all their arguments on the stack.

     The argument ARGS_SO_FAR is the @{b}CUMULATIVE_ARGS@{ub} data structure,
     containing the values that obtain after processing of the named
     arguments.  The arguments MODE and TYPE describe the last named
     argument--its machine mode and its data type as a tree node.

     The macro implementation should do two things: first, push onto the
     stack all the argument registers @{i}not@{ui} used for the named arguments,
     and second, store the size of the data thus pushed into the
     @{b}int@{ub}-valued variable whose name is supplied as the argument
     PRETEND_ARGS_SIZE.  The value that you store here will serve as
     additional offset for setting up the stack frame.

     Because you must generate code to push the anonymous arguments at
     compile time without knowing their data types,
     @{b}SETUP_INCOMING_VARARGS@{ub} is only useful on machines that have just a
     single category of argument register and use it uniformly for all
     data types.

     If the argument SECOND_TIME is nonzero, it means that the
     arguments of the function are being analyzed for the second time.
     This happens for an inline function, which is not actually
     compiled until the end of the source file.  The macro
     @{b}SETUP_INCOMING_VARARGS@{ub} should not generate any instructions in
     this case.

@{b}STRICT_ARGUMENT_NAMING@{ub}
     Define this macro to be a nonzero value if the location where a
     function argument is passed depends on whether or not it is a
     named argument.

     This macro controls how the NAMED argument to @{b}FUNCTION_ARG@{ub} is set
     for varargs and stdarg functions.  If this macro returns a nonzero
     value, the NAMED argument is always true for named arguments, and
     false for unnamed arguments.  If it returns a value of zero, but
     @{b}SETUP_INCOMING_VARARGS@{ub} is defined, then all arguments are treated
     as named.  Otherwise, all named arguments except the last are
     treated as named.

     You need not define this macro if it always returns zero.


@endnode

@node "Trampolines" "gcc.guide/Trampolines"
@next "Library Calls"
@prev "Varargs"
@toc "Target Macros"

Trampolines for Nested Functions
================================

   A @{i}trampoline@{ui} is a small piece of code that is created at run time
when the address of a nested function is taken.  It normally resides on
the stack, in the stack frame of the containing function.  These macros
tell GNU CC how to generate code to allocate and initialize a
trampoline.

   The instructions in the trampoline must do two things: load a
constant address into the static chain register, and jump to the real
address of the nested function.  On CISC machines such as the m68k,
this requires two instructions, a move immediate and a jump.  Then the
two addresses exist in the trampoline as word-long immediate operands.
On RISC machines, it is often necessary to load each address into a
register in two parts.  Then pieces of each address form separate
immediate operands.

   The code generated to initialize the trampoline must store the
variable parts--the static chain value and the function address--into
the immediate operands of the instructions.  On a CISC machine, this is
simply a matter of copying each address to a memory reference at the
proper offset from the start of the trampoline.  On a RISC machine, it
may be necessary to take out pieces of the address and store them
separately.

@{b}TRAMPOLINE_TEMPLATE (FILE)@{ub}
     A C statement to output, on the stream FILE, assembler code for a
     block of data that contains the constant parts of a trampoline.
     This code should not include a label--the label is taken care of
     automatically.

     If you do not define this macro, it means no template is needed
     for the target.  Do not define this macro on systems where the
     block move code to copy the trampoline into place would be larger
     than the code to generate it on the spot.

@{b}TRAMPOLINE_SECTION@{ub}
     The name of a subroutine to switch to the section in which the
     trampoline template is to be placed (see @{"Sections" link "Sections"}).  The default
     is a value of @{b}readonly_data_section@{ub}, which places the trampoline in
     the section containing read-only data.

@{b}TRAMPOLINE_SIZE@{ub}
     A C expression for the size in bytes of the trampoline, as an
     integer.

@{b}TRAMPOLINE_ALIGNMENT@{ub}
     Alignment required for trampolines, in bits.

     If you don't define this macro, the value of @{b}BIGGEST_ALIGNMENT@{ub} is
     used for aligning trampolines.

@{b}INITIALIZE_TRAMPOLINE (ADDR, FNADDR, STATIC_CHAIN)@{ub}
     A C statement to initialize the variable parts of a trampoline.
     ADDR is an RTX for the address of the trampoline; FNADDR is an RTX
     for the address of the nested function; STATIC_CHAIN is an RTX for
     the static chain value that should be passed to the function when
     it is called.

@{b}ALLOCATE_TRAMPOLINE (FP)@{ub}
     A C expression to allocate run-time space for a trampoline.  The
     expression value should be an RTX representing a memory reference
     to the space for the trampoline.

     If this macro is not defined, by default the trampoline is
     allocated as a stack slot.  This default is right for most
     machines.  The exceptions are machines where it is impossible to
     execute instructions in the stack area.  On such machines, you may
     have to implement a separate stack, using this macro in
     conjunction with @{b}FUNCTION_PROLOGUE@{ub} and @{b}FUNCTION_EPILOGUE@{ub}.

     FP points to a data structure, a @{b}struct function@{ub}, which describes
     the compilation status of the immediate containing function of the
     function which the trampoline is for.  Normally (when
     @{b}ALLOCATE_TRAMPOLINE@{ub} is not defined), the stack slot for the
     trampoline is in the stack frame of this containing function.
     Other allocation strategies probably must do something analogous
     with this information.

   Implementing trampolines is difficult on many machines because they
have separate instruction and data caches.  Writing into a stack
location fails to clear the memory in the instruction cache, so when
the program jumps to that location, it executes the old contents.

   Here are two possible solutions.  One is to clear the relevant parts
of the instruction cache whenever a trampoline is set up.  The other is
to make all trampolines identical, by having them jump to a standard
subroutine.  The former technique makes trampoline execution faster; the
latter makes initialization faster.

   To clear the instruction cache when a trampoline is initialized,
define the following macros which describe the shape of the cache.

@{b}INSN_CACHE_SIZE@{ub}
     The total size in bytes of the cache.

@{b}INSN_CACHE_LINE_WIDTH@{ub}
     The length in bytes of each cache line.  The cache is divided into
     cache lines which are disjoint slots, each holding a contiguous
     chunk of data fetched from memory.  Each time data is brought into
     the cache, an entire line is read at once.  The data loaded into a
     cache line is always aligned on a boundary equal to the line size.

@{b}INSN_CACHE_DEPTH@{ub}
     The number of alternative cache lines that can hold any particular
     memory location.

   Alternatively, if the machine has system calls or instructions to
clear the instruction cache directly, you can define the following
macro.

@{b}CLEAR_INSN_CACHE (BEG, END)@{ub}
     If defined, expands to a C expression clearing the @{i}instruction
     cache@{ui} in the specified interval.  If it is not defined, and the
     macro INSN_CACHE_SIZE is defined, some generic code is generated
     to clear the cache.  The definition of this macro would typically
     be a series of @{b}asm@{ub} statements.  Both BEG and END are both pointer
     expressions.

   To use a standard subroutine, define the following macro.  In
addition, you must make sure that the instructions in a trampoline fill
an entire cache line with identical instructions, or else ensure that
the beginning of the trampoline code is always aligned at the same
point in its cache line.  Look in @{b}m68k.h@{ub} as a guide.

@{b}TRANSFER_FROM_TRAMPOLINE@{ub}
     Define this macro if trampolines need a special subroutine to do
     their work.  The macro should expand to a series of @{b}asm@{ub} statements
     which will be compiled with GNU CC.  They go in a library function
     named @{b}__transfer_from_trampoline@{ub}.

     If you need to avoid executing the ordinary prologue code of a
     compiled C function when you jump to the subroutine, you can do so
     by placing a special label of your own in the assembler code.  Use
     one @{b}asm@{ub} statement to generate an assembler label, and another to
     make the label global.  Then trampolines can use that label to
     jump directly to your special assembler code.


@endnode

@node "Library Calls" "gcc.guide/Library Calls"
@next "Addressing Modes"
@prev "Trampolines"
@toc "Target Macros"

Implicit Calls to Library Routines
==================================

   Here is an explanation of implicit calls to library routines.

@{b}MULSI3_LIBCALL@{ub}
     A C string constant giving the name of the function to call for
     multiplication of one signed full-word by another.  If you do not
     define this macro, the default name is used, which is @{b}__mulsi3@{ub}, a
     function defined in @{b}libgcc.a@{ub}.

@{b}DIVSI3_LIBCALL@{ub}
     A C string constant giving the name of the function to call for
     division of one signed full-word by another.  If you do not define
     this macro, the default name is used, which is @{b}__divsi3@{ub}, a
     function defined in @{b}libgcc.a@{ub}.

@{b}UDIVSI3_LIBCALL@{ub}
     A C string constant giving the name of the function to call for
     division of one unsigned full-word by another.  If you do not
     define this macro, the default name is used, which is @{b}__udivsi3@{ub}, a
     function defined in @{b}libgcc.a@{ub}.

@{b}MODSI3_LIBCALL@{ub}
     A C string constant giving the name of the function to call for the
     remainder in division of one signed full-word by another.  If you
     do not define this macro, the default name is used, which is
     @{b}__modsi3@{ub}, a function defined in @{b}libgcc.a@{ub}.

@{b}UMODSI3_LIBCALL@{ub}
     A C string constant giving the name of the function to call for the
     remainder in division of one unsigned full-word by another.  If
     you do not define this macro, the default name is used, which is
     @{b}__umodsi3@{ub}, a function defined in @{b}libgcc.a@{ub}.

@{b}MULDI3_LIBCALL@{ub}
     A C string constant giving the name of the function to call for
     multiplication of one signed double-word by another.  If you do not
     define this macro, the default name is used, which is @{b}__muldi3@{ub}, a
     function defined in @{b}libgcc.a@{ub}.

@{b}DIVDI3_LIBCALL@{ub}
     A C string constant giving the name of the function to call for
     division of one signed double-word by another.  If you do not
     define this macro, the default name is used, which is @{b}__divdi3@{ub}, a
     function defined in @{b}libgcc.a@{ub}.

@{b}UDIVDI3_LIBCALL@{ub}
     A C string constant giving the name of the function to call for
     division of one unsigned full-word by another.  If you do not
     define this macro, the default name is used, which is @{b}__udivdi3@{ub}, a
     function defined in @{b}libgcc.a@{ub}.

@{b}MODDI3_LIBCALL@{ub}
     A C string constant giving the name of the function to call for the
     remainder in division of one signed double-word by another.  If
     you do not define this macro, the default name is used, which is
     @{b}__moddi3@{ub}, a function defined in @{b}libgcc.a@{ub}.

@{b}UMODDI3_LIBCALL@{ub}
     A C string constant giving the name of the function to call for the
     remainder in division of one unsigned full-word by another.  If
     you do not define this macro, the default name is used, which is
     @{b}__umoddi3@{ub}, a function defined in @{b}libgcc.a@{ub}.

@{b}INIT_TARGET_OPTABS@{ub}
     Define this macro as a C statement that declares additional library
     routines renames existing ones. @{b}init_optabs@{ub} calls this macro after
     initializing all the normal library routines.

@{b}TARGET_EDOM@{ub}
     The value of @{b}EDOM@{ub} on the target machine, as a C integer constant
     expression.  If you don't define this macro, GNU CC does not
     attempt to deposit the value of @{b}EDOM@{ub} into @{b}errno@{ub} directly.  Look in
     @{b}/usr/include/errno.h@{ub} to find the value of @{b}EDOM@{ub} on your system.

     If you do not define @{b}TARGET_EDOM@{ub}, then compiled code reports
     domain errors by calling the library function and letting it
     report the error.  If mathematical functions on your system use
     @{b}matherr@{ub} when there is an error, then you should leave @{b}TARGET_EDOM@{ub}
     undefined so that @{b}matherr@{ub} is used normally.

@{b}GEN_ERRNO_RTX@{ub}
     Define this macro as a C expression to create an rtl expression
     that refers to the global "variable" @{b}errno@{ub}.  (On certain systems,
     @{b}errno@{ub} may not actually be a variable.)  If you don't define this
     macro, a reasonable default is used.

@{b}TARGET_MEM_FUNCTIONS@{ub}
     Define this macro if GNU CC should generate calls to the System V
     (and ANSI C) library functions @{b}memcpy@{ub} and @{b}memset@{ub} rather than the
     BSD functions @{b}bcopy@{ub} and @{b}bzero@{ub}.

@{b}LIBGCC_NEEDS_DOUBLE@{ub}
     Define this macro if only @{b}float@{ub} arguments cannot be passed to
     library routines (so they must be converted to @{b}double@{ub}).  This
     macro affects both how library calls are generated and how the
     library routines in @{b}libgcc1.c@{ub} accept their arguments.  It is
     useful on machines where floating and fixed point arguments are
     passed differently, such as the i860.

@{b}FLOAT_ARG_TYPE@{ub}
     Define this macro to override the type used by the library
     routines to pick up arguments of type @{b}float@{ub}.  (By default, they
     use a union of @{b}float@{ub} and @{b}int@{ub}.)

     The obvious choice would be @{b}float@{ub}--but that won't work with
     traditional C compilers that expect all arguments declared as @{b}float@{ub}
     to arrive as @{b}double@{ub}.  To avoid this conversion, the library
     routines ask for the value as some other type and then treat it as
     a @{b}float@{ub}.

     On some systems, no other type will work for this.  For these
     systems, you must use @{b}LIBGCC_NEEDS_DOUBLE@{ub} instead, to force
     conversion of the values @{b}double@{ub} before they are passed.

@{b}FLOATIFY (PASSED-VALUE)@{ub}
     Define this macro to override the way library routines redesignate
     a @{b}float@{ub} argument as a @{b}float@{ub} instead of the type it was passed as.
     The default is an expression which takes the @{b}float@{ub} field of the
     union.

@{b}FLOAT_VALUE_TYPE@{ub}
     Define this macro to override the type used by the library
     routines to return values that ought to have type @{b}float@{ub}.  (By
     default, they use @{b}int@{ub}.)

     The obvious choice would be @{b}float@{ub}--but that won't work with
     traditional C compilers gratuitously convert values declared as
     @{b}float@{ub} into @{b}double@{ub}.

@{b}INTIFY (FLOAT-VALUE)@{ub}
     Define this macro to override the way the value of a
     @{b}float@{ub}-returning library routine should be packaged in order to
     return it.  These functions are actually declared to return type
     @{b}FLOAT_VALUE_TYPE@{ub} (normally @{b}int@{ub}).

     These values can't be returned as type @{b}float@{ub} because traditional C
     compilers would gratuitously convert the value to a @{b}double@{ub}.

     A local variable named @{b}intify@{ub} is always available when the macro
     @{b}INTIFY@{ub} is used.  It is a union of a @{b}float@{ub} field named @{b}f@{ub} and a
     field named @{b}i@{ub} whose type is @{b}FLOAT_VALUE_TYPE@{ub} or @{b}int@{ub}.

     If you don't define this macro, the default definition works by
     copying the value through that union.

@{b}nongcc_SI_type@{ub}
     Define this macro as the name of the data type corresponding to
     @{b}SImode@{ub} in the system's own C compiler.

     You need not define this macro if that type is @{b}long int@{ub}, as it
     usually is.

@{b}nongcc_word_type@{ub}
     Define this macro as the name of the data type corresponding to the
     word_mode in the system's own C compiler.

     You need not define this macro if that type is @{b}long int@{ub}, as it
     usually is.

@{b}perform_...@{ub}
     Define these macros to supply explicit C statements to carry out
     various arithmetic operations on types @{b}float@{ub} and @{b}double@{ub} in the
     library routines in @{b}libgcc1.c@{ub}.  See that file for a full list of
     these macros and their arguments.

     On most machines, you don't need to define any of these macros,
     because the C compiler that comes with the system takes care of
     doing them.

@{b}NEXT_OBJC_RUNTIME@{ub}
     Define this macro to generate code for Objective C message sending
     using the calling convention of the NeXT system.  This calling
     convention involves passing the object, the selector and the
     method arguments all at once to the method-lookup library function.

     The default calling convention passes just the object and the
     selector to the lookup function, which returns a pointer to the
     method.


@endnode

@node "Addressing Modes" "gcc.guide/Addressing Modes"
@next "Condition Code"
@prev "Library Calls"
@toc "Target Macros"

Addressing Modes
================

   This is about addressing modes.

@{b}HAVE_POST_INCREMENT@{ub}
     Define this macro if the machine supports post-increment
     addressing.

@{b}HAVE_PRE_INCREMENT@{ub}
@{b}HAVE_POST_DECREMENT@{ub}
@{b}HAVE_PRE_DECREMENT@{ub}
     Similar for other kinds of addressing.

@{b}CONSTANT_ADDRESS_P (X)@{ub}
     A C expression that is 1 if the RTX X is a constant which is a
     valid address.  On most machines, this can be defined as
     @{b}CONSTANT_P (X)@{ub}, but a few machines are more restrictive in which
     constant addresses are supported.

@{b}     CONSTANT_P@{ub} accepts integer-values expressions whose values are not
     explicitly known, such as @{b}symbol_ref@{ub}, @{b}label_ref@{ub}, and @{b}high@{ub}
     expressions and @{b}const@{ub} arithmetic expressions, in addition to
     @{b}const_int@{ub} and @{b}const_double@{ub} expressions.

@{b}MAX_REGS_PER_ADDRESS@{ub}
     A number, the maximum number of registers that can appear in a
     valid memory address.  Note that it is up to you to specify a
     value equal to the maximum number that @{b}GO_IF_LEGITIMATE_ADDRESS@{ub}
     would ever accept.

@{b}GO_IF_LEGITIMATE_ADDRESS (MODE, X, LABEL)@{ub}
     A C compound statement with a conditional @{b}goto LABEL;@{ub} executed if
     X (an RTX) is a legitimate memory address on the target machine
     for a memory operand of mode MODE.

     It usually pays to define several simpler macros to serve as
     subroutines for this one.  Otherwise it may be too complicated to
     understand.

     This macro must exist in two variants: a strict variant and a
     non-strict one.  The strict variant is used in the reload pass.  It
     must be defined so that any pseudo-register that has not been
     allocated a hard register is considered a memory reference.  In
     contexts where some kind of register is required, a pseudo-register
     with no hard register must be rejected.

     The non-strict variant is used in other passes.  It must be
     defined to accept all pseudo-registers in every context where some
     kind of register is required.

     Compiler source files that want to use the strict variant of this
     macro define the macro @{b}REG_OK_STRICT@{ub}.  You should use an @{b}#ifdef
     REG_OK_STRICT@{ub} conditional to define the strict variant in that
     case and the non-strict variant otherwise.

     Subroutines to check for acceptable registers for various purposes
     (one for base registers, one for index registers, and so on) are
     typically among the subroutines used to define
     @{b}GO_IF_LEGITIMATE_ADDRESS@{ub}.  Then only these subroutine macros need
     have two variants; the higher levels of macros may be the same
     whether strict or not.

     Normally, constant addresses which are the sum of a @{b}symbol_ref@{ub} and
     an integer are stored inside a @{b}const@{ub} RTX to mark them as constant.
     Therefore, there is no need to recognize such sums specifically
     as legitimate addresses.  Normally you would simply recognize any
     @{b}const@{ub} as legitimate.

     Usually @{b}PRINT_OPERAND_ADDRESS@{ub} is not prepared to handle constant
     sums that are not marked with  @{b}const@{ub}.  It assumes that a naked
     @{b}plus@{ub} indicates indexing.  If so, then you @{i}must@{ui} reject such naked
     constant sums as illegitimate addresses, so that none of them will
     be given to @{b}PRINT_OPERAND_ADDRESS@{ub}.

     On some machines, whether a symbolic address is legitimate depends
     on the section that the address refers to.  On these machines,
     define the macro @{b}ENCODE_SECTION_INFO@{ub} to store the information into
     the @{b}symbol_ref@{ub}, and then check for it here.  When you see a @{b}const@{ub},
     you will have to look inside it to find the @{b}symbol_ref@{ub} in order to
     determine the section.  See @{"Assembler Format" link "Assembler Format"}.

     The best way to modify the name string is by adding text to the
     beginning, with suitable punctuation to prevent any ambiguity.
     Allocate the new name in @{b}saveable_obstack@{ub}.  You will have to modify
     @{b}ASM_OUTPUT_LABELREF@{ub} to remove and decode the added text and output
     the name accordingly, and define @{b}STRIP_NAME_ENCODING@{ub} to access the
     original name string.

     You can check the information stored here into the @{b}symbol_ref@{ub} in
     the definitions of the macros @{b}GO_IF_LEGITIMATE_ADDRESS@{ub} and
     @{b}PRINT_OPERAND_ADDRESS@{ub}.

@{b}REG_OK_FOR_BASE_P (X)@{ub}
     A C expression that is nonzero if X (assumed to be a @{b}reg@{ub} RTX) is
     valid for use as a base register.  For hard registers, it should
     always accept those which the hardware permits and reject the
     others.  Whether the macro accepts or rejects pseudo registers
     must be controlled by @{b}REG_OK_STRICT@{ub} as described above.  This
     usually requires two variant definitions, of which @{b}REG_OK_STRICT@{ub}
     controls the one actually used.

@{b}REG_MODE_OK_FOR_BASE_P (X, MODE)@{ub}
     A C expression that is just like @{b}REG_OK_FOR_BASE_P@{ub}, except that
     that expression may examine the mode of the memory reference in
     MODE.  You should define this macro if the mode of the memory
     reference affects whether a register may be used as a base
     register.  If you define this macro, the compiler will use it
     instead of @{b}REG_OK_FOR_BASE_P@{ub}.

@{b}REG_OK_FOR_INDEX_P (X)@{ub}
     A C expression that is nonzero if X (assumed to be a @{b}reg@{ub} RTX) is
     valid for use as an index register.

     The difference between an index register and a base register is
     that the index register may be scaled.  If an address involves the
     sum of two registers, neither one of them scaled, then either one
     may be labeled the "base" and the other the "index"; but whichever
     labeling is used must fit the machine's constraints of which
     registers may serve in each capacity.  The compiler will try both
     labelings, looking for one that is valid, and will reload one or
     both registers only if neither labeling works.

@{b}LEGITIMIZE_ADDRESS (X, OLDX, MODE, WIN)@{ub}
     A C compound statement that attempts to replace X with a valid
     memory address for an operand of mode MODE.  WIN will be a C
     statement label elsewhere in the code; the macro definition may use

          GO_IF_LEGITIMATE_ADDRESS (MODE, X, WIN);

     to avoid further processing if the address has become legitimate.

     X will always be the result of a call to @{b}break_out_memory_refs@{ub},
     and OLDX will be the operand that was given to that function to
     produce X.

     The code generated by this macro should not alter the substructure
     of X.  If it transforms X into a more legitimate form, it should
     assign X (which will always be a C variable) a new value.

     It is not necessary for this macro to come up with a legitimate
     address.  The compiler has standard ways of doing so in all cases.
     In fact, it is safe for this macro to do nothing.  But often a
     machine-dependent strategy can generate better code.

@{b}LEGITIMIZE_RELOAD_ADDRESS (X, MODE, OPNUM, TYPE, IND_LEVELS, WIN)@{ub}
     A C compound statement that attempts to replace X, which is an
     address that needs reloading, with a valid memory address for an
     operand of mode MODE.  WIN will be a C statement label elsewhere
     in the code.  It is not necessary to define this macro, but it
     might be useful for performance reasons.

     For example, on the i386, it is sometimes possible to use a single
     reload register instead of two by reloading a sum of two pseudo
     registers into a register.  On the other hand, for number of RISC
     processors offsets are limited so that often an intermediate
     address needs to be generated in order to address a stack slot.
     By defining LEGITIMIZE_RELOAD_ADDRESS appropriately, the
     intermediate addresses generated for adjacent some stack slots can
     be made identical, and thus be shared.

@{i}     Note@{ui}: This macro should be used with caution.  It is necessary to
     know something of how reload works in order to effectively use
     this, and it is quite easy to produce macros that build in too
     much knowledge of reload internals.

@{i}     Note@{ui}: This macro must be able to reload an address created by a
     previous invocation of this macro.  If it fails to handle such
     addresses then the compiler may generate incorrect code or abort.

     The macro definition should use @{b}push_reload@{ub} to indicate parts that
     need reloading; OPNUM, TYPE and IND_LEVELS are usually suitable to
     be passed unaltered to @{b}push_reload@{ub}.

     The code generated by this macro must not alter the substructure of
     X.  If it transforms X into a more legitimate form, it should
     assign X (which will always be a C variable) a new value.  This
     also applies to parts that you change indirectly by calling
     @{b}push_reload@{ub}.

     The macro definition may use @{b}strict_memory_address_p@{ub} to test if
     the address has become legitimate.

     If you want to change only a part of X, one standard way of doing
     this is to use @{b}copy_rtx@{ub}.  Note, however, that is unshares only a
     single level of rtl.  Thus, if the part to be changed is not at the
     top level, you'll need to replace first the top leve It is not
     necessary for this macro to come up with a legitimate address;
     but often a machine-dependent strategy can generate better code.

@{b}GO_IF_MODE_DEPENDENT_ADDRESS (ADDR, LABEL)@{ub}
     A C statement or compound statement with a conditional @{b}goto LABEL;@{ub}
     executed if memory address X (an RTX) can have different meanings
     depending on the machine mode of the memory reference it is used
     for or if the address is valid for some modes but not others.

     Autoincrement and autodecrement addresses typically have
     mode-dependent effects because the amount of the increment or
     decrement is the size of the operand being addressed.  Some
     machines have other mode-dependent addresses.  Many RISC machines
     have no mode-dependent addresses.

     You may assume that ADDR is a valid address for the machine.

@{b}LEGITIMATE_CONSTANT_P (X)@{ub}
     A C expression that is nonzero if X is a legitimate constant for
     an immediate operand on the target machine.  You can assume that X
     satisfies @{b}CONSTANT_P@{ub}, so you need not check this.  In fact, @{b}1@{ub} is a
     suitable definition for this macro on machines where anything
     @{b}CONSTANT_P@{ub} is valid.

@{b}DONT_RECORD_EQUIVALENCE (NOTE)@{ub}
     A C expression that is nonzero if the @{b}REG_EQUAL@{ub} note X should not
     be promoted to a @{b}REG_EQUIV@{ub} note.

     Define this macro if NOTE refers to a constant that must be
     accepted by @{b}LEGITIMATE_CONSTANT_P@{ub}, but must not appear as an
     immediate operand.

     Most machine descriptions do not need to define this macro.


@endnode

@node "Condition Code" "gcc.guide/Condition Code"
@next "Costs"
@prev "Addressing Modes"
@toc "Target Macros"

Condition Code Status
=====================

   This describes the condition code status.

   The file @{b}conditions.h@{ub} defines a variable @{b}cc_status@{ub} to describe how
the condition code was computed (in case the interpretation of the
condition code depends on the instruction that it was set by).  This
variable contains the RTL expressions on which the condition code is
currently based, and several standard flags.

   Sometimes additional machine-specific flags must be defined in the
machine description header file.  It can also add additional
machine-specific information by defining @{b}CC_STATUS_MDEP@{ub}.

@{b}CC_STATUS_MDEP@{ub}
     C code for a data type which is used for declaring the @{b}mdep@{ub}
     component of @{b}cc_status@{ub}.  It defaults to @{b}int@{ub}.

     This macro is not used on machines that do not use @{b}cc0@{ub}.

@{b}CC_STATUS_MDEP_INIT@{ub}
     A C expression to initialize the @{b}mdep@{ub} field to "empty".  The
     default definition does nothing, since most machines don't use the
     field anyway.  If you want to use the field, you should probably
     define this macro to initialize it.

     This macro is not used on machines that do not use @{b}cc0@{ub}.

@{b}NOTICE_UPDATE_CC (EXP, INSN)@{ub}
     A C compound statement to set the components of @{b}cc_status@{ub}
     appropriately for an insn INSN whose body is EXP.  It is this
     macro's responsibility to recognize insns that set the condition
     code as a byproduct of other activity as well as those that
     explicitly set @{b}(cc0)@{ub}.

     This macro is not used on machines that do not use @{b}cc0@{ub}.

     If there are insns that do not set the condition code but do alter
     other machine registers, this macro must check to see whether they
     invalidate the expressions that the condition code is recorded as
     reflecting.  For example, on the 68000, insns that store in address
     registers do not set the condition code, which means that usually
     @{b}NOTICE_UPDATE_CC@{ub} can leave @{b}cc_status@{ub} unaltered for such insns.
     But suppose that the previous insn set the condition code based on
     location @{b}a4@(102)@{ub} and the current insn stores a new value in @{b}a4@{ub}.
     Although the condition code is not changed by this, it will no
     longer be true that it reflects the contents of @{b}a4@(102)@{ub}.
     Therefore, @{b}NOTICE_UPDATE_CC@{ub} must alter @{b}cc_status@{ub} in this case to
     say that nothing is known about the condition code value.

     The definition of @{b}NOTICE_UPDATE_CC@{ub} must be prepared to deal with
     the results of peephole optimization: insns whose patterns are
     @{b}parallel@{ub} RTXs containing various @{b}reg@{ub}, @{b}mem@{ub} or constants which are
     just the operands.  The RTL structure of these insns is not
     sufficient to indicate what the insns actually do.  What
     @{b}NOTICE_UPDATE_CC@{ub} should do when it sees one is just to run
     @{b}CC_STATUS_INIT@{ub}.

     A possible definition of @{b}NOTICE_UPDATE_CC@{ub} is to call a function
     that looks at an attribute (see @{"Insn Attributes" link "Insn Attributes"}) named, for
     example, @{b}cc@{ub}.  This avoids having detailed information about
     patterns in two places, the @{b}md@{ub} file and in @{b}NOTICE_UPDATE_CC@{ub}.

@{b}EXTRA_CC_MODES@{ub}
     A list of names to be used for additional modes for condition code
     values in registers (see @{"Jump Patterns" link "Jump Patterns"}).  These names are added
     to @{b}enum machine_mode@{ub} and all have class @{b}MODE_CC@{ub}.  By convention,
     they should start with @{b}CC@{ub} and end with @{b}mode@{ub}.

     You should only define this macro if your machine does not use @{b}cc0@{ub}
     and only if additional modes are required.

@{b}EXTRA_CC_NAMES@{ub}
     A list of C strings giving the names for the modes listed in
     @{b}EXTRA_CC_MODES@{ub}.  For example, the Sparc defines this macro and
     @{b}EXTRA_CC_MODES@{ub} as

          #define EXTRA_CC_MODES CC_NOOVmode, CCFPmode, CCFPEmode
          #define EXTRA_CC_NAMES "CC_NOOV", "CCFP", "CCFPE"

     This macro is not required if @{b}EXTRA_CC_MODES@{ub} is not defined.

@{b}SELECT_CC_MODE (OP, X, Y)@{ub}
     Returns a mode from class @{b}MODE_CC@{ub} to be used when comparison
     operation code OP is applied to rtx X and Y.  For example, on the
     Sparc, @{b}SELECT_CC_MODE@{ub} is defined as (see see @{"Jump Patterns" link "Jump Patterns"} for a
     description of the reason for this definition)

          #define SELECT_CC_MODE(OP,X,Y) \\
            (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT          \\
             ? ((OP == EQ || OP == NE) ? CCFPmode : CCFPEmode)    \\
             : ((GET_CODE (X) == PLUS || GET_CODE (X) == MINUS    \\
                 || GET_CODE (X) == NEG) \\
                ? CC_NOOVmode : CCmode))

     You need not define this macro if @{b}EXTRA_CC_MODES@{ub} is not defined.

@{b}CANONICALIZE_COMPARISON (CODE, OP0, OP1)@{ub}
     One some machines not all possible comparisons are defined, but
     you can convert an invalid comparison into a valid one.  For
     example, the Alpha does not have a @{b}GT@{ub} comparison, but you can use
     an @{b}LT@{ub} comparison instead and swap the order of the operands.

     On such machines, define this macro to be a C statement to do any
     required conversions.  CODE is the initial comparison code and OP0
     and OP1 are the left and right operands of the comparison,
     respectively.  You should modify CODE, OP0, and OP1 as required.

     GNU CC will not assume that the comparison resulting from this
     macro is valid but will see if the resulting insn matches a
     pattern in the @{b}md@{ub} file.

     You need not define this macro if it would never change the
     comparison code or operands.

@{b}REVERSIBLE_CC_MODE (MODE)@{ub}
     A C expression whose value is one if it is always safe to reverse a
     comparison whose mode is MODE.  If @{b}SELECT_CC_MODE@{ub} can ever return
     MODE for a floating-point inequality comparison, then
     @{b}REVERSIBLE_CC_MODE (MODE)@{ub} must be zero.

     You need not define this macro if it would always returns zero or
     if the floating-point format is anything other than
     @{b}IEEE_FLOAT_FORMAT@{ub}.  For example, here is the definition used on
     the Sparc, where floating-point inequality comparisons are always
     given @{b}CCFPEmode@{ub}:

          #define REVERSIBLE_CC_MODE(MODE)  ((MODE) != CCFPEmode)


@endnode

@node "Costs" "gcc.guide/Costs"
@next "Sections"
@prev "Condition Code"
@toc "Target Macros"

Describing Relative Costs of Operations
=======================================

   These macros let you describe the relative speed of various
operations on the target machine.

@{b}CONST_COSTS (X, CODE, OUTER_CODE)@{ub}
     A part of a C @{b}switch@{ub} statement that describes the relative costs
     of constant RTL expressions.  It must contain @{b}case@{ub} labels for
     expression codes @{b}const_int@{ub}, @{b}const@{ub}, @{b}symbol_ref@{ub}, @{b}label_ref@{ub} and
     @{b}const_double@{ub}.  Each case must ultimately reach a @{b}return@{ub} statement
     to return the relative cost of the use of that kind of constant
     value in an expression.  The cost may depend on the precise value
     of the constant, which is available for examination in X, and the
     rtx code of the expression in which it is contained, found in
     OUTER_CODE.

     CODE is the expression code--redundant, since it can be obtained
     with @{b}GET_CODE (X)@{ub}.

@{b}RTX_COSTS (X, CODE, OUTER_CODE)@{ub}
     Like @{b}CONST_COSTS@{ub} but applies to nonconstant RTL expressions.  This
     can be used, for example, to indicate how costly a multiply
     instruction is.  In writing this macro, you can use the construct
     @{b}COSTS_N_INSNS (N)@{ub} to specify a cost equal to N fast instructions.
     OUTER_CODE is the code of the expression in which X is contained.

     This macro is optional; do not define it if the default cost
     assumptions are adequate for the target machine.

@{b}DEFAULT_RTX_COSTS (X, CODE, OUTER_CODE)@{ub}
     This macro, if defined, is called for any case not handled by the
     @{b}RTX_COSTS@{ub} or @{b}CONST_COSTS@{ub} macros.  This eliminates the need to put
     case labels into the macro, but the code, or any functions it
     calls, must assume that the RTL in X could be of any type that has
     not already been handled.  The arguments are the same as for
     @{b}RTX_COSTS@{ub}, and the macro should execute a return statement giving
     the cost of any RTL expressions that it can handle.  The default
     cost calculation is used for any RTL for which this macro does not
     return a value.

     This macro is optional; do not define it if the default cost
     assumptions are adequate for the target machine.

@{b}ADDRESS_COST (ADDRESS)@{ub}
     An expression giving the cost of an addressing mode that contains
     ADDRESS.  If not defined, the cost is computed from the ADDRESS
     expression and the @{b}CONST_COSTS@{ub} values.

     For most CISC machines, the default cost is a good approximation
     of the true cost of the addressing mode.  However, on RISC
     machines, all instructions normally have the same length and
     execution time.  Hence all addresses will have equal costs.

     In cases where more than one form of an address is known, the form
     with the lowest cost will be used.  If multiple forms have the
     same, lowest, cost, the one that is the most complex will be used.

     For example, suppose an address that is equal to the sum of a
     register and a constant is used twice in the same basic block.
     When this macro is not defined, the address will be computed in a
     register and memory references will be indirect through that
     register.  On machines where the cost of the addressing mode
     containing the sum is no higher than that of a simple indirect
     reference, this will produce an additional instruction and
     possibly require an additional register.  Proper specification of
     this macro eliminates this overhead for such machines.

     Similar use of this macro is made in strength reduction of loops.

     ADDRESS need not be valid as an address.  In such a case, the cost
     is not relevant and can be any value; invalid addresses need not be
     assigned a different cost.

     On machines where an address involving more than one register is as
     cheap as an address computation involving only one register,
     defining @{b}ADDRESS_COST@{ub} to reflect this can cause two registers to
     be live over a region of code where only one would have been if
     @{b}ADDRESS_COST@{ub} were not defined in that manner.  This effect should
     be considered in the definition of this macro.  Equivalent costs
     should probably only be given to addresses with different numbers
     of registers on machines with lots of registers.

     This macro will normally either not be defined or be defined as a
     constant.

@{b}REGISTER_MOVE_COST (FROM, TO)@{ub}
     A C expression for the cost of moving data from a register in class
     FROM to one in class TO.  The classes are expressed using the
     enumeration values such as @{b}GENERAL_REGS@{ub}.  A value of 2 is the
     default; other values are interpreted relative to that.

     It is not required that the cost always equal 2 when FROM is the
     same as TO; on some machines it is expensive to move between
     registers if they are not general registers.

     If reload sees an insn consisting of a single @{b}set@{ub} between two hard
     registers, and if @{b}REGISTER_MOVE_COST@{ub} applied to their classes
     returns a value of 2, reload does not check to ensure that the
     constraints of the insn are met.  Setting a cost of other than 2
     will allow reload to verify that the constraints are met.  You
     should do this if the @{b}movM@{ub} pattern's constraints do not allow such
     copying.

@{b}MEMORY_MOVE_COST (MODE, CLASS, IN)@{ub}
     A C expression for the cost of moving data of mode MODE between a
     register of class CLASS and memory; IN is zero if the value is to
     be written to memory, non-zero if it is to be read in.  This cost
     is relative to those in @{b}REGISTER_MOVE_COST@{ub}.  If moving between
     registers and memory is more expensive than between two registers,
     you should define this macro to express the relative cost.

     If you do not define this macro, GNU CC uses a default cost of 4
     plus the cost of copying via a secondary reload register, if one is
     needed.  If your machine requires a secondary reload register to
     copy between memory and a register of CLASS but the reload
     mechanism is more complex than copying via an intermediate, define
     this macro to reflect the actual cost of the move.

     GNU CC defines the function @{b}memory_move_secondary_cost@{ub} if
     secondary reloads are needed.  It computes the costs due to
     copying via a secondary register.  If your machine copies from
     memory using a secondary register in the conventional way but the
     default base value of 4 is not correct for your machine, define
     this macro to add some other value to the result of that function.
     The arguments to that function are the same as to this macro.

@{b}BRANCH_COST@{ub}
     A C expression for the cost of a branch instruction.  A value of 1
     is the default; other values are interpreted relative to that.

   Here are additional macros which do not specify precise relative
costs, but only that certain actions are more expensive than GNU CC
would ordinarily expect.

@{b}SLOW_BYTE_ACCESS@{ub}
     Define this macro as a C expression which is nonzero if accessing
     less than a word of memory (i.e. a @{b}char@{ub} or a @{b}short@{ub}) is no faster
     than accessing a word of memory, i.e., if such access require more
     than one instruction or if there is no difference in cost between
     byte and (aligned) word loads.

     When this macro is not defined, the compiler will access a field by
     finding the smallest containing object; when it is defined, a
     fullword load will be used if alignment permits.  Unless bytes
     accesses are faster than word accesses, using word accesses is
     preferable since it may eliminate subsequent memory access if
     subsequent accesses occur to other fields in the same word of the
     structure, but to different bytes.

@{b}SLOW_ZERO_EXTEND@{ub}
     Define this macro if zero-extension (of a @{b}char@{ub} or @{b}short@{ub} to an @{b}int@{ub})
     can be done faster if the destination is a register that is known
     to be zero.

     If you define this macro, you must have instruction patterns that
     recognize RTL structures like this:

          (set (strict_low_part (subreg:QI (reg:SI ...) 0)) ...)

     and likewise for @{b}HImode@{ub}.

@{b}SLOW_UNALIGNED_ACCESS@{ub}
     Define this macro to be the value 1 if unaligned accesses have a
     cost many times greater than aligned accesses, for example if they
     are emulated in a trap handler.

     When this macro is non-zero, the compiler will act as if
     @{b}STRICT_ALIGNMENT@{ub} were non-zero when generating code for block
     moves.  This can cause significantly more instructions to be
     produced.  Therefore, do not set this macro non-zero if unaligned
     accesses only add a cycle or two to the time for a memory access.

     If the value of this macro is always zero, it need not be defined.

@{b}DONT_REDUCE_ADDR@{ub}
     Define this macro to inhibit strength reduction of memory
     addresses.  (On some machines, such strength reduction seems to do
     harm rather than good.)

@{b}MOVE_RATIO@{ub}
     The number of scalar move insns which should be generated instead
     of a string move insn or a library call.  Increasing the value
     will always make code faster, but eventually incurs high cost in
     increased code size.

     If you don't define this, a reasonable default is used.

@{b}NO_FUNCTION_CSE@{ub}
     Define this macro if it is as good or better to call a constant
     function address than to call an address kept in a register.

@{b}NO_RECURSIVE_FUNCTION_CSE@{ub}
     Define this macro if it is as good or better for a function to call
     itself with an explicit address than to call an address kept in a
     register.

@{b}ADJUST_COST (INSN, LINK, DEP_INSN, COST)@{ub}
     A C statement (sans semicolon) to update the integer variable COST
     based on the relationship between INSN that is dependent on
     DEP_INSN through the dependence LINK.  The default is to make no
     adjustment to COST.  This can be used for example to specify to
     the scheduler that an output- or anti-dependence does not incur
     the same cost as a data-dependence.

@{b}ADJUST_PRIORITY (INSN)@{ub}
     A C statement (sans semicolon) to update the integer scheduling
     priority @{b}INSN_PRIORITY(INSN)@{ub}.  Reduce the priority to execute the
     INSN earlier, increase the priority to execute INSN later.    Do
     not define this macro if you do not need to adjust the scheduling
     priorities of insns.


@endnode

@node "Sections" "gcc.guide/Sections"
@next "PIC"
@prev "Costs"
@toc "Target Macros"

Dividing the Output into Sections (Texts, Data, ...)
====================================================

   An object file is divided into sections containing different types of
data.  In the most common case, there are three sections: the @{i}text
section@{ui}, which holds instructions and read-only data; the @{i}data section@{ui},
which holds initialized writable data; and the @{i}bss section@{ui}, which holds
uninitialized data.  Some systems have other kinds of sections.

   The compiler must tell the assembler when to switch sections.  These
macros control what commands to output to tell the assembler this.  You
can also define additional sections.

@{b}TEXT_SECTION_ASM_OP@{ub}
     A C expression whose value is a string containing the assembler
     operation that should precede instructions and read-only data.
     Normally @{b}".text"@{ub} is right.

@{b}DATA_SECTION_ASM_OP@{ub}
     A C expression whose value is a string containing the assembler
     operation to identify the following data as writable initialized
     data.  Normally @{b}".data"@{ub} is right.

@{b}SHARED_SECTION_ASM_OP@{ub}
     If defined, a C expression whose value is a string containing the
     assembler operation to identify the following data as shared data.
     If not defined, @{b}DATA_SECTION_ASM_OP@{ub} will be used.

@{b}BSS_SECTION_ASM_OP@{ub}
     If defined, a C expression whose value is a string containing the
     assembler operation to identify the following data as
     uninitialized global data.  If not defined, and neither
     @{b}ASM_OUTPUT_BSS@{ub} nor @{b}ASM_OUTPUT_ALIGNED_BSS@{ub} are defined,
     uninitialized global data will be output in the data section if
     @{b}-fno-common@{ub} is passed, otherwise @{b}ASM_OUTPUT_COMMON@{ub} will be used.

@{b}SHARED_BSS_SECTION_ASM_OP@{ub}
     If defined, a C expression whose value is a string containing the
     assembler operation to identify the following data as
     uninitialized global shared data.  If not defined, and
     @{b}BSS_SECTION_ASM_OP@{ub} is, the latter will be used.

@{b}INIT_SECTION_ASM_OP@{ub}
     If defined, a C expression whose value is a string containing the
     assembler operation to identify the following data as
     initialization code.  If not defined, GNU CC will assume such a
     section does not exist.

@{b}EXTRA_SECTIONS@{ub}
     A list of names for sections other than the standard two, which are
     @{b}in_text@{ub} and @{b}in_data@{ub}.  You need not define this macro on a system
     with no other sections (that GCC needs to use).

@{b}EXTRA_SECTION_FUNCTIONS@{ub}
     One or more functions to be defined in @{b}varasm.c@{ub}.  These functions
     should do jobs analogous to those of @{b}text_section@{ub} and
     @{b}data_section@{ub}, for your additional sections.  Do not define this
     macro if you do not define @{b}EXTRA_SECTIONS@{ub}.

@{b}READONLY_DATA_SECTION@{ub}
     On most machines, read-only variables, constants, and jump tables
     are placed in the text section.  If this is not the case on your
     machine, this macro should be defined to be the name of a function
     (either @{b}data_section@{ub} or a function defined in @{b}EXTRA_SECTIONS@{ub}) that
     switches to the section to be used for read-only items.

     If these items should be placed in the text section, this macro
     should not be defined.

@{b}SELECT_SECTION (EXP, RELOC)@{ub}
     A C statement or statements to switch to the appropriate section
     for output of EXP.  You can assume that EXP is either a @{b}VAR_DECL@{ub}
     node or a constant of some sort.  RELOC indicates whether the
     initial value of EXP requires link-time relocations.  Select the
     section by calling @{b}text_section@{ub} or one of the alternatives for
     other sections.

     Do not define this macro if you put all read-only variables and
     constants in the read-only data section (usually the text section).

@{b}SELECT_RTX_SECTION (MODE, RTX)@{ub}
     A C statement or statements to switch to the appropriate section
     for output of RTX in mode MODE.  You can assume that RTX is some
     kind of constant in RTL.  The argument MODE is redundant except in
     the case of a @{b}const_int@{ub} rtx.  Select the section by calling
     @{b}text_section@{ub} or one of the alternatives for other sections.

     Do not define this macro if you put all constants in the read-only
     data section.

@{b}JUMP_TABLES_IN_TEXT_SECTION@{ub}
     Define this macro to be an expression with a non-zero value if jump
     tables (for @{b}tablejump@{ub} insns) should be output in the text section,
     along with the assembler instructions.  Otherwise, the readonly
     data section is used.

     This macro is irrelevant if there is no separate readonly data
     section.

@{b}ENCODE_SECTION_INFO (DECL)@{ub}
     Define this macro if references to a symbol must be treated
     differently depending on something about the variable or function
     named by the symbol (such as what section it is in).

     The macro definition, if any, is executed immediately after the
     rtl for DECL has been created and stored in @{b}DECL_RTL (DECL)@{ub}.  The
     value of the rtl will be a @{b}mem@{ub} whose address is a @{b}symbol_ref@{ub}.

     The usual thing for this macro to do is to record a flag in the
     @{b}symbol_ref@{ub} (such as @{b}SYMBOL_REF_FLAG@{ub}) or to store a modified name
     string in the @{b}symbol_ref@{ub} (if one bit is not enough information).

@{b}STRIP_NAME_ENCODING (VAR, SYM_NAME)@{ub}
     Decode SYM_NAME and store the real name part in VAR, sans the
     characters that encode section info.  Define this macro if
     @{b}ENCODE_SECTION_INFO@{ub} alters the symbol's name string.

@{b}UNIQUE_SECTION_P (DECL)@{ub}
     A C expression which evaluates to true if DECL should be placed
     into a unique section for some target-specific reason.  If you do
     not define this macro, the default is @{b}0@{ub}.  Note that the flag
     @{b}-ffunction-sections@{ub} will also cause functions to be placed into
     unique sections.

@{b}UNIQUE_SECTION (DECL, RELOC)@{ub}
     A C statement to build up a unique section name, expressed as a
     STRING_CST node, and assign it to @{b}DECL_SECTION_NAME (DECL)@{ub}.  RELOC
     indicates whether the initial value of EXP requires link-time
     relocations.  If you do not define this macro, GNU CC will use the
     symbol name prefixed by @{b}.@{ub} as the section name.


@endnode

@node "PIC" "gcc.guide/PIC"
@next "Assembler Format"
@prev "Sections"
@toc "Target Macros"

Position Independent Code
=========================

   This section describes macros that help implement generation of
position independent code.  Simply defining these macros is not enough
to generate valid PIC; you must also add support to the macros
@{b}GO_IF_LEGITIMATE_ADDRESS@{ub} and @{b}PRINT_OPERAND_ADDRESS@{ub}, as well as
@{b}LEGITIMIZE_ADDRESS@{ub}.  You must modify the definition of @{b}movsi@{ub} to do
something appropriate when the source operand contains a symbolic
address.  You may also need to alter the handling of switch statements
so that they use relative addresses.

@{b}PIC_OFFSET_TABLE_REGNUM@{ub}
     The register number of the register used to address a table of
     static data addresses in memory.  In some cases this register is
     defined by a processor's "application binary interface" (ABI).
     When this macro is defined, RTL is generated for this register
     once, as with the stack pointer and frame pointer registers.  If
     this macro is not defined, it is up to the machine-dependent files
     to allocate such a register (if necessary).

@{b}PIC_OFFSET_TABLE_REG_CALL_CLOBBERED@{ub}
     Define this macro if the register defined by
     @{b}PIC_OFFSET_TABLE_REGNUM@{ub} is clobbered by calls.  Do not define this
     macro if @{b}PPIC_OFFSET_TABLE_REGNUM@{ub} is not defined.

@{b}FINALIZE_PIC@{ub}
     By generating position-independent code, when two different
     programs (A and B) share a common library (libC.a), the text of
     the library can be shared whether or not the library is linked at
     the same address for both programs.  In some of these
     environments, position-independent code requires not only the use
     of different addressing modes, but also special code to enable the
     use of these addressing modes.

     The @{b}FINALIZE_PIC@{ub} macro serves as a hook to emit these special
     codes once the function is being compiled into assembly code, but
     not before.  (It is not done before, because in the case of
     compiling an inline function, it would lead to multiple PIC
     prologues being included in functions which used inline functions
     and were compiled to assembly language.)

@{b}LEGITIMATE_PIC_OPERAND_P (X)@{ub}
     A C expression that is nonzero if X is a legitimate immediate
     operand on the target machine when generating position independent
     code.  You can assume that X satisfies @{b}CONSTANT_P@{ub}, so you need not
     check this.  You can also assume FLAG_PIC is true, so you need not
     check it either.  You need not define this macro if all constants
     (including @{b}SYMBOL_REF@{ub}) can be immediate operands when generating
     position independent code.


@endnode

@node "Assembler Format" "gcc.guide/Assembler Format"
@next "Debugging Info"
@prev "PIC"
@toc "Target Macros"

Defining the Output Assembler Language
======================================

   This section describes macros whose principal purpose is to describe
how to write instructions in assembler language-rather than what the
instructions do.


 @{" File Framework      " link "File Framework"}  Structural information for the assembler file.
 @{" Data Output         " link "Data Output"}  Output of constants (numbers, strings, addresses).
 @{" Uninitialized Data  " link "Uninitialized Data"}  Output of uninitialized variables.
 @{" Label Output        " link "Label Output"}  Output and generation of labels.
 @{" Initialization      " link "Initialization"}  General principles of initialization
			   and termination routines.
 @{" Macros for Initialization " link "Macros for Initialization"}  
			 Specific macros that control the handling of
			   initialization and termination routines.
 @{" Instruction Output  " link "Instruction Output"}  Output of actual instructions.
 @{" Dispatch Tables     " link "Dispatch Tables"}  Output of jump tables.
 @{" Exception Region Output " link "Exception Region Output"}  Output of exception region code.
 @{" Alignment Output    " link "Alignment Output"}  Pseudo ops for alignment and skipping data.


@endnode

@node "File Framework" "gcc.guide/File Framework"
@next "Data Output"
@toc "Assembler Format"

The Overall Framework of an Assembler File
------------------------------------------

   This describes the overall framework of an assembler file.

@{b}ASM_FILE_START (STREAM)@{ub}
     A C expression which outputs to the stdio stream STREAM some
     appropriate text to go at the start of an assembler file.

     Normally this macro is defined to output a line containing
     @{b}#NO_APP@{ub}, which is a comment that has no effect on most assemblers
     but tells the GNU assembler that it can save time by not checking
     for certain assembler constructs.

     On systems that use SDB, it is necessary to output certain
     commands; see @{b}attasm.h@{ub}.

@{b}ASM_FILE_END (STREAM)@{ub}
     A C expression which outputs to the stdio stream STREAM some
     appropriate text to go at the end of an assembler file.

     If this macro is not defined, the default is to output nothing
     special at the end of the file.  Most systems don't require any
     definition.

     On systems that use SDB, it is necessary to output certain
     commands; see @{b}attasm.h@{ub}.

@{b}ASM_IDENTIFY_GCC (FILE)@{ub}
     A C statement to output assembler commands which will identify the
     object file as having been compiled with GNU CC (or another GNU
     compiler).

     If you don't define this macro, the string @{b}gcc_compiled.:@{ub} is
     output.  This string is calculated to define a symbol which, on
     BSD systems, will never be defined for any other reason.  GDB
     checks for the presence of this symbol when reading the symbol
     table of an executable.

     On non-BSD systems, you must arrange communication with GDB in
     some other fashion.  If GDB is not used on your system, you can
     define this macro with an empty body.

@{b}ASM_COMMENT_START@{ub}
     A C string constant describing how to begin a comment in the target
     assembler language.  The compiler assumes that the comment will
     end at the end of the line.

@{b}ASM_APP_ON@{ub}
     A C string constant for text to be output before each @{b}asm@{ub}
     statement or group of consecutive ones.  Normally this is @{b}"#APP"@{ub},
     which is a comment that has no effect on most assemblers but tells
     the GNU assembler that it must check the lines that follow for all
     valid assembler constructs.

@{b}ASM_APP_OFF@{ub}
     A C string constant for text to be output after each @{b}asm@{ub} statement
     or group of consecutive ones.  Normally this is @{b}"#NO_APP"@{ub}, which
     tells the GNU assembler to resume making the time-saving
     assumptions that are valid for ordinary compiler output.

@{b}ASM_OUTPUT_SOURCE_FILENAME (STREAM, NAME)@{ub}
     A C statement to output COFF information or DWARF debugging
     information which indicates that filename NAME is the current
     source file to the stdio stream STREAM.

     This macro need not be defined if the standard form of output for
     the file format in use is appropriate.

@{b}OUTPUT_QUOTED_STRING (STREAM, NAME)@{ub}
     A C statement to output the string STRING to the stdio stream
     STREAM.  If you do not call the function @{b}output_quoted_string@{ub} in
     your config files, GNU CC will only call it to output filenames to
     the assembler source.  So you can use it to canonicalize the format
     of the filename using this macro.

@{b}ASM_OUTPUT_SOURCE_LINE (STREAM, LINE)@{ub}
     A C statement to output DBX or SDB debugging information before
     code for line number LINE of the current source file to the stdio
     stream STREAM.

     This macro need not be defined if the standard form of debugging
     information for the debugger in use is appropriate.

@{b}ASM_OUTPUT_IDENT (STREAM, STRING)@{ub}
     A C statement to output something to the assembler file to handle a
     @{b}#ident@{ub} directive containing the text STRING.  If this macro is not
     defined, nothing is output for a @{b}#ident@{ub} directive.

@{b}ASM_OUTPUT_SECTION_NAME (STREAM, DECL, NAME, RELOC)@{ub}
     A C statement to output something to the assembler file to switch
     to section NAME for object DECL which is either a @{b}FUNCTION_DECL@{ub}, a
     @{b}VAR_DECL@{ub} or @{b}NULL_TREE@{ub}.  RELOC indicates whether the initial value
     of EXP requires link-time relocations.  Some target formats do not
     support arbitrary sections.  Do not define this macro in such
     cases.

     At present this macro is only used to support section attributes.
     When this macro is undefined, section attributes are disabled.

@{b}OBJC_PROLOGUE@{ub}
     A C statement to output any assembler statements which are
     required to precede any Objective C object definitions or message
     sending.  The statement is executed only when compiling an
     Objective C program.


@endnode

@node "Data Output" "gcc.guide/Data Output"
@next "Uninitialized Data"
@prev "File Framework"
@toc "Assembler Format"

Output of Data
--------------

   This describes data output.

@{b}ASM_OUTPUT_LONG_DOUBLE (STREAM, VALUE)@{ub}
@{b}ASM_OUTPUT_DOUBLE (STREAM, VALUE)@{ub}
@{b}ASM_OUTPUT_FLOAT (STREAM, VALUE)@{ub}
@{b}ASM_OUTPUT_THREE_QUARTER_FLOAT (STREAM, VALUE)@{ub}
@{b}ASM_OUTPUT_SHORT_FLOAT (STREAM, VALUE)@{ub}
@{b}ASM_OUTPUT_BYTE_FLOAT (STREAM, VALUE)@{ub}
     A C statement to output to the stdio stream STREAM an assembler
     instruction to assemble a floating-point constant of @{b}TFmode@{ub},
     @{b}DFmode@{ub}, @{b}SFmode@{ub}, @{b}TQFmode@{ub}, @{b}HFmode@{ub}, or @{b}QFmode@{ub}, respectively, whose
     value is VALUE.  VALUE will be a C expression of type
     @{b}REAL_VALUE_TYPE@{ub}.  Macros such as @{b}REAL_VALUE_TO_TARGET_DOUBLE@{ub} are
     useful for writing these definitions.

@{b}ASM_OUTPUT_QUADRUPLE_INT (STREAM, EXP)@{ub}
@{b}ASM_OUTPUT_DOUBLE_INT (STREAM, EXP)@{ub}
@{b}ASM_OUTPUT_INT (STREAM, EXP)@{ub}
@{b}ASM_OUTPUT_SHORT (STREAM, EXP)@{ub}
@{b}ASM_OUTPUT_CHAR (STREAM, EXP)@{ub}
     A C statement to output to the stdio stream STREAM an assembler
     instruction to assemble an integer of 16, 8, 4, 2 or 1 bytes,
     respectively, whose value is VALUE.  The argument EXP will be an
     RTL expression which represents a constant value.  Use
     @{b}output_addr_const (STREAM, EXP)@{ub} to output this value as an
     assembler expression.

     For sizes larger than @{b}UNITS_PER_WORD@{ub}, if the action of a macro
     would be identical to repeatedly calling the macro corresponding to
     a size of @{b}UNITS_PER_WORD@{ub}, once for each word, you need not define
     the macro.

@{b}ASM_OUTPUT_BYTE (STREAM, VALUE)@{ub}
     A C statement to output to the stdio stream STREAM an assembler
     instruction to assemble a single byte containing the number VALUE.

@{b}ASM_BYTE_OP@{ub}
     A C string constant giving the pseudo-op to use for a sequence of
     single-byte constants.  If this macro is not defined, the default
     is @{b}"byte"@{ub}.

@{b}ASM_OUTPUT_ASCII (STREAM, PTR, LEN)@{ub}
     A C statement to output to the stdio stream STREAM an assembler
     instruction to assemble a string constant containing the LEN bytes
     at PTR.  PTR will be a C expression of type @{b}char *@{ub} and LEN a C
     expression of type @{b}int@{ub}.

     If the assembler has a @{b}.ascii@{ub} pseudo-op as found in the Berkeley
     Unix assembler, do not define the macro @{b}ASM_OUTPUT_ASCII@{ub}.

@{b}CONSTANT_POOL_BEFORE_FUNCTION@{ub}
     You may define this macro as a C expression.  You should define the
     expression to have a non-zero value if GNU CC should output the
     constant pool for a function before the code for the function, or
     a zero value if GNU CC should output the constant pool after the
     function.  If you do not define this macro, the usual case, GNU CC
     will output the constant pool before the function.

@{b}ASM_OUTPUT_POOL_PROLOGUE (FILE FUNNAME FUNDECL SIZE)@{ub}
     A C statement to output assembler commands to define the start of
     the constant pool for a function.  FUNNAME is a string giving the
     name of the function.  Should the return type of the function be
     required, it can be obtained via FUNDECL.  SIZE is the size, in
     bytes, of the constant pool that will be written immediately after
     this call.

     If no constant-pool prefix is required, the usual case, this macro
     need not be defined.

@{b}ASM_OUTPUT_SPECIAL_POOL_ENTRY (FILE, X, MODE, ALIGN, LABELNO, JUMPTO)@{ub}
     A C statement (with or without semicolon) to output a constant in
     the constant pool, if it needs special treatment.  (This macro
     need not do anything for RTL expressions that can be output
     normally.)

     The argument FILE is the standard I/O stream to output the
     assembler code on.  X is the RTL expression for the constant to
     output, and MODE is the machine mode (in case X is a @{b}const_int@{ub}).
     ALIGN is the required alignment for the value X; you should output
     an assembler directive to force this much alignment.

     The argument LABELNO is a number to use in an internal label for
     the address of this pool entry.  The definition of this macro is
     responsible for outputting the label definition at the proper
     place.  Here is how to do this:

          ASM_OUTPUT_INTERNAL_LABEL (FILE, "LC", LABELNO);

     When you output a pool entry specially, you should end with a @{b}goto@{ub}
     to the label JUMPTO.  This will prevent the same pool entry from
     being output a second time in the usual manner.

     You need not define this macro if it would do nothing.

@{b}CONSTANT_AFTER_FUNCTION_P (EXP)@{ub}
     Define this macro as a C expression which is nonzero if the
     constant EXP, of type @{b}tree@{ub}, should be output after the code for a
     function.  The compiler will normally output all constants before
     the function; you need not define this macro if this is OK.

@{b}ASM_OUTPUT_POOL_EPILOGUE (FILE FUNNAME FUNDECL SIZE)@{ub}
     A C statement to output assembler commands to at the end of the
     constant pool for a function.  FUNNAME is a string giving the name
     of the function.  Should the return type of the function be
     required, you can obtain it via FUNDECL.  SIZE is the size, in
     bytes, of the constant pool that GNU CC wrote immediately before
     this call.

     If no constant-pool epilogue is required, the usual case, you need
     not define this macro.

@{b}IS_ASM_LOGICAL_LINE_SEPARATOR (C)@{ub}
     Define this macro as a C expression which is nonzero if C is used
     as a logical line separator by the assembler.

     If you do not define this macro, the default is that only the
     character @{b};@{ub} is treated as a logical line separator.

@{b}ASM_OPEN_PAREN@{ub}
@{b}ASM_CLOSE_PAREN@{ub}
     These macros are defined as C string constant, describing the
     syntax in the assembler for grouping arithmetic expressions.  The
     following definitions are correct for most assemblers:

          #define ASM_OPEN_PAREN "("
          #define ASM_CLOSE_PAREN ")"

   These macros are provided by @{b}real.h@{ub} for writing the definitions of
@{b}ASM_OUTPUT_DOUBLE@{ub} and the like:

@{b}REAL_VALUE_TO_TARGET_SINGLE (X, L)@{ub}
@{b}REAL_VALUE_TO_TARGET_DOUBLE (X, L)@{ub}
@{b}REAL_VALUE_TO_TARGET_LONG_DOUBLE (X, L)@{ub}
     These translate X, of type @{b}REAL_VALUE_TYPE@{ub}, to the target's
     floating point representation, and store its bit pattern in the
     array of @{b}long int@{ub} whose address is L.  The number of elements in
     the output array is determined by the size of the desired target
     floating point data type: 32 bits of it go in each @{b}long int@{ub} array
     element.  Each array element holds 32 bits of the result, even if
     @{b}long int@{ub} is wider than 32 bits on the host machine.

     The array element values are designed so that you can print them
     out using @{b}fprintf@{ub} in the order they should appear in the target
     machine's memory.

@{b}REAL_VALUE_TO_DECIMAL (X, FORMAT, STRING)@{ub}
     This macro converts X, of type @{b}REAL_VALUE_TYPE@{ub}, to a decimal
     number and stores it as a string into STRING.  You must pass, as
     STRING, the address of a long enough block of space to hold the
     result.

     The argument FORMAT is a @{b}printf@{ub}-specification that serves as a
     suggestion for how to format the output string.


@endnode

@node "Uninitialized Data" "gcc.guide/Uninitialized Data"
@next "Label Output"
@prev "Data Output"
@toc "Assembler Format"

Output of Uninitialized Variables
---------------------------------

   Each of the macros in this section is used to do the whole job of
outputting a single uninitialized variable.

@{b}ASM_OUTPUT_COMMON (STREAM, NAME, SIZE, ROUNDED)@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM the assembler definition of a common-label named NAME whose
     size is SIZE bytes.  The variable ROUNDED is the size rounded up
     to whatever alignment the caller wants.

     Use the expression @{b}assemble_name (STREAM, NAME)@{ub} to output the name
     itself; before and after that, output the additional assembler
     syntax for defining the name, and a newline.

     This macro controls how the assembler definitions of uninitialized
     common global variables are output.

@{b}ASM_OUTPUT_ALIGNED_COMMON (STREAM, NAME, SIZE, ALIGNMENT)@{ub}
     Like @{b}ASM_OUTPUT_COMMON@{ub} except takes the required alignment as a
     separate, explicit argument.  If you define this macro, it is used
     in place of @{b}ASM_OUTPUT_COMMON@{ub}, and gives you more flexibility in
     handling the required alignment of the variable.  The alignment is
     specified as the number of bits.

@{b}ASM_OUTPUT_ALIGNED_DECL_COMMON (STREAM, DECL, NAME, SIZE, ALIGNMENT)@{ub}
     Like @{b}ASM_OUTPUT_ALIGNED_COMMON@{ub} except that DECL of the variable to
     be output, if there is one, or @{b}NULL_TREE@{ub} if there is not
     corresponding variable.  If you define this macro, GNU CC wil use
     it in place of both @{b}ASM_OUTPUT_COMMON@{ub} and
     @{b}ASM_OUTPUT_ALIGNED_COMMON@{ub}.  Define this macro when you need to see
     the variable's decl in order to chose what to output.

@{b}ASM_OUTPUT_SHARED_COMMON (STREAM, NAME, SIZE, ROUNDED)@{ub}
     If defined, it is similar to @{b}ASM_OUTPUT_COMMON@{ub}, except that it is
     used when NAME is shared.  If not defined, @{b}ASM_OUTPUT_COMMON@{ub} will
     be used.

@{b}ASM_OUTPUT_BSS (STREAM, DECL, NAME, SIZE, ROUNDED)@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM the assembler definition of uninitialized global DECL named
     NAME whose size is SIZE bytes.  The variable ROUNDED is the size
     rounded up to whatever alignment the caller wants.

     Try to use function @{b}asm_output_bss@{ub} defined in @{b}varasm.c@{ub} when
     defining this macro.  If unable, use the expression @{b}assemble_name
     (STREAM, NAME)@{ub} to output the name itself; before and after that,
     output the additional assembler syntax for defining the name, and
     a newline.

     This macro controls how the assembler definitions of uninitialized
     global variables are output.  This macro exists to properly
     support languages like @{b}c++@{ub} which do not have @{b}common@{ub} data.
     However, this macro currently is not defined for all targets.  If
     this macro and @{b}ASM_OUTPUT_ALIGNED_BSS@{ub} are not defined then
     @{b}ASM_OUTPUT_COMMON@{ub} or @{b}ASM_OUTPUT_ALIGNED_COMMON@{ub} or
     @{b}ASM_OUTPUT_ALIGNED_DECL_COMMON@{ub} is used.

@{b}ASM_OUTPUT_ALIGNED_BSS (STREAM, DECL, NAME, SIZE, ALIGNMENT)@{ub}
     Like @{b}ASM_OUTPUT_BSS@{ub} except takes the required alignment as a
     separate, explicit argument.  If you define this macro, it is used
     in place of @{b}ASM_OUTPUT_BSS@{ub}, and gives you more flexibility in
     handling the required alignment of the variable.  The alignment is
     specified as the number of bits.

     Try to use function @{b}asm_output_aligned_bss@{ub} defined in file
     @{b}varasm.c@{ub} when defining this macro.

@{b}ASM_OUTPUT_SHARED_BSS (STREAM, DECL, NAME, SIZE, ROUNDED)@{ub}
     If defined, it is similar to @{b}ASM_OUTPUT_BSS@{ub}, except that it is
     used when NAME is shared.  If not defined, @{b}ASM_OUTPUT_BSS@{ub} will be
     used.

@{b}ASM_OUTPUT_LOCAL (STREAM, NAME, SIZE, ROUNDED)@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM the assembler definition of a local-common-label named NAME
     whose size is SIZE bytes.  The variable ROUNDED is the size
     rounded up to whatever alignment the caller wants.

     Use the expression @{b}assemble_name (STREAM, NAME)@{ub} to output the name
     itself; before and after that, output the additional assembler
     syntax for defining the name, and a newline.

     This macro controls how the assembler definitions of uninitialized
     static variables are output.

@{b}ASM_OUTPUT_ALIGNED_LOCAL (STREAM, NAME, SIZE, ALIGNMENT)@{ub}
     Like @{b}ASM_OUTPUT_LOCAL@{ub} except takes the required alignment as a
     separate, explicit argument.  If you define this macro, it is used
     in place of @{b}ASM_OUTPUT_LOCAL@{ub}, and gives you more flexibility in
     handling the required alignment of the variable.  The alignment is
     specified as the number of bits.

@{b}ASM_OUTPUT_ALIGNED_DECL_LOCAL (STREAM, DECL, NAME, SIZE, ALIGNMENT)@{ub}
     Like @{b}ASM_OUTPUT_ALIGNED_DECL@{ub} except that DECL of the variable to
     be output, if there is one, or @{b}NULL_TREE@{ub} if there is not
     corresponding variable.  If you define this macro, GNU CC wil use
     it in place of both @{b}ASM_OUTPUT_DECL@{ub} and @{b}ASM_OUTPUT_ALIGNED_DECL@{ub}.
     Define this macro when you need to see the variable's decl in
     order to chose what to output.

@{b}ASM_OUTPUT_SHARED_LOCAL (STREAM, NAME, SIZE, ROUNDED)@{ub}
     If defined, it is similar to @{b}ASM_OUTPUT_LOCAL@{ub}, except that it is
     used when NAME is shared.  If not defined, @{b}ASM_OUTPUT_LOCAL@{ub} will
     be used.


@endnode

@node "Label Output" "gcc.guide/Label Output"
@next "Initialization"
@prev "Uninitialized Data"
@toc "Assembler Format"

Output and Generation of Labels
-------------------------------

   This is about outputting labels.

@{b}ASM_OUTPUT_LABEL (STREAM, NAME)@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM the assembler definition of a label named NAME.  Use the
     expression @{b}assemble_name (STREAM, NAME)@{ub} to output the name itself;
     before and after that, output the additional assembler syntax for
     defining the name, and a newline.

@{b}ASM_DECLARE_FUNCTION_NAME (STREAM, NAME, DECL)@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM any text necessary for declaring the name NAME of a
     function which is being defined.  This macro is responsible for
     outputting the label definition (perhaps using @{b}ASM_OUTPUT_LABEL@{ub}).
     The argument DECL is the @{b}FUNCTION_DECL@{ub} tree node representing the
     function.

     If this macro is not defined, then the function name is defined in
     the usual manner as a label (by means of @{b}ASM_OUTPUT_LABEL@{ub}).

@{b}ASM_DECLARE_FUNCTION_SIZE (STREAM, NAME, DECL)@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM any text necessary for declaring the size of a function
     which is being defined.  The argument NAME is the name of the
     function.  The argument DECL is the @{b}FUNCTION_DECL@{ub} tree node
     representing the function.

     If this macro is not defined, then the function size is not
     defined.

@{b}ASM_DECLARE_OBJECT_NAME (STREAM, NAME, DECL)@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM any text necessary for declaring the name NAME of an
     initialized variable which is being defined.  This macro must
     output the label definition (perhaps using @{b}ASM_OUTPUT_LABEL@{ub}).  The
     argument DECL is the @{b}VAR_DECL@{ub} tree node representing the variable.

     If this macro is not defined, then the variable name is defined in
     the usual manner as a label (by means of @{b}ASM_OUTPUT_LABEL@{ub}).

@{b}ASM_FINISH_DECLARE_OBJECT (STREAM, DECL, TOPLEVEL, ATEND)@{ub}
     A C statement (sans semicolon) to finish up declaring a variable
     name once the compiler has processed its initializer fully and
     thus has had a chance to determine the size of an array when
     controlled by an initializer.  This is used on systems where it's
     necessary to declare something about the size of the object.

     If you don't define this macro, that is equivalent to defining it
     to do nothing.

@{b}ASM_GLOBALIZE_LABEL (STREAM, NAME)@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM some commands that will make the label NAME global; that
     is, available for reference from other files.  Use the expression
     @{b}assemble_name (STREAM, NAME)@{ub} to output the name itself; before and
     after that, output the additional assembler syntax for making that
     name global, and a newline.

@{b}ASM_WEAKEN_LABEL@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM some commands that will make the label NAME weak; that is,
     available for reference from other files but only used if no other
     definition is available.  Use the expression @{b}assemble_name
     (STREAM, NAME)@{ub} to output the name itself; before and after that,
     output the additional assembler syntax for making that name weak,
     and a newline.

     If you don't define this macro, GNU CC will not support weak
     symbols and you should not define the @{b}SUPPORTS_WEAK@{ub} macro.

@{b}SUPPORTS_WEAK@{ub}
     A C expression which evaluates to true if the target supports weak
     symbols.

     If you don't define this macro, @{b}defaults.h@{ub} provides a default
     definition.  If @{b}ASM_WEAKEN_LABEL@{ub} is defined, the default
     definition is @{b}1@{ub}; otherwise, it is @{b}0@{ub}.  Define this macro if you
     want to control weak symbol support with a compiler flag such as
     @{b}-melf@{ub}.

@{b}MAKE_DECL_ONE_ONLY@{ub}
     A C statement (sans semicolon) to mark DECL to be emitted as a
     public symbol such that extra copies in multiple translation units
     will be discarded by the linker.  Define this macro if your object
     file format provides support for this concept, such as the @{b}COMDAT@{ub}
     section flags in the Microsoft Windows PE/COFF format, and this
     support requires changes to DECL, such as putting it in a separate
     section.

@{b}SUPPORTS_ONE_ONLY@{ub}
     A C expression which evaluates to true if the target supports
     one-only semantics.

     If you don't define this macro, @{b}varasm.c@{ub} provides a default
     definition.  If @{b}MAKE_DECL_ONE_ONLY@{ub} is defined, the default
     definition is @{b}1@{ub}; otherwise, it is @{b}0@{ub}.  Define this macro if you
     want to control one-only symbol support with a compiler flag, or if
     setting the @{b}DECL_ONE_ONLY@{ub} flag is enough to mark a declaration to
     be emitted as one-only.

@{b}ASM_OUTPUT_EXTERNAL (STREAM, DECL, NAME)@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM any text necessary for declaring the name of an external
     symbol named NAME which is referenced in this compilation but not
     defined.  The value of DECL is the tree node for the declaration.

     This macro need not be defined if it does not need to output
     anything.  The GNU assembler and most Unix assemblers don't
     require anything.

@{b}ASM_OUTPUT_EXTERNAL_LIBCALL (STREAM, SYMREF)@{ub}
     A C statement (sans semicolon) to output on STREAM an assembler
     pseudo-op to declare a library function name external.  The name
     of the library function is given by SYMREF, which has type @{b}rtx@{ub} and
     is a @{b}symbol_ref@{ub}.

     This macro need not be defined if it does not need to output
     anything.  The GNU assembler and most Unix assemblers don't
     require anything.

@{b}ASM_OUTPUT_LABELREF (STREAM, NAME)@{ub}
     A C statement (sans semicolon) to output to the stdio stream
     STREAM a reference in assembler syntax to a label named NAME.
     This should add @{b}_@{ub} to the front of the name, if that is customary
     on your operating system, as it is in most Berkeley Unix systems.
     This macro is used in @{b}assemble_name@{ub}.

@{b}ASM_OUTPUT_INTERNAL_LABEL (STREAM, PREFIX, NUM)@{ub}
     A C statement to output to the stdio stream STREAM a label whose
     name is made from the string PREFIX and the number NUM.

     It is absolutely essential that these labels be distinct from the
     labels used for user-level functions and variables.  Otherwise,
     certain programs will have name conflicts with internal labels.

     It is desirable to exclude internal labels from the symbol table
     of the object file.  Most assemblers have a naming convention for
     labels that should be excluded; on many systems, the letter @{b}L@{ub} at
     the beginning of a label has this effect.  You should find out what
     convention your system uses, and follow it.

     The usual definition of this macro is as follows:

          fprintf (STREAM, "L%s%d:\\n", PREFIX, NUM)

@{b}ASM_GENERATE_INTERNAL_LABEL (STRING, PREFIX, NUM)@{ub}
     A C statement to store into the string STRING a label whose name
     is made from the string PREFIX and the number NUM.

     This string, when output subsequently by @{b}assemble_name@{ub}, should
     produce the output that @{b}ASM_OUTPUT_INTERNAL_LABEL@{ub} would produce
     with the same PREFIX and NUM.

     If the string begins with @{b}*@{ub}, then @{b}assemble_name@{ub} will output the
     rest of the string unchanged.  It is often convenient for
     @{b}ASM_GENERATE_INTERNAL_LABEL@{ub} to use @{b}*@{ub} in this way.  If the string
     doesn't start with @{b}*@{ub}, then @{b}ASM_OUTPUT_LABELREF@{ub} gets to output the
     string, and may change it.  (Of course, @{b}ASM_OUTPUT_LABELREF@{ub} is
     also part of your machine description, so you should know what it
     does on your machine.)

@{b}ASM_FORMAT_PRIVATE_NAME (OUTVAR, NAME, NUMBER)@{ub}
     A C expression to assign to OUTVAR (which is a variable of type
     @{b}char *@{ub}) a newly allocated string made from the string NAME and the
     number NUMBER, with some suitable punctuation added.  Use @{b}alloca@{ub}
     to get space for the string.

     The string will be used as an argument to @{b}ASM_OUTPUT_LABELREF@{ub} to
     produce an assembler label for an internal static variable whose
     name is NAME.  Therefore, the string must be such as to result in
     valid assembler code.  The argument NUMBER is different each time
     this macro is executed; it prevents conflicts between
     similarly-named internal static variables in different scopes.

     Ideally this string should not be a valid C identifier, to prevent
     any conflict with the user's own symbols.  Most assemblers allow
     periods or percent signs in assembler symbols; putting at least
     one of these between the name and the number will suffice.

@{b}ASM_OUTPUT_DEF (STREAM, NAME, VALUE)@{ub}
     A C statement to output to the stdio stream STREAM assembler code
     which defines (equates) the symbol NAME to have the value VALUE.

     If SET_ASM_OP is defined, a default definition is provided which is
     correct for most systems.

@{b}ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL (STREAM, SYMBOL, HIGH, LOW)@{ub}
     A C statement to output to the stdio stream STREAM assembler code
     which defines (equates) the symbol SYMBOL to have a value equal to
     the difference of the two symbols HIGH and LOW, i.e.  HIGH minus
     LOW.  GNU CC guarantees that the symbols HIGH and LOW are already
     known by the assembler so that the difference resolves into a
     constant.

     If SET_ASM_OP is defined, a default definition is provided which is
     correct for most systems.

@{b}ASM_OUTPUT_WEAK_ALIAS (STREAM, NAME, VALUE)@{ub}
     A C statement to output to the stdio stream STREAM assembler code
     which defines (equates) the weak symbol NAME to have the value
     VALUE.

     Define this macro if the target only supports weak aliases; define
     ASM_OUTPUT_DEF instead if possible.

@{b}OBJC_GEN_METHOD_LABEL (BUF, IS_INST, CLASS_NAME, CAT_NAME, SEL_NAME)@{ub}
     Define this macro to override the default assembler names used for
     Objective C methods.

     The default name is a unique method number followed by the name of
     the class (e.g. @{b}_1_Foo@{ub}).  For methods in categories, the name of
     the category is also included in the assembler name (e.g.
     @{b}_1_Foo_Bar@{ub}).

     These names are safe on most systems, but make debugging difficult
     since the method's selector is not present in the name.
     Therefore, particular systems define other ways of computing names.

     BUF is an expression of type @{b}char *@{ub} which gives you a buffer in
     which to store the name; its length is as long as CLASS_NAME,
     CAT_NAME and SEL_NAME put together, plus 50 characters extra.

     The argument IS_INST specifies whether the method is an instance
     method or a class method; CLASS_NAME is the name of the class;
     CAT_NAME is the name of the category (or NULL if the method is not
     in a category); and SEL_NAME is the name of the selector.

     On systems where the assembler can handle quoted names, you can
     use this macro to provide more human-readable names.


@endnode

@node "Initialization" "gcc.guide/Initialization"
@next "Macros for Initialization"
@prev "Label Output"
@toc "Assembler Format"

How Initialization Functions Are Handled
----------------------------------------

   The compiled code for certain languages includes @{i}constructors@{ui} (also
called @{i}initialization routines@{ui})--functions to initialize data in the
program when the program is started.  These functions need to be called
before the program is "started"--that is to say, before @{b}main@{ub} is called.

   Compiling some languages generates @{i}destructors@{ui} (also called
@{i}termination routines@{ui}) that should be called when the program terminates.

   To make the initialization and termination functions work, the
compiler must output something in the assembler code to cause those
functions to be called at the appropriate time.  When you port the
compiler to a new system, you need to specify how to do this.

   There are two major ways that GCC currently supports the execution of
initialization and termination functions.  Each way has two variants.
Much of the structure is common to all four variations.

   The linker must build two lists of these functions--a list of
initialization functions, called @{b}__CTOR_LIST__@{ub}, and a list of
termination functions, called @{b}__DTOR_LIST__@{ub}.

   Each list always begins with an ignored function pointer (which may
hold 0, -1, or a count of the function pointers after it, depending on
the environment).  This is followed by a series of zero or more function
pointers to constructors (or destructors), followed by a function
pointer containing zero.

   Depending on the operating system and its executable file format,
either @{b}crtstuff.c@{ub} or @{b}libgcc2.c@{ub} traverses these lists at startup time
and exit time.  Constructors are called in reverse order of the list;
destructors in forward order.

   The best way to handle static constructors works only for object file
formats which provide arbitrarily-named sections.  A section is set
aside for a list of constructors, and another for a list of destructors.
Traditionally these are called @{b}.ctors@{ub} and @{b}.dtors@{ub}.  Each object file
that defines an initialization function also puts a word in the
constructor section to point to that function.  The linker accumulates
all these words into one contiguous @{b}.ctors@{ub} section.  Termination
functions are handled similarly.

   To use this method, you need appropriate definitions of the macros
@{b}ASM_OUTPUT_CONSTRUCTOR@{ub} and @{b}ASM_OUTPUT_DESTRUCTOR@{ub}.  Usually you can get
them by including @{b}svr4.h@{ub}.

   When arbitrary sections are available, there are two variants,
depending upon how the code in @{b}crtstuff.c@{ub} is called.  On systems that
support an @{i}init@{ui} section which is executed at program startup, parts of
@{b}crtstuff.c@{ub} are compiled into that section.  The program is linked by
the @{b}gcc@{ub} driver like this:

     ld -o OUTPUT_FILE crtbegin.o ... crtend.o -lgcc

   The head of a function (@{b}__do_global_ctors@{ub}) appears in the init
section of @{b}crtbegin.o@{ub}; the remainder of the function appears in the
init section of @{b}crtend.o@{ub}.  The linker will pull these two parts of the
section together, making a whole function.  If any of the user's object
files linked into the middle of it contribute code, then that code will
be executed as part of the body of @{b}__do_global_ctors@{ub}.

   To use this variant, you must define the @{b}INIT_SECTION_ASM_OP@{ub} macro
properly.

   If no init section is available, do not define @{b}INIT_SECTION_ASM_OP@{ub}.
Then @{b}__do_global_ctors@{ub} is built into the text section like all other
functions, and resides in @{b}libgcc.a@{ub}.  When GCC compiles any function
called @{b}main@{ub}, it inserts a procedure call to @{b}__main@{ub} as the first
executable code after the function prologue.  The @{b}__main@{ub} function, also
defined in @{b}libgcc2.c@{ub}, simply calls @{b}__do_global_ctors@{ub}.

   In file formats that don't support arbitrary sections, there are
again two variants.  In the simplest variant, the GNU linker (GNU @{b}ld@{ub})
and an `a.out' format must be used.  In this case,
@{b}ASM_OUTPUT_CONSTRUCTOR@{ub} is defined to produce a @{b}.stabs@{ub} entry of type
@{b}N_SETT@{ub}, referencing the name @{b}__CTOR_LIST__@{ub}, and with the address of the
void function containing the initialization code as its value.  The GNU
linker recognizes this as a request to add the value to a "set"; the
values are accumulated, and are eventually placed in the executable as
a vector in the format described above, with a leading (ignored) count
and a trailing zero element.  @{b}ASM_OUTPUT_DESTRUCTOR@{ub} is handled
similarly.  Since no init section is available, the absence of
@{b}INIT_SECTION_ASM_OP@{ub} causes the compilation of @{b}main@{ub} to call @{b}__main@{ub} as
above, starting the initialization process.

   The last variant uses neither arbitrary sections nor the GNU linker.
This is preferable when you want to do dynamic linking and when using
file formats which the GNU linker does not support, such as `ECOFF'.  In
this case, @{b}ASM_OUTPUT_CONSTRUCTOR@{ub} does not produce an @{b}N_SETT@{ub} symbol;
initialization and termination functions are recognized simply by their
names.  This requires an extra program in the linkage step, called
@{b}collect2@{ub}.  This program pretends to be the linker, for use with GNU CC;
it does its job by running the ordinary linker, but also arranges to
include the vectors of initialization and termination functions.  These
functions are called via @{b}__main@{ub} as described above.

   Choosing among these configuration options has been simplified by a
set of operating-system-dependent files in the @{b}config@{ub} subdirectory.
These files define all of the relevant parameters.  Usually it is
sufficient to include one into your specific machine-dependent
configuration file.  These files are:

@{b}aoutos.h@{ub}
     For operating systems using the `a.out' format.

@{b}next.h@{ub}
     For operating systems using the `MachO' format.

@{b}svr3.h@{ub}
     For System V Release 3 and similar systems using `COFF' format.

@{b}svr4.h@{ub}
     For System V Release 4 and similar systems using `ELF' format.

@{b}vms.h@{ub}
     For the VMS operating system.

   The following section describes the specific macros that control and
customize the handling of initialization and termination functions.


@endnode

@node "Macros for Initialization" "gcc.guide/Macros for Initialization"
@next "Instruction Output"
@prev "Initialization"
@toc "Assembler Format"

Macros Controlling Initialization Routines
------------------------------------------

   Here are the macros that control how the compiler handles
initialization and termination functions:

@{b}INIT_SECTION_ASM_OP@{ub}
     If defined, a C string constant for the assembler operation to
     identify the following data as initialization code.  If not
     defined, GNU CC will assume such a section does not exist.  When
     you are using special sections for initialization and termination
     functions, this macro also controls how @{b}crtstuff.c@{ub} and @{b}libgcc2.c@{ub}
     arrange to run the initialization functions.

@{b}HAS_INIT_SECTION@{ub}
     If defined, @{b}main@{ub} will not call @{b}__main@{ub} as described above.  This
     macro should be defined for systems that control the contents of
     the init section on a symbol-by-symbol basis, such as OSF/1, and
     should not be defined explicitly for systems that support
     @{b}INIT_SECTION_ASM_OP@{ub}.

@{b}LD_INIT_SWITCH@{ub}
     If defined, a C string constant for a switch that tells the linker
     that the following symbol is an initialization routine.

@{b}LD_FINI_SWITCH@{ub}
     If defined, a C string constant for a switch that tells the linker
     that the following symbol is a finalization routine.

@{b}INVOKE__main@{ub}
     If defined, @{b}main@{ub} will call @{b}__main@{ub} despite the presence of
     @{b}INIT_SECTION_ASM_OP@{ub}.  This macro should be defined for systems
     where the init section is not actually run automatically, but is
     still useful for collecting the lists of constructors and
     destructors.

@{b}ASM_OUTPUT_CONSTRUCTOR (STREAM, NAME)@{ub}
     Define this macro as a C statement to output on the stream STREAM
     the assembler code to arrange to call the function named NAME at
     initialization time.

     Assume that NAME is the name of a C function generated
     automatically by the compiler.  This function takes no arguments.
     Use the function @{b}assemble_name@{ub} to output the name NAME; this
     performs any system-specific syntactic transformations such as
     adding an underscore.

     If you don't define this macro, nothing special is output to
     arrange to call the function.  This is correct when the function
     will be called in some other manner--for example, by means of the
     @{b}collect2@{ub} program, which looks through the symbol table to find
     these functions by their names.

@{b}ASM_OUTPUT_DESTRUCTOR (STREAM, NAME)@{ub}
     This is like @{b}ASM_OUTPUT_CONSTRUCTOR@{ub} but used for termination
     functions rather than initialization functions.

     When @{b}ASM_OUTPUT_CONSTRUCTOR@{ub} and @{b}ASM_OUTPUT_DESTRUCTOR@{ub} are defined,
     the initializaiton routine generated for the generated object file
     will have static linkage.

   If your system uses @{b}collect2@{ub} as the means of processing
constructors, then that program normally uses @{b}nm@{ub} to scan an object file
for constructor functions to be called.  On such systems you must not
define @{b}ASM_OUTPUT_CONSTRUCTOR@{ub} and @{b}ASM_OUTPUT_DESTRUCTOR@{ub} as the object
file's initialization routine must have global scope.

   On certain kinds of systems, you can define these macros to make
@{b}collect2@{ub} work faster (and, in some cases, make it work at all):

@{b}OBJECT_FORMAT_COFF@{ub}
     Define this macro if the system uses COFF (Common Object File
     Format) object files, so that @{b}collect2@{ub} can assume this format and
     scan object files directly for dynamic constructor/destructor
     functions.

@{b}OBJECT_FORMAT_ROSE@{ub}
     Define this macro if the system uses ROSE format object files, so
     that @{b}collect2@{ub} can assume this format and scan object files directly
     for dynamic constructor/destructor functions.

     These macros are effective only in a native compiler; @{b}collect2@{ub} as
     part of a cross compiler always uses @{b}nm@{ub} for the target machine.

@{b}REAL_NM_FILE_NAME@{ub}
     Define this macro as a C string constant containing the file name
     to use to execute @{b}nm@{ub}.  The default is to search the path normally
     for @{b}nm@{ub}.

     If your system supports shared libraries and has a program to list
     the dynamic dependencies of a given library or executable, you can
     define these macros to enable support for running initialization
     and termination functions in shared libraries:

@{b}LDD_SUFFIX@{ub}
     Define this macro to a C string constant containing the name of the
     program which lists dynamic dependencies, like @{b}"ldd"@{ub} under SunOS 4.

@{b}PARSE_LDD_OUTPUT (PTR)@{ub}
     Define this macro to be C code that extracts filenames from the
     output of the program denoted by @{b}LDD_SUFFIX@{ub}.  PTR is a variable of
     type @{b}char *@{ub} that points to the beginning of a line of output from
     @{b}LDD_SUFFIX@{ub}.  If the line lists a dynamic dependency, the code must
     advance PTR to the beginning of the filename on that line.
     Otherwise, it must set PTR to @{b}NULL@{ub}.


@endnode

@node "Instruction Output" "gcc.guide/Instruction Output"
@next "Dispatch Tables"
@prev "Macros for Initialization"
@toc "Assembler Format"

Output of Assembler Instructions
--------------------------------

   This describes assembler instruction output.

@{b}REGISTER_NAMES@{ub}
     A C initializer containing the assembler's names for the machine
     registers, each one as a C string constant.  This is what
     translates register numbers in the compiler into assembler
     language.

@{b}ADDITIONAL_REGISTER_NAMES@{ub}
     If defined, a C initializer for an array of structures containing
     a name and a register number.  This macro defines additional names
     for hard registers, thus allowing the @{b}asm@{ub} option in declarations
     to refer to registers using alternate names.

@{b}ASM_OUTPUT_OPCODE (STREAM, PTR)@{ub}
     Define this macro if you are using an unusual assembler that
     requires different names for the machine instructions.

     The definition is a C statement or statements which output an
     assembler instruction opcode to the stdio stream STREAM.  The
     macro-operand PTR is a variable of type @{b}char *@{ub} which points to the
     opcode name in its "internal" form--the form that is written in
     the machine description.  The definition should output the opcode
     name to STREAM, performing any translation you desire, and
     increment the variable PTR to point at the end of the opcode so
     that it will not be output twice.

     In fact, your macro definition may process less than the entire
     opcode name, or more than the opcode name; but if you want to
     process text that includes @{b}%@{ub}-sequences to substitute operands, you
     must take care of the substitution yourself.  Just be sure to
     increment PTR over whatever text should not be output normally.

     If you need to look at the operand values, they can be found as the
     elements of @{b}recog_operand@{ub}.

     If the macro definition does nothing, the instruction is output in
     the usual way.

@{b}FINAL_PRESCAN_INSN (INSN, OPVEC, NOPERANDS)@{ub}
     If defined, a C statement to be executed just prior to the output
     of assembler code for INSN, to modify the extracted operands so
     they will be output differently.

     Here the argument OPVEC is the vector containing the operands
     extracted from INSN, and NOPERANDS is the number of elements of
     the vector which contain meaningful data for this insn.  The
     contents of this vector are what will be used to convert the insn
     template into assembler code, so you can change the assembler
     output by changing the contents of the vector.

     This macro is useful when various assembler syntaxes share a single
     file of instruction patterns; by defining this macro differently,
     you can cause a large class of instructions to be output
     differently (such as with rearranged operands).  Naturally,
     variations in assembler syntax affecting individual insn patterns
     ought to be handled by writing conditional output routines in
     those patterns.

     If this macro is not defined, it is equivalent to a null statement.

@{b}FINAL_PRESCAN_LABEL@{ub}
     If defined, @{b}FINAL_PRESCAN_INSN@{ub} will be called on each @{b}CODE_LABEL@{ub}.
     In that case, OPVEC will be a null pointer and NOPERANDS will be
     zero.

@{b}PRINT_OPERAND (STREAM, X, CODE)@{ub}
     A C compound statement to output to stdio stream STREAM the
     assembler syntax for an instruction operand X.  X is an RTL
     expression.

     CODE is a value that can be used to specify one of several ways of
     printing the operand.  It is used when identical operands must be
     printed differently depending on the context.  CODE comes from the
     @{b}%@{ub} specification that was used to request printing of the operand.
     If the specification was just @{b}%DIGIT@{ub} then CODE is 0; if the
     specification was @{b}%LTR DIGIT@{ub} then CODE is the ASCII code for LTR.

     If X is a register, this macro should print the register's name.
     The names can be found in an array @{b}reg_names@{ub} whose type is @{b}char
     *[]@{ub}.  @{b}reg_names@{ub} is initialized from @{b}REGISTER_NAMES@{ub}.

     When the machine description has a specification @{b}%PUNCT@{ub} (a @{b}%@{ub}
     followed by a punctuation character), this macro is called with a
     null pointer for X and the punctuation character for CODE.

@{b}PRINT_OPERAND_PUNCT_VALID_P (CODE)@{ub}
     A C expression which evaluates to true if CODE is a valid
     punctuation character for use in the @{b}PRINT_OPERAND@{ub} macro.  If
     @{b}PRINT_OPERAND_PUNCT_VALID_P@{ub} is not defined, it means that no
     punctuation characters (except for the standard one, @{b}%@{ub}) are used
     in this way.

@{b}PRINT_OPERAND_ADDRESS (STREAM, X)@{ub}
     A C compound statement to output to stdio stream STREAM the
     assembler syntax for an instruction operand that is a memory
     reference whose address is X.  X is an RTL expression.

     On some machines, the syntax for a symbolic address depends on the
     section that the address refers to.  On these machines, define the
     macro @{b}ENCODE_SECTION_INFO@{ub} to store the information into the
     @{b}symbol_ref@{ub}, and then check for it here.  See @{"Assembler Format" link "Assembler Format"}.

@{b}DBR_OUTPUT_SEQEND(FILE)@{ub}
     A C statement, to be executed after all slot-filler instructions
     have been output.  If necessary, call @{b}dbr_sequence_length@{ub} to
     determine the number of slots filled in a sequence (zero if not
     currently outputting a sequence), to decide how many no-ops to
     output, or whatever.

     Don't define this macro if it has nothing to do, but it is helpful
     in reading assembly output if the extent of the delay sequence is
     made explicit (e.g. with white space).

     Note that output routines for instructions with delay slots must be
     prepared to deal with not being output as part of a sequence (i.e.
     when the scheduling pass is not run, or when no slot fillers could
     be found.)  The variable @{b}final_sequence@{ub} is null when not
     processing a sequence, otherwise it contains the @{b}sequence@{ub} rtx
     being output.

@{b}REGISTER_PREFIX@{ub}
@{b}LOCAL_LABEL_PREFIX@{ub}
@{b}USER_LABEL_PREFIX@{ub}
@{b}IMMEDIATE_PREFIX@{ub}
     If defined, C string expressions to be used for the @{b}%R@{ub}, @{b}%L@{ub}, @{b}%U@{ub},
     and @{b}%I@{ub} options of @{b}asm_fprintf@{ub} (see @{b}final.c@{ub}).  These are useful
     when a single @{b}md@{ub} file must support multiple assembler formats.  In
     that case, the various @{b}tm.h@{ub} files can define these macros
     differently.

@{b}ASSEMBLER_DIALECT@{ub}
     If your target supports multiple dialects of assembler language
     (such as different opcodes), define this macro as a C expression
     that gives the numeric index of the assembler language dialect to
     use, with zero as the first variant.

     If this macro is defined, you may use constructs of the form
     @{b}{option0|option1|option2...}@{ub} in the output templates of patterns
     (see @{"Output Template" link "Output Template"}) or in the first argument of @{b}asm_fprintf@{ub}.
     This construct outputs @{b}option0@{ub}, @{b}option1@{ub} or @{b}option2@{ub}, etc., if the
     value of @{b}ASSEMBLER_DIALECT@{ub} is zero, one or two, etc.  Any special
     characters within these strings retain their usual meaning.

     If you do not define this macro, the characters @{b}{@{ub}, @{b}|@{ub} and @{b}}@{ub} do not
     have any special meaning when used in templates or operands to
     @{b}asm_fprintf@{ub}.

     Define the macros @{b}REGISTER_PREFIX@{ub}, @{b}LOCAL_LABEL_PREFIX@{ub},
     @{b}USER_LABEL_PREFIX@{ub} and @{b}IMMEDIATE_PREFIX@{ub} if you can express the
     variations in assembler language syntax with that mechanism.
     Define @{b}ASSEMBLER_DIALECT@{ub} and use the @{b}{option0|option1}@{ub} syntax if
     the syntax variant are larger and involve such things as different
     opcodes or operand order.

@{b}ASM_OUTPUT_REG_PUSH (STREAM, REGNO)@{ub}
     A C expression to output to STREAM some assembler code which will
     push hard register number REGNO onto the stack.  The code need not
     be optimal, since this macro is used only when profiling.

@{b}ASM_OUTPUT_REG_POP (STREAM, REGNO)@{ub}
     A C expression to output to STREAM some assembler code which will
     pop hard register number REGNO off of the stack.  The code need
     not be optimal, since this macro is used only when profiling.


@endnode

@node "Dispatch Tables" "gcc.guide/Dispatch Tables"
@next "Exception Region Output"
@prev "Instruction Output"
@toc "Assembler Format"

Output of Dispatch Tables
-------------------------

   This concerns dispatch tables.

@{b}ASM_OUTPUT_ADDR_DIFF_ELT (STREAM, BODY, VALUE, REL)@{ub}
     A C statement to output to the stdio stream STREAM an assembler
     pseudo-instruction to generate a difference between two labels.
     VALUE and REL are the numbers of two internal labels.  The
     definitions of these labels are output using
     @{b}ASM_OUTPUT_INTERNAL_LABEL@{ub}, and they must be printed in the same
     way here.  For example,

          fprintf (STREAM, "\\t.word L%d-L%d\\n",
                   VALUE, REL)

     You must provide this macro on machines where the addresses in a
     dispatch table are relative to the table's own address.  If
     defined, GNU CC will also use this macro on all machines when
     producing PIC.  BODY is the body of the ADDR_DIFF_VEC; it is
     provided so that the mode and flags can be read.

@{b}ASM_OUTPUT_ADDR_VEC_ELT (STREAM, VALUE)@{ub}
     This macro should be provided on machines where the addresses in a
     dispatch table are absolute.

     The definition should be a C statement to output to the stdio
     stream STREAM an assembler pseudo-instruction to generate a
     reference to a label.  VALUE is the number of an internal label
     whose definition is output using @{b}ASM_OUTPUT_INTERNAL_LABEL@{ub}.  For
     example,

          fprintf (STREAM, "\\t.word L%d\\n", VALUE)

@{b}ASM_OUTPUT_CASE_LABEL (STREAM, PREFIX, NUM, TABLE)@{ub}
     Define this if the label before a jump-table needs to be output
     specially.  The first three arguments are the same as for
     @{b}ASM_OUTPUT_INTERNAL_LABEL@{ub}; the fourth argument is the jump-table
     which follows (a @{b}jump_insn@{ub} containing an @{b}addr_vec@{ub} or
     @{b}addr_diff_vec@{ub}).

     This feature is used on system V to output a @{b}swbeg@{ub} statement for
     the table.

     If this macro is not defined, these labels are output with
     @{b}ASM_OUTPUT_INTERNAL_LABEL@{ub}.

@{b}ASM_OUTPUT_CASE_END (STREAM, NUM, TABLE)@{ub}
     Define this if something special must be output at the end of a
     jump-table.  The definition should be a C statement to be executed
     after the assembler code for the table is written.  It should write
     the appropriate code to stdio stream STREAM.  The argument TABLE
     is the jump-table insn, and NUM is the label-number of the
     preceding label.

     If this macro is not defined, nothing special is output at the end
     of the jump-table.


@endnode

@node "Exception Region Output" "gcc.guide/Exception Region Output"
@next "Alignment Output"
@prev "Dispatch Tables"
@toc "Assembler Format"

Assembler Commands for Exception Regions
----------------------------------------

   This describes commands marking the start and the end of an exception
region.

@{b}ASM_OUTPUT_EH_REGION_BEG ()@{ub}
     A C expression to output text to mark the start of an exception
     region.

     This macro need not be defined on most platforms.

@{b}ASM_OUTPUT_EH_REGION_END ()@{ub}
     A C expression to output text to mark the end of an exception
     region.

     This macro need not be defined on most platforms.

@{b}EXCEPTION_SECTION ()@{ub}
     A C expression to switch to the section in which the main
     exception table is to be placed (see @{"Sections" link "Sections"}).  The default is a
     section named @{b}.gcc_except_table@{ub} on machines that support named
     sections via @{b}ASM_OUTPUT_SECTION_NAME@{ub}, otherwise if @{b}-fpic@{ub} or @{b}-fPIC@{ub}
     is in effect, the @{b}data_section@{ub}, otherwise the
     @{b}readonly_data_section@{ub}.

@{b}EH_FRAME_SECTION_ASM_OP@{ub}
     If defined, a C string constant for the assembler operation to
     switch to the section for exception handling frame unwind
     information.  If not defined, GNU CC will provide a default
     definition if the target supports named sections.  @{b}crtstuff.c@{ub} uses
     this macro to switch to the appropriate section.

     You should define this symbol if your target supports DWARF 2 frame
     unwind information and the default definition does not work.

@{b}OMIT_EH_TABLE ()@{ub}
     A C expression that is nonzero if the normal exception table output
     should be omitted.

     This macro need not be defined on most platforms.

@{b}EH_TABLE_LOOKUP ()@{ub}
     Alternate runtime support for looking up an exception at runtime
     and finding the associated handler, if the default method won't
     work.

     This macro need not be defined on most platforms.

@{b}DOESNT_NEED_UNWINDER@{ub}
     A C expression that decides whether or not the current function
     needs to have a function unwinder generated for it.  See the file
     @{b}except.c@{ub} for details on when to define this, and how.

@{b}MASK_RETURN_ADDR@{ub}
     An rtx used to mask the return address found via RETURN_ADDR_RTX,
     so that it does not contain any extraneous set bits in it.

@{b}DWARF2_UNWIND_INFO@{ub}
     Define this macro to 0 if your target supports DWARF 2 frame unwind
     information, but it does not yet work with exception handling.
     Otherwise, if your target supports this information (if it defines
     @{b}INCOMING_RETURN_ADDR_RTX@{ub} and either @{b}UNALIGNED_INT_ASM_OP@{ub} or
     @{b}OBJECT_FORMAT_ELF@{ub}), GCC will provide a default definition of 1.

     If this macro is defined to 1, the DWARF 2 unwinder will be the
     default exception handling mechanism; otherwise, setjmp/longjmp
     will be used by default.

     If this macro is defined to anything, the DWARF 2 unwinder will be
     used instead of inline unwinders and __unwind_function in the
     non-setjmp case.


@endnode

@node "Alignment Output" "gcc.guide/Alignment Output"
@prev "Exception Region Output"
@toc "Assembler Format"

Assembler Commands for Alignment
--------------------------------

   This describes commands for alignment.

@{b}LABEL_ALIGN_AFTER_BARRIER (LABEL)@{ub}
     The alignment (log base 2) to put in front of LABEL, which follows
     a BARRIER.

     This macro need not be defined if you don't want any special
     alignment to be done at such a time.  Most machine descriptions do
     not currently define the macro.

@{b}LOOP_ALIGN (LABEL)@{ub}
     The alignment (log base 2) to put in front of LABEL, which follows
     a NOTE_INSN_LOOP_BEG note.

     This macro need not be defined if you don't want any special
     alignment to be done at such a time.  Most machine descriptions do
     not currently define the macro.

@{b}LABEL_ALIGN (LABEL)@{ub}
     The alignment (log base 2) to put in front of LABEL.  If
     LABEL_ALIGN_AFTER_BARRIER / LOOP_ALIGN specify a different
     alignment, the maximum of the specified values is used.

@{b}ASM_OUTPUT_SKIP (STREAM, NBYTES)@{ub}
     A C statement to output to the stdio stream STREAM an assembler
     instruction to advance the location counter by NBYTES bytes.
     Those bytes should be zero when loaded.  NBYTES will be a C
     expression of type @{b}int@{ub}.

@{b}ASM_NO_SKIP_IN_TEXT@{ub}
     Define this macro if @{b}ASM_OUTPUT_SKIP@{ub} should not be used in the
     text section because it fails to put zeros in the bytes that are
     skipped.  This is true on many Unix systems, where the pseudo-op
     to skip bytes produces no-op instructions rather than zeros when
     used in the text section.

@{b}ASM_OUTPUT_ALIGN (STREAM, POWER)@{ub}
     A C statement to output to the stdio stream STREAM an assembler
     command to advance the location counter to a multiple of 2 to the
     POWER bytes.  POWER will be a C expression of type @{b}int@{ub}.


@endnode

@node "Debugging Info" "gcc.guide/Debugging Info"
@next "Cross-compilation"
@prev "Assembler Format"
@toc "Target Macros"

Controlling Debugging Information Format
========================================

   This describes how to specify debugging information.


 @{" All Debuggers     " link "All Debuggers"}  Macros that affect all debugging formats uniformly.
 @{" DBX Options       " link "DBX Options"}  Macros enabling specific options in DBX format.
 @{" DBX Hooks         " link "DBX Hooks"}  Hook macros for varying DBX format.
 @{" File Names and DBX " link "File Names and DBX"}  Macros controlling output of file names in DBX format.
 @{" SDB and DWARF     " link "SDB and DWARF"}  Macros for SDB (COFF) and DWARF formats.


@endnode

@node "All Debuggers" "gcc.guide/All Debuggers"
@next "DBX Options"
@toc "Debugging Info"

Macros Affecting All Debugging Formats
--------------------------------------

   These macros affect all debugging formats.

@{b}DBX_REGISTER_NUMBER (REGNO)@{ub}
     A C expression that returns the DBX register number for the
     compiler register number REGNO.  In simple cases, the value of this
     expression may be REGNO itself.  But sometimes there are some
     registers that the compiler knows about and DBX does not, or vice
     versa.  In such cases, some register may need to have one number in
     the compiler and another for DBX.

     If two registers have consecutive numbers inside GNU CC, and they
     can be used as a pair to hold a multiword value, then they @{i}must@{ui}
     have consecutive numbers after renumbering with
     @{b}DBX_REGISTER_NUMBER@{ub}.  Otherwise, debuggers will be unable to
     access such a pair, because they expect register pairs to be
     consecutive in their own numbering scheme.

     If you find yourself defining @{b}DBX_REGISTER_NUMBER@{ub} in way that does
     not preserve register pairs, then what you must do instead is
     redefine the actual register numbering scheme.

@{b}DEBUGGER_AUTO_OFFSET (X)@{ub}
     A C expression that returns the integer offset value for an
     automatic variable having address X (an RTL expression).  The
     default computation assumes that X is based on the frame-pointer
     and gives the offset from the frame-pointer.  This is required for
     targets that produce debugging output for DBX or COFF-style
     debugging output for SDB and allow the frame-pointer to be
     eliminated when the @{b}-g@{ub} options is used.

@{b}DEBUGGER_ARG_OFFSET (OFFSET, X)@{ub}
     A C expression that returns the integer offset value for an
     argument having address X (an RTL expression).  The nominal offset
     is OFFSET.

@{b}PREFERRED_DEBUGGING_TYPE@{ub}
     A C expression that returns the type of debugging output GNU CC
     should produce when the user specifies just @{b}-g@{ub}.  Define this if
     you have arranged for GNU CC to support more than one format of
     debugging output.  Currently, the allowable values are @{b}DBX_DEBUG@{ub},
     @{b}SDB_DEBUG@{ub}, @{b}DWARF_DEBUG@{ub}, @{b}DWARF2_DEBUG@{ub}, and @{b}XCOFF_DEBUG@{ub}.

     When the user specifies @{b}-ggdb@{ub}, GNU CC normally also uses the value
     of this macro to select the debugging output format, but with two
     exceptions.  If @{b}DWARF2_DEBUGGING_INFO@{ub} is defined and
     @{b}LINKER_DOES_NOT_WORK_WITH_DWARF2@{ub} is not defined, GNU CC uses the
     value @{b}DWARF2_DEBUG@{ub}.  Otherwise, if @{b}DBX_DEBUGGING_INFO@{ub} is defined,
     GNU CC uses @{b}DBX_DEBUG@{ub}.

     The value of this macro only affects the default debugging output;
     the user can always get a specific type of output by using @{b}-gstabs@{ub},
     @{b}-gcoff@{ub}, @{b}-gdwarf-1@{ub}, @{b}-gdwarf-2@{ub}, or @{b}-gxcoff@{ub}.


@endnode

@node "DBX Options" "gcc.guide/DBX Options"
@next "DBX Hooks"
@prev "All Debuggers"
@toc "Debugging Info"

Specific Options for DBX Output
-------------------------------

   These are specific options for DBX output.

@{b}DBX_DEBUGGING_INFO@{ub}
     Define this macro if GNU CC should produce debugging output for DBX
     in response to the @{b}-g@{ub} option.

@{b}XCOFF_DEBUGGING_INFO@{ub}
     Define this macro if GNU CC should produce XCOFF format debugging
     output in response to the @{b}-g@{ub} option.  This is a variant of DBX
     format.

@{b}DEFAULT_GDB_EXTENSIONS@{ub}
     Define this macro to control whether GNU CC should by default
     generate GDB's extended version of DBX debugging information
     (assuming DBX-format debugging information is enabled at all).  If
     you don't define the macro, the default is 1: always generate the
     extended information if there is any occasion to.

@{b}DEBUG_SYMS_TEXT@{ub}
     Define this macro if all @{b}.stabs@{ub} commands should be output while in
     the text section.

@{b}ASM_STABS_OP@{ub}
     A C string constant naming the assembler pseudo op to use instead
     of @{b}.stabs@{ub} to define an ordinary debugging symbol.  If you don't
     define this macro, @{b}.stabs@{ub} is used.  This macro applies only to DBX
     debugging information format.

@{b}ASM_STABD_OP@{ub}
     A C string constant naming the assembler pseudo op to use instead
     of @{b}.stabd@{ub} to define a debugging symbol whose value is the current
     location.  If you don't define this macro, @{b}.stabd@{ub} is used.  This
     macro applies only to DBX debugging information format.

@{b}ASM_STABN_OP@{ub}
     A C string constant naming the assembler pseudo op to use instead
     of @{b}.stabn@{ub} to define a debugging symbol with no name.  If you don't
     define this macro, @{b}.stabn@{ub} is used.  This macro applies only to DBX
     debugging information format.

@{b}DBX_NO_XREFS@{ub}
     Define this macro if DBX on your system does not support the
     construct @{b}xsTAGNAME@{ub}.  On some systems, this construct is used to
     describe a forward reference to a structure named TAGNAME.  On
     other systems, this construct is not supported at all.

@{b}DBX_CONTIN_LENGTH@{ub}
     A symbol name in DBX-format debugging information is normally
     continued (split into two separate @{b}.stabs@{ub} directives) when it
     exceeds a certain length (by default, 80 characters).  On some
     operating systems, DBX requires this splitting; on others,
     splitting must not be done.  You can inhibit splitting by defining
     this macro with the value zero.  You can override the default
     splitting-length by defining this macro as an expression for the
     length you desire.

@{b}DBX_CONTIN_CHAR@{ub}
     Normally continuation is indicated by adding a @{b}\\ @{ub} character to
     the end of a @{b}.stabs@{ub} string when a continuation follows.  To use a
     different character instead, define this macro as a character
     constant for the character you want to use.  Do not define this
     macro if backslash is correct for your system.

@{b}DBX_STATIC_STAB_DATA_SECTION@{ub}
     Define this macro if it is necessary to go to the data section
     before outputting the @{b}.stabs@{ub} pseudo-op for a non-global static
     variable.

@{b}DBX_TYPE_DECL_STABS_CODE@{ub}
     The value to use in the "code" field of the @{b}.stabs@{ub} directive for a
     typedef.  The default is @{b}N_LSYM@{ub}.

@{b}DBX_STATIC_CONST_VAR_CODE@{ub}
     The value to use in the "code" field of the @{b}.stabs@{ub} directive for a
     static variable located in the text section.  DBX format does not
     provide any "right" way to do this.  The default is @{b}N_FUN@{ub}.

@{b}DBX_REGPARM_STABS_CODE@{ub}
     The value to use in the "code" field of the @{b}.stabs@{ub} directive for a
     parameter passed in registers.  DBX format does not provide any
     "right" way to do this.  The default is @{b}N_RSYM@{ub}.

@{b}DBX_REGPARM_STABS_LETTER@{ub}
     The letter to use in DBX symbol data to identify a symbol as a
     parameter passed in registers.  DBX format does not customarily
     provide any way to do this.  The default is @{b}'P'@{ub}.

@{b}DBX_MEMPARM_STABS_LETTER@{ub}
     The letter to use in DBX symbol data to identify a symbol as a
     stack parameter.  The default is @{b}'p'@{ub}.

@{b}DBX_FUNCTION_FIRST@{ub}
     Define this macro if the DBX information for a function and its
     arguments should precede the assembler code for the function.
     Normally, in DBX format, the debugging information entirely
     follows the assembler code.

@{b}DBX_LBRAC_FIRST@{ub}
     Define this macro if the @{b}N_LBRAC@{ub} symbol for a block should precede
     the debugging information for variables and functions defined in
     that block.  Normally, in DBX format, the @{b}N_LBRAC@{ub} symbol comes
     first.

@{b}DBX_BLOCKS_FUNCTION_RELATIVE@{ub}
     Define this macro if the value of a symbol describing the scope of
     a block (@{b}N_LBRAC@{ub} or @{b}N_RBRAC@{ub}) should be relative to the start of
     the enclosing function.  Normally, GNU C uses an absolute address.

@{b}DBX_USE_BINCL@{ub}
     Define this macro if GNU C should generate @{b}N_BINCL@{ub} and @{b}N_EINCL@{ub}
     stabs for included header files, as on Sun systems.  This macro
     also directs GNU C to output a type number as a pair of a file
     number and a type number within the file.  Normally, GNU C does not
     generate @{b}N_BINCL@{ub} or @{b}N_EINCL@{ub} stabs, and it outputs a single number
     for a type number.


@endnode

@node "DBX Hooks" "gcc.guide/DBX Hooks"
@next "File Names and DBX"
@prev "DBX Options"
@toc "Debugging Info"

Open-Ended Hooks for DBX Format
-------------------------------

   These are hooks for DBX format.

@{b}DBX_OUTPUT_LBRAC (STREAM, NAME)@{ub}
     Define this macro to say how to output to STREAM the debugging
     information for the start of a scope level for variable names.  The
     argument NAME is the name of an assembler symbol (for use with
     @{b}assemble_name@{ub}) whose value is the address where the scope begins.

@{b}DBX_OUTPUT_RBRAC (STREAM, NAME)@{ub}
     Like @{b}DBX_OUTPUT_LBRAC@{ub}, but for the end of a scope level.

@{b}DBX_OUTPUT_ENUM (STREAM, TYPE)@{ub}
     Define this macro if the target machine requires special handling
     to output an enumeration type.  The definition should be a C
     statement (sans semicolon) to output the appropriate information
     to STREAM for the type TYPE.

@{b}DBX_OUTPUT_FUNCTION_END (STREAM, FUNCTION)@{ub}
     Define this macro if the target machine requires special output at
     the end of the debugging information for a function.  The
     definition should be a C statement (sans semicolon) to output the
     appropriate information to STREAM.  FUNCTION is the @{b}FUNCTION_DECL@{ub}
     node for the function.

@{b}DBX_OUTPUT_STANDARD_TYPES (SYMS)@{ub}
     Define this macro if you need to control the order of output of the
     standard data types at the beginning of compilation.  The argument
     SYMS is a @{b}tree@{ub} which is a chain of all the predefined global
     symbols, including names of data types.

     Normally, DBX output starts with definitions of the types for
     integers and characters, followed by all the other predefined
     types of the particular language in no particular order.

     On some machines, it is necessary to output different particular
     types first.  To do this, define @{b}DBX_OUTPUT_STANDARD_TYPES@{ub} to
     output those symbols in the necessary order.  Any predefined types
     that you don't explicitly output will be output afterward in no
     particular order.

     Be careful not to define this macro so that it works only for C.
     There are no global variables to access most of the built-in
     types, because another language may have another set of types.
     The way to output a particular type is to look through SYMS to see
     if you can find it.  Here is an example:

          {
            tree decl;
            for (decl = syms; decl; decl = TREE_CHAIN (decl))
              if (!strcmp (IDENTIFIER_POINTER (DECL_NAME (decl)),
                           "long int"))
                dbxout_symbol (decl);
            ...
          }

     This does nothing if the expected type does not exist.

     See the function @{b}init_decl_processing@{ub} in @{b}c-decl.c@{ub} to find the
     names to use for all the built-in C types.

     Here is another way of finding a particular type:

          {
            tree decl;
            for (decl = syms; decl; decl = TREE_CHAIN (decl))
              if (TREE_CODE (decl) == TYPE_DECL
                  && (TREE_CODE (TREE_TYPE (decl))
                      == INTEGER_CST)
                  && TYPE_PRECISION (TREE_TYPE (decl)) == 16
                  && TYPE_UNSIGNED (TREE_TYPE (decl)))
          /* This must be @{b}unsigned short@{ub}.  */
                dbxout_symbol (decl);
            ...
          }

@{b}NO_DBX_FUNCTION_END@{ub}
     Some stabs encapsulation formats (in particular ECOFF), cannot
     handle the @{b}.stabs "",N_FUN,,0,0,Lscope-function-1@{ub} gdb dbx
     extention construct.  On those machines, define this macro to turn
     this feature off without disturbing the rest of the gdb extensions.


@endnode

@node "File Names and DBX" "gcc.guide/File Names and DBX"
@next "SDB and DWARF"
@prev "DBX Hooks"
@toc "Debugging Info"

File Names in DBX Format
------------------------

   This describes file names in DBX format.

@{b}DBX_WORKING_DIRECTORY@{ub}
     Define this if DBX wants to have the current directory recorded in
     each object file.

     Note that the working directory is always recorded if GDB
     extensions are enabled.

@{b}DBX_OUTPUT_MAIN_SOURCE_FILENAME (STREAM, NAME)@{ub}
     A C statement to output DBX debugging information to the stdio
     stream STREAM which indicates that file NAME is the main source
     file--the file specified as the input file for compilation.  This
     macro is called only once, at the beginning of compilation.

     This macro need not be defined if the standard form of output for
     DBX debugging information is appropriate.

@{b}DBX_OUTPUT_MAIN_SOURCE_DIRECTORY (STREAM, NAME)@{ub}
     A C statement to output DBX debugging information to the stdio
     stream STREAM which indicates that the current directory during
     compilation is named NAME.

     This macro need not be defined if the standard form of output for
     DBX debugging information is appropriate.

@{b}DBX_OUTPUT_MAIN_SOURCE_FILE_END (STREAM, NAME)@{ub}
     A C statement to output DBX debugging information at the end of
     compilation of the main source file NAME.

     If you don't define this macro, nothing special is output at the
     end of compilation, which is correct for most machines.

@{b}DBX_OUTPUT_SOURCE_FILENAME (STREAM, NAME)@{ub}
     A C statement to output DBX debugging information to the stdio
     stream STREAM which indicates that file NAME is the current source
     file.  This output is generated each time input shifts to a
     different source file as a result of @{b}#include@{ub}, the end of an
     included file, or a @{b}#line@{ub} command.

     This macro need not be defined if the standard form of output for
     DBX debugging information is appropriate.


@endnode

@node "SDB and DWARF" "gcc.guide/SDB and DWARF"
@prev "File Names and DBX"
@toc "Debugging Info"

Macros for SDB and DWARF Output
-------------------------------

   Here are macros for SDB and DWARF output.

@{b}SDB_DEBUGGING_INFO@{ub}
     Define this macro if GNU CC should produce COFF-style debugging
     output for SDB in response to the @{b}-g@{ub} option.

@{b}DWARF_DEBUGGING_INFO@{ub}
     Define this macro if GNU CC should produce dwarf format debugging
     output in response to the @{b}-g@{ub} option.

@{b}DWARF2_DEBUGGING_INFO@{ub}
     Define this macro if GNU CC should produce dwarf version 2 format
     debugging output in response to the @{b}-g@{ub} option.

     To support optional call frame debugging information, you must also
     define @{b}INCOMING_RETURN_ADDR_RTX@{ub} and either set @{b}RTX_FRAME_RELATED_P@{ub}
     on the prologue insns if you use RTL for the prologue, or call
     @{b}dwarf2out_def_cfa@{ub} and @{b}dwarf2out_reg_save@{ub} as appropriate from
     @{b}FUNCTION_PROLOGUE@{ub} if you don't.

@{b}DWARF2_FRAME_INFO@{ub}
     Define this macro to a nonzero value if GNU CC should always output
     Dwarf 2 frame information.  If @{b}DWARF2_UNWIND_INFO@{ub} (see
     @{"Exception Region Output" link "Exception Region Output"} is nonzero, GNU CC will output this
     information not matter how you define @{b}DWARF2_FRAME_INFO@{ub}.

@{b}LINKER_DOES_NOT_WORK_WITH_DWARF2@{ub}
     Define this macro if the linker does not work with Dwarf version 2.
     Normally, if the user specifies only @{b}-ggdb@{ub} GNU CC will use Dwarf
     version 2 if available; this macro disables this.  See the
     description of the @{b}PREFERRED_DEBUGGING_TYPE@{ub} macro for more details.

@{b}PUT_SDB_...@{ub}
     Define these macros to override the assembler syntax for the
     special SDB assembler directives.  See @{b}sdbout.c@{ub} for a list of these
     macros and their arguments.  If the standard syntax is used, you
     need not define them yourself.

@{b}SDB_DELIM@{ub}
     Some assemblers do not support a semicolon as a delimiter, even
     between SDB assembler directives.  In that case, define this macro
     to be the delimiter to use (usually @{b}\\n@{ub}).  It is not necessary to
     define a new set of @{b}PUT_SDB_OP@{ub} macros if this is the only change
     required.

@{b}SDB_GENERATE_FAKE@{ub}
     Define this macro to override the usual method of constructing a
     dummy name for anonymous structure and union types.  See @{b}sdbout.c@{ub}
     for more information.

@{b}SDB_ALLOW_UNKNOWN_REFERENCES@{ub}
     Define this macro to allow references to unknown structure, union,
     or enumeration tags to be emitted.  Standard COFF does not allow
     handling of unknown references, MIPS ECOFF has support for it.

@{b}SDB_ALLOW_FORWARD_REFERENCES@{ub}
     Define this macro to allow references to structure, union, or
     enumeration tags that have not yet been seen to be handled.  Some
     assemblers choke if forward tags are used, while some require it.


@endnode

@node "Cross-compilation" "gcc.guide/Cross-compilation"
@next "Misc"
@prev "Debugging Info"
@toc "Target Macros"

Cross Compilation and Floating Point
====================================

   While all modern machines use 2's complement representation for
integers, there are a variety of representations for floating point
numbers.  This means that in a cross-compiler the representation of
floating point numbers in the compiled program may be different from
that used in the machine doing the compilation.

   Because different representation systems may offer different amounts
of range and precision, the cross compiler cannot safely use the host
machine's floating point arithmetic.  Therefore, floating point
constants must be represented in the target machine's format.  This
means that the cross compiler cannot use @{b}atof@{ub} to parse a floating point
constant; it must have its own special routine to use instead.  Also,
constant folding must emulate the target machine's arithmetic (or must
not be done at all).

   The macros in the following table should be defined only if you are
cross compiling between different floating point formats.

   Otherwise, don't define them.  Then default definitions will be set
up which use @{b}double@{ub} as the data type, @{b}==@{ub} to test for equality, etc.

   You don't need to worry about how many times you use an operand of
any of these macros.  The compiler never uses operands which have side
effects.

@{b}REAL_VALUE_TYPE@{ub}
     A macro for the C data type to be used to hold a floating point
     value in the target machine's format.  Typically this would be a
     @{b}struct@{ub} containing an array of @{b}int@{ub}.

@{b}REAL_VALUES_EQUAL (X, Y)@{ub}
     A macro for a C expression which compares for equality the two
     values, X and Y, both of type @{b}REAL_VALUE_TYPE@{ub}.

@{b}REAL_VALUES_LESS (X, Y)@{ub}
     A macro for a C expression which tests whether X is less than Y,
     both values being of type @{b}REAL_VALUE_TYPE@{ub} and interpreted as
     floating point numbers in the target machine's representation.

@{b}REAL_VALUE_LDEXP (X, SCALE)@{ub}
     A macro for a C expression which performs the standard library
     function @{b}ldexp@{ub}, but using the target machine's floating point
     representation.  Both X and the value of the expression have type
     @{b}REAL_VALUE_TYPE@{ub}.  The second argument, SCALE, is an integer.

@{b}REAL_VALUE_FIX (X)@{ub}
     A macro whose definition is a C expression to convert the
     target-machine floating point value X to a signed integer.  X has
     type @{b}REAL_VALUE_TYPE@{ub}.

@{b}REAL_VALUE_UNSIGNED_FIX (X)@{ub}
     A macro whose definition is a C expression to convert the
     target-machine floating point value X to an unsigned integer.  X
     has type @{b}REAL_VALUE_TYPE@{ub}.

@{b}REAL_VALUE_RNDZINT (X)@{ub}
     A macro whose definition is a C expression to round the
     target-machine floating point value X towards zero to an integer
     value (but still as a floating point number).  X has type
     @{b}REAL_VALUE_TYPE@{ub}, and so does the value.

@{b}REAL_VALUE_UNSIGNED_RNDZINT (X)@{ub}
     A macro whose definition is a C expression to round the
     target-machine floating point value X towards zero to an unsigned
     integer value (but still represented as a floating point number).
     X has type @{b}REAL_VALUE_TYPE@{ub}, and so does the value.

@{b}REAL_VALUE_ATOF (STRING, MODE)@{ub}
     A macro for a C expression which converts STRING, an expression of
     type @{b}char *@{ub}, into a floating point number in the target machine's
     representation for mode MODE.  The value has type @{b}REAL_VALUE_TYPE@{ub}.

@{b}REAL_INFINITY@{ub}
     Define this macro if infinity is a possible floating point value,
     and therefore division by 0 is legitimate.

@{b}REAL_VALUE_ISINF (X)@{ub}
     A macro for a C expression which determines whether X, a floating
     point value, is infinity.  The value has type @{b}int@{ub}.  By default,
     this is defined to call @{b}isinf@{ub}.

@{b}REAL_VALUE_ISNAN (X)@{ub}
     A macro for a C expression which determines whether X, a floating
     point value, is a "nan" (not-a-number).  The value has type @{b}int@{ub}.
     By default, this is defined to call @{b}isnan@{ub}.

   Define the following additional macros if you want to make floating
point constant folding work while cross compiling.  If you don't define
them, cross compilation is still possible, but constant folding will
not happen for floating point values.

@{b}REAL_ARITHMETIC (OUTPUT, CODE, X, Y)@{ub}
     A macro for a C statement which calculates an arithmetic operation
     of the two floating point values X and Y, both of type
     @{b}REAL_VALUE_TYPE@{ub} in the target machine's representation, to produce
     a result of the same type and representation which is stored in
     OUTPUT (which will be a variable).

     The operation to be performed is specified by CODE, a tree code
     which will always be one of the following: @{b}PLUS_EXPR@{ub}, @{b}MINUS_EXPR@{ub},
     @{b}MULT_EXPR@{ub}, @{b}RDIV_EXPR@{ub}, @{b}MAX_EXPR@{ub}, @{b}MIN_EXPR@{ub}.

     The expansion of this macro is responsible for checking for
     overflow.  If overflow happens, the macro expansion should execute
     the statement @{b}return 0;@{ub}, which indicates the inability to perform
     the arithmetic operation requested.

@{b}REAL_VALUE_NEGATE (X)@{ub}
     A macro for a C expression which returns the negative of the
     floating point value X.  Both X and the value of the expression
     have type @{b}REAL_VALUE_TYPE@{ub} and are in the target machine's floating
     point representation.

     There is no way for this macro to report overflow, since overflow
     can't happen in the negation operation.

@{b}REAL_VALUE_TRUNCATE (MODE, X)@{ub}
     A macro for a C expression which converts the floating point value
     X to mode MODE.

     Both X and the value of the expression are in the target machine's
     floating point representation and have type @{b}REAL_VALUE_TYPE@{ub}.
     However, the value should have an appropriate bit pattern to be
     output properly as a floating constant whose precision accords
     with mode MODE.

     There is no way for this macro to report overflow.

@{b}REAL_VALUE_TO_INT (LOW, HIGH, X)@{ub}
     A macro for a C expression which converts a floating point value X
     into a double-precision integer which is then stored into LOW and
     HIGH, two variables of type INT.

@{b}REAL_VALUE_FROM_INT (X, LOW, HIGH, MODE)@{ub}
     A macro for a C expression which converts a double-precision
     integer found in LOW and HIGH, two variables of type INT, into a
     floating point value which is then stored into X.  The value is in
     the target machine's representation for mode MODE and has the type
     @{b}REAL_VALUE_TYPE@{ub}.


@endnode

@node "Misc" "gcc.guide/Misc"
@prev "Cross-compilation"
@toc "Target Macros"

Miscellaneous Parameters
========================

   Here are several miscellaneous parameters.

@{b}PREDICATE_CODES@{ub}
     Define this if you have defined special-purpose predicates in the
     file @{b}MACHINE.c@{ub}.  This macro is called within an initializer of an
     array of structures.  The first field in the structure is the name
     of a predicate and the second field is an array of rtl codes.  For
     each predicate, list all rtl codes that can be in expressions
     matched by the predicate.  The list should have a trailing comma.
     Here is an example of two entries in the list for a typical RISC
     machine:

          #define PREDICATE_CODES \\
            {"gen_reg_rtx_operand", {SUBREG, REG}},  \\
            {"reg_or_short_cint_operand", {SUBREG, REG, CONST_INT}},

     Defining this macro does not affect the generated code (however,
     incorrect definitions that omit an rtl code that may be matched by
     the predicate can cause the compiler to malfunction).  Instead, it
     allows the table built by @{b}genrecog@{ub} to be more compact and
     efficient, thus speeding up the compiler.  The most important
     predicates to include in the list specified by this macro are
     those used in the most insn patterns.

@{b}CASE_VECTOR_MODE@{ub}
     An alias for a machine mode name.  This is the machine mode that
     elements of a jump-table should have.

@{b}CASE_VECTOR_SHORTEN_MODE (MIN_OFFSET, MAX_OFFSET, BODY)@{ub}
     Optional: return the preferred mode for an @{b}addr_diff_vec@{ub} when the
     minimum and maximum offset are known.  If you define this, it
     enables extra code in branch shortening to deal with @{b}addr_diff_vec@{ub}.
     To make this work, you also have to define INSN_ALIGN and make the
     alignment for @{b}addr_diff_vec@{ub} explicit.  The BODY argument is
     provided so that teh offset_unsigned and scale flags can be
     updated.

@{b}CASE_VECTOR_PC_RELATIVE@{ub}
     Define this macro to be a C expression to indicate when jump-tables
     should contain relative addresses.  If jump-tables never contain
     relative addresses, then you need not define this macro.

@{b}CASE_DROPS_THROUGH@{ub}
     Define this if control falls through a @{b}case@{ub} insn when the index
     value is out of range.  This means the specified default-label is
     actually ignored by the @{b}case@{ub} insn proper.

@{b}CASE_VALUES_THRESHOLD@{ub}
     Define this to be the smallest number of different values for
     which it is best to use a jump-table instead of a tree of
     conditional branches.  The default is four for machines with a
     @{b}casesi@{ub} instruction and five otherwise.  This is best for most
     machines.

@{b}WORD_REGISTER_OPERATIONS@{ub}
     Define this macro if operations between registers with integral
     mode smaller than a word are always performed on the entire
     register.  Most RISC machines have this property and most CISC
     machines do not.

@{b}LOAD_EXTEND_OP (MODE)@{ub}
     Define this macro to be a C expression indicating when insns that
     read memory in MODE, an integral mode narrower than a word, set the
     bits outside of MODE to be either the sign-extension or the
     zero-extension of the data read.  Return @{b}SIGN_EXTEND@{ub} for values of
     MODE for which the insn sign-extends, @{b}ZERO_EXTEND@{ub} for which it
     zero-extends, and @{b}NIL@{ub} for other modes.

     This macro is not called with MODE non-integral or with a width
     greater than or equal to @{b}BITS_PER_WORD@{ub}, so you may return any
     value in this case.  Do not define this macro if it would always
     return @{b}NIL@{ub}.  On machines where this macro is defined, you will
     normally define it as the constant @{b}SIGN_EXTEND@{ub} or @{b}ZERO_EXTEND@{ub}.

@{b}SHORT_IMMEDIATES_SIGN_EXTEND@{ub}
     Define this macro if loading short immediate values into registers
     sign extends.

@{b}IMPLICIT_FIX_EXPR@{ub}
     An alias for a tree code that should be used by default for
     conversion of floating point values to fixed point.  Normally,
     @{b}FIX_ROUND_EXPR@{ub} is used.

@{b}FIXUNS_TRUNC_LIKE_FIX_TRUNC@{ub}
     Define this macro if the same instructions that convert a floating
     point number to a signed fixed point number also convert validly
     to an unsigned one.

@{b}EASY_DIV_EXPR@{ub}
     An alias for a tree code that is the easiest kind of division to
     compile code for in the general case.  It may be @{b}TRUNC_DIV_EXPR@{ub},
     @{b}FLOOR_DIV_EXPR@{ub}, @{b}CEIL_DIV_EXPR@{ub} or @{b}ROUND_DIV_EXPR@{ub}.  These four
     division operators differ in how they round the result to an
     integer.  @{b}EASY_DIV_EXPR@{ub} is used when it is permissible to use any
     of those kinds of division and the choice should be made on the
     basis of efficiency.

@{b}MOVE_MAX@{ub}
     The maximum number of bytes that a single instruction can move
     quickly between memory and registers or between two memory
     locations.

@{b}MAX_MOVE_MAX@{ub}
     The maximum number of bytes that a single instruction can move
     quickly between memory and registers or between two memory
     locations.  If this is undefined, the default is @{b}MOVE_MAX@{ub}.
     Otherwise, it is the constant value that is the largest value that
     @{b}MOVE_MAX@{ub} can have at run-time.

@{b}SHIFT_COUNT_TRUNCATED@{ub}
     A C expression that is nonzero if on this machine the number of
     bits actually used for the count of a shift operation is equal to
     the number of bits needed to represent the size of the object
     being shifted.  When this macro is non-zero, the compiler will
     assume that it is safe to omit a sign-extend, zero-extend, and
     certain bitwise `and' instructions that truncates the count of a
     shift operation.  On machines that have instructions that act on
     bitfields at variable positions, which may include `bit test'
     instructions, a nonzero @{b}SHIFT_COUNT_TRUNCATED@{ub} also enables
     deletion of truncations of the values that serve as arguments to
     bitfield instructions.

     If both types of instructions truncate the count (for shifts) and
     position (for bitfield operations), or if no variable-position
     bitfield instructions exist, you should define this macro.

     However, on some machines, such as the 80386 and the 680x0,
     truncation only applies to shift operations and not the (real or
     pretended) bitfield operations.  Define @{b}SHIFT_COUNT_TRUNCATED@{ub} to
     be zero on such machines.  Instead, add patterns to the @{b}md@{ub} file
     that include the implied truncation of the shift instructions.

     You need not define this macro if it would always have the value
     of zero.

@{b}TRULY_NOOP_TRUNCATION (OUTPREC, INPREC)@{ub}
     A C expression which is nonzero if on this machine it is safe to
     "convert" an integer of INPREC bits to one of OUTPREC bits (where
     OUTPREC is smaller than INPREC) by merely operating on it as if it
     had only OUTPREC bits.

     On many machines, this expression can be 1.

     When @{b}TRULY_NOOP_TRUNCATION@{ub} returns 1 for a pair of sizes for modes
     for which @{b}MODES_TIEABLE_P@{ub} is 0, suboptimal code can result.  If
     this is the case, making @{b}TRULY_NOOP_TRUNCATION@{ub} return 0 in such
     cases may improve things.

@{b}STORE_FLAG_VALUE@{ub}
     A C expression describing the value returned by a comparison
     operator with an integral mode and stored by a store-flag
     instruction (@{b}sCOND@{ub}) when the condition is true.  This description
     must apply to @{i}all@{ui} the @{b}sCOND@{ub} patterns and all the comparison
     operators whose results have a @{b}MODE_INT@{ub} mode.

     A value of 1 or -1 means that the instruction implementing the
     comparison operator returns exactly 1 or -1 when the comparison is
     true and 0 when the comparison is false.  Otherwise, the value
     indicates which bits of the result are guaranteed to be 1 when the
     comparison is true.  This value is interpreted in the mode of the
     comparison operation, which is given by the mode of the first
     operand in the @{b}sCOND@{ub} pattern.  Either the low bit or the sign bit
     of @{b}STORE_FLAG_VALUE@{ub} be on.  Presently, only those bits are used by
     the compiler.

     If @{b}STORE_FLAG_VALUE@{ub} is neither 1 or -1, the compiler will generate
     code that depends only on the specified bits.  It can also replace
     comparison operators with equivalent operations if they cause the
     required bits to be set, even if the remaining bits are undefined.
     For example, on a machine whose comparison operators return an
     @{b}SImode@{ub} value and where @{b}STORE_FLAG_VALUE@{ub} is defined as @{b}0x80000000@{ub},
     saying that just the sign bit is relevant, the expression

          (ne:SI (and:SI X (const_int POWER-OF-2)) (const_int 0))

     can be converted to

          (ashift:SI X (const_int N))

     where N is the appropriate shift count to move the bit being
     tested into the sign bit.

     There is no way to describe a machine that always sets the
     low-order bit for a true value, but does not guarantee the value
     of any other bits, but we do not know of any machine that has such
     an instruction.  If you are trying to port GNU CC to such a
     machine, include an instruction to perform a logical-and of the
     result with 1 in the pattern for the comparison operators and let
     us know (see @{"How to Report Bugs" link "Bug Reporting"}).

     Often, a machine will have multiple instructions that obtain a
     value from a comparison (or the condition codes).  Here are rules
     to guide the choice of value for @{b}STORE_FLAG_VALUE@{ub}, and hence the
     instructions to be used:

        * Use the shortest sequence that yields a valid definition for
          @{b}STORE_FLAG_VALUE@{ub}.  It is more efficient for the compiler to
          "normalize" the value (convert it to, e.g., 1 or 0) than for
          the comparison operators to do so because there may be
          opportunities to combine the normalization with other
          operations.

        * For equal-length sequences, use a value of 1 or -1, with -1
          being slightly preferred on machines with expensive jumps and
          1 preferred on other machines.

        * As a second choice, choose a value of @{b}0x80000001@{ub} if
          instructions exist that set both the sign and low-order bits
          but do not define the others.

        * Otherwise, use a value of @{b}0x80000000@{ub}.

     Many machines can produce both the value chosen for
     @{b}STORE_FLAG_VALUE@{ub} and its negation in the same number of
     instructions.  On those machines, you should also define a pattern
     for those cases, e.g., one matching

          (set A (neg:M (ne:M B C)))

     Some machines can also perform @{b}and@{ub} or @{b}plus@{ub} operations on condition
     code values with less instructions than the corresponding @{b}sCOND@{ub}
     insn followed by @{b}and@{ub} or @{b}plus@{ub}.  On those machines, define the
     appropriate patterns.  Use the names @{b}incscc@{ub} and @{b}decscc@{ub},
     respectively, for the patterns which perform @{b}plus@{ub} or @{b}minus@{ub}
     operations on condition code values.  See @{b}rs6000.md@{ub} for some
     examples.  The GNU Superoptizer can be used to find such
     instruction sequences on other machines.

     You need not define @{b}STORE_FLAG_VALUE@{ub} if the machine has no
     store-flag instructions.

@{b}FLOAT_STORE_FLAG_VALUE@{ub}
     A C expression that gives a non-zero floating point value that is
     returned when comparison operators with floating-point results are
     true.  Define this macro on machine that have comparison
     operations that return floating-point values.  If there are no
     such operations, do not define this macro.

@{b}Pmode@{ub}
     An alias for the machine mode for pointers.  On most machines,
     define this to be the integer mode corresponding to the width of a
     hardware pointer; @{b}SImode@{ub} on 32-bit machine or @{b}DImode@{ub} on 64-bit
     machines.  On some machines you must define this to be one of the
     partial integer modes, such as @{b}PSImode@{ub}.

     The width of @{b}Pmode@{ub} must be at least as large as the value of
     @{b}POINTER_SIZE@{ub}.  If it is not equal, you must define the macro
     @{b}POINTERS_EXTEND_UNSIGNED@{ub} to specify how pointers are extended to
     @{b}Pmode@{ub}.

@{b}FUNCTION_MODE@{ub}
     An alias for the machine mode used for memory references to
     functions being called, in @{b}call@{ub} RTL expressions.  On most machines
     this should be @{b}QImode@{ub}.

@{b}INTEGRATE_THRESHOLD (DECL)@{ub}
     A C expression for the maximum number of instructions above which
     the function DECL should not be inlined.  DECL is a @{b}FUNCTION_DECL@{ub}
     node.

     The default definition of this macro is 64 plus 8 times the number
     of arguments that the function accepts.  Some people think a larger
     threshold should be used on RISC machines.

@{b}SCCS_DIRECTIVE@{ub}
     Define this if the preprocessor should ignore @{b}#sccs@{ub} directives and
     print no error message.

@{b}NO_IMPLICIT_EXTERN_C@{ub}
     Define this macro if the system header files support C++ as well
     as C.  This macro inhibits the usual method of using system header
     files in C++, which is to pretend that the file's contents are
     enclosed in @{b}extern "C" {...}@{ub}.

@{b}HANDLE_PRAGMA (STREAM, NODE)@{ub}
     Define this macro if you want to implement any pragmas.  If
     defined, it is a C expression whose value is 1 if the pragma was
     handled by the function.  The argument STREAM is the stdio input
     stream from which the source text can be read.  NODE is the tree
     node for the identifier after the @{b}#pragma@{ub}.

     It is generally a bad idea to implement new uses of @{b}#pragma@{ub}.  The
     only reason to define this macro is for compatibility with other
     compilers that do support @{b}#pragma@{ub} for the sake of any user
     programs which already use it.

@{b}VALID_MACHINE_DECL_ATTRIBUTE (DECL, ATTRIBUTES, IDENTIFIER, ARGS)@{ub}
     If defined, a C expression whose value is nonzero if IDENTIFIER
     with arguments ARGS is a valid machine specific attribute for DECL.
     The attributes in ATTRIBUTES have previously been assigned to DECL.

@{b}VALID_MACHINE_TYPE_ATTRIBUTE (TYPE, ATTRIBUTES, IDENTIFIER, ARGS)@{ub}
     If defined, a C expression whose value is nonzero if IDENTIFIER
     with arguments ARGS is a valid machine specific attribute for TYPE.
     The attributes in ATTRIBUTES have previously been assigned to TYPE.

@{b}COMP_TYPE_ATTRIBUTES (TYPE1, TYPE2)@{ub}
     If defined, a C expression whose value is zero if the attributes on
     TYPE1 and TYPE2 are incompatible, one if they are compatible, and
     two if they are nearly compatible (which causes a warning to be
     generated).

@{b}SET_DEFAULT_TYPE_ATTRIBUTES (TYPE)@{ub}
     If defined, a C statement that assigns default attributes to newly
     defined TYPE.

@{b}MERGE_MACHINE_TYPE_ATTRIBUTES (TYPE1, TYPE2)@{ub}
     Define this macro if the merging of type attributes needs special
     handling.  If defined, the result is a list of the combined
     TYPE_ATTRIBUTES of TYPE1 and TYPE2.  It is assumed that comptypes
     has already been called and returned 1.

@{b}MERGE_MACHINE_DECL_ATTRIBUTES (OLDDECL, NEWDECL)@{ub}
     Define this macro if the merging of decl attributes needs special
     handling.  If defined, the result is a list of the combined
     DECL_MACHINE_ATTRIBUTES of OLDDECL and NEWDECL.  NEWDECL is a
     duplicate declaration of OLDDECL.  Examples of when this is needed
     are when one attribute overrides another, or when an attribute is
     nullified by a subsequent definition.

@{b}SET_DEFAULT_DECL_ATTRIBUTES (DECL, ATTRIBUTES)@{ub}
     If defined, a C statement that assigns default attributes to newly
     defined DECL.

@{b}DOLLARS_IN_IDENTIFIERS@{ub}
     Define this macro to control use of the character @{b}$@{ub} in identifier
     names.  0 means @{b}$@{ub} is not allowed by default; 1 means it is allowed.
     1 is the default; there is no need to define this macro in that
     case.  This macro controls the compiler proper; it does not affect
     the preprocessor.

@{b}NO_DOLLAR_IN_LABEL@{ub}
     Define this macro if the assembler does not accept the character @{b}$@{ub}
     in label names.  By default constructors and destructors in G++
     have @{b}$@{ub} in the identifiers.  If this macro is defined, @{b}.@{ub} is used
     instead.

@{b}NO_DOT_IN_LABEL@{ub}
     Define this macro if the assembler does not accept the character @{b}.@{ub}
     in label names.  By default constructors and destructors in G++
     have names that use @{b}.@{ub}.  If this macro is defined, these names are
     rewritten to avoid @{b}.@{ub}.

@{b}DEFAULT_MAIN_RETURN@{ub}
     Define this macro if the target system expects every program's @{b}main@{ub}
     function to return a standard "success" value by default (if no
     other value is explicitly returned).

     The definition should be a C statement (sans semicolon) to
     generate the appropriate rtl instructions.  It is used only when
     compiling the end of @{b}main@{ub}.

@{b}HAVE_ATEXIT@{ub}
     Define this if the target system supports the function @{b}atexit@{ub} from
     the ANSI C standard.  If this is not defined, and
     @{b}INIT_SECTION_ASM_OP@{ub} is not defined, a default @{b}exit@{ub} function will
     be provided to support C++.

@{b}EXIT_BODY@{ub}
     Define this if your @{b}exit@{ub} function needs to do something besides
     calling an external function @{b}_cleanup@{ub} before terminating with
     @{b}_exit@{ub}.  The @{b}EXIT_BODY@{ub} macro is only needed if neither @{b}HAVE_ATEXIT@{ub}
     nor @{b}INIT_SECTION_ASM_OP@{ub} are defined.

@{b}INSN_SETS_ARE_DELAYED (INSN)@{ub}
     Define this macro as a C expression that is nonzero if it is safe
     for the delay slot scheduler to place instructions in the delay
     slot of INSN, even if they appear to use a resource set or
     clobbered in INSN.  INSN is always a @{b}jump_insn@{ub} or an @{b}insn@{ub}; GNU CC
     knows that every @{b}call_insn@{ub} has this behavior.  On machines where
     some @{b}insn@{ub} or @{b}jump_insn@{ub} is really a function call and hence has
     this behavior, you should define this macro.

     You need not define this macro if it would always return zero.

@{b}INSN_REFERENCES_ARE_DELAYED (INSN)@{ub}
     Define this macro as a C expression that is nonzero if it is safe
     for the delay slot scheduler to place instructions in the delay
     slot of INSN, even if they appear to set or clobber a resource
     referenced in INSN.  INSN is always a @{b}jump_insn@{ub} or an @{b}insn@{ub}.  On
     machines where some @{b}insn@{ub} or @{b}jump_insn@{ub} is really a function call
     and its operands are registers whose use is actually in the
     subroutine it calls, you should define this macro.  Doing so
     allows the delay slot scheduler to move instructions which copy
     arguments into the argument registers into the delay slot of INSN.

     You need not define this macro if it would always return zero.

@{b}MACHINE_DEPENDENT_REORG (INSN)@{ub}
     In rare cases, correct code generation requires extra machine
     dependent processing between the second jump optimization pass and
     delayed branch scheduling.  On those machines, define this macro
     as a C statement to act on the code starting at INSN.

@{b}MULTIPLE_SYMBOL_SPACES@{ub}
     Define this macro if in some cases global symbols from one
     translation unit may not be bound to undefined symbols in another
     translation unit without user intervention.  For instance, under
     Microsoft Windows symbols must be explicitly imported from shared
     libraries (DLLs).

@{b}GIV_SORT_CRITERION (GIV1, GIV2)@{ub}
     In some cases, the strength reduction optimization pass can
     produce better code if this is defined.  This macro controls the
     order that induction variables are combined.  This macro is
     particularly useful if the target has limited addressing modes.
     For instance, the SH target has only positive offsets in
     addresses.  Thus sorting to put the smallest address first allows
     the most combinations to be found.

@{b}ISSUE_RATE@{ub}
     A C expression that returns how many instructions can be issued at
     the same time if the machine is a superscalar machine.  This is
     only used by the @{b}Haifa@{ub} scheduler, and not the traditional
     scheduler.

@{b}MD_SCHED_INIT (FILE, VERBOSE@{ub}
     A C statement which is executed by the @{b}Haifa@{ub} scheduler at the
     beginning of each block of instructions that are to be scheduled.
     FILE is either a null pointer, or a stdio stream to write any
     debug output to.  VERBOSE is the verbose level provided by
     @{b}-fsched-verbose-@{ub}N.

@{b}MD_SCHED_REORDER (FILE, VERBOSE, READY, N_READY)@{ub}
     A C statement which is executed by the @{b}Haifa@{ub} scheduler after it
     has scheduled the ready list to allow the machine description to
     reorder it (for example to combine two small instructions together
     on @{b}VLIW@{ub} machines).  FILE is either a null pointer, or a stdio
     stream to write any debug output to.  VERBOSE is the verbose level
     provided by @{b}-fsched-verbose-@{ub}N.  READY is a pointer to the ready
     list of instructions that are ready to be scheduled.  N_READY is
     the number of elements in the ready list.  The scheduler reads the
     ready list in reverse order, starting with READY[N_READY-1] and
     going to READY[0].

@{b}MD_SCHED_VARIABLE_ISSUE (FILE, VERBOSE, INSN, MORE)@{ub}
     A C statement which is executed by the @{b}Haifa@{ub} scheduler after it
     has scheduled an insn from the ready list.  FILE is either a null
     pointer, or a stdio stream to write any debug output to.  VERBOSE
     is the verbose level provided by @{b}-fsched-verbose-@{ub}N.  INSN is the
     instruction that was scheduled.  MORE is the number of
     instructions that can be issued in the current cycle.  The
     @{b}MD_SCHED_VARIABLE_ISSUE@{ub} macro is responsible for updating the
     value of MORE (typically by MORE-).

@{b}MAX_INTEGER_COMPUTATION_MODE@{ub}
     Define this to the largest integer machine mode which can be used
     for operations other than load, store and copy operations.

     You need only define this macro if the target holds values larger
     than @{b}word_mode@{ub} in general purpose registers.  Most targets should
     not define this macro.

@{b}NEED_MATH_LIBRARY@{ub}
     Define this macro as a C expression that is nonzero if @{b}g++@{ub} should
     automatically link in the math library or to zero if @{b}g++@{ub} should not
     automatically link in the math library.

     You need only define this macro if the target does not always need
     the math library linked into C++ programs.


@endnode

@node "Config" "gcc.guide/Config"
@next "Fragments"
@prev "Target Macros"
@toc "Main"

The Configuration File
**********************

   The configuration file @{b}xm-MACHINE.h@{ub} contains macro definitions that
describe the machine and system on which the compiler is running,
unlike the definitions in @{b}MACHINE.h@{ub}, which describe the machine for
which the compiler is producing output.  Most of the values in
@{b}xm-MACHINE.h@{ub} are actually the same on all machines that GNU CC runs on,
so large parts of all configuration files are identical.  But there are
some macros that vary:

@{b}USG@{ub}
     Define this macro if the host system is System V.

@{b}VMS@{ub}
     Define this macro if the host system is VMS.

@{b}FATAL_EXIT_CODE@{ub}
     A C expression for the status code to be returned when the compiler
     exits after serious errors.

@{b}SUCCESS_EXIT_CODE@{ub}
     A C expression for the status code to be returned when the compiler
     exits without serious errors.

@{b}HOST_WORDS_BIG_ENDIAN@{ub}
     Defined if the host machine stores words of multi-word values in
     big-endian order.  (GNU CC does not depend on the host byte
     ordering within a word.)

@{b}HOST_FLOAT_WORDS_BIG_ENDIAN@{ub}
     Define this macro to be 1 if the host machine stores @{b}DFmode@{ub},
     @{b}XFmode@{ub} or @{b}TFmode@{ub} floating point numbers in memory with the word
     containing the sign bit at the lowest address; otherwise, define it
     to be zero.

     This macro need not be defined if the ordering is the same as for
     multi-word integers.

@{b}HOST_FLOAT_FORMAT@{ub}
     A numeric code distinguishing the floating point format for the
     host machine.  See @{b}TARGET_FLOAT_FORMAT@{ub} in @{"Storage Layout" link "Storage Layout"} for the
     alternatives and default.

@{b}HOST_BITS_PER_CHAR@{ub}
     A C expression for the number of bits in @{b}char@{ub} on the host machine.

@{b}HOST_BITS_PER_SHORT@{ub}
     A C expression for the number of bits in @{b}short@{ub} on the host machine.

@{b}HOST_BITS_PER_INT@{ub}
     A C expression for the number of bits in @{b}int@{ub} on the host machine.

@{b}HOST_BITS_PER_LONG@{ub}
     A C expression for the number of bits in @{b}long@{ub} on the host machine.

@{b}ONLY_INT_FIELDS@{ub}
     Define this macro to indicate that the host compiler only supports
     @{b}int@{ub} bit fields, rather than other integral types, including @{b}enum@{ub},
     as do most C compilers.

@{b}OBSTACK_CHUNK_SIZE@{ub}
     A C expression for the size of ordinary obstack chunks.  If you
     don't define this, a usually-reasonable default is used.

@{b}OBSTACK_CHUNK_ALLOC@{ub}
     The function used to allocate obstack chunks.  If you don't define
     this, @{b}xmalloc@{ub} is used.

@{b}OBSTACK_CHUNK_FREE@{ub}
     The function used to free obstack chunks.  If you don't define
     this, @{b}free@{ub} is used.

@{b}USE_C_ALLOCA@{ub}
     Define this macro to indicate that the compiler is running with the
     @{b}alloca@{ub} implemented in C.  This version of @{b}alloca@{ub} can be found in
     the file @{b}alloca.c@{ub}; to use it, you must also alter the @{b}Makefile@{ub}
     variable @{b}ALLOCA@{ub}.  (This is done automatically for the systems on
     which we know it is needed.)

     If you do define this macro, you should probably do it as follows:

          #ifndef __GNUC__
          #define USE_C_ALLOCA
          #else
          #define alloca __builtin_alloca
          #endif

     so that when the compiler is compiled with GNU CC it uses the more
     efficient built-in @{b}alloca@{ub} function.

@{b}FUNCTION_CONVERSION_BUG@{ub}
     Define this macro to indicate that the host compiler does not
     properly handle converting a function value to a
     pointer-to-function when it is used in an expression.

@{b}MULTIBYTE_CHARS@{ub}
     Define this macro to enable support for multibyte characters in the
     input to GNU CC.  This requires that the host system support the
     ANSI C library functions for converting multibyte characters to
     wide characters.

@{b}POSIX@{ub}
     Define this if your system is POSIX.1 compliant.

@{b}NO_SYS_SIGLIST@{ub}
     Define this if your system @{i}does not@{ui} provide the variable
     @{b}sys_siglist@{ub}.

     Some systems do provide this variable, but with a different name
     such as @{b}_sys_siglist@{ub}.  On these systems, you can define
     @{b}sys_siglist@{ub} as a macro which expands into the name actually
     provided.

     Autoconf normally defines @{b}SYS_SIGLIST_DECLARED@{ub} when it finds a
     declaration of @{b}sys_siglist@{ub} in the system header files.  However,
     when you define @{b}sys_siglist@{ub} to a different name autoconf will not
     automatically define @{b}SYS_SIGLIST_DECLARED@{ub}.  Therefore, if you
     define @{b}sys_siglist@{ub}, you should also define @{b}SYS_SIGLIST_DECLARED@{ub}.

@{b}USE_PROTOTYPES@{ub}
     Define this to be 1 if you know that the host compiler supports
     prototypes, even if it doesn't define __STDC__, or define it to be
     0 if you do not want any prototypes used in compiling GNU CC.  If
     @{b}USE_PROTOTYPES@{ub} is not defined, it will be determined automatically
     whether your compiler supports prototypes by checking if @{b}__STDC__@{ub}
     is defined.

@{b}NO_MD_PROTOTYPES@{ub}
     Define this if you wish suppression of prototypes generated from
     the machine description file, but to use other prototypes within
     GNU CC.  If @{b}USE_PROTOTYPES@{ub} is defined to be 0, or the host
     compiler does not support prototypes, this macro has no effect.

@{b}MD_CALL_PROTOTYPES@{ub}
     Define this if you wish to generate prototypes for the @{b}gen_call@{ub} or
     @{b}gen_call_value@{ub} functions generated from the machine description
     file.  If @{b}USE_PROTOTYPES@{ub} is defined to be 0, or the host compiler
     does not support prototypes, or @{b}NO_MD_PROTOTYPES@{ub} is defined, this
     macro has no effect.  As soon as all of the machine descriptions
     are modified to have the appropriate number of arguments, this
     macro will be removed.

@{b}PATH_SEPARATOR@{ub}
     Define this macro to be a C character constant representing the
     character used to separate components in paths.  The default value
     is the colon character

@{b}DIR_SEPARATOR@{ub}
     If your system uses some character other than slash to separate
     directory names within a file specification, define this macro to
     be a C character constant specifying that character.  When GNU CC
     displays file names, the character you specify will be used.  GNU
     CC will test for both slash and the character you specify when
     parsing filenames.

@{b}OBJECT_SUFFIX@{ub}
     Define this macro to be a C string representing the suffix for
     object files on your machine.  If you do not define this macro,
     GNU CC will use @{b}.o@{ub} as the suffix for object files.

@{b}EXECUTABLE_SUFFIX@{ub}
     Define this macro to be a C string representing the suffix for
     executable files on your machine.  If you do not define this
     macro, GNU CC will use the null string as the suffix for object
     files.

@{b}COLLECT_EXPORT_LIST@{ub}
     If defined, @{b}collect2@{ub} will scan the individual object files
     specified on its command line and create an export list for the
     linker.  Define this macro for systems like AIX, where the linker
     discards object files that are not referenced from @{b}main@{ub} and uses
     export lists.

   In addition, configuration files for system V define @{b}bcopy@{ub}, @{b}bzero@{ub}
and @{b}bcmp@{ub} as aliases.  Some files define @{b}alloca@{ub} as a macro when compiled
with GNU CC, in order to take advantage of the benefit of GNU CC's
built-in @{b}alloca@{ub}.


@endnode

@node "Fragments" "gcc.guide/Fragments"
@next "Funding"
@prev "Config"
@toc "Main"

Makefile Fragments
******************

   When you configure GNU CC using the @{b}configure@{ub} script (see
@{"Installation" link "Installation"}), it will construct the file @{b}Makefile@{ub} from the template
file @{b}Makefile.in@{ub}.  When it does this, it will incorporate makefile
fragment files from the @{b}config@{ub} directory, named @{b}t-TARGET@{ub} and @{b}x-HOST@{ub}.
If these files do not exist, it means nothing needs to be added for a
given target or host.


 @{" Target Fragment " link "Target Fragment"}  Writing the @{b}t-TARGET@{ub} file.
 @{" Host Fragment  " link "Host Fragment"}  Writing the @{b}x-HOST@{ub} file.


@endnode

@node "Target Fragment" "gcc.guide/Target Fragment"
@next "Host Fragment"
@toc "Fragments"

The Target Makefile Fragment
============================

   The target makefile fragment, @{b}t-TARGET@{ub}, defines special target
dependent variables and targets used in the @{b}Makefile@{ub}:

@{b}LIBGCC1@{ub}
     The rule to use to build @{b}libgcc1.a@{ub}.  If your target does not need
     to use the functions in @{b}libgcc1.a@{ub}, set this to empty.  See
     @{"Interface" link "Interface"}.

@{b}CROSS_LIBGCC1@{ub}
     The rule to use to build @{b}libgcc1.a@{ub} when building a cross compiler.
     If your target does not need to use the functions in @{b}libgcc1.a@{ub},
     set this to empty.  See @{"Cross Runtime" link "Cross Runtime"}.

@{b}LIBGCC2_CFLAGS@{ub}
     Compiler flags to use when compiling @{b}libgcc2.c@{ub}.

@{b}LIB2FUNCS_EXTRA@{ub}
     A list of source file names to be compiled or assembled and
     inserted into @{b}libgcc.a@{ub}.

@{b}CRTSTUFF_T_CFLAGS@{ub}
     Special flags used when compiling @{b}crtstuff.c@{ub}.  See @{"Initialization" link "Initialization"}.

@{b}CRTSTUFF_T_CFLAGS_S@{ub}
     Special flags used when compiling @{b}crtstuff.c@{ub} for shared linking.
     Used if you use @{b}crtbeginS.o@{ub} and @{b}crtendS.o@{ub} in @{b}EXTRA-PARTS@{ub}.  See
     @{"Initialization" link "Initialization"}.

@{b}MULTILIB_OPTIONS@{ub}
     For some targets, invoking GNU CC in different ways produces
     objects that can not be linked together.  For example, for some
     targets GNU CC produces both big and little endian code.  For
     these targets, you must arrange for multiple versions of @{b}libgcc.a@{ub}
     to be compiled, one for each set of incompatible options.  When
     GNU CC invokes the linker, it arranges to link in the right
     version of @{b}libgcc.a@{ub}, based on the command line options used.

     The @{b}MULTILIB_OPTIONS@{ub} macro lists the set of options for which
     special versions of @{b}libgcc.a@{ub} must be built.  Write options that
     are mutually incompatible side by side, separated by a slash.
     Write options that may be used together separated by a space.  The
     build procedure will build all combinations of compatible options.

     For example, if you set @{b}MULTILIB_OPTIONS@{ub} to @{b}m68000/m68020
     msoft-float@{ub}, @{b}Makefile@{ub} will build special versions of @{b}libgcc.a@{ub}
     using the following sets of options:  @{b}-m68000@{ub}, @{b}-m68020@{ub},
     @{b}-msoft-float@{ub}, @{b}-m68000 -msoft-float@{ub}, and @{b}-m68020 -msoft-float@{ub}.

@{b}MULTILIB_DIRNAMES@{ub}
     If @{b}MULTILIB_OPTIONS@{ub} is used, this variable specifies the directory
     names that should be used to hold the various libraries.  Write
     one element in @{b}MULTILIB_DIRNAMES@{ub} for each element in
     @{b}MULTILIB_OPTIONS@{ub}.  If @{b}MULTILIB_DIRNAMES@{ub} is not used, the default
     value will be @{b}MULTILIB_OPTIONS@{ub}, with all slashes treated as spaces.

     For example, if @{b}MULTILIB_OPTIONS@{ub} is set to @{b}m68000/m68020
     msoft-float@{ub}, then the default value of @{b}MULTILIB_DIRNAMES@{ub} is @{b}m68000
     m68020 msoft-float@{ub}.  You may specify a different value if you
     desire a different set of directory names.

@{b}MULTILIB_MATCHES@{ub}
     Sometimes the same option may be written in two different ways.
     If an option is listed in @{b}MULTILIB_OPTIONS@{ub}, GNU CC needs to know
     about any synonyms.  In that case, set @{b}MULTILIB_MATCHES@{ub} to a list
     of items of the form @{b}option=option@{ub} to describe all relevant
     synonyms.  For example, @{b}m68000=mc68000 m68020=mc68020@{ub}.

@{b}MULTILIB_EXCEPTIONS@{ub}
     Sometimes when there are multiple sets of @{b}MULTILIB_OPTIONS@{ub} being
     specified, there are combinations that should not be built.  In
     that case, set @{b}MULTILIB_EXCEPTIONS@{ub} to be all of the switch
     exceptions in shell case syntax that should not be built.

     For example, in the PowerPC embedded ABI support, it was not
     desirable to build libraries that compiled with the @{b}-mcall-aixdesc@{ub}
     option and either of the @{b}-mcall-aixdesc@{ub} or @{b}-mlittle@{ub} options at the
     same time, and therefore @{b}MULTILIB_EXCEPTIONS@{ub} is set to
     @{b}*mrelocatable/*mcall-aixdesc* *mlittle/*mcall-aixdesc*@{ub}.

@{b}MULTILIB_EXTRA_OPTS@{ub}
     Sometimes it is desirable that when building multiple versions of
     @{b}libgcc.a@{ub} certain options should always be passed on to the
     compiler.  In that case, set @{b}MULTILIB_EXTRA_OPTS@{ub} to be the list of
     options to be used for all builds.


@endnode

@node "Host Fragment" "gcc.guide/Host Fragment"
@prev "Target Fragment"
@toc "Fragments"

The Host Makefile Fragment
==========================

   The host makefile fragment, @{b}x-HOST@{ub}, defines special host dependent
variables and targets used in the @{b}Makefile@{ub}:

@{b}CC@{ub}
     The compiler to use when building the first stage.

@{b}CLIB@{ub}
     Additional host libraries to link with.

@{b}OLDCC@{ub}
     The compiler to use when building @{b}libgcc1.a@{ub} for a native
     compilation.

@{b}OLDAR@{ub}
     The version of @{b}ar@{ub} to use when building @{b}libgcc1.a@{ub} for a native
     compilation.

@{b}INSTALL@{ub}
     The install program to use.


@endnode

@node "Funding" "gcc.guide/Funding"
@next "GNU-Linux"
@prev "Fragments"
@toc "Main"

Funding Free Software
*********************

   If you want to have more free software a few years from now, it makes
sense for you to help encourage people to contribute funds for its
development.  The most effective approach known is to encourage
commercial redistributors to donate.

   Users of free software systems can boost the pace of development by
encouraging for-a-fee distributors to donate part of their selling price
to free software developers--the Free Software Foundation, and others.

   The way to convince distributors to do this is to demand it and
expect it from them.  So when you compare distributors, judge them
partly by how much they give to free software development.  Show
distributors they must compete to be the one who gives the most.

   To make this approach work, you must insist on numbers that you can
compare, such as, "We will donate ten dollars to the Frobnitz project
for each disk sold."  Don't be satisfied with a vague promise, such as
"A portion of the profits are donated," since it doesn't give a basis
for comparison.

   Even a precise fraction "of the profits from this disk" is not very
meaningful, since creative accounting and unrelated business decisions
can greatly alter what fraction of the sales price counts as profit.
If the price you pay is $50, ten percent of the profit is probably less
than a dollar; it might be a few cents, or nothing at all.

   Some redistributors do development work themselves.  This is useful
too; but to keep everyone honest, you need to inquire how much they do,
and what kind.  Some kinds of development make much more long-term
difference than others.  For example, maintaining a separate version of
a program contributes very little; maintaining the standard version of a
program for the whole community contributes much.  Easy new ports
contribute little, since someone else would surely do them; difficult
ports such as adding a new CPU to the GNU C compiler contribute more;
major new features or packages contribute the most.

   By establishing the idea that supporting further development is "the
proper thing to do" when distributing free software for a fee, we can
assure a steady flow of resources into making more free software.

     Copyright (C) 1994 Free Software Foundation, Inc.
     Verbatim copying and redistribution of this section is permitted
     without royalty; alteration is not permitted.


@endnode

@node "GNU-Linux" "gcc.guide/GNU-Linux"
@next "Copying"
@prev "Funding"
@toc "Main"

Linux and the GNU Project
*************************

   Many computer users run a modified version of the GNU system every
day, without realizing it.  Through a peculiar turn of events, the
version of GNU which is widely used today is more often known as
"Linux", and many users are not aware of the extent of its connection
with the GNU Project.

   There really is a Linux; it is a kernel, and these people are using
it.  But you can't use a kernel by itself; a kernel is useful only as
part of a whole system.  The system in which Linux is typically used is
a modified variant of the GNU system--in other words, a Linux-based GNU
system.

   Many users are not fully aware of the distinction between the kernel,
which is Linux, and the whole system, which they also call "Linux".
The ambiguous use of the name doesn't promote understanding.

   Programmers generally know that Linux is a kernel.  But since they
have generally heard the whole system called "Linux" as well, they
often envisage a history which fits that name.  For example, many
believe that once Linus Torvalds finished writing the kernel, his
friends looked around for other free software, and for no particular
reason most everything necessary to make a Unix-like system was already
available.

   What they found was no accident--it was the GNU system.  The
available free software added up to a complete system because the GNU
Project had been working since 1984 to make one.  The GNU Manifesto had
set forth the goal of developing a free Unix-like system, called GNU.
By the time Linux was written, the system was almost finished.

   Most free software projects have the goal of developing a particular
program for a particular job.  For example, Linus Torvalds set out to
write a Unix-like kernel (Linux); Donald Knuth set out to write a text
formatter (TeX); Bob Scheifler set out to develop a window system (X
Windows).  It's natural to measure the contribution of this kind of
project by specific programs that came from the project.

   If we tried to measure the GNU Project's contribution in this way,
what would we conclude?  One CD-ROM vendor found that in their "Linux
distribution", GNU software was the largest single contingent, around
28% of the total source code, and this included some of the essential
major components without which there could be no system.  Linux itself
was about 3%.  So if you were going to pick a name for the system based
on who wrote the programs in the system, the most appropriate single
choice would be "GNU".

   But we don't think that is the right way to consider the question.
The GNU Project was not, is not, a project to develop specific software
packages.  It was not a project to develop a C compiler, although we
did.  It was not a project to develop a text editor, although we
developed one.  The GNU Project's aim was to develop @{i}a complete free
Unix-like system@{ui}.

   Many people have made major contributions to the free software in the
system, and they all deserve credit.  But the reason it is @{i}a
system@{ui}--and not just a collection of useful programs--is because the
GNU Project set out to make it one.  We wrote the programs that were
needed to make a @{i}complete@{ui} free system.  We wrote essential but
unexciting major components, such as the assembler and linker, because
you can't have a system without them.  A complete system needs more
than just programming tools, so we wrote other components as well, such
as the Bourne Again SHell, the PostScript interpreter Ghostscript, and
the GNU C library.

   By the early 90s we had put together the whole system aside from the
kernel (and we were also working on a kernel, the GNU Hurd, which runs
on top of Mach).  Developing this kernel has been a lot harder than we
expected, and we are still working on finishing it.

   Fortunately, you don't have to wait for it, because Linux is working
now.  When Linus Torvalds wrote Linux, he filled the last major gap.
People could then put Linux together with the GNU system to make a
complete free system: a Linux-based GNU system (or GNU/Linux system,
for short).

   Putting them together sounds simple, but it was not a trivial job.
The GNU C library (called glibc for short) needed substantial changes.
Integrating a complete system as a distribution that would work "out of
the box" was a big job, too.  It required addressing the issue of how
to install and boot the system--a problem we had not tackled, because
we hadn't yet reached that point.  The people who developed the various
system distributions made a substantial contribution.

   The GNU Project supports GNU/Linux systems as well as @{i}the@{ui} GNU
system--even with funds.  We funded the rewriting of the Linux-related
extensions to the GNU C library, so that now they are well integrated,
and the newest GNU/Linux systems use the current library release with
no changes.  We also funded an early stage of the development of Debian
GNU/Linux.

   We use Linux-based GNU systems today for most of our work, and we
hope you use them too.  But please don't confuse the public by using the
name "Linux" ambiguously.  Linux is the kernel, one of the essential
major components of the system.  The system as a whole is more or less
the GNU system.


@endnode

@node "Copying" "gcc.guide/Copying"
@next "Contributors"
@prev "GNU-Linux"
@toc "Main"

GNU GENERAL PUBLIC LICENSE
**************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Programs
=============================================

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type `show c' for details.

   The hypothetical commands @{b}show w@{ub} and @{b}show c@{ub} should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than @{b}show w@{ub} and @{b}show c@{ub};
they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the program
     `Gnomovision' (which makes passes at compilers) written by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.


@endnode

@node "Contributors" "gcc.guide/Contributors"
@next "Index"
@prev "Copying"
@toc "Main"

Contributors to GNU CC
**********************

   In addition to Richard Stallman, several people have written parts
of GNU CC.

   * The idea of using RTL and some of the optimization ideas came from
     the program PO written at the University of Arizona by Jack
     Davidson and Christopher Fraser.  See "Register Allocation and
     Exhaustive Peephole Optimization", Software Practice and
     Experience 14 (9), Sept. 1984, 857-866.

   * Paul Rubin wrote most of the preprocessor.

   * Leonard Tower wrote parts of the parser, RTL generator, and RTL
     definitions, and of the Vax machine description.

   * Ted Lemon wrote parts of the RTL reader and printer.

   * Jim Wilson implemented loop strength reduction and some other loop
     optimizations.

   * Nobuyuki Hikichi of Software Research Associates, Tokyo,
     contributed the support for the Sony NEWS machine.

   * Charles LaBrec contributed the support for the Integrated Solutions
     68020 system.

   * Michael Tiemann of Cygnus Support wrote the front end for C++, as
     well as the support for inline functions and instruction
     scheduling.  Also the descriptions of the National Semiconductor
     32000 series cpu, the SPARC cpu and part of the Motorola 88000 cpu.

   * Gerald Baumgartner added the signature extension to the C++
     front-end.

   * Jan Stein of the Chalmers Computer Society provided support for
     Genix, as well as part of the 32000 machine description.

   * Randy Smith finished the Sun FPA support.

   * Robert Brown implemented the support for Encore 32000 systems.

   * David Kashtan of SRI adapted GNU CC to VMS.

   * Alex Crain provided changes for the 3b1.

   * Greg Satz and Chris Hanson assisted in making GNU CC work on HP-UX
     for the 9000 series 300.

   * William Schelter did most of the work on the Intel 80386 support.

   * Christopher Smith did the port for Convex machines.

   * Paul Petersen wrote the machine description for the Alliant FX/8.

   * Dario Dariol contributed the four varieties of sample programs
     that print a copy of their source.

   * Alain Lichnewsky ported GNU CC to the Mips cpu.

   * Devon Bowen, Dale Wiles and Kevin Zachmann ported GNU CC to the
     Tahoe.

   * Jonathan Stone wrote the machine description for the Pyramid
     computer.

   * Gary Miller ported GNU CC to Charles River Data Systems machines.

   * Richard Kenner of the New York University Ultracomputer Research
     Laboratory wrote the machine descriptions for the AMD 29000, the
     DEC Alpha, the IBM RT PC, and the IBM RS/6000 as well as the
     support for instruction attributes.  He also made changes to
     better support RISC processors including changes to common
     subexpression elimination, strength reduction, function calling
     sequence handling, and condition code support, in addition to
     generalizing the code for frame pointer elimination.

   * Richard Kenner and Michael Tiemann jointly developed reorg.c, the
     delay slot scheduler.

   * Mike Meissner and Tom Wood of Data General finished the port to the
     Motorola 88000.

   * Masanobu Yuhara of Fujitsu Laboratories implemented the machine
     description for the Tron architecture (specifically, the Gmicro).

   * NeXT, Inc. donated the front end that supports the Objective C
     language.

   * James van Artsdalen wrote the code that makes efficient use of the
     Intel 80387 register stack.

   * Mike Meissner at the Open Software Foundation finished the port to
     the MIPS cpu, including adding ECOFF debug support, and worked on
     the Intel port for the Intel 80386 cpu.  Later at Cygnus Support,
     he worked on the rs6000 and PowerPC ports.

   * Ron Guilmette implemented the @{b}protoize@{ub} and @{b}unprotoize@{ub} tools, the
     support for Dwarf symbolic debugging information, and much of the
     support for System V Release 4.  He has also worked heavily on the
     Intel 386 and 860 support.

   * Torbjorn Granlund implemented multiply- and divide-by-constant
     optimization, improved long long support, and improved leaf
     function register allocation.

   * Mike Stump implemented the support for Elxsi 64 bit CPU.

   * John Wehle added the machine description for the Western Electric
     32000 processor used in several 3b series machines (no relation to
     the National Semiconductor 32000 processor).

   * Holger Teutsch provided the support for the Clipper cpu.

   * Kresten Krab Thorup wrote the run time support for the Objective C
     language.

   * Stephen Moshier contributed the floating point emulator that
     assists in cross-compilation and permits support for floating
     point numbers wider than 64 bits.

   * David Edelsohn contributed the changes to RS/6000 port to make it
     support the PowerPC and POWER2 architectures.

   * Steve Chamberlain wrote the support for the Hitachi SH processor.

   * Peter Schauer wrote the code to allow debugging to work on the
     Alpha.

   * Oliver M. Kellogg of Deutsche Aerospace contributed the port to the
     MIL-STD-1750A.

   * Michael K. Gschwind contributed the port to the PDP-11.

   * David Reese of Sun Microsystems contributed to the Solaris on
     PowerPC port.


@endnode

@node "Index" "gcc.guide/Index"
@prev "Contributors"
@toc "Main"

Index
*****

@index "Index"



 @{" ! in constraint                          " link "Multi-Alternative"}   Multi-Alternative
 @{" # in constraint                          " link "Modifiers"}   Modifiers
 @{" # in template                            " link "Output Template"}   Output Template
 @{" #pragma                                  " link "Misc"}   Misc
 @{" #pragma implementation, implied          " link "C++ Interface"}   C++ Interface
 @{" #pragma, reason for not using            " link "Function Attributes"}   Function Attributes
 @{" $                                        " link "Dollar Signs"}   Dollar Signs
 @{" % in constraint                          " link "Modifiers"}   Modifiers
 @{" % in template                            " link "Output Template"}   Output Template
 @{" & in constraint                          " link "Modifiers"}   Modifiers
 @{" '                                        " link "Incompatibilities"}   Incompatibilities
 @{" (nil)                                    " link "RTL Objects"}   RTL Objects
 @{" * in constraint                          " link "Modifiers"}   Modifiers
 @{" * in template                            " link "Output Statement"}   Output Statement
 @{" + in constraint                          " link "Modifiers"}   Modifiers
 @{" -lgcc, use with -nodefaultlibs           " link "Link Options"}   Link Options
 @{" -lgcc, use with -nostdlib                " link "Link Options"}   Link Options
 @{" -nodefaultlibs and unresolved references " link "Link Options"}   Link Options
 @{" -nostdlib and unresolved references      " link "Link Options"}   Link Options
 @{" .sdata-.sdata2 references (PowerPC)      " link "RS-6000 and PowerPC Options"}   RS-6000 and PowerPC Options
 @{" --                                       " link "C++ Comments"}   C++ Comments
 @{" -i in RTL dump                           " link "Flags"}   Flags
 @{" -s in RTL dump                           " link "Flags"}   Flags
 @{" -u in RTL dump                           " link "Flags"}   Flags
 @{" -v in RTL dump                           " link "Flags"}   Flags
 @{" 0 in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" < in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" <?                                       " link "Min and Max"}   Min and Max
 @{" = in constraint                          " link "Modifiers"}   Modifiers
 @{" > in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" >?                                       " link "Min and Max"}   Min and Max
 @{" ? in constraint                          " link "Multi-Alternative"}   Multi-Alternative
 @{" ?: extensions <1>                        " link "Lvalues"}   Lvalues
 @{" ?: extensions                            " link "Conditionals"}   Conditionals
 @{" ?: side effect                           " link "Conditionals"}   Conditionals
 @{" \\                                       " link "Output Template"}   Output Template
 @{" _ in variables in macros                 " link "Naming Types"}   Naming Types
 @{" __bb                                     " link "Profiling"}   Profiling
 @{" __bb_init_func                           " link "Profiling"}   Profiling
 @{" __bb_init_trace_func                     " link "Profiling"}   Profiling
 @{" __bb_trace_func                          " link "Profiling"}   Profiling
 @{" __bb_trace_ret                           " link "Profiling"}   Profiling
 @{" __builtin_apply                          " link "Constructing Calls"}   Constructing Calls
 @{" __builtin_apply_args                     " link "Constructing Calls"}   Constructing Calls
 @{" __builtin_args_info                      " link "Varargs"}   Varargs
 @{" __builtin_classify_type                  " link "Varargs"}   Varargs
 @{" __builtin_next_arg                       " link "Varargs"}   Varargs
 @{" __builtin_return                         " link "Constructing Calls"}   Constructing Calls
 @{" __builtin_saveregs                       " link "Varargs"}   Varargs
 @{" __CTOR_LIST__                            " link "Initialization"}   Initialization
 @{" __DTOR_LIST__                            " link "Initialization"}   Initialization
 @{" __main                                   " link "Collect2"}   Collect2
 @{" abort <1>                                " link "C Dialect Options"}   C Dialect Options
 @{" abort                                    " link "Portability"}   Portability
 @{" abs <1>                                  " link "C Dialect Options"}   C Dialect Options
 @{" abs                                      " link "Arithmetic"}   Arithmetic
 @{" abs and attributes                       " link "Expressions"}   Expressions
 @{" absM2 instruction pattern                " link "Standard Names"}   Standard Names
 @{" absolute value                           " link "Arithmetic"}   Arithmetic
 @{" access to operands                       " link "Accessors"}   Accessors
 @{" accessors                                " link "Accessors"}   Accessors
 @{" ACCUMULATE_OUTGOING_ARGS                 " link "Stack Arguments"}   Stack Arguments
 @{" ACCUMULATE_OUTGOING_ARGS and stack frames " link "Function Entry"}   Function Entry
 @{" ADDITIONAL_REGISTER_NAMES                " link "Instruction Output"}   Instruction Output
 @{" addM3 instruction pattern                " link "Standard Names"}   Standard Names
 @{" addr_diff_vec                            " link "Side Effects"}   Side Effects
 @{" addr_diff_vec, length of                 " link "Insn Lengths"}   Insn Lengths
 @{" addr_vec                                 " link "Side Effects"}   Side Effects
 @{" addr_vec, length of                      " link "Insn Lengths"}   Insn Lengths
 @{" address                                  " link "RTL Template"}   RTL Template
 @{" address constraints                      " link "Simple Constraints"}   Simple Constraints
 @{" address of a label                       " link "Labels as Values"}   Labels as Values
 @{" ADDRESS_COST                             " link "Costs"}   Costs
 @{" address_operand                          " link "Simple Constraints"}   Simple Constraints
 @{" addressing modes                         " link "Addressing Modes"}   Addressing Modes
 @{" addressof                                " link "Regs and Memory"}   Regs and Memory
 @{" ADJUST_COST                              " link "Costs"}   Costs
 @{" ADJUST_FIELD_ALIGN                       " link "Storage Layout"}   Storage Layout
 @{" ADJUST_INSN_LENGTH                       " link "Insn Lengths"}   Insn Lengths
 @{" ADJUST_PRIORITY                          " link "Costs"}   Costs
 @{" aggregates as return values              " link "Aggregate Return"}   Aggregate Return
 @{" alias attribute                          " link "Function Attributes"}   Function Attributes
 @{" aliasing of parameters                   " link "Code Gen Options"}   Code Gen Options
 @{" aligned attribute <1>                    " link "Type Attributes"}   Type Attributes
 @{" aligned attribute                        " link "Variable Attributes"}   Variable Attributes
 @{" alignment                                " link "Alignment"}   Alignment
 @{" ALL_REGS                                 " link "Register Classes"}   Register Classes
 @{" Alliant                                  " link "Interoperation"}   Interoperation
 @{" alloca                                   " link "C Dialect Options"}   C Dialect Options
 @{" alloca and SunOS                         " link "Installation"}   Installation
 @{" alloca vs variable-length arrays         " link "Variable Length"}   Variable Length
 @{" alloca, for SunOS                        " link "Sun Install"}   Sun Install
 @{" alloca, for Unos                         " link "Configurations"}   Configurations
 @{" allocate_stack instruction pattern       " link "Standard Names"}   Standard Names
 @{" ALLOCATE_TRAMPOLINE                      " link "Trampolines"}   Trampolines
 @{" ALTER_HARD_SUBREG                        " link "Values in Registers"}   Values in Registers
 @{" alternate keywords                       " link "Alternate Keywords"}   Alternate Keywords
 @{" AMD29K options                           " link "AMD29K Options"}   AMD29K Options
 @{" analysis, data flow                      " link "Passes"}   Passes
 @{" and                                      " link "Arithmetic"}   Arithmetic
 @{" and and attributes                       " link "Expressions"}   Expressions
 @{" and, canonicalization of                 " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" andM3 instruction pattern                " link "Standard Names"}   Standard Names
 @{" ANSI support                             " link "C Dialect Options"}   C Dialect Options
 @{" apostrophes                              " link "Incompatibilities"}   Incompatibilities
 @{" APPLY_RESULT_SIZE                        " link "Scalar Return"}   Scalar Return
 @{" ARC Options                              " link "ARC Options"}   ARC Options
 @{" ARG_POINTER_REGNUM                       " link "Frame Registers"}   Frame Registers
 @{" ARG_POINTER_REGNUM and virtual registers " link "Regs and Memory"}   Regs and Memory
 @{" arg_pointer_rtx                          " link "Frame Registers"}   Frame Registers
 @{" ARGS_GROW_DOWNWARD                       " link "Frame Layout"}   Frame Layout
 @{" argument passing                         " link "Interface"}   Interface
 @{" arguments in frame (88k)                 " link "M88K Options"}   M88K Options
 @{" arguments in registers                   " link "Register Arguments"}   Register Arguments
 @{" arguments on stack                       " link "Stack Arguments"}   Stack Arguments
 @{" arithmetic libraries                     " link "Interface"}   Interface
 @{" arithmetic shift                         " link "Arithmetic"}   Arithmetic
 @{" arithmetic simplifications               " link "Passes"}   Passes
 @{" arithmetic, in RTL                       " link "Arithmetic"}   Arithmetic
 @{" ARM options                              " link "ARM Options"}   ARM Options
 @{" arrays of length zero                    " link "Zero Length"}   Zero Length
 @{" arrays of variable length                " link "Variable Length"}   Variable Length
 @{" arrays, non-lvalue                       " link "Subscripting"}   Subscripting
 @{" ashift                                   " link "Arithmetic"}   Arithmetic
 @{" ashift and attributes                    " link "Expressions"}   Expressions
 @{" ashiftrt                                 " link "Arithmetic"}   Arithmetic
 @{" ashiftrt and attributes                  " link "Expressions"}   Expressions
 @{" ashlM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" ashrM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" asm expressions                          " link "Extended Asm"}   Extended Asm
 @{" ASM_APP_OFF                              " link "File Framework"}   File Framework
 @{" ASM_APP_ON                               " link "File Framework"}   File Framework
 @{" ASM_BYTE_OP                              " link "Data Output"}   Data Output
 @{" ASM_CLOSE_PAREN                          " link "Data Output"}   Data Output
 @{" ASM_COMMENT_START                        " link "File Framework"}   File Framework
 @{" ASM_DECLARE_FUNCTION_NAME                " link "Label Output"}   Label Output
 @{" ASM_DECLARE_FUNCTION_SIZE                " link "Label Output"}   Label Output
 @{" ASM_DECLARE_OBJECT_NAME                  " link "Label Output"}   Label Output
 @{" ASM_FILE_END                             " link "File Framework"}   File Framework
 @{" ASM_FILE_START                           " link "File Framework"}   File Framework
 @{" ASM_FINAL_SPEC                           " link "Driver"}   Driver
 @{" ASM_FINISH_DECLARE_OBJECT                " link "Label Output"}   Label Output
 @{" ASM_FORMAT_PRIVATE_NAME                  " link "Label Output"}   Label Output
 @{" asm_fprintf                              " link "Instruction Output"}   Instruction Output
 @{" ASM_GENERATE_INTERNAL_LABEL              " link "Label Output"}   Label Output
 @{" ASM_GLOBALIZE_LABEL                      " link "Label Output"}   Label Output
 @{" ASM_IDENTIFY_GCC                         " link "File Framework"}   File Framework
 @{" asm_input                                " link "Side Effects"}   Side Effects
 @{" ASM_NO_SKIP_IN_TEXT                      " link "Alignment Output"}   Alignment Output
 @{" asm_noperands                            " link "Insns"}   Insns
 @{" ASM_OPEN_PAREN                           " link "Data Output"}   Data Output
 @{" asm_operands, RTL sharing                " link "Sharing"}   Sharing
 @{" asm_operands, usage                      " link "Assembler"}   Assembler
 @{" ASM_OUTPUT_ADDR_DIFF_ELT                 " link "Dispatch Tables"}   Dispatch Tables
 @{" ASM_OUTPUT_ADDR_VEC_ELT                  " link "Dispatch Tables"}   Dispatch Tables
 @{" ASM_OUTPUT_ALIGN                         " link "Alignment Output"}   Alignment Output
 @{" ASM_OUTPUT_ALIGNED_BSS                   " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_ALIGNED_COMMON                " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_ALIGNED_DECL_COMMON           " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_ALIGNED_DECL_LOCAL            " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_ALIGNED_LOCAL                 " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_ASCII                         " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_BSS                           " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_BYTE                          " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_CASE_END                      " link "Dispatch Tables"}   Dispatch Tables
 @{" ASM_OUTPUT_CASE_LABEL                    " link "Dispatch Tables"}   Dispatch Tables
 @{" ASM_OUTPUT_CHAR                          " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_COMMON                        " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_CONSTRUCTOR                   " link "Macros for Initialization"}   Macros for Initialization
 @{" ASM_OUTPUT_DEF                           " link "Label Output"}   Label Output
 @{" ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL " link "Label Output"}   Label Output
 @{" ASM_OUTPUT_DESTRUCTOR                    " link "Macros for Initialization"}   Macros for Initialization
 @{" ASM_OUTPUT_DOUBLE                        " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_DOUBLE_INT                    " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_EH_REGION_BEG                 " link "Exception Region Output"}   Exception Region Output
 @{" ASM_OUTPUT_EH_REGION_END                 " link "Exception Region Output"}   Exception Region Output
 @{" ASM_OUTPUT_EXTERNAL                      " link "Label Output"}   Label Output
 @{" ASM_OUTPUT_EXTERNAL_LIBCALL              " link "Label Output"}   Label Output
 @{" ASM_OUTPUT_FLOAT                         " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_IDENT                         " link "File Framework"}   File Framework
 @{" ASM_OUTPUT_INT                           " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_INTERNAL_LABEL                " link "Label Output"}   Label Output
 @{" ASM_OUTPUT_LABEL                         " link "Label Output"}   Label Output
 @{" ASM_OUTPUT_LABELREF                      " link "Label Output"}   Label Output
 @{" ASM_OUTPUT_LOCAL                         " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_LONG_DOUBLE                   " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_MI_THUNK                      " link "Function Entry"}   Function Entry
 @{" ASM_OUTPUT_OPCODE                        " link "Instruction Output"}   Instruction Output
 @{" ASM_OUTPUT_POOL_EPILOGUE                 " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_POOL_PROLOGUE                 " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_QUADRUPLE_INT                 " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_REG_POP                       " link "Instruction Output"}   Instruction Output
 @{" ASM_OUTPUT_REG_PUSH                      " link "Instruction Output"}   Instruction Output
 @{" ASM_OUTPUT_SECTION_NAME                  " link "File Framework"}   File Framework
 @{" ASM_OUTPUT_SHARED_BSS                    " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_SHARED_COMMON                 " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_SHARED_LOCAL                  " link "Uninitialized Data"}   Uninitialized Data
 @{" ASM_OUTPUT_SHORT                         " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_SKIP                          " link "Alignment Output"}   Alignment Output
 @{" ASM_OUTPUT_SOURCE_FILENAME               " link "File Framework"}   File Framework
 @{" ASM_OUTPUT_SOURCE_LINE                   " link "File Framework"}   File Framework
 @{" ASM_OUTPUT_SPECIAL_POOL_ENTRY            " link "Data Output"}   Data Output
 @{" ASM_OUTPUT_WEAK_ALIAS                    " link "Label Output"}   Label Output
 @{" ASM_SPEC                                 " link "Driver"}   Driver
 @{" ASM_STABD_OP                             " link "DBX Options"}   DBX Options
 @{" ASM_STABN_OP                             " link "DBX Options"}   DBX Options
 @{" ASM_STABS_OP                             " link "DBX Options"}   DBX Options
 @{" ASM_WEAKEN_LABEL                         " link "Label Output"}   Label Output
 @{" assemble_name                            " link "Label Output"}   Label Output
 @{" assembler format                         " link "File Framework"}   File Framework
 @{" assembler instructions                   " link "Extended Asm"}   Extended Asm
 @{" assembler instructions in RTL            " link "Assembler"}   Assembler
 @{" assembler names for identifiers          " link "Asm Labels"}   Asm Labels
 @{" assembler syntax, 88k                    " link "M88K Options"}   M88K Options
 @{" ASSEMBLER_DIALECT                        " link "Instruction Output"}   Instruction Output
 @{" assembly code, invalid                   " link "Bug Criteria"}   Bug Criteria
 @{" assigning attribute values to insns      " link "Tagging Insns"}   Tagging Insns
 @{" asterisk in template                     " link "Output Statement"}   Output Statement
 @{" atof                                     " link "Cross-compilation"}   Cross-compilation
 @{" attr                                     " link "Tagging Insns"}   Tagging Insns
 @{" attr_flag                                " link "Expressions"}   Expressions
 @{" attribute expressions                    " link "Expressions"}   Expressions
 @{" attribute of types                       " link "Type Attributes"}   Type Attributes
 @{" attribute of variables                   " link "Variable Attributes"}   Variable Attributes
 @{" attribute specifications                 " link "Attr Example"}   Attr Example
 @{" attribute specifications example         " link "Attr Example"}   Attr Example
 @{" attributes, defining                     " link "Defining Attributes"}   Defining Attributes
 @{" autoincrement addressing, availability   " link "Portability"}   Portability
 @{" autoincrement-decrement addressing       " link "Simple Constraints"}   Simple Constraints
 @{" autoincrement-decrement analysis         " link "Passes"}   Passes
 @{" automatic inline for C++ member fns      " link "Inline"}   Inline
 @{" AVOID_CCMODE_COPIES                      " link "Values in Registers"}   Values in Registers
 @{" backslash                                " link "Output Template"}   Output Template
 @{" backtrace for bug reports                " link "Bug Reporting"}   Bug Reporting
 @{" barrier                                  " link "Insns"}   Insns
 @{" BASE_REG_CLASS                           " link "Register Classes"}   Register Classes
 @{" basic blocks                             " link "Passes"}   Passes
 @{" bcmp                                     " link "Config"}   Config
 @{" bCOND instruction pattern                " link "Standard Names"}   Standard Names
 @{" bcopy, implicit usage                    " link "Library Calls"}   Library Calls
 @{" BIGGEST_ALIGNMENT                        " link "Storage Layout"}   Storage Layout
 @{" BIGGEST_FIELD_ALIGNMENT                  " link "Storage Layout"}   Storage Layout
 @{" Bison parser generator                   " link "Installation"}   Installation
 @{" bit fields                               " link "Bit Fields"}   Bit Fields
 @{" bit shift overflow (88k)                 " link "M88K Options"}   M88K Options
 @{" BITFIELD_NBYTES_LIMITED                  " link "Storage Layout"}   Storage Layout
 @{" BITS_BIG_ENDIAN                          " link "Storage Layout"}   Storage Layout
 @{" BITS_BIG_ENDIAN, effect on sign_extract  " link "Bit Fields"}   Bit Fields
 @{" BITS_PER_UNIT                            " link "Storage Layout"}   Storage Layout
 @{" BITS_PER_WORD                            " link "Storage Layout"}   Storage Layout
 @{" bitwise complement                       " link "Arithmetic"}   Arithmetic
 @{" bitwise exclusive-or                     " link "Arithmetic"}   Arithmetic
 @{" bitwise inclusive-or                     " link "Arithmetic"}   Arithmetic
 @{" bitwise logical-and                      " link "Arithmetic"}   Arithmetic
 @{" BLKmode                                  " link "Machine Modes"}   Machine Modes
 @{" BLKmode, and function return values      " link "Calls"}   Calls
 @{" BLOCK_PROFILER                           " link "Profiling"}   Profiling
 @{" BLOCK_PROFILER_CODE                      " link "Profiling"}   Profiling
 @{" BRANCH_COST                              " link "Costs"}   Costs
 @{" break_out_memory_refs                    " link "Addressing Modes"}   Addressing Modes
 @{" BSS_SECTION_ASM_OP                       " link "Sections"}   Sections
 @{" bug criteria                             " link "Bug Criteria"}   Bug Criteria
 @{" bug report mailing lists                 " link "Bug Lists"}   Bug Lists
 @{" bugs                                     " link "Bugs"}   Bugs
 @{" bugs, known                              " link "Trouble"}   Trouble
 @{" builtin functions                        " link "C Dialect Options"}   C Dialect Options
 @{" builtin_longjmp instruction pattern      " link "Standard Names"}   Standard Names
 @{" BUILTIN_SETJMP_FRAME_VALUE               " link "Frame Layout"}   Frame Layout
 @{" builtin_setjmp_receiver instruction pattern " link "Standard Names"}   Standard Names
 @{" builtin_setjmp_setup instruction pattern " link "Standard Names"}   Standard Names
 @{" byte writes (29k)                        " link "AMD29K Options"}   AMD29K Options
 @{" byte_mode                                " link "Machine Modes"}   Machine Modes
 @{" BYTES_BIG_ENDIAN                         " link "Storage Layout"}   Storage Layout
 @{" bzero                                    " link "Config"}   Config
 @{" bzero, implicit usage                    " link "Library Calls"}   Library Calls
 @{" C compilation options                    " link "Invoking GCC"}   Invoking GCC
 @{" C intermediate output, nonexistent       " link "G++ and GCC"}   G++ and GCC
 @{" C language extensions                    " link "C Extensions"}   C Extensions
 @{" C language, traditional                  " link "C Dialect Options"}   C Dialect Options
 @{" C statements for assembler output        " link "Output Statement"}   Output Statement
 @{" C++                                      " link "G++ and GCC"}   G++ and GCC
 @{" c++                                      " link "Invoking G++"}   Invoking G++
 @{" C++ comments                             " link "C++ Comments"}   C++ Comments
 @{" C++ compilation options                  " link "Invoking GCC"}   Invoking GCC
 @{" C++ interface and implementation headers " link "C++ Interface"}   C++ Interface
 @{" C++ language extensions                  " link "C++ Extensions"}   C++ Extensions
 @{" C++ member fns, automatically inline     " link "Inline"}   Inline
 @{" C++ misunderstandings                    " link "C++ Misunderstandings"}   C++ Misunderstandings
 @{" C++ named return value                   " link "Naming Results"}   Naming Results
 @{" C++ options, command line                " link "C++ Dialect Options"}   C++ Dialect Options
 @{" C++ pragmas, effect on inlining          " link "C++ Interface"}   C++ Interface
 @{" C++ runtime library                      " link "Installation"}   Installation
 @{" C++ signatures                           " link "C++ Signatures"}   C++ Signatures
 @{" C++ source file suffixes                 " link "Invoking G++"}   Invoking G++
 @{" C++ static data, declaring and defining  " link "Static Definitions"}   Static Definitions
 @{" C++ subtype polymorphism                 " link "C++ Signatures"}   C++ Signatures
 @{" C++ type abstraction                     " link "C++ Signatures"}   C++ Signatures
 @{" C_INCLUDE_PATH                           " link "Environment Variables"}   Environment Variables
 @{" call                                     " link "Side Effects"}   Side Effects
 @{" call instruction pattern                 " link "Standard Names"}   Standard Names
 @{" call usage                               " link "Calls"}   Calls
 @{" call-clobbered register                  " link "Register Basics"}   Register Basics
 @{" call-saved register                      " link "Register Basics"}   Register Basics
 @{" call-used register                       " link "Register Basics"}   Register Basics
 @{" call_insn                                " link "Insns"}   Insns
 @{" call_insn and -u                         " link "Flags"}   Flags
 @{" CALL_INSN_FUNCTION_USAGE                 " link "Insns"}   Insns
 @{" call_pop instruction pattern             " link "Standard Names"}   Standard Names
 @{" CALL_USED_REGISTERS                      " link "Register Basics"}   Register Basics
 @{" call_used_regs                           " link "Register Basics"}   Register Basics
 @{" call_value instruction pattern           " link "Standard Names"}   Standard Names
 @{" call_value_pop instruction pattern       " link "Standard Names"}   Standard Names
 @{" CALLER_SAVE_PROFITABLE                   " link "Caller Saves"}   Caller Saves
 @{" calling conventions                      " link "Stack and Calling"}   Stack and Calling
 @{" calling functions in RTL                 " link "Calls"}   Calls
 @{" calling functions through the function vector on the H8-300 processors " link "Function Attributes"}   Function Attributes
 @{" CAN_DEBUG_WITHOUT_FP                     " link "Run-time Target"}   Run-time Target
 @{" CAN_ELIMINATE                            " link "Elimination"}   Elimination
 @{" canonicalization of instructions         " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" CANONICALIZE_COMPARISON                  " link "Condition Code"}   Condition Code
 @{" canonicalize_funcptr_for_compare instruction pattern " link "Standard Names"}   Standard Names
 @{" case labels in initializers              " link "Labeled Elements"}   Labeled Elements
 @{" case ranges                              " link "Case Ranges"}   Case Ranges
 @{" case sensitivity and VMS                 " link "VMS Misc"}   VMS Misc
 @{" CASE_DROPS_THROUGH                       " link "Misc"}   Misc
 @{" CASE_VALUES_THRESHOLD                    " link "Misc"}   Misc
 @{" CASE_VECTOR_MODE                         " link "Misc"}   Misc
 @{" CASE_VECTOR_PC_RELATIVE                  " link "Misc"}   Misc
 @{" CASE_VECTOR_SHORTEN_MODE                 " link "Misc"}   Misc
 @{" casesi instruction pattern               " link "Standard Names"}   Standard Names
 @{" cast to a union                          " link "Cast to Union"}   Cast to Union
 @{" casts as lvalues                         " link "Lvalues"}   Lvalues
 @{" CC                                       " link "Host Fragment"}   Host Fragment
 @{" cc0                                      " link "Regs and Memory"}   Regs and Memory
 @{" cc0, RTL sharing                         " link "Sharing"}   Sharing
 @{" cc0_rtx                                  " link "Regs and Memory"}   Regs and Memory
 @{" CC1_SPEC                                 " link "Driver"}   Driver
 @{" CC1PLUS_SPEC                             " link "Driver"}   Driver
 @{" cc_status                                " link "Condition Code"}   Condition Code
 @{" CC_STATUS_MDEP                           " link "Condition Code"}   Condition Code
 @{" CC_STATUS_MDEP_INIT                      " link "Condition Code"}   Condition Code
 @{" CCmode                                   " link "Machine Modes"}   Machine Modes
 @{" CDImode                                  " link "Machine Modes"}   Machine Modes
 @{" change_address                           " link "Standard Names"}   Standard Names
 @{" CHAR_TYPE_SIZE                           " link "Type Layout"}   Type Layout
 @{" CHECK_FLOAT_VALUE                        " link "Storage Layout"}   Storage Layout
 @{" check_stack instruction pattern          " link "Standard Names"}   Standard Names
 @{" CHImode                                  " link "Machine Modes"}   Machine Modes
 @{" class definitions, register              " link "Register Classes"}   Register Classes
 @{" class preference constraints             " link "Class Preferences"}   Class Preferences
 @{" CLASS_LIKELY_SPILLED_P                   " link "Register Classes"}   Register Classes
 @{" CLASS_MAX_NREGS                          " link "Register Classes"}   Register Classes
 @{" classes of RTX codes                     " link "Accessors"}   Accessors
 @{" CLEAR_INSN_CACHE                         " link "Trampolines"}   Trampolines
 @{" CLIB                                     " link "Host Fragment"}   Host Fragment
 @{" clobber                                  " link "Side Effects"}   Side Effects
 @{" clrstrM instruction pattern              " link "Standard Names"}   Standard Names
 @{" cmpM instruction pattern                 " link "Standard Names"}   Standard Names
 @{" cmpstrM instruction pattern              " link "Standard Names"}   Standard Names
 @{" code generation conventions              " link "Code Gen Options"}   Code Gen Options
 @{" code generation RTL sequences            " link "Expander Definitions"}   Expander Definitions
 @{" code motion                              " link "Passes"}   Passes
 @{" code_label                               " link "Insns"}   Insns
 @{" code_label and -i                        " link "Flags"}   Flags
 @{" CODE_LABEL_NUMBER                        " link "Insns"}   Insns
 @{" codes, RTL expression                    " link "RTL Objects"}   RTL Objects
 @{" COImode                                  " link "Machine Modes"}   Machine Modes
 @{" COLLECT_EXPORT_LIST                      " link "Config"}   Config
 @{" combiner pass                            " link "Regs and Memory"}   Regs and Memory
 @{" command options                          " link "Invoking GCC"}   Invoking GCC
 @{" comments, C++ style                      " link "C++ Comments"}   C++ Comments
 @{" common subexpression elimination         " link "Passes"}   Passes
 @{" COMP_TYPE_ATTRIBUTES                     " link "Misc"}   Misc
 @{" compare                                  " link "Arithmetic"}   Arithmetic
 @{" compare, canonicalization of             " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" comparison of signed and unsigned values, warning " link "Warning Options"}   Warning Options
 @{" compilation in a separate directory      " link "Other Dir"}   Other Dir
 @{" compiler bugs, reporting                 " link "Bug Reporting"}   Bug Reporting
 @{" compiler compared to C++ preprocessor    " link "G++ and GCC"}   G++ and GCC
 @{" compiler options, C++                    " link "C++ Dialect Options"}   C++ Dialect Options
 @{" compiler passes and files                " link "Passes"}   Passes
 @{" compiler version, specifying             " link "Target Options"}   Target Options
 @{" COMPILER_PATH                            " link "Environment Variables"}   Environment Variables
 @{" complement, bitwise                      " link "Arithmetic"}   Arithmetic
 @{" complex numbers                          " link "Complex"}   Complex
 @{" compound expressions as lvalues          " link "Lvalues"}   Lvalues
 @{" computed gotos                           " link "Labels as Values"}   Labels as Values
 @{" computing the length of an insn          " link "Insn Lengths"}   Insn Lengths
 @{" cond                                     " link "Comparisons"}   Comparisons
 @{" cond and attributes                      " link "Expressions"}   Expressions
 @{" condition code register                  " link "Regs and Memory"}   Regs and Memory
 @{" condition code status                    " link "Condition Code"}   Condition Code
 @{" condition codes                          " link "Comparisons"}   Comparisons
 @{" conditional expressions as lvalues       " link "Lvalues"}   Lvalues
 @{" conditional expressions, extensions      " link "Conditionals"}   Conditionals
 @{" CONDITIONAL_REGISTER_USAGE               " link "Register Basics"}   Register Basics
 @{" conditions, in patterns                  " link "Patterns"}   Patterns
 @{" configuration file                       " link "Config"}   Config
 @{" configurations supported by GNU CC       " link "Configurations"}   Configurations
 @{" conflicting types                        " link "Disappointments"}   Disappointments
 @{" const applied to function                " link "Function Attributes"}   Function Attributes
 @{" const function attribute                 " link "Function Attributes"}   Function Attributes
 @{" const0_rtx                               " link "Constants"}   Constants
 @{" CONST0_RTX                               " link "Constants"}   Constants
 @{" const1_rtx                               " link "Constants"}   Constants
 @{" CONST1_RTX                               " link "Constants"}   Constants
 @{" const2_rtx                               " link "Constants"}   Constants
 @{" CONST2_RTX                               " link "Constants"}   Constants
 @{" CONST_CALL_P                             " link "Flags"}   Flags
 @{" CONST_COSTS                              " link "Costs"}   Costs
 @{" const_double                             " link "Constants"}   Constants
 @{" const_double, RTL sharing                " link "Sharing"}   Sharing
 @{" CONST_DOUBLE_CHAIN                       " link "Constants"}   Constants
 @{" CONST_DOUBLE_LOW                         " link "Constants"}   Constants
 @{" CONST_DOUBLE_MEM                         " link "Constants"}   Constants
 @{" CONST_DOUBLE_OK_FOR_LETTER_P             " link "Register Classes"}   Register Classes
 @{" const_int                                " link "Constants"}   Constants
 @{" const_int and attribute tests            " link "Expressions"}   Expressions
 @{" const_int and attributes                 " link "Expressions"}   Expressions
 @{" const_int, RTL sharing                   " link "Sharing"}   Sharing
 @{" CONST_OK_FOR_LETTER_P                    " link "Register Classes"}   Register Classes
 @{" const_string                             " link "Constants"}   Constants
 @{" const_string and attributes              " link "Expressions"}   Expressions
 @{" const_true_rtx                           " link "Constants"}   Constants
 @{" constant attributes                      " link "Constant Attributes"}   Constant Attributes
 @{" constant folding                         " link "Passes"}   Passes
 @{" constant folding and floating point      " link "Cross-compilation"}   Cross-compilation
 @{" constant propagation                     " link "Passes"}   Passes
 @{" CONSTANT_ADDRESS_P                       " link "Addressing Modes"}   Addressing Modes
 @{" CONSTANT_AFTER_FUNCTION_P                " link "Data Output"}   Data Output
 @{" CONSTANT_ALIGNMENT                       " link "Storage Layout"}   Storage Layout
 @{" CONSTANT_P                               " link "Addressing Modes"}   Addressing Modes
 @{" CONSTANT_POOL_ADDRESS_P                  " link "Flags"}   Flags
 @{" CONSTANT_POOL_BEFORE_FUNCTION            " link "Data Output"}   Data Output
 @{" constants in constraints                 " link "Simple Constraints"}   Simple Constraints
 @{" constm1_rtx                              " link "Constants"}   Constants
 @{" constraint modifier characters           " link "Modifiers"}   Modifiers
 @{" constraint, matching                     " link "Simple Constraints"}   Simple Constraints
 @{" constraints                              " link "Constraints"}   Constraints
 @{" constraints, machine specific            " link "Machine Constraints"}   Machine Constraints
 @{" constructing calls                       " link "Constructing Calls"}   Constructing Calls
 @{" constructor expressions                  " link "Constructors"}   Constructors
 @{" constructor function attribute           " link "Function Attributes"}   Function Attributes
 @{" constructors vs goto                     " link "Destructors and Goto"}   Destructors and Goto
 @{" constructors, automatic calls            " link "Collect2"}   Collect2
 @{" constructors, output of                  " link "Initialization"}   Initialization
 @{" contributors                             " link "Contributors"}   Contributors
 @{" controlling register usage               " link "Register Basics"}   Register Basics
 @{" controlling the compilation driver       " link "Driver"}   Driver
 @{" conventions, run-time                    " link "Interface"}   Interface
 @{" conversions                              " link "Conversions"}   Conversions
 @{" Convex options                           " link "Convex Options"}   Convex Options
 @{" copy propagation                         " link "Passes"}   Passes
 @{" copy_rtx                                 " link "Addressing Modes"}   Addressing Modes
 @{" copy_rtx_if_shared                       " link "Sharing"}   Sharing
 @{" core dump                                " link "Bug Criteria"}   Bug Criteria
 @{" cos                                      " link "C Dialect Options"}   C Dialect Options
 @{" costs of instructions                    " link "Costs"}   Costs
 @{" COSTS_N_INSNS                            " link "Costs"}   Costs
 @{" CPLUS_INCLUDE_PATH                       " link "Environment Variables"}   Environment Variables
 @{" CPP_PREDEFINES                           " link "Run-time Target"}   Run-time Target
 @{" CPP_SPEC                                 " link "Driver"}   Driver
 @{" CQImode                                  " link "Machine Modes"}   Machine Modes
 @{" cross compilation and floating point     " link "Cross-compilation"}   Cross-compilation
 @{" cross compiling                          " link "Target Options"}   Target Options
 @{" cross-compiler, installation             " link "Cross-Compiler"}   Cross-Compiler
 @{" cross-jumping                            " link "Passes"}   Passes
 @{" CROSS_LIBGCC1                            " link "Target Fragment"}   Target Fragment
 @{" CRTSTUFF_T_CFLAGS                        " link "Target Fragment"}   Target Fragment
 @{" CRTSTUFF_T_CFLAGS_S                      " link "Target Fragment"}   Target Fragment
 @{" CSImode                                  " link "Machine Modes"}   Machine Modes
 @{" CTImode                                  " link "Machine Modes"}   Machine Modes
 @{" CUMULATIVE_ARGS                          " link "Register Arguments"}   Register Arguments
 @{" current_function_epilogue_delay_list     " link "Function Entry"}   Function Entry
 @{" current_function_outgoing_args_size      " link "Stack Arguments"}   Stack Arguments
 @{" current_function_pops_args               " link "Function Entry"}   Function Entry
 @{" current_function_pretend_args_size       " link "Function Entry"}   Function Entry
 @{" d in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" data flow analysis                       " link "Passes"}   Passes
 @{" DATA_ALIGNMENT                           " link "Storage Layout"}   Storage Layout
 @{" data_section                             " link "Sections"}   Sections
 @{" DATA_SECTION_ASM_OP                      " link "Sections"}   Sections
 @{" DBR_OUTPUT_SEQEND                        " link "Instruction Output"}   Instruction Output
 @{" dbr_sequence_length                      " link "Instruction Output"}   Instruction Output
 @{" DBX                                      " link "Interoperation"}   Interoperation
 @{" DBX_BLOCKS_FUNCTION_RELATIVE             " link "DBX Options"}   DBX Options
 @{" DBX_CONTIN_CHAR                          " link "DBX Options"}   DBX Options
 @{" DBX_CONTIN_LENGTH                        " link "DBX Options"}   DBX Options
 @{" DBX_DEBUGGING_INFO                       " link "DBX Options"}   DBX Options
 @{" DBX_FUNCTION_FIRST                       " link "DBX Options"}   DBX Options
 @{" DBX_LBRAC_FIRST                          " link "DBX Options"}   DBX Options
 @{" DBX_MEMPARM_STABS_LETTER                 " link "DBX Options"}   DBX Options
 @{" DBX_NO_XREFS                             " link "DBX Options"}   DBX Options
 @{" DBX_OUTPUT_ENUM                          " link "DBX Hooks"}   DBX Hooks
 @{" DBX_OUTPUT_FUNCTION_END                  " link "DBX Hooks"}   DBX Hooks
 @{" DBX_OUTPUT_LBRAC                         " link "DBX Hooks"}   DBX Hooks
 @{" DBX_OUTPUT_MAIN_SOURCE_DIRECTORY         " link "File Names and DBX"}   File Names and DBX
 @{" DBX_OUTPUT_MAIN_SOURCE_FILE_END          " link "File Names and DBX"}   File Names and DBX
 @{" DBX_OUTPUT_MAIN_SOURCE_FILENAME          " link "File Names and DBX"}   File Names and DBX
 @{" DBX_OUTPUT_RBRAC                         " link "DBX Hooks"}   DBX Hooks
 @{" DBX_OUTPUT_SOURCE_FILENAME               " link "File Names and DBX"}   File Names and DBX
 @{" DBX_OUTPUT_STANDARD_TYPES                " link "DBX Hooks"}   DBX Hooks
 @{" DBX_REGISTER_NUMBER                      " link "All Debuggers"}   All Debuggers
 @{" DBX_REGPARM_STABS_CODE                   " link "DBX Options"}   DBX Options
 @{" DBX_REGPARM_STABS_LETTER                 " link "DBX Options"}   DBX Options
 @{" DBX_STATIC_CONST_VAR_CODE                " link "DBX Options"}   DBX Options
 @{" DBX_STATIC_STAB_DATA_SECTION             " link "DBX Options"}   DBX Options
 @{" DBX_TYPE_DECL_STABS_CODE                 " link "DBX Options"}   DBX Options
 @{" DBX_USE_BINCL                            " link "DBX Options"}   DBX Options
 @{" DBX_WORKING_DIRECTORY                    " link "File Names and DBX"}   File Names and DBX
 @{" DCmode                                   " link "Machine Modes"}   Machine Modes
 @{" De Morgan's law                          " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" dead code                                " link "Passes"}   Passes
 @{" dead_or_set_p                            " link "Peephole Definitions"}   Peephole Definitions
 @{" deallocating variable length arrays      " link "Variable Length"}   Variable Length
 @{" death notes                              " link "Obsolete Register Macros"}   Obsolete Register Macros
 @{" debug_rtx                                " link "Bug Reporting"}   Bug Reporting
 @{" DEBUG_SYMS_TEXT                          " link "DBX Options"}   DBX Options
 @{" DEBUGGER_ARG_OFFSET                      " link "All Debuggers"}   All Debuggers
 @{" DEBUGGER_AUTO_OFFSET                     " link "All Debuggers"}   All Debuggers
 @{" debugging information generation         " link "Passes"}   Passes
 @{" debugging information options            " link "Debugging Options"}   Debugging Options
 @{" debugging, 88k OCS                       " link "M88K Options"}   M88K Options
 @{" declaration scope                        " link "Incompatibilities"}   Incompatibilities
 @{" declarations inside expressions          " link "Statement Exprs"}   Statement Exprs
 @{" declarations, RTL                        " link "RTL Declarations"}   RTL Declarations
 @{" declaring attributes of functions        " link "Function Attributes"}   Function Attributes
 @{" declaring static data in C++             " link "Static Definitions"}   Static Definitions
 @{" default implementation, signature member function " link "C++ Signatures"}   C++ Signatures
 @{" DEFAULT_CALLER_SAVES                     " link "Caller Saves"}   Caller Saves
 @{" DEFAULT_GDB_EXTENSIONS                   " link "DBX Options"}   DBX Options
 @{" DEFAULT_MAIN_RETURN                      " link "Misc"}   Misc
 @{" DEFAULT_PCC_STRUCT_RETURN                " link "Aggregate Return"}   Aggregate Return
 @{" DEFAULT_RTX_COSTS                        " link "Costs"}   Costs
 @{" DEFAULT_SHORT_ENUMS                      " link "Type Layout"}   Type Layout
 @{" DEFAULT_SIGNED_CHAR                      " link "Type Layout"}   Type Layout
 @{" DEFAULT_VTABLE_THUNKS                    " link "Storage Layout"}   Storage Layout
 @{" define_asm_attributes                    " link "Tagging Insns"}   Tagging Insns
 @{" define_attr                              " link "Defining Attributes"}   Defining Attributes
 @{" define_delay                             " link "Delay Slots"}   Delay Slots
 @{" define_expand                            " link "Expander Definitions"}   Expander Definitions
 @{" define_function_unit                     " link "Function Units"}   Function Units
 @{" define_insn                              " link "Patterns"}   Patterns
 @{" define_insn example                      " link "Example"}   Example
 @{" define_peephole                          " link "Expander Definitions"}   Expander Definitions
 @{" define_split                             " link "Insn Splitting"}   Insn Splitting
 @{" defining attributes and their values     " link "Defining Attributes"}   Defining Attributes
 @{" defining jump instruction patterns       " link "Jump Patterns"}   Jump Patterns
 @{" defining peephole optimizers             " link "Peephole Definitions"}   Peephole Definitions
 @{" defining RTL sequences for code generation " link "Expander Definitions"}   Expander Definitions
 @{" defining static data in C++              " link "Static Definitions"}   Static Definitions
 @{" delay slots, defining                    " link "Delay Slots"}   Delay Slots
 @{" DELAY_SLOTS_FOR_EPILOGUE                 " link "Function Entry"}   Function Entry
 @{" delayed branch scheduling                " link "Passes"}   Passes
 @{" dependencies for make as output          " link "Environment Variables"}   Environment Variables
 @{" dependencies, make                       " link "Preprocessor Options"}   Preprocessor Options
 @{" DEPENDENCIES_OUTPUT                      " link "Environment Variables"}   Environment Variables
 @{" Dependent Patterns                       " link "Dependent Patterns"}   Dependent Patterns
 @{" destructor function attribute            " link "Function Attributes"}   Function Attributes
 @{" destructors vs goto                      " link "Destructors and Goto"}   Destructors and Goto
 @{" destructors, output of                   " link "Initialization"}   Initialization
 @{" detecting -traditional                   " link "C Dialect Options"}   C Dialect Options
 @{" DFmode                                   " link "Machine Modes"}   Machine Modes
 @{" dialect options                          " link "C Dialect Options"}   C Dialect Options
 @{" digits in constraint                     " link "Simple Constraints"}   Simple Constraints
 @{" DImode                                   " link "Machine Modes"}   Machine Modes
 @{" DIR_SEPARATOR                            " link "Config"}   Config
 @{" directory options                        " link "Directory Options"}   Directory Options
 @{" disabling certain registers              " link "Register Basics"}   Register Basics
 @{" dispatch table                           " link "Dispatch Tables"}   Dispatch Tables
 @{" div                                      " link "Arithmetic"}   Arithmetic
 @{" div and attributes                       " link "Expressions"}   Expressions
 @{" DIVDI3_LIBCALL                           " link "Library Calls"}   Library Calls
 @{" divide instruction, 88k                  " link "M88K Options"}   M88K Options
 @{" division                                 " link "Arithmetic"}   Arithmetic
 @{" divM3 instruction pattern                " link "Standard Names"}   Standard Names
 @{" divmodM4 instruction pattern             " link "Standard Names"}   Standard Names
 @{" DIVSI3_LIBCALL                           " link "Library Calls"}   Library Calls
 @{" DOESNT_NEED_UNWINDER                     " link "Exception Region Output"}   Exception Region Output
 @{" dollar signs in identifier names         " link "Dollar Signs"}   Dollar Signs
 @{" DOLLARS_IN_IDENTIFIERS                   " link "Misc"}   Misc
 @{" DONE                                     " link "Expander Definitions"}   Expander Definitions
 @{" DONT_RECORD_EQUIVALENCE                  " link "Addressing Modes"}   Addressing Modes
 @{" DONT_REDUCE_ADDR                         " link "Costs"}   Costs
 @{" double-word arithmetic                   " link "Long Long"}   Long Long
 @{" DOUBLE_TYPE_SIZE                         " link "Type Layout"}   Type Layout
 @{" downward funargs                         " link "Nested Functions"}   Nested Functions
 @{" driver                                   " link "Driver"}   Driver
 @{" DW bit (29k)                             " link "AMD29K Options"}   AMD29K Options
 @{" DWARF2_DEBUGGING_INFO                    " link "SDB and DWARF"}   SDB and DWARF
 @{" DWARF2_FRAME_INFO                        " link "SDB and DWARF"}   SDB and DWARF
 @{" DWARF2_UNWIND_INFO                       " link "Exception Region Output"}   Exception Region Output
 @{" DWARF_DEBUGGING_INFO                     " link "SDB and DWARF"}   SDB and DWARF
 @{" DYNAMIC_CHAIN_ADDRESS                    " link "Frame Layout"}   Frame Layout
 @{" E in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" earlyclobber operand                     " link "Modifiers"}   Modifiers
 @{" EASY_DIV_EXPR                            " link "Misc"}   Misc
 @{" EDOM, implicit usage                     " link "Library Calls"}   Library Calls
 @{" EH_FRAME_SECTION_ASM_OP                  " link "Exception Region Output"}   Exception Region Output
 @{" EH_TABLE_LOOKUP                          " link "Exception Region Output"}   Exception Region Output
 @{" eight bit data on the H8-300 and H8-300H " link "Function Attributes"}   Function Attributes
 @{" ELIGIBLE_FOR_EPILOGUE_DELAY              " link "Function Entry"}   Function Entry
 @{" ELIMINABLE_REGS                          " link "Elimination"}   Elimination
 @{" empty constraints                        " link "No Constraints"}   No Constraints
 @{" EMPTY_FIELD_BOUNDARY                     " link "Storage Layout"}   Storage Layout
 @{" ENCODE_SECTION_INFO                      " link "Sections"}   Sections
 @{" ENCODE_SECTION_INFO and address validation " link "Addressing Modes"}   Addressing Modes
 @{" ENCODE_SECTION_INFO usage                " link "Instruction Output"}   Instruction Output
 @{" ENDFILE_SPEC                             " link "Driver"}   Driver
 @{" endianness                               " link "Portability"}   Portability
 @{" enum machine_mode                        " link "Machine Modes"}   Machine Modes
 @{" enum reg_class                           " link "Register Classes"}   Register Classes
 @{" environment variables                    " link "Environment Variables"}   Environment Variables
 @{" epilogue                                 " link "Function Entry"}   Function Entry
 @{" EPILOGUE_USES                            " link "Function Entry"}   Function Entry
 @{" eq                                       " link "Comparisons"}   Comparisons
 @{" eq and attributes                        " link "Expressions"}   Expressions
 @{" eq_attr                                  " link "Expressions"}   Expressions
 @{" equal                                    " link "Comparisons"}   Comparisons
 @{" errno, implicit usage                    " link "Library Calls"}   Library Calls
 @{" error messages                           " link "Warnings and Errors"}   Warnings and Errors
 @{" escape sequences, traditional            " link "C Dialect Options"}   C Dialect Options
 @{" exception_receiver instruction pattern   " link "Standard Names"}   Standard Names
 @{" EXCEPTION_SECTION                        " link "Exception Region Output"}   Exception Region Output
 @{" exclamation point                        " link "Multi-Alternative"}   Multi-Alternative
 @{" exclusive-or, bitwise                    " link "Arithmetic"}   Arithmetic
 @{" EXECUTABLE_SUFFIX                        " link "Config"}   Config
 @{" exit                                     " link "C Dialect Options"}   C Dialect Options
 @{" exit status and VMS                      " link "VMS Misc"}   VMS Misc
 @{" EXIT_BODY                                " link "Misc"}   Misc
 @{" EXIT_IGNORE_STACK                        " link "Function Entry"}   Function Entry
 @{" EXPAND_BUILTIN_SAVEREGS                  " link "Varargs"}   Varargs
 @{" expander definitions                     " link "Expander Definitions"}   Expander Definitions
 @{" explicit register variables              " link "Explicit Reg Vars"}   Explicit Reg Vars
 @{" expr_list                                " link "Insns"}   Insns
 @{" expression codes                         " link "RTL Objects"}   RTL Objects
 @{" expressions containing statements        " link "Statement Exprs"}   Statement Exprs
 @{" expressions, compound, as lvalues        " link "Lvalues"}   Lvalues
 @{" expressions, conditional, as lvalues     " link "Lvalues"}   Lvalues
 @{" expressions, constructor                 " link "Constructors"}   Constructors
 @{" extended asm                             " link "Extended Asm"}   Extended Asm
 @{" extendMN2 instruction pattern            " link "Standard Names"}   Standard Names
 @{" extensible constraints                   " link "Simple Constraints"}   Simple Constraints
 @{" extensions, ?: <1>                       " link "Lvalues"}   Lvalues
 @{" extensions, ?:                           " link "Conditionals"}   Conditionals
 @{" extensions, C language                   " link "C Extensions"}   C Extensions
 @{" extensions, C++ language                 " link "C++ Extensions"}   C++ Extensions
 @{" extern int target_flags                  " link "Run-time Target"}   Run-time Target
 @{" external declaration scope               " link "Incompatibilities"}   Incompatibilities
 @{" EXTRA_CC_MODES                           " link "Condition Code"}   Condition Code
 @{" EXTRA_CC_NAMES                           " link "Condition Code"}   Condition Code
 @{" EXTRA_CONSTRAINT                         " link "Register Classes"}   Register Classes
 @{" EXTRA_SECTION_FUNCTIONS                  " link "Sections"}   Sections
 @{" EXTRA_SECTIONS                           " link "Sections"}   Sections
 @{" EXTRA_SPECS                              " link "Driver"}   Driver
 @{" extv instruction pattern                 " link "Standard Names"}   Standard Names
 @{" extzv instruction pattern                " link "Standard Names"}   Standard Names
 @{" F in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" fabs                                     " link "C Dialect Options"}   C Dialect Options
 @{" FAIL                                     " link "Expander Definitions"}   Expander Definitions
 @{" fatal signal                             " link "Bug Criteria"}   Bug Criteria
 @{" FATAL_EXIT_CODE                          " link "Config"}   Config
 @{" features, optional, in system conventions " link "Run-time Target"}   Run-time Target
 @{" ffs <1>                                  " link "Arithmetic"}   Arithmetic
 @{" ffs                                      " link "C Dialect Options"}   C Dialect Options
 @{" ffsM2 instruction pattern                " link "Standard Names"}   Standard Names
 @{" file name suffix                         " link "Overall Options"}   Overall Options
 @{" file names                               " link "Link Options"}   Link Options
 @{" files and passes of the compiler         " link "Passes"}   Passes
 @{" final pass                               " link "Passes"}   Passes
 @{" FINAL_PRESCAN_INSN                       " link "Instruction Output"}   Instruction Output
 @{" FINAL_PRESCAN_LABEL                      " link "Instruction Output"}   Instruction Output
 @{" FINAL_REG_PARM_STACK_SPACE               " link "Stack Arguments"}   Stack Arguments
 @{" final_scan_insn                          " link "Function Entry"}   Function Entry
 @{" final_sequence                           " link "Instruction Output"}   Instruction Output
 @{" FINALIZE_PIC                             " link "PIC"}   PIC
 @{" FIRST_INSN_ADDRESS                       " link "Insn Lengths"}   Insn Lengths
 @{" FIRST_PARM_OFFSET                        " link "Frame Layout"}   Frame Layout
 @{" FIRST_PARM_OFFSET and virtual registers  " link "Regs and Memory"}   Regs and Memory
 @{" FIRST_PSEUDO_REGISTER                    " link "Register Basics"}   Register Basics
 @{" FIRST_STACK_REG                          " link "Stack Registers"}   Stack Registers
 @{" FIRST_VIRTUAL_REGISTER                   " link "Regs and Memory"}   Regs and Memory
 @{" fix                                      " link "Conversions"}   Conversions
 @{" fix_truncMN2 instruction pattern         " link "Standard Names"}   Standard Names
 @{" fixed register                           " link "Register Basics"}   Register Basics
 @{" FIXED_REGISTERS                          " link "Register Basics"}   Register Basics
 @{" fixed_regs                               " link "Register Basics"}   Register Basics
 @{" fixMN2 instruction pattern               " link "Standard Names"}   Standard Names
 @{" FIXUNS_TRUNC_LIKE_FIX_TRUNC              " link "Misc"}   Misc
 @{" fixuns_truncMN2 instruction pattern      " link "Standard Names"}   Standard Names
 @{" fixunsMN2 instruction pattern            " link "Standard Names"}   Standard Names
 @{" flags in RTL expression                  " link "Flags"}   Flags
 @{" float                                    " link "Conversions"}   Conversions
 @{" float as function value type             " link "Incompatibilities"}   Incompatibilities
 @{" FLOAT_ARG_TYPE                           " link "Library Calls"}   Library Calls
 @{" float_extend                             " link "Conversions"}   Conversions
 @{" FLOAT_STORE_FLAG_VALUE                   " link "Misc"}   Misc
 @{" float_truncate                           " link "Conversions"}   Conversions
 @{" FLOAT_TYPE_SIZE                          " link "Type Layout"}   Type Layout
 @{" FLOAT_VALUE_TYPE                         " link "Library Calls"}   Library Calls
 @{" FLOAT_WORDS_BIG_ENDIAN                   " link "Storage Layout"}   Storage Layout
 @{" FLOAT_WORDS_BIG_ENDIAN, (lack of) effect on subreg " link "Regs and Memory"}   Regs and Memory
 @{" FLOATIFY                                 " link "Library Calls"}   Library Calls
 @{" floating point and cross compilation     " link "Cross-compilation"}   Cross-compilation
 @{" floating point precision <1>             " link "Disappointments"}   Disappointments
 @{" floating point precision                 " link "Optimize Options"}   Optimize Options
 @{" floatMN2 instruction pattern             " link "Standard Names"}   Standard Names
 @{" floatunsMN2 instruction pattern          " link "Standard Names"}   Standard Names
 @{" force_reg                                " link "Standard Names"}   Standard Names
 @{" format function attribute                " link "Function Attributes"}   Function Attributes
 @{" format_arg function attribute            " link "Function Attributes"}   Function Attributes
 @{" forwarding calls                         " link "Constructing Calls"}   Constructing Calls
 @{" frame layout                             " link "Frame Layout"}   Frame Layout
 @{" FRAME_GROWS_DOWNWARD                     " link "Frame Layout"}   Frame Layout
 @{" FRAME_GROWS_DOWNWARD and virtual registers " link "Regs and Memory"}   Regs and Memory
 @{" frame_pointer_needed                     " link "Function Entry"}   Function Entry
 @{" FRAME_POINTER_REGNUM                     " link "Frame Registers"}   Frame Registers
 @{" FRAME_POINTER_REGNUM and virtual registers " link "Regs and Memory"}   Regs and Memory
 @{" FRAME_POINTER_REQUIRED                   " link "Elimination"}   Elimination
 @{" frame_pointer_rtx                        " link "Frame Registers"}   Frame Registers
 @{" fscanf, and constant strings             " link "Incompatibilities"}   Incompatibilities
 @{" ftruncM2 instruction pattern             " link "Standard Names"}   Standard Names
 @{" function addressability on the M32R-D    " link "Function Attributes"}   Function Attributes
 @{" function attributes                      " link "Function Attributes"}   Function Attributes
 @{" function call conventions                " link "Interface"}   Interface
 @{" function entry and exit                  " link "Function Entry"}   Function Entry
 @{" function pointers, arithmetic            " link "Pointer Arith"}   Pointer Arith
 @{" function prototype declarations          " link "Function Prototypes"}   Function Prototypes
 @{" function units, for scheduling           " link "Function Units"}   Function Units
 @{" function, size of pointer to             " link "Pointer Arith"}   Pointer Arith
 @{" function-call insns                      " link "Calls"}   Calls
 @{" FUNCTION_ARG                             " link "Register Arguments"}   Register Arguments
 @{" FUNCTION_ARG_ADVANCE                     " link "Register Arguments"}   Register Arguments
 @{" FUNCTION_ARG_BOUNDARY                    " link "Register Arguments"}   Register Arguments
 @{" FUNCTION_ARG_CALLEE_COPIES               " link "Register Arguments"}   Register Arguments
 @{" FUNCTION_ARG_PADDING                     " link "Register Arguments"}   Register Arguments
 @{" FUNCTION_ARG_PARTIAL_NREGS               " link "Register Arguments"}   Register Arguments
 @{" FUNCTION_ARG_PASS_BY_REFERENCE           " link "Register Arguments"}   Register Arguments
 @{" FUNCTION_ARG_REGNO_P                     " link "Register Arguments"}   Register Arguments
 @{" FUNCTION_BLOCK_PROFILER                  " link "Profiling"}   Profiling
 @{" FUNCTION_BLOCK_PROFILER_EXIT             " link "Profiling"}   Profiling
 @{" FUNCTION_BOUNDARY                        " link "Storage Layout"}   Storage Layout
 @{" FUNCTION_CONVERSION_BUG                  " link "Config"}   Config
 @{" FUNCTION_EPILOGUE                        " link "Function Entry"}   Function Entry
 @{" FUNCTION_EPILOGUE and trampolines        " link "Trampolines"}   Trampolines
 @{" FUNCTION_INCOMING_ARG                    " link "Register Arguments"}   Register Arguments
 @{" FUNCTION_MODE                            " link "Misc"}   Misc
 @{" FUNCTION_OUTGOING_VALUE                  " link "Scalar Return"}   Scalar Return
 @{" FUNCTION_PROFILER                        " link "Profiling"}   Profiling
 @{" FUNCTION_PROLOGUE                        " link "Function Entry"}   Function Entry
 @{" FUNCTION_PROLOGUE and trampolines        " link "Trampolines"}   Trampolines
 @{" FUNCTION_VALUE                           " link "Scalar Return"}   Scalar Return
 @{" FUNCTION_VALUE_REGNO_P                   " link "Scalar Return"}   Scalar Return
 @{" functions called via pointer on the RS-6000 and PowerPC " link "Function Attributes"}   Function Attributes
 @{" functions in arbitrary sections          " link "Function Attributes"}   Function Attributes
 @{" functions that are passed arguments in registers on the 386 " link "Function Attributes"}   Function Attributes
 @{" functions that do not pop the argument stack on the 386 " link "Function Attributes"}   Function Attributes
 @{" functions that do pop the argument stack on the 386 " link "Function Attributes"}   Function Attributes
 @{" functions that have no side effects      " link "Function Attributes"}   Function Attributes
 @{" functions that never return              " link "Function Attributes"}   Function Attributes
 @{" functions that pop the argument stack on the 386 " link "Function Attributes"}   Function Attributes
 @{" functions which are exported from a dll on PowerPC Windows NT " link "Function Attributes"}   Function Attributes
 @{" functions which are imported from a dll on PowerPC Windows NT " link "Function Attributes"}   Function Attributes
 @{" functions which specify exception handling on PowerPC Windows NT " link "Function Attributes"}   Function Attributes
 @{" functions with printf, scanf or strftime style arguments " link "Function Attributes"}   Function Attributes
 @{" functions, leaf                          " link "Leaf Functions"}   Leaf Functions
 @{" G in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" g in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" G++                                      " link "G++ and GCC"}   G++ and GCC
 @{" g++                                      " link "Invoking G++"}   Invoking G++
 @{" g++ 1.XX                                 " link "Invoking G++"}   Invoking G++
 @{" g++ older version                        " link "Invoking G++"}   Invoking G++
 @{" g++, separate compiler                   " link "Invoking G++"}   Invoking G++
 @{" GCC                                      " link "G++ and GCC"}   G++ and GCC
 @{" GCC_EXEC_PREFIX                          " link "Environment Variables"}   Environment Variables
 @{" ge                                       " link "Comparisons"}   Comparisons
 @{" ge and attributes                        " link "Expressions"}   Expressions
 @{" GEN_ERRNO_RTX                            " link "Library Calls"}   Library Calls
 @{" gencodes                                 " link "Passes"}   Passes
 @{" genconfig                                " link "Passes"}   Passes
 @{" general_operand                          " link "RTL Template"}   RTL Template
 @{" GENERAL_REGS                             " link "Register Classes"}   Register Classes
 @{" generalized lvalues                      " link "Lvalues"}   Lvalues
 @{" generating assembler output              " link "Output Statement"}   Output Statement
 @{" generating insns                         " link "RTL Template"}   RTL Template
 @{" genflags                                 " link "Passes"}   Passes
 @{" genflags, crash on Sun 4                 " link "Installation Problems"}   Installation Problems
 @{" get_attr                                 " link "Expressions"}   Expressions
 @{" get_attr_length                          " link "Insn Lengths"}   Insn Lengths
 @{" GET_CLASS_NARROWEST_MODE                 " link "Machine Modes"}   Machine Modes
 @{" GET_CODE                                 " link "RTL Objects"}   RTL Objects
 @{" get_frame_size                           " link "Elimination"}   Elimination
 @{" get_insns                                " link "Insns"}   Insns
 @{" get_last_insn                            " link "Insns"}   Insns
 @{" GET_MODE                                 " link "Machine Modes"}   Machine Modes
 @{" GET_MODE_ALIGNMENT                       " link "Machine Modes"}   Machine Modes
 @{" GET_MODE_BITSIZE                         " link "Machine Modes"}   Machine Modes
 @{" GET_MODE_CLASS                           " link "Machine Modes"}   Machine Modes
 @{" GET_MODE_MASK                            " link "Machine Modes"}   Machine Modes
 @{" GET_MODE_NAME                            " link "Machine Modes"}   Machine Modes
 @{" GET_MODE_NUNITS                          " link "Machine Modes"}   Machine Modes
 @{" GET_MODE_SIZE                            " link "Machine Modes"}   Machine Modes
 @{" GET_MODE_UNIT_SIZE                       " link "Machine Modes"}   Machine Modes
 @{" GET_MODE_WIDER_MODE                      " link "Machine Modes"}   Machine Modes
 @{" GET_RTX_CLASS                            " link "Accessors"}   Accessors
 @{" GET_RTX_FORMAT                           " link "Accessors"}   Accessors
 @{" GET_RTX_LENGTH                           " link "Accessors"}   Accessors
 @{" geu                                      " link "Comparisons"}   Comparisons
 @{" geu and attributes                       " link "Expressions"}   Expressions
 @{" GIV_SORT_CRITERION                       " link "Misc"}   Misc
 @{" global common subexpression elimination  " link "Passes"}   Passes
 @{" global offset table                      " link "Code Gen Options"}   Code Gen Options
 @{" global register after longjmp            " link "Global Reg Vars"}   Global Reg Vars
 @{" global register allocation               " link "Passes"}   Passes
 @{" global register variables                " link "Global Reg Vars"}   Global Reg Vars
 @{" GLOBALDEF                                " link "Global Declarations"}   Global Declarations
 @{" GLOBALREF                                " link "Global Declarations"}   Global Declarations
 @{" GLOBALVALUEDEF                           " link "Global Declarations"}   Global Declarations
 @{" GLOBALVALUEREF                           " link "Global Declarations"}   Global Declarations
 @{" GNU CC and portability                   " link "Portability"}   Portability
 @{" GNU CC command options                   " link "Invoking GCC"}   Invoking GCC
 @{" GO_IF_LEGITIMATE_ADDRESS                 " link "Addressing Modes"}   Addressing Modes
 @{" GO_IF_MODE_DEPENDENT_ADDRESS             " link "Addressing Modes"}   Addressing Modes
 @{" goto in C++                              " link "Destructors and Goto"}   Destructors and Goto
 @{" goto with computed label                 " link "Labels as Values"}   Labels as Values
 @{" gp-relative references (MIPS)            " link "MIPS Options"}   MIPS Options
 @{" gprof                                    " link "Debugging Options"}   Debugging Options
 @{" greater than                             " link "Comparisons"}   Comparisons
 @{" grouping options                         " link "Invoking GCC"}   Invoking GCC
 @{" gt                                       " link "Comparisons"}   Comparisons
 @{" gt and attributes                        " link "Expressions"}   Expressions
 @{" gtu                                      " link "Comparisons"}   Comparisons
 @{" gtu and attributes                       " link "Expressions"}   Expressions
 @{" H in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" Haifa scheduler                          " link "Installation"}   Installation
 @{" HANDLE_PRAGMA                            " link "Misc"}   Misc
 @{" hard registers                           " link "Regs and Memory"}   Regs and Memory
 @{" HARD_FRAME_POINTER_REGNUM                " link "Frame Registers"}   Frame Registers
 @{" HARD_REGNO_MODE_OK                       " link "Values in Registers"}   Values in Registers
 @{" HARD_REGNO_NREGS                         " link "Values in Registers"}   Values in Registers
 @{" hardware models and configurations, specifying " link "Submodel Options"}   Submodel Options
 @{" HAS_INIT_SECTION                         " link "Macros for Initialization"}   Macros for Initialization
 @{" HAVE_ATEXIT                              " link "Misc"}   Misc
 @{" HAVE_POST_DECREMENT                      " link "Addressing Modes"}   Addressing Modes
 @{" HAVE_POST_INCREMENT                      " link "Addressing Modes"}   Addressing Modes
 @{" HAVE_PRE_DECREMENT                       " link "Addressing Modes"}   Addressing Modes
 @{" HAVE_PRE_INCREMENT                       " link "Addressing Modes"}   Addressing Modes
 @{" header files and VMS                     " link "Include Files and VMS"}   Include Files and VMS
 @{" high                                     " link "Constants"}   Constants
 @{" HImode                                   " link "Machine Modes"}   Machine Modes
 @{" HImode, in insn                          " link "Insns"}   Insns
 @{" host makefile fragment                   " link "Host Fragment"}   Host Fragment
 @{" HOST_BITS_PER_CHAR                       " link "Config"}   Config
 @{" HOST_BITS_PER_INT                        " link "Config"}   Config
 @{" HOST_BITS_PER_LONG                       " link "Config"}   Config
 @{" HOST_BITS_PER_SHORT                      " link "Config"}   Config
 @{" HOST_FLOAT_FORMAT                        " link "Config"}   Config
 @{" HOST_FLOAT_WORDS_BIG_ENDIAN              " link "Config"}   Config
 @{" HOST_WORDS_BIG_ENDIAN                    " link "Config"}   Config
 @{" hosted environment                       " link "C Dialect Options"}   C Dialect Options
 @{" HPPA Options                             " link "HPPA Options"}   HPPA Options
 @{" I in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" i in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" i386 Options                             " link "i386 Options"}   i386 Options
 @{" IBM RS-6000 and PowerPC Options          " link "RS-6000 and PowerPC Options"}   RS-6000 and PowerPC Options
 @{" IBM RT options                           " link "RT Options"}   RT Options
 @{" IBM RT PC                                " link "Interoperation"}   Interoperation
 @{" identifier names, dollar signs in        " link "Dollar Signs"}   Dollar Signs
 @{" identifiers, names in assembler code     " link "Asm Labels"}   Asm Labels
 @{" identifying source, compiler (88k)       " link "M88K Options"}   M88K Options
 @{" IEEE_FLOAT_FORMAT                        " link "Storage Layout"}   Storage Layout
 @{" if_then_else                             " link "Comparisons"}   Comparisons
 @{" if_then_else and attributes              " link "Expressions"}   Expressions
 @{" if_then_else usage                       " link "Side Effects"}   Side Effects
 @{" immediate_operand                        " link "RTL Template"}   RTL Template
 @{" IMMEDIATE_PREFIX                         " link "Instruction Output"}   Instruction Output
 @{" implicit argument: return value          " link "Naming Results"}   Naming Results
 @{" IMPLICIT_FIX_EXPR                        " link "Misc"}   Misc
 @{" implied #pragma implementation           " link "C++ Interface"}   C++ Interface
 @{" in_data                                  " link "Sections"}   Sections
 @{" in_struct                                " link "Flags"}   Flags
 @{" in_struct, in code_label                 " link "Flags"}   Flags
 @{" in_struct, in insn                       " link "Flags"}   Flags
 @{" in_struct, in label_ref                  " link "Flags"}   Flags
 @{" in_struct, in mem                        " link "Flags"}   Flags
 @{" in_struct, in reg                        " link "Flags"}   Flags
 @{" in_struct, in subreg                     " link "Flags"}   Flags
 @{" in_text                                  " link "Sections"}   Sections
 @{" include files and VMS                    " link "Include Files and VMS"}   Include Files and VMS
 @{" INCLUDE_DEFAULTS                         " link "Driver"}   Driver
 @{" inclusive-or, bitwise                    " link "Arithmetic"}   Arithmetic
 @{" INCOMING_FRAME_SP_OFFSET                 " link "Frame Layout"}   Frame Layout
 @{" INCOMING_REGNO                           " link "Register Basics"}   Register Basics
 @{" INCOMING_RETURN_ADDR_RTX                 " link "Frame Layout"}   Frame Layout
 @{" incompatibilities of GNU CC              " link "Incompatibilities"}   Incompatibilities
 @{" increment operators                      " link "Bug Criteria"}   Bug Criteria
 @{" INDEX_REG_CLASS                          " link "Register Classes"}   Register Classes
 @{" indirect_jump instruction pattern        " link "Standard Names"}   Standard Names
 @{" INIT_CUMULATIVE_ARGS                     " link "Register Arguments"}   Register Arguments
 @{" INIT_CUMULATIVE_INCOMING_ARGS            " link "Register Arguments"}   Register Arguments
 @{" INIT_ENVIRONMENT                         " link "Driver"}   Driver
 @{" INIT_SECTION_ASM_OP <1>                  " link "Sections"}   Sections
 @{" INIT_SECTION_ASM_OP                      " link "Macros for Initialization"}   Macros for Initialization
 @{" INIT_TARGET_OPTABS                       " link "Library Calls"}   Library Calls
 @{" INITIAL_ELIMINATION_OFFSET               " link "Elimination"}   Elimination
 @{" INITIAL_FRAME_POINTER_OFFSET             " link "Elimination"}   Elimination
 @{" initialization routines                  " link "Initialization"}   Initialization
 @{" initializations in expressions           " link "Constructors"}   Constructors
 @{" INITIALIZE_TRAMPOLINE                    " link "Trampolines"}   Trampolines
 @{" initializers with labeled elements       " link "Labeled Elements"}   Labeled Elements
 @{" initializers, non-constant               " link "Initializers"}   Initializers
 @{" inline automatic for C++ member fns      " link "Inline"}   Inline
 @{" inline functions                         " link "Inline"}   Inline
 @{" inline functions, omission of            " link "Inline"}   Inline
 @{" inline, automatic                        " link "Passes"}   Passes
 @{" inlining and C++ pragmas                 " link "C++ Interface"}   C++ Interface
 @{" insn                                     " link "Insns"}   Insns
 @{" insn and -i                              " link "Flags"}   Flags
 @{" insn and -s                              " link "Flags"}   Flags
 @{" insn and -u                              " link "Flags"}   Flags
 @{" insn attributes                          " link "Insn Attributes"}   Insn Attributes
 @{" insn canonicalization                    " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" insn lengths, computing                  " link "Insn Lengths"}   Insn Lengths
 @{" insn splitting                           " link "Insn Splitting"}   Insn Splitting
 @{" insn-attr.h                              " link "Defining Attributes"}   Defining Attributes
 @{" INSN_ANNULLED_BRANCH_P                   " link "Flags"}   Flags
 @{" INSN_CACHE_DEPTH                         " link "Trampolines"}   Trampolines
 @{" INSN_CACHE_LINE_WIDTH                    " link "Trampolines"}   Trampolines
 @{" INSN_CACHE_SIZE                          " link "Trampolines"}   Trampolines
 @{" INSN_CLOBBERS_REGNO_P                    " link "Obsolete Register Macros"}   Obsolete Register Macros
 @{" INSN_CODE                                " link "Insns"}   Insns
 @{" INSN_DELETED_P                           " link "Flags"}   Flags
 @{" INSN_FROM_TARGET_P                       " link "Flags"}   Flags
 @{" insn_list                                " link "Insns"}   Insns
 @{" INSN_REFERENCES_ARE_DELAYED              " link "Misc"}   Misc
 @{" INSN_SETS_ARE_DELAYED                    " link "Misc"}   Misc
 @{" INSN_UID                                 " link "Insns"}   Insns
 @{" insns                                    " link "Insns"}   Insns
 @{" insns, generating                        " link "RTL Template"}   RTL Template
 @{" insns, recognizing                       " link "RTL Template"}   RTL Template
 @{" INSTALL                                  " link "Host Fragment"}   Host Fragment
 @{" installation trouble                     " link "Trouble"}   Trouble
 @{" installing GNU CC                        " link "Installation"}   Installation
 @{" installing GNU CC on the Sun             " link "Sun Install"}   Sun Install
 @{" installing GNU CC on VMS                 " link "VMS Install"}   VMS Install
 @{" instruction attributes                   " link "Insn Attributes"}   Insn Attributes
 @{" instruction combination                  " link "Passes"}   Passes
 @{" instruction patterns                     " link "Patterns"}   Patterns
 @{" instruction recognizer                   " link "Passes"}   Passes
 @{" instruction scheduling                   " link "Passes"}   Passes
 @{" instruction splitting                    " link "Insn Splitting"}   Insn Splitting
 @{" insv instruction pattern                 " link "Standard Names"}   Standard Names
 @{" INT_TYPE_SIZE                            " link "Type Layout"}   Type Layout
 @{" INTEGRATE_THRESHOLD                      " link "Misc"}   Misc
 @{" integrated                               " link "Flags"}   Flags
 @{" integrated, in insn                      " link "Flags"}   Flags
 @{" integrated, in reg                       " link "Flags"}   Flags
 @{" integrating function code                " link "Inline"}   Inline
 @{" Intel 386 Options                        " link "i386 Options"}   i386 Options
 @{" Interdependence of Patterns              " link "Dependent Patterns"}   Dependent Patterns
 @{" interface and implementation headers, C++ " link "C++ Interface"}   C++ Interface
 @{" interfacing to GNU CC output             " link "Interface"}   Interface
 @{" intermediate C version, nonexistent      " link "G++ and GCC"}   G++ and GCC
 @{" Internal Compiler Checking               " link "Installation"}   Installation
 @{" interrupt handler functions on the H8-300 processors " link "Function Attributes"}   Function Attributes
 @{" interrupt handlers on the M32R-D         " link "Function Attributes"}   Function Attributes
 @{" INTIFY                                   " link "Library Calls"}   Library Calls
 @{" introduction                             " link "Top"}   Top
 @{" invalid assembly code                    " link "Bug Criteria"}   Bug Criteria
 @{" invalid input                            " link "Bug Criteria"}   Bug Criteria
 @{" INVOKE__main                             " link "Macros for Initialization"}   Macros for Initialization
 @{" invoking g++                             " link "Invoking G++"}   Invoking G++
 @{" ior                                      " link "Arithmetic"}   Arithmetic
 @{" ior and attributes                       " link "Expressions"}   Expressions
 @{" ior, canonicalization of                 " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" iorM3 instruction pattern                " link "Standard Names"}   Standard Names
 @{" IS_ASM_LOGICAL_LINE_SEPARATOR            " link "Data Output"}   Data Output
 @{" isinf                                    " link "Cross-compilation"}   Cross-compilation
 @{" isnan                                    " link "Cross-compilation"}   Cross-compilation
 @{" ISSUE_RATE                               " link "Misc"}   Misc
 @{" jump instruction patterns                " link "Jump Patterns"}   Jump Patterns
 @{" jump instructions and set                " link "Side Effects"}   Side Effects
 @{" jump optimization                        " link "Passes"}   Passes
 @{" jump threading                           " link "Passes"}   Passes
 @{" jump_insn                                " link "Insns"}   Insns
 @{" JUMP_LABEL                               " link "Insns"}   Insns
 @{" JUMP_TABLES_IN_TEXT_SECTION              " link "Sections"}   Sections
 @{" kernel and user registers (29k)          " link "AMD29K Options"}   AMD29K Options
 @{" keywords, alternate                      " link "Alternate Keywords"}   Alternate Keywords
 @{" known causes of trouble                  " link "Trouble"}   Trouble
 @{" LABEL_ALIGN                              " link "Alignment Output"}   Alignment Output
 @{" LABEL_ALIGN_AFTER_BARRIER                " link "Alignment Output"}   Alignment Output
 @{" LABEL_NUSES                              " link "Insns"}   Insns
 @{" LABEL_OUTSIDE_LOOP_P                     " link "Flags"}   Flags
 @{" LABEL_PRESERVE_P                         " link "Flags"}   Flags
 @{" label_ref                                " link "Constants"}   Constants
 @{" label_ref and -s                         " link "Flags"}   Flags
 @{" label_ref, RTL sharing                   " link "Sharing"}   Sharing
 @{" labeled elements in initializers         " link "Labeled Elements"}   Labeled Elements
 @{" labels as values                         " link "Labels as Values"}   Labels as Values
 @{" labs                                     " link "C Dialect Options"}   C Dialect Options
 @{" language dialect options                 " link "C Dialect Options"}   C Dialect Options
 @{" large bit shifts (88k)                   " link "M88K Options"}   M88K Options
 @{" large return values                      " link "Aggregate Return"}   Aggregate Return
 @{" LAST_STACK_REG                           " link "Stack Registers"}   Stack Registers
 @{" LAST_VIRTUAL_REGISTER                    " link "Regs and Memory"}   Regs and Memory
 @{" LD_FINI_SWITCH                           " link "Macros for Initialization"}   Macros for Initialization
 @{" LD_INIT_SWITCH                           " link "Macros for Initialization"}   Macros for Initialization
 @{" LDD_SUFFIX                               " link "Macros for Initialization"}   Macros for Initialization
 @{" ldexp                                    " link "Cross-compilation"}   Cross-compilation
 @{" le                                       " link "Comparisons"}   Comparisons
 @{" le and attributes                        " link "Expressions"}   Expressions
 @{" leaf functions                           " link "Leaf Functions"}   Leaf Functions
 @{" leaf_function                            " link "Leaf Functions"}   Leaf Functions
 @{" leaf_function_p                          " link "Standard Names"}   Standard Names
 @{" LEAF_REG_REMAP                           " link "Leaf Functions"}   Leaf Functions
 @{" LEAF_REGISTERS                           " link "Leaf Functions"}   Leaf Functions
 @{" left rotate                              " link "Arithmetic"}   Arithmetic
 @{" left shift                               " link "Arithmetic"}   Arithmetic
 @{" LEGITIMATE_CONSTANT_P                    " link "Addressing Modes"}   Addressing Modes
 @{" LEGITIMATE_PIC_OPERAND_P                 " link "PIC"}   PIC
 @{" LEGITIMIZE_ADDRESS                       " link "Addressing Modes"}   Addressing Modes
 @{" LEGITIMIZE_RELOAD_ADDRESS                " link "Addressing Modes"}   Addressing Modes
 @{" length-zero arrays                       " link "Zero Length"}   Zero Length
 @{" less than                                " link "Comparisons"}   Comparisons
 @{" less than or equal                       " link "Comparisons"}   Comparisons
 @{" leu                                      " link "Comparisons"}   Comparisons
 @{" leu and attributes                       " link "Expressions"}   Expressions
 @{" LIB2FUNCS_EXTRA                          " link "Target Fragment"}   Target Fragment
 @{" LIB_SPEC                                 " link "Driver"}   Driver
 @{" LIBCALL_VALUE                            " link "Scalar Return"}   Scalar Return
 @{" libgcc.a                                 " link "Library Calls"}   Library Calls
 @{" LIBGCC1                                  " link "Target Fragment"}   Target Fragment
 @{" LIBGCC2_CFLAGS                           " link "Target Fragment"}   Target Fragment
 @{" LIBGCC2_WORDS_BIG_ENDIAN                 " link "Storage Layout"}   Storage Layout
 @{" LIBGCC_NEEDS_DOUBLE                      " link "Library Calls"}   Library Calls
 @{" LIBGCC_SPEC                              " link "Driver"}   Driver
 @{" Libraries                                " link "Link Options"}   Link Options
 @{" library subroutine names                 " link "Library Calls"}   Library Calls
 @{" LIBRARY_PATH                             " link "Environment Variables"}   Environment Variables
 @{" libstdc++                                " link "Installation"}   Installation
 @{" LIMIT_RELOAD_CLASS                       " link "Register Classes"}   Register Classes
 @{" link options                             " link "Link Options"}   Link Options
 @{" LINK_COMMAND_SPEC                        " link "Driver"}   Driver
 @{" LINK_LIBGCC_SPECIAL                      " link "Driver"}   Driver
 @{" LINK_LIBGCC_SPECIAL_1                    " link "Driver"}   Driver
 @{" LINK_SPEC                                " link "Driver"}   Driver
 @{" LINKER_DOES_NOT_WORK_WITH_DWARF2         " link "SDB and DWARF"}   SDB and DWARF
 @{" lo_sum                                   " link "Arithmetic"}   Arithmetic
 @{" load address instruction                 " link "Simple Constraints"}   Simple Constraints
 @{" LOAD_ARGS_REVERSED                       " link "Register Arguments"}   Register Arguments
 @{" LOAD_EXTEND_OP                           " link "Misc"}   Misc
 @{" load_multiple instruction pattern        " link "Standard Names"}   Standard Names
 @{" local labels                             " link "Local Labels"}   Local Labels
 @{" local register allocation                " link "Passes"}   Passes
 @{" local variables in macros                " link "Naming Types"}   Naming Types
 @{" local variables, specifying registers    " link "Local Reg Vars"}   Local Reg Vars
 @{" LOCAL_INCLUDE_DIR                        " link "Driver"}   Driver
 @{" LOCAL_LABEL_PREFIX                       " link "Instruction Output"}   Instruction Output
 @{" LOG_LINKS                                " link "Insns"}   Insns
 @{" logical-and, bitwise                     " link "Arithmetic"}   Arithmetic
 @{" long long data types                     " link "Long Long"}   Long Long
 @{" LONG_DOUBLE_TYPE_SIZE                    " link "Type Layout"}   Type Layout
 @{" LONG_LONG_TYPE_SIZE                      " link "Type Layout"}   Type Layout
 @{" LONG_TYPE_SIZE                           " link "Type Layout"}   Type Layout
 @{" longjmp                                  " link "Global Reg Vars"}   Global Reg Vars
 @{" longjmp and automatic variables <1>      " link "Interface"}   Interface
 @{" longjmp and automatic variables          " link "C Dialect Options"}   C Dialect Options
 @{" longjmp incompatibilities                " link "Incompatibilities"}   Incompatibilities
 @{" longjmp warnings                         " link "Warning Options"}   Warning Options
 @{" LONGJMP_RESTORE_FROM_STACK               " link "Elimination"}   Elimination
 @{" loop optimization                        " link "Passes"}   Passes
 @{" LOOP_ALIGN                               " link "Alignment Output"}   Alignment Output
 @{" lshiftrt                                 " link "Arithmetic"}   Arithmetic
 @{" lshiftrt and attributes                  " link "Expressions"}   Expressions
 @{" lshrM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" lt                                       " link "Comparisons"}   Comparisons
 @{" lt and attributes                        " link "Expressions"}   Expressions
 @{" ltu                                      " link "Comparisons"}   Comparisons
 @{" lvalues, generalized                     " link "Lvalues"}   Lvalues
 @{" m in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" M32R-D options                           " link "M32R-D Options"}   M32R-D Options
 @{" M680x0 options                           " link "M680x0 Options"}   M680x0 Options
 @{" M88k options                             " link "M88K Options"}   M88K Options
 @{" machine dependent options                " link "Submodel Options"}   Submodel Options
 @{" machine description macros               " link "Target Macros"}   Target Macros
 @{" machine descriptions                     " link "Machine Desc"}   Machine Desc
 @{" machine mode conversions                 " link "Conversions"}   Conversions
 @{" machine modes                            " link "Machine Modes"}   Machine Modes
 @{" machine specific constraints             " link "Machine Constraints"}   Machine Constraints
 @{" MACHINE_DEPENDENT_REORG                  " link "Misc"}   Misc
 @{" MACHINE_STATE_RESTORE                    " link "Profiling"}   Profiling
 @{" MACHINE_STATE_SAVE                       " link "Profiling"}   Profiling
 @{" macro with variable arguments            " link "Macro Varargs"}   Macro Varargs
 @{" macros containing asm                    " link "Extended Asm"}   Extended Asm
 @{" macros, inline alternative               " link "Inline"}   Inline
 @{" macros, local labels                     " link "Local Labels"}   Local Labels
 @{" macros, local variables in               " link "Naming Types"}   Naming Types
 @{" macros, statements in expressions        " link "Statement Exprs"}   Statement Exprs
 @{" macros, target description               " link "Target Macros"}   Target Macros
 @{" macros, types of arguments               " link "Typeof"}   Typeof
 @{" main and the exit status                 " link "VMS Misc"}   VMS Misc
 @{" make                                     " link "Preprocessor Options"}   Preprocessor Options
 @{" MAKE_DECL_ONE_ONLY (DECL)                " link "Label Output"}   Label Output
 @{" make_safe_from                           " link "Expander Definitions"}   Expander Definitions
 @{" makefile fragment                        " link "Fragments"}   Fragments
 @{" MASK_RETURN_ADDR                         " link "Exception Region Output"}   Exception Region Output
 @{" match_dup                                " link "RTL Template"}   RTL Template
 @{" match_dup and attributes                 " link "Insn Lengths"}   Insn Lengths
 @{" match_insn                               " link "RTL Template"}   RTL Template
 @{" match_insn2                              " link "RTL Template"}   RTL Template
 @{" match_op_dup                             " link "RTL Template"}   RTL Template
 @{" match_operand                            " link "RTL Template"}   RTL Template
 @{" match_operand and attributes             " link "Expressions"}   Expressions
 @{" match_operator                           " link "RTL Template"}   RTL Template
 @{" match_par_dup                            " link "RTL Template"}   RTL Template
 @{" match_parallel                           " link "RTL Template"}   RTL Template
 @{" match_scratch                            " link "RTL Template"}   RTL Template
 @{" matching constraint                      " link "Simple Constraints"}   Simple Constraints
 @{" matching operands                        " link "Output Template"}   Output Template
 @{" math libraries                           " link "Interface"}   Interface
 @{" math, in RTL                             " link "Arithmetic"}   Arithmetic
 @{" MAX_BITS_PER_WORD                        " link "Storage Layout"}   Storage Layout
 @{" MAX_CHAR_TYPE_SIZE                       " link "Type Layout"}   Type Layout
 @{" MAX_FIXED_MODE_SIZE                      " link "Storage Layout"}   Storage Layout
 @{" MAX_INT_TYPE_SIZE                        " link "Type Layout"}   Type Layout
 @{" MAX_INTEGER_COMPUTATION_MODE             " link "Misc"}   Misc
 @{" MAX_LONG_TYPE_SIZE                       " link "Type Layout"}   Type Layout
 @{" MAX_MOVE_MAX                             " link "Misc"}   Misc
 @{" MAX_OFILE_ALIGNMENT                      " link "Storage Layout"}   Storage Layout
 @{" MAX_REGS_PER_ADDRESS                     " link "Addressing Modes"}   Addressing Modes
 @{" MAX_WCHAR_TYPE_SIZE                      " link "Type Layout"}   Type Layout
 @{" maximum operator                         " link "Min and Max"}   Min and Max
 @{" MAYBE_REG_PARM_STACK_SPACE               " link "Stack Arguments"}   Stack Arguments
 @{" mcount                                   " link "Profiling"}   Profiling
 @{" MD_CALL_PROTOTYPES                       " link "Config"}   Config
 @{" MD_EXEC_PREFIX                           " link "Driver"}   Driver
 @{" MD_SCHED_INIT                            " link "Misc"}   Misc
 @{" MD_SCHED_REORDER                         " link "Misc"}   Misc
 @{" MD_SCHED_VARIABLE_ISSUE                  " link "Misc"}   Misc
 @{" MD_STARTFILE_PREFIX                      " link "Driver"}   Driver
 @{" MD_STARTFILE_PREFIX_1                    " link "Driver"}   Driver
 @{" mem                                      " link "Regs and Memory"}   Regs and Memory
 @{" mem and -s                               " link "Flags"}   Flags
 @{" mem and -u                               " link "Flags"}   Flags
 @{" mem and -v                               " link "Flags"}   Flags
 @{" mem, RTL sharing                         " link "Sharing"}   Sharing
 @{" MEM_ALIAS_SET                            " link "Flags"}   Flags
 @{" MEM_IN_STRUCT_P                          " link "Flags"}   Flags
 @{" MEM_VOLATILE_P                           " link "Flags"}   Flags
 @{" member fns, automatically inline         " link "Inline"}   Inline
 @{" memcmp                                   " link "C Dialect Options"}   C Dialect Options
 @{" memcpy                                   " link "C Dialect Options"}   C Dialect Options
 @{" memcpy, implicit usage                   " link "Library Calls"}   Library Calls
 @{" memory model (29k)                       " link "AMD29K Options"}   AMD29K Options
 @{" memory reference, nonoffsettable         " link "Simple Constraints"}   Simple Constraints
 @{" memory references in constraints         " link "Simple Constraints"}   Simple Constraints
 @{" MEMORY_MOVE_COST                         " link "Costs"}   Costs
 @{" memset, implicit usage                   " link "Library Calls"}   Library Calls
 @{" MERGE_MACHINE_DECL_ATTRIBUTES            " link "Misc"}   Misc
 @{" MERGE_MACHINE_TYPE_ATTRIBUTES            " link "Misc"}   Misc
 @{" messages, warning                        " link "Warning Options"}   Warning Options
 @{" messages, warning and error              " link "Warnings and Errors"}   Warnings and Errors
 @{" middle-operands, omitted                 " link "Conditionals"}   Conditionals
 @{" MIN_UNITS_PER_WORD                       " link "Storage Layout"}   Storage Layout
 @{" minimum operator                         " link "Min and Max"}   Min and Max
 @{" MINIMUM_ATOMIC_ALIGNMENT                 " link "Storage Layout"}   Storage Layout
 @{" minus                                    " link "Arithmetic"}   Arithmetic
 @{" minus and attributes                     " link "Expressions"}   Expressions
 @{" minus, canonicalization of               " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" MIPS options                             " link "MIPS Options"}   MIPS Options
 @{" misunderstandings in C++                 " link "C++ Misunderstandings"}   C++ Misunderstandings
 @{" mktemp, and constant strings             " link "Incompatibilities"}   Incompatibilities
 @{" MN10200 options                          " link "MN10200 Options"}   MN10200 Options
 @{" MN10300 options                          " link "MN10300 Options"}   MN10300 Options
 @{" mod                                      " link "Arithmetic"}   Arithmetic
 @{" mod and attributes                       " link "Expressions"}   Expressions
 @{" MODDI3_LIBCALL                           " link "Library Calls"}   Library Calls
 @{" mode attribute                           " link "Variable Attributes"}   Variable Attributes
 @{" mode classes                             " link "Machine Modes"}   Machine Modes
 @{" MODE_CC                                  " link "Machine Modes"}   Machine Modes
 @{" MODE_COMPLEX_FLOAT                       " link "Machine Modes"}   Machine Modes
 @{" MODE_COMPLEX_INT                         " link "Machine Modes"}   Machine Modes
 @{" MODE_FLOAT                               " link "Machine Modes"}   Machine Modes
 @{" MODE_FUNCTION                            " link "Machine Modes"}   Machine Modes
 @{" MODE_INT                                 " link "Machine Modes"}   Machine Modes
 @{" MODE_PARTIAL_INT                         " link "Machine Modes"}   Machine Modes
 @{" MODE_RANDOM                              " link "Machine Modes"}   Machine Modes
 @{" MODES_TIEABLE_P                          " link "Values in Registers"}   Values in Registers
 @{" modifiers in constraints                 " link "Modifiers"}   Modifiers
 @{" modM3 instruction pattern                " link "Standard Names"}   Standard Names
 @{" MODSI3_LIBCALL                           " link "Library Calls"}   Library Calls
 @{" MOVE_MAX                                 " link "Misc"}   Misc
 @{" MOVE_RATIO                               " link "Costs"}   Costs
 @{" movM instruction pattern                 " link "Standard Names"}   Standard Names
 @{" movMODEcc instruction pattern            " link "Standard Names"}   Standard Names
 @{" movstrictM instruction pattern           " link "Standard Names"}   Standard Names
 @{" movstrM instruction pattern              " link "Standard Names"}   Standard Names
 @{" MULDI3_LIBCALL                           " link "Library Calls"}   Library Calls
 @{" mulhisi3 instruction pattern             " link "Standard Names"}   Standard Names
 @{" mulM3 instruction pattern                " link "Standard Names"}   Standard Names
 @{" mulqihi3 instruction pattern             " link "Standard Names"}   Standard Names
 @{" MULSI3_LIBCALL                           " link "Library Calls"}   Library Calls
 @{" mulsidi3 instruction pattern             " link "Standard Names"}   Standard Names
 @{" mult                                     " link "Arithmetic"}   Arithmetic
 @{" mult and attributes                      " link "Expressions"}   Expressions
 @{" mult, canonicalization of                " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" MULTIBYTE_CHARS                          " link "Config"}   Config
 @{" MULTILIB_DEFAULTS                        " link "Driver"}   Driver
 @{" MULTILIB_DIRNAMES                        " link "Target Fragment"}   Target Fragment
 @{" MULTILIB_EXCEPTIONS                      " link "Target Fragment"}   Target Fragment
 @{" MULTILIB_EXTRA_OPTS                      " link "Target Fragment"}   Target Fragment
 @{" MULTILIB_MATCHES                         " link "Target Fragment"}   Target Fragment
 @{" MULTILIB_OPTIONS                         " link "Target Fragment"}   Target Fragment
 @{" multiple alternative constraints         " link "Multi-Alternative"}   Multi-Alternative
 @{" MULTIPLE_SYMBOL_SPACES                   " link "Misc"}   Misc
 @{" multiplication                           " link "Arithmetic"}   Arithmetic
 @{" multiprecision arithmetic                " link "Long Long"}   Long Long
 @{" MUST_PASS_IN_STACK                       " link "Register Arguments"}   Register Arguments
 @{" MUST_PASS_IN_STACK, and FUNCTION_ARG     " link "Register Arguments"}   Register Arguments
 @{" n in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" N_REG_CLASSES                            " link "Register Classes"}   Register Classes
 @{" name augmentation                        " link "VMS Misc"}   VMS Misc
 @{" named patterns and conditions            " link "Patterns"}   Patterns
 @{" named return value in C++                " link "Naming Results"}   Naming Results
 @{" names used in assembler code             " link "Asm Labels"}   Asm Labels
 @{" names, pattern                           " link "Standard Names"}   Standard Names
 @{" naming convention, implementation headers " link "C++ Interface"}   C++ Interface
 @{" naming types                             " link "Naming Types"}   Naming Types
 @{" ne                                       " link "Comparisons"}   Comparisons
 @{" ne and attributes                        " link "Expressions"}   Expressions
 @{" NEED_MATH_LIBRARY                        " link "Misc"}   Misc
 @{" neg                                      " link "Arithmetic"}   Arithmetic
 @{" neg and attributes                       " link "Expressions"}   Expressions
 @{" neg, canonicalization of                 " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" negM2 instruction pattern                " link "Standard Names"}   Standard Names
 @{" nested functions                         " link "Nested Functions"}   Nested Functions
 @{" nested functions, trampolines for        " link "Trampolines"}   Trampolines
 @{" newline vs string constants              " link "C Dialect Options"}   C Dialect Options
 @{" next_cc0_user                            " link "Jump Patterns"}   Jump Patterns
 @{" NEXT_INSN                                " link "Insns"}   Insns
 @{" NEXT_OBJC_RUNTIME                        " link "Library Calls"}   Library Calls
 @{" nil                                      " link "RTL Objects"}   RTL Objects
 @{" no constraints                           " link "No Constraints"}   No Constraints
 @{" no-op move instructions                  " link "Passes"}   Passes
 @{" NO_BUILTIN_PTRDIFF_TYPE                  " link "Driver"}   Driver
 @{" NO_BUILTIN_SIZE_TYPE                     " link "Driver"}   Driver
 @{" NO_DBX_FUNCTION_END                      " link "DBX Hooks"}   DBX Hooks
 @{" NO_DOLLAR_IN_LABEL                       " link "Misc"}   Misc
 @{" NO_DOT_IN_LABEL                          " link "Misc"}   Misc
 @{" NO_FUNCTION_CSE                          " link "Costs"}   Costs
 @{" NO_IMPLICIT_EXTERN_C                     " link "Misc"}   Misc
 @{" NO_MD_PROTOTYPES                         " link "Config"}   Config
 @{" NO_RECURSIVE_FUNCTION_CSE                " link "Costs"}   Costs
 @{" NO_REGS                                  " link "Register Classes"}   Register Classes
 @{" NO_SYS_SIGLIST                           " link "Config"}   Config
 @{" nocommon attribute                       " link "Variable Attributes"}   Variable Attributes
 @{" non-constant initializers                " link "Initializers"}   Initializers
 @{" non-static inline function               " link "Inline"}   Inline
 @{" NON_SAVING_SETJMP                        " link "Register Basics"}   Register Basics
 @{" nongcc_SI_type                           " link "Library Calls"}   Library Calls
 @{" nongcc_word_type                         " link "Library Calls"}   Library Calls
 @{" nonlocal_goto instruction pattern        " link "Standard Names"}   Standard Names
 @{" nonlocal_goto_receiver instruction pattern " link "Standard Names"}   Standard Names
 @{" nonoffsettable memory reference          " link "Simple Constraints"}   Simple Constraints
 @{" nop instruction pattern                  " link "Standard Names"}   Standard Names
 @{" noreturn function attribute              " link "Function Attributes"}   Function Attributes
 @{" not                                      " link "Arithmetic"}   Arithmetic
 @{" not and attributes                       " link "Expressions"}   Expressions
 @{" not equal                                " link "Comparisons"}   Comparisons
 @{" not using constraints                    " link "No Constraints"}   No Constraints
 @{" not, canonicalization of                 " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" note                                     " link "Insns"}   Insns
 @{" NOTE_INSN_BLOCK_BEG                      " link "Insns"}   Insns
 @{" NOTE_INSN_BLOCK_END                      " link "Insns"}   Insns
 @{" NOTE_INSN_DELETED                        " link "Insns"}   Insns
 @{" NOTE_INSN_EH_REGION_BEG                  " link "Insns"}   Insns
 @{" NOTE_INSN_EH_REGION_END                  " link "Insns"}   Insns
 @{" NOTE_INSN_FUNCTION_END                   " link "Insns"}   Insns
 @{" NOTE_INSN_LOOP_BEG                       " link "Insns"}   Insns
 @{" NOTE_INSN_LOOP_CONT                      " link "Insns"}   Insns
 @{" NOTE_INSN_LOOP_END                       " link "Insns"}   Insns
 @{" NOTE_INSN_LOOP_VTOP                      " link "Insns"}   Insns
 @{" NOTE_INSN_SETJMP                         " link "Insns"}   Insns
 @{" NOTE_LINE_NUMBER                         " link "Insns"}   Insns
 @{" NOTE_SOURCE_FILE                         " link "Insns"}   Insns
 @{" NOTICE_UPDATE_CC                         " link "Condition Code"}   Condition Code
 @{" NUM_MACHINE_MODES                        " link "Machine Modes"}   Machine Modes
 @{" o in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" OBJC_GEN_METHOD_LABEL                    " link "Label Output"}   Label Output
 @{" OBJC_INCLUDE_PATH                        " link "Environment Variables"}   Environment Variables
 @{" OBJC_INT_SELECTORS                       " link "Type Layout"}   Type Layout
 @{" OBJC_PROLOGUE                            " link "File Framework"}   File Framework
 @{" OBJC_SELECTORS_WITHOUT_LABELS            " link "Type Layout"}   Type Layout
 @{" OBJECT_FORMAT_COFF                       " link "Macros for Initialization"}   Macros for Initialization
 @{" OBJECT_FORMAT_ROSE                       " link "Macros for Initialization"}   Macros for Initialization
 @{" OBJECT_SUFFIX                            " link "Config"}   Config
 @{" Objective C                              " link "G++ and GCC"}   G++ and GCC
 @{" Objective C threads                      " link "Installation"}   Installation
 @{" OBSTACK_CHUNK_ALLOC                      " link "Config"}   Config
 @{" OBSTACK_CHUNK_FREE                       " link "Config"}   Config
 @{" OBSTACK_CHUNK_SIZE                       " link "Config"}   Config
 @{" obstack_free                             " link "Configurations"}   Configurations
 @{" OCS (88k)                                " link "M88K Options"}   M88K Options
 @{" offsettable address                      " link "Simple Constraints"}   Simple Constraints
 @{" old-style function definitions           " link "Function Prototypes"}   Function Prototypes
 @{" OLDAR                                    " link "Host Fragment"}   Host Fragment
 @{" OLDCC                                    " link "Host Fragment"}   Host Fragment
 @{" OMIT_EH_TABLE                            " link "Exception Region Output"}   Exception Region Output
 @{" omitted middle-operands                  " link "Conditionals"}   Conditionals
 @{" one_cmplM2 instruction pattern           " link "Standard Names"}   Standard Names
 @{" ONLY_INT_FIELDS                          " link "Config"}   Config
 @{" open coding                              " link "Inline"}   Inline
 @{" operand access                           " link "Accessors"}   Accessors
 @{" operand constraints                      " link "Constraints"}   Constraints
 @{" operand substitution                     " link "Output Template"}   Output Template
 @{" operands                                 " link "Patterns"}   Patterns
 @{" OPTIMIZATION_OPTIONS                     " link "Run-time Target"}   Run-time Target
 @{" optimize options                         " link "Optimize Options"}   Optimize Options
 @{" optional hardware or system features     " link "Run-time Target"}   Run-time Target
 @{" options to control warnings              " link "Warning Options"}   Warning Options
 @{" options, C++                             " link "C++ Dialect Options"}   C++ Dialect Options
 @{" options, code generation                 " link "Code Gen Options"}   Code Gen Options
 @{" options, debugging                       " link "Debugging Options"}   Debugging Options
 @{" options, dialect                         " link "C Dialect Options"}   C Dialect Options
 @{" options, directory search                " link "Directory Options"}   Directory Options
 @{" options, GNU CC command                  " link "Invoking GCC"}   Invoking GCC
 @{" options, grouping                        " link "Invoking GCC"}   Invoking GCC
 @{" options, linking                         " link "Link Options"}   Link Options
 @{" options, optimization                    " link "Optimize Options"}   Optimize Options
 @{" options, order                           " link "Invoking GCC"}   Invoking GCC
 @{" options, preprocessor                    " link "Preprocessor Options"}   Preprocessor Options
 @{" order of evaluation, side effects        " link "Non-bugs"}   Non-bugs
 @{" order of options                         " link "Invoking GCC"}   Invoking GCC
 @{" order of register allocation             " link "Allocation Order"}   Allocation Order
 @{" ORDER_REGS_FOR_LOCAL_ALLOC               " link "Allocation Order"}   Allocation Order
 @{" Ordering of Patterns                     " link "Pattern Ordering"}   Pattern Ordering
 @{" other directory, compilation in          " link "Other Dir"}   Other Dir
 @{" OUTGOING_REG_PARM_STACK_SPACE            " link "Stack Arguments"}   Stack Arguments
 @{" OUTGOING_REGNO                           " link "Register Basics"}   Register Basics
 @{" output file option                       " link "Overall Options"}   Overall Options
 @{" output of assembler code                 " link "File Framework"}   File Framework
 @{" output statements                        " link "Output Statement"}   Output Statement
 @{" output templates                         " link "Output Template"}   Output Template
 @{" output_addr_const                        " link "Data Output"}   Data Output
 @{" output_asm_insn                          " link "Output Statement"}   Output Statement
 @{" OUTPUT_QUOTED_STRING                     " link "File Framework"}   File Framework
 @{" overflow while constant folding          " link "Cross-compilation"}   Cross-compilation
 @{" OVERLAPPING_REGNO_P                      " link "Obsolete Register Macros"}   Obsolete Register Macros
 @{" overloaded virtual fn, warning           " link "Warning Options"}   Warning Options
 @{" OVERRIDE_OPTIONS                         " link "Run-time Target"}   Run-time Target
 @{" p in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" packed attribute                         " link "Variable Attributes"}   Variable Attributes
 @{" parallel                                 " link "Side Effects"}   Side Effects
 @{" parameter forward declaration            " link "Variable Length"}   Variable Length
 @{" parameters, aliased                      " link "Code Gen Options"}   Code Gen Options
 @{" parameters, miscellaneous                " link "Misc"}   Misc
 @{" PARM_BOUNDARY                            " link "Storage Layout"}   Storage Layout
 @{" PARSE_LDD_OUTPUT                         " link "Macros for Initialization"}   Macros for Initialization
 @{" parser generator, Bison                  " link "Installation"}   Installation
 @{" parsing pass                             " link "Passes"}   Passes
 @{" passes and files of the compiler         " link "Passes"}   Passes
 @{" passing arguments                        " link "Interface"}   Interface
 @{" PATH_SEPARATOR                           " link "Config"}   Config
 @{" PATTERN                                  " link "Insns"}   Insns
 @{" pattern conditions                       " link "Patterns"}   Patterns
 @{" pattern names                            " link "Standard Names"}   Standard Names
 @{" Pattern Ordering                         " link "Pattern Ordering"}   Pattern Ordering
 @{" patterns                                 " link "Patterns"}   Patterns
 @{" pc                                       " link "Regs and Memory"}   Regs and Memory
 @{" pc and attributes                        " link "Insn Lengths"}   Insn Lengths
 @{" pc, RTL sharing                          " link "Sharing"}   Sharing
 @{" pc_rtx                                   " link "Regs and Memory"}   Regs and Memory
 @{" PCC_BITFIELD_TYPE_MATTERS                " link "Storage Layout"}   Storage Layout
 @{" PCC_STATIC_STRUCT_RETURN                 " link "Aggregate Return"}   Aggregate Return
 @{" PDImode                                  " link "Machine Modes"}   Machine Modes
 @{" peephole optimization                    " link "Passes"}   Passes
 @{" peephole optimization, RTL representation " link "Side Effects"}   Side Effects
 @{" peephole optimizer definitions           " link "Peephole Definitions"}   Peephole Definitions
 @{" percent sign                             " link "Output Template"}   Output Template
 @{" perform_...                              " link "Library Calls"}   Library Calls
 @{" PIC <1>                                  " link "Code Gen Options"}   Code Gen Options
 @{" PIC                                      " link "PIC"}   PIC
 @{" PIC_OFFSET_TABLE_REG_CALL_CLOBBERED      " link "PIC"}   PIC
 @{" PIC_OFFSET_TABLE_REGNUM                  " link "PIC"}   PIC
 @{" plus                                     " link "Arithmetic"}   Arithmetic
 @{" plus and attributes                      " link "Expressions"}   Expressions
 @{" plus, canonicalization of                " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" Pmode                                    " link "Misc"}   Misc
 @{" pointer arguments                        " link "Function Attributes"}   Function Attributes
 @{" POINTER_SIZE                             " link "Storage Layout"}   Storage Layout
 @{" POINTERS_EXTEND_UNSIGNED                 " link "Storage Layout"}   Storage Layout
 @{" portability                              " link "Portability"}   Portability
 @{" portions of temporary objects, pointers to " link "Temporaries"}   Temporaries
 @{" position independent code                " link "PIC"}   PIC
 @{" POSIX                                    " link "Config"}   Config
 @{" post_dec                                 " link "Incdec"}   Incdec
 @{" post_inc                                 " link "Incdec"}   Incdec
 @{" pragma                                   " link "Misc"}   Misc
 @{" pragma, reason for not using             " link "Function Attributes"}   Function Attributes
 @{" pragmas in C++, effect on inlining       " link "C++ Interface"}   C++ Interface
 @{" pragmas, interface and implementation    " link "C++ Interface"}   C++ Interface
 @{" pragmas, warning of unknown              " link "Warning Options"}   Warning Options
 @{" pre_dec                                  " link "Incdec"}   Incdec
 @{" pre_inc                                  " link "Incdec"}   Incdec
 @{" predefined macros                        " link "Run-time Target"}   Run-time Target
 @{" PREDICATE_CODES                          " link "Misc"}   Misc
 @{" PREFERRED_DEBUGGING_TYPE                 " link "All Debuggers"}   All Debuggers
 @{" PREFERRED_OUTPUT_RELOAD_CLASS            " link "Register Classes"}   Register Classes
 @{" PREFERRED_RELOAD_CLASS                   " link "Register Classes"}   Register Classes
 @{" preprocessing numbers                    " link "Incompatibilities"}   Incompatibilities
 @{" preprocessing tokens                     " link "Incompatibilities"}   Incompatibilities
 @{" preprocessor options                     " link "Preprocessor Options"}   Preprocessor Options
 @{" PRESERVE_DEATH_INFO_REGNO_P              " link "Obsolete Register Macros"}   Obsolete Register Macros
 @{" prev_active_insn                         " link "Peephole Definitions"}   Peephole Definitions
 @{" prev_cc0_setter                          " link "Jump Patterns"}   Jump Patterns
 @{" PREV_INSN                                " link "Insns"}   Insns
 @{" PRINT_OPERAND                            " link "Instruction Output"}   Instruction Output
 @{" PRINT_OPERAND_ADDRESS                    " link "Instruction Output"}   Instruction Output
 @{" PRINT_OPERAND_PUNCT_VALID_P              " link "Instruction Output"}   Instruction Output
 @{" probe instruction pattern                " link "Standard Names"}   Standard Names
 @{" processor selection (29k)                " link "AMD29K Options"}   AMD29K Options
 @{" product                                  " link "Arithmetic"}   Arithmetic
 @{" prof                                     " link "Debugging Options"}   Debugging Options
 @{" PROFILE_BEFORE_PROLOGUE                  " link "Profiling"}   Profiling
 @{" profile_block_flag                       " link "Profiling"}   Profiling
 @{" profiling, code generation               " link "Profiling"}   Profiling
 @{" program counter                          " link "Regs and Memory"}   Regs and Memory
 @{" prologue                                 " link "Function Entry"}   Function Entry
 @{" PROMOTE_FOR_CALL_ONLY                    " link "Storage Layout"}   Storage Layout
 @{" PROMOTE_FUNCTION_ARGS                    " link "Storage Layout"}   Storage Layout
 @{" PROMOTE_FUNCTION_RETURN                  " link "Storage Layout"}   Storage Layout
 @{" PROMOTE_MODE                             " link "Storage Layout"}   Storage Layout
 @{" PROMOTE_PROTOTYPES                       " link "Stack Arguments"}   Stack Arguments
 @{" promotion of formal parameters           " link "Function Prototypes"}   Function Prototypes
 @{" pseudo registers                         " link "Regs and Memory"}   Regs and Memory
 @{" PSImode                                  " link "Machine Modes"}   Machine Modes
 @{" PTRDIFF_TYPE                             " link "Type Layout"}   Type Layout
 @{" push address instruction                 " link "Simple Constraints"}   Simple Constraints
 @{" push_reload                              " link "Addressing Modes"}   Addressing Modes
 @{" PUSH_ROUNDING                            " link "Stack Arguments"}   Stack Arguments
 @{" PUSH_ROUNDING, interaction with STACK_BOUNDARY " link "Storage Layout"}   Storage Layout
 @{" PUT_CODE                                 " link "RTL Objects"}   RTL Objects
 @{" PUT_MODE                                 " link "Machine Modes"}   Machine Modes
 @{" PUT_REG_NOTE_KIND                        " link "Insns"}   Insns
 @{" PUT_SDB_...                              " link "SDB and DWARF"}   SDB and DWARF
 @{" Q, in constraint                         " link "Simple Constraints"}   Simple Constraints
 @{" QImode                                   " link "Machine Modes"}   Machine Modes
 @{" QImode, in insn                          " link "Insns"}   Insns
 @{" qsort, and global register variables     " link "Global Reg Vars"}   Global Reg Vars
 @{" question mark                            " link "Multi-Alternative"}   Multi-Alternative
 @{" quotient                                 " link "Arithmetic"}   Arithmetic
 @{" r in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" r0-relative references (88k)             " link "M88K Options"}   M88K Options
 @{" ranges in case statements                " link "Case Ranges"}   Case Ranges
 @{" read-only strings                        " link "Incompatibilities"}   Incompatibilities
 @{" READONLY_DATA_SECTION                    " link "Sections"}   Sections
 @{" REAL_ARITHMETIC                          " link "Cross-compilation"}   Cross-compilation
 @{" REAL_INFINITY                            " link "Cross-compilation"}   Cross-compilation
 @{" REAL_NM_FILE_NAME                        " link "Macros for Initialization"}   Macros for Initialization
 @{" REAL_VALUE_ATOF                          " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_FIX                           " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_FROM_INT                      " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_ISINF                         " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_ISNAN                         " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_LDEXP                         " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_NEGATE                        " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_RNDZINT                       " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_TO_DECIMAL                    " link "Data Output"}   Data Output
 @{" REAL_VALUE_TO_INT                        " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_TO_TARGET_DOUBLE              " link "Data Output"}   Data Output
 @{" REAL_VALUE_TO_TARGET_LONG_DOUBLE         " link "Data Output"}   Data Output
 @{" REAL_VALUE_TO_TARGET_SINGLE              " link "Data Output"}   Data Output
 @{" REAL_VALUE_TRUNCATE                      " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_TYPE                          " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_UNSIGNED_FIX                  " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUE_UNSIGNED_RNDZINT              " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUES_EQUAL                        " link "Cross-compilation"}   Cross-compilation
 @{" REAL_VALUES_LESS                         " link "Cross-compilation"}   Cross-compilation
 @{" recog_operand                            " link "Instruction Output"}   Instruction Output
 @{" recognizing insns                        " link "RTL Template"}   RTL Template
 @{" reg                                      " link "Regs and Memory"}   Regs and Memory
 @{" reg and -i                               " link "Flags"}   Flags
 @{" reg and -s                               " link "Flags"}   Flags
 @{" reg and -u                               " link "Flags"}   Flags
 @{" reg and -v                               " link "Flags"}   Flags
 @{" reg, RTL sharing                         " link "Sharing"}   Sharing
 @{" REG_ALLOC_ORDER                          " link "Allocation Order"}   Allocation Order
 @{" REG_BR_PRED                              " link "Insns"}   Insns
 @{" REG_BR_PROB                              " link "Insns"}   Insns
 @{" REG_CC_SETTER                            " link "Insns"}   Insns
 @{" REG_CC_USER                              " link "Insns"}   Insns
 @{" REG_CLASS_CONTENTS                       " link "Register Classes"}   Register Classes
 @{" REG_CLASS_FROM_LETTER                    " link "Register Classes"}   Register Classes
 @{" REG_CLASS_NAMES                          " link "Register Classes"}   Register Classes
 @{" REG_DEAD                                 " link "Insns"}   Insns
 @{" REG_DEP_ANTI                             " link "Insns"}   Insns
 @{" REG_DEP_OUTPUT                           " link "Insns"}   Insns
 @{" REG_EQUAL                                " link "Insns"}   Insns
 @{" REG_EQUIV                                " link "Insns"}   Insns
 @{" REG_EXEC_COUNT                           " link "Insns"}   Insns
 @{" REG_FUNCTION_VALUE_P                     " link "Flags"}   Flags
 @{" REG_INC                                  " link "Insns"}   Insns
 @{" REG_LABEL                                " link "Insns"}   Insns
 @{" REG_LIBCALL                              " link "Insns"}   Insns
 @{" REG_LOOP_TEST_P                          " link "Flags"}   Flags
 @{" REG_MODE_OK_FOR_BASE_P                   " link "Addressing Modes"}   Addressing Modes
 @{" reg_names                                " link "Instruction Output"}   Instruction Output
 @{" REG_NO_CONFLICT                          " link "Insns"}   Insns
 @{" REG_NONNEG                               " link "Insns"}   Insns
 @{" REG_NOTE_KIND                            " link "Insns"}   Insns
 @{" REG_NOTES                                " link "Insns"}   Insns
 @{" REG_OK_FOR_BASE_P                        " link "Addressing Modes"}   Addressing Modes
 @{" REG_OK_FOR_INDEX_P                       " link "Addressing Modes"}   Addressing Modes
 @{" REG_OK_STRICT                            " link "Addressing Modes"}   Addressing Modes
 @{" REG_PARM_STACK_SPACE                     " link "Stack Arguments"}   Stack Arguments
 @{" REG_PARM_STACK_SPACE, and FUNCTION_ARG   " link "Register Arguments"}   Register Arguments
 @{" REG_RETVAL                               " link "Insns"}   Insns
 @{" REG_UNUSED                               " link "Insns"}   Insns
 @{" REG_USERVAR_P                            " link "Flags"}   Flags
 @{" REG_WAS_0                                " link "Insns"}   Insns
 @{" register allocation                      " link "Passes"}   Passes
 @{" register allocation order                " link "Allocation Order"}   Allocation Order
 @{" register allocation, stupid              " link "Passes"}   Passes
 @{" register class definitions               " link "Register Classes"}   Register Classes
 @{" register class preference constraints    " link "Class Preferences"}   Class Preferences
 @{" register class preference pass           " link "Passes"}   Passes
 @{" register pairs                           " link "Values in Registers"}   Values in Registers
 @{" register positions in frame (88k)        " link "M88K Options"}   M88K Options
 @{" Register Transfer Language (RTL)         " link "RTL"}   RTL
 @{" register usage                           " link "Registers"}   Registers
 @{" register use analysis                    " link "Passes"}   Passes
 @{" register variable after longjmp          " link "Global Reg Vars"}   Global Reg Vars
 @{" register-to-stack conversion             " link "Passes"}   Passes
 @{" REGISTER_MOVE_COST                       " link "Costs"}   Costs
 @{" REGISTER_NAMES                           " link "Instruction Output"}   Instruction Output
 @{" register_operand                         " link "RTL Template"}   RTL Template
 @{" REGISTER_PREFIX                          " link "Instruction Output"}   Instruction Output
 @{" registers                                " link "Extended Asm"}   Extended Asm
 @{" registers arguments                      " link "Register Arguments"}   Register Arguments
 @{" registers for local variables            " link "Local Reg Vars"}   Local Reg Vars
 @{" registers in constraints                 " link "Simple Constraints"}   Simple Constraints
 @{" registers, global allocation             " link "Explicit Reg Vars"}   Explicit Reg Vars
 @{" registers, global variables in           " link "Global Reg Vars"}   Global Reg Vars
 @{" REGNO_MODE_OK_FOR_BASE_P                 " link "Register Classes"}   Register Classes
 @{" REGNO_OK_FOR_BASE_P                      " link "Register Classes"}   Register Classes
 @{" REGNO_OK_FOR_INDEX_P                     " link "Register Classes"}   Register Classes
 @{" REGNO_REG_CLASS                          " link "Register Classes"}   Register Classes
 @{" regs_ever_live                           " link "Function Entry"}   Function Entry
 @{" relative costs                           " link "Costs"}   Costs
 @{" RELATIVE_PREFIX_NOT_LINKDIR              " link "Driver"}   Driver
 @{" reload pass                              " link "Regs and Memory"}   Regs and Memory
 @{" reload_completed                         " link "Standard Names"}   Standard Names
 @{" reload_in instruction pattern            " link "Standard Names"}   Standard Names
 @{" reload_in_progress                       " link "Standard Names"}   Standard Names
 @{" reload_out instruction pattern           " link "Standard Names"}   Standard Names
 @{" reloading                                " link "Passes"}   Passes
 @{" remainder                                " link "Arithmetic"}   Arithmetic
 @{" reordering, warning                      " link "Warning Options"}   Warning Options
 @{" reporting bugs                           " link "Bugs"}   Bugs
 @{" representation of RTL                    " link "RTL"}   RTL
 @{" rest argument (in macro)                 " link "Macro Varargs"}   Macro Varargs
 @{" rest_of_compilation                      " link "Passes"}   Passes
 @{" rest_of_decl_compilation                 " link "Passes"}   Passes
 @{" restore_stack_block instruction pattern  " link "Standard Names"}   Standard Names
 @{" restore_stack_function instruction pattern " link "Standard Names"}   Standard Names
 @{" restore_stack_nonlocal instruction pattern " link "Standard Names"}   Standard Names
 @{" return                                   " link "Side Effects"}   Side Effects
 @{" return instruction pattern               " link "Standard Names"}   Standard Names
 @{" return value of main                     " link "VMS Misc"}   VMS Misc
 @{" return value, named, in C++              " link "Naming Results"}   Naming Results
 @{" return values in registers               " link "Scalar Return"}   Scalar Return
 @{" return, in C++ function header           " link "Naming Results"}   Naming Results
 @{" RETURN_ADDR_IN_PREVIOUS_FRAME            " link "Frame Layout"}   Frame Layout
 @{" RETURN_ADDR_RTX                          " link "Frame Layout"}   Frame Layout
 @{" RETURN_ADDRESS_POINTER_REGNUM            " link "Frame Registers"}   Frame Registers
 @{" RETURN_IN_MEMORY                         " link "Aggregate Return"}   Aggregate Return
 @{" RETURN_POPS_ARGS                         " link "Stack Arguments"}   Stack Arguments
 @{" returning aggregate values               " link "Aggregate Return"}   Aggregate Return
 @{" returning structures and unions          " link "Interface"}   Interface
 @{" REVERSIBLE_CC_MODE                       " link "Condition Code"}   Condition Code
 @{" right rotate                             " link "Arithmetic"}   Arithmetic
 @{" right shift                              " link "Arithmetic"}   Arithmetic
 @{" rotate                                   " link "Arithmetic"}   Arithmetic
 @{" rotatert                                 " link "Arithmetic"}   Arithmetic
 @{" rotlM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" rotrM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" ROUND_TYPE_ALIGN                         " link "Storage Layout"}   Storage Layout
 @{" ROUND_TYPE_SIZE                          " link "Storage Layout"}   Storage Layout
 @{" RS-6000 and PowerPC Options              " link "RS-6000 and PowerPC Options"}   RS-6000 and PowerPC Options
 @{" RT options                               " link "RT Options"}   RT Options
 @{" RT PC                                    " link "Interoperation"}   Interoperation
 @{" RTL addition                             " link "Arithmetic"}   Arithmetic
 @{" RTL comparison                           " link "Arithmetic"}   Arithmetic
 @{" RTL comparison operations                " link "Comparisons"}   Comparisons
 @{" RTL constant expression types            " link "Constants"}   Constants
 @{" RTL constants                            " link "Constants"}   Constants
 @{" RTL declarations                         " link "RTL Declarations"}   RTL Declarations
 @{" RTL difference                           " link "Arithmetic"}   Arithmetic
 @{" RTL expression                           " link "RTL Objects"}   RTL Objects
 @{" RTL expressions for arithmetic           " link "Arithmetic"}   Arithmetic
 @{" RTL format                               " link "Accessors"}   Accessors
 @{" RTL format characters                    " link "Accessors"}   Accessors
 @{" RTL function-call insns                  " link "Calls"}   Calls
 @{" RTL generation                           " link "Passes"}   Passes
 @{" RTL insn template                        " link "RTL Template"}   RTL Template
 @{" RTL integers                             " link "RTL Objects"}   RTL Objects
 @{" RTL memory expressions                   " link "Regs and Memory"}   Regs and Memory
 @{" RTL object types                         " link "RTL Objects"}   RTL Objects
 @{" RTL postdecrement                        " link "Incdec"}   Incdec
 @{" RTL postincrement                        " link "Incdec"}   Incdec
 @{" RTL predecrement                         " link "Incdec"}   Incdec
 @{" RTL preincrement                         " link "Incdec"}   Incdec
 @{" RTL register expressions                 " link "Regs and Memory"}   Regs and Memory
 @{" RTL representation                       " link "RTL"}   RTL
 @{" RTL side effect expressions              " link "Side Effects"}   Side Effects
 @{" RTL strings                              " link "RTL Objects"}   RTL Objects
 @{" RTL structure sharing assumptions        " link "Sharing"}   Sharing
 @{" RTL subtraction                          " link "Arithmetic"}   Arithmetic
 @{" RTL sum                                  " link "Arithmetic"}   Arithmetic
 @{" RTL vectors                              " link "RTL Objects"}   RTL Objects
 @{" RTX (See RTL)                            " link "RTL Objects"}   RTL Objects
 @{" RTX_COSTS                                " link "Costs"}   Costs
 @{" RTX_INTEGRATED_P                         " link "Flags"}   Flags
 @{" RTX_UNCHANGING_P                         " link "Flags"}   Flags
 @{" run-time conventions                     " link "Interface"}   Interface
 @{" run-time options                         " link "Code Gen Options"}   Code Gen Options
 @{" run-time target specification            " link "Run-time Target"}   Run-time Target
 @{" s in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" save_stack_block instruction pattern     " link "Standard Names"}   Standard Names
 @{" save_stack_function instruction pattern  " link "Standard Names"}   Standard Names
 @{" save_stack_nonlocal instruction pattern  " link "Standard Names"}   Standard Names
 @{" saveable_obstack                         " link "Addressing Modes"}   Addressing Modes
 @{" scalars, returned as values              " link "Scalar Return"}   Scalar Return
 @{" scanf, and constant strings              " link "Incompatibilities"}   Incompatibilities
 @{" SCCS_DIRECTIVE                           " link "Misc"}   Misc
 @{" SCHED_GROUP_P                            " link "Flags"}   Flags
 @{" scheduler, experimental                  " link "Installation"}   Installation
 @{" scheduling, delayed branch               " link "Passes"}   Passes
 @{" scheduling, instruction                  " link "Passes"}   Passes
 @{" SCmode                                   " link "Machine Modes"}   Machine Modes
 @{" sCOND instruction pattern                " link "Standard Names"}   Standard Names
 @{" scope of a variable length array         " link "Variable Length"}   Variable Length
 @{" scope of declaration                     " link "Disappointments"}   Disappointments
 @{" scope of external declarations           " link "Incompatibilities"}   Incompatibilities
 @{" scratch                                  " link "Regs and Memory"}   Regs and Memory
 @{" scratch operands                         " link "Regs and Memory"}   Regs and Memory
 @{" scratch, RTL sharing                     " link "Sharing"}   Sharing
 @{" SDB_ALLOW_FORWARD_REFERENCES             " link "SDB and DWARF"}   SDB and DWARF
 @{" SDB_ALLOW_UNKNOWN_REFERENCES             " link "SDB and DWARF"}   SDB and DWARF
 @{" SDB_DEBUGGING_INFO                       " link "SDB and DWARF"}   SDB and DWARF
 @{" SDB_DELIM                                " link "SDB and DWARF"}   SDB and DWARF
 @{" SDB_GENERATE_FAKE                        " link "SDB and DWARF"}   SDB and DWARF
 @{" search path                              " link "Directory Options"}   Directory Options
 @{" second include path                      " link "Preprocessor Options"}   Preprocessor Options
 @{" SECONDARY_INPUT_RELOAD_CLASS             " link "Register Classes"}   Register Classes
 @{" SECONDARY_MEMORY_NEEDED                  " link "Register Classes"}   Register Classes
 @{" SECONDARY_MEMORY_NEEDED_MODE             " link "Register Classes"}   Register Classes
 @{" SECONDARY_MEMORY_NEEDED_RTX              " link "Register Classes"}   Register Classes
 @{" SECONDARY_OUTPUT_RELOAD_CLASS            " link "Register Classes"}   Register Classes
 @{" SECONDARY_RELOAD_CLASS                   " link "Register Classes"}   Register Classes
 @{" section function attribute               " link "Function Attributes"}   Function Attributes
 @{" section variable attribute               " link "Variable Attributes"}   Variable Attributes
 @{" SELECT_CC_MODE                           " link "Condition Code"}   Condition Code
 @{" SELECT_RTX_SECTION                       " link "Sections"}   Sections
 @{" SELECT_SECTION                           " link "Sections"}   Sections
 @{" separate directory, compilation in       " link "Other Dir"}   Other Dir
 @{" sequence                                 " link "Side Effects"}   Side Effects
 @{" sequential consistency on 88k            " link "M88K Options"}   M88K Options
 @{" set                                      " link "Side Effects"}   Side Effects
 @{" set_attr                                 " link "Tagging Insns"}   Tagging Insns
 @{" set_attr_alternative                     " link "Tagging Insns"}   Tagging Insns
 @{" SET_DEFAULT_DECL_ATTRIBUTES              " link "Misc"}   Misc
 @{" SET_DEFAULT_TYPE_ATTRIBUTES              " link "Misc"}   Misc
 @{" SET_DEST                                 " link "Side Effects"}   Side Effects
 @{" SET_SRC                                  " link "Side Effects"}   Side Effects
 @{" setjmp                                   " link "Global Reg Vars"}   Global Reg Vars
 @{" setjmp incompatibilities                 " link "Incompatibilities"}   Incompatibilities
 @{" SETUP_FRAME_ADDRESSES                    " link "Frame Layout"}   Frame Layout
 @{" SETUP_INCOMING_VARARGS                   " link "Varargs"}   Varargs
 @{" SFmode                                   " link "Machine Modes"}   Machine Modes
 @{" shared strings                           " link "Incompatibilities"}   Incompatibilities
 @{" shared VMS run time system               " link "VMS Misc"}   VMS Misc
 @{" SHARED_BSS_SECTION_ASM_OP                " link "Sections"}   Sections
 @{" SHARED_SECTION_ASM_OP                    " link "Sections"}   Sections
 @{" sharing of RTL components                " link "Sharing"}   Sharing
 @{" shift                                    " link "Arithmetic"}   Arithmetic
 @{" SHIFT_COUNT_TRUNCATED                    " link "Misc"}   Misc
 @{" SHORT_IMMEDIATES_SIGN_EXTEND             " link "Misc"}   Misc
 @{" SHORT_TYPE_SIZE                          " link "Type Layout"}   Type Layout
 @{" side effect in ?:                        " link "Conditionals"}   Conditionals
 @{" side effects, macro argument             " link "Statement Exprs"}   Statement Exprs
 @{" side effects, order of evaluation        " link "Non-bugs"}   Non-bugs
 @{" sign_extend                              " link "Conversions"}   Conversions
 @{" sign_extract                             " link "Bit Fields"}   Bit Fields
 @{" sign_extract, canonicalization of        " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" signature                                " link "C++ Signatures"}   C++ Signatures
 @{" signature in C++, advantages             " link "C++ Signatures"}   C++ Signatures
 @{" signature member function default implementation " link "C++ Signatures"}   C++ Signatures
 @{" signatures, C++                          " link "C++ Signatures"}   C++ Signatures
 @{" signed and unsigned values, comparison warning " link "Warning Options"}   Warning Options
 @{" signed division                          " link "Arithmetic"}   Arithmetic
 @{" signed maximum                           " link "Arithmetic"}   Arithmetic
 @{" signed minimum                           " link "Arithmetic"}   Arithmetic
 @{" SIGNED_CHAR_SPEC                         " link "Driver"}   Driver
 @{" SImode                                   " link "Machine Modes"}   Machine Modes
 @{" simple constraints                       " link "Simple Constraints"}   Simple Constraints
 @{" simplifications, arithmetic              " link "Passes"}   Passes
 @{" sin                                      " link "C Dialect Options"}   C Dialect Options
 @{" SIZE_TYPE                                " link "Type Layout"}   Type Layout
 @{" sizeof                                   " link "Typeof"}   Typeof
 @{" SLOW_BYTE_ACCESS                         " link "Costs"}   Costs
 @{" SLOW_UNALIGNED_ACCESS                    " link "Costs"}   Costs
 @{" SLOW_ZERO_EXTEND                         " link "Costs"}   Costs
 @{" SMALL_REGISTER_CLASSES                   " link "Register Classes"}   Register Classes
 @{" smaller data references                  " link "M32R-D Options"}   M32R-D Options
 @{" smaller data references (88k)            " link "M88K Options"}   M88K Options
 @{" smaller data references (MIPS)           " link "MIPS Options"}   MIPS Options
 @{" smaller data references (PowerPC)        " link "RS-6000 and PowerPC Options"}   RS-6000 and PowerPC Options
 @{" smax                                     " link "Arithmetic"}   Arithmetic
 @{" smaxM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" smin                                     " link "Arithmetic"}   Arithmetic
 @{" sminM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" smulM3_highpart instruction pattern      " link "Standard Names"}   Standard Names
 @{" SPARC options                            " link "SPARC Options"}   SPARC Options
 @{" specified registers                      " link "Explicit Reg Vars"}   Explicit Reg Vars
 @{" specifying compiler version and target machine " link "Target Options"}   Target Options
 @{" specifying hardware config               " link "Submodel Options"}   Submodel Options
 @{" specifying machine version               " link "Target Options"}   Target Options
 @{" specifying registers for local variables " link "Local Reg Vars"}   Local Reg Vars
 @{" speed of instructions                    " link "Costs"}   Costs
 @{" splitting instructions                   " link "Insn Splitting"}   Insn Splitting
 @{" sqrt <1>                                 " link "Arithmetic"}   Arithmetic
 @{" sqrt                                     " link "C Dialect Options"}   C Dialect Options
 @{" sqrtM2 instruction pattern               " link "Standard Names"}   Standard Names
 @{" square root                              " link "Arithmetic"}   Arithmetic
 @{" sscanf, and constant strings             " link "Incompatibilities"}   Incompatibilities
 @{" stack arguments                          " link "Stack Arguments"}   Stack Arguments
 @{" stack checks (29k)                       " link "AMD29K Options"}   AMD29K Options
 @{" stack frame layout                       " link "Frame Layout"}   Frame Layout
 @{" STACK_BOUNDARY                           " link "Storage Layout"}   Storage Layout
 @{" STACK_CHECK_BUILTIN                      " link "Stack Checking"}   Stack Checking
 @{" STACK_CHECK_FIXED_FRAME_SIZE             " link "Stack Checking"}   Stack Checking
 @{" STACK_CHECK_MAX_FRAME_SIZE               " link "Stack Checking"}   Stack Checking
 @{" STACK_CHECK_MAX_VAR_SIZE                 " link "Stack Checking"}   Stack Checking
 @{" STACK_CHECK_PROBE_INTERVAL               " link "Stack Checking"}   Stack Checking
 @{" STACK_CHECK_PROBE_LOAD                   " link "Stack Checking"}   Stack Checking
 @{" STACK_CHECK_PROTECT                      " link "Stack Checking"}   Stack Checking
 @{" STACK_DYNAMIC_OFFSET                     " link "Frame Layout"}   Frame Layout
 @{" STACK_DYNAMIC_OFFSET and virtual registers " link "Regs and Memory"}   Regs and Memory
 @{" STACK_GROWS_DOWNWARD                     " link "Frame Layout"}   Frame Layout
 @{" STACK_PARMS_IN_REG_PARM_AREA             " link "Stack Arguments"}   Stack Arguments
 @{" STACK_POINTER_OFFSET                     " link "Frame Layout"}   Frame Layout
 @{" STACK_POINTER_OFFSET and virtual registers " link "Regs and Memory"}   Regs and Memory
 @{" STACK_POINTER_REGNUM                     " link "Frame Registers"}   Frame Registers
 @{" STACK_POINTER_REGNUM and virtual registers " link "Regs and Memory"}   Regs and Memory
 @{" stack_pointer_rtx                        " link "Frame Registers"}   Frame Registers
 @{" STACK_REGS                               " link "Stack Registers"}   Stack Registers
 @{" STACK_SAVEAREA_MODE                      " link "Storage Layout"}   Storage Layout
 @{" STACK_SIZE_MODE                          " link "Storage Layout"}   Storage Layout
 @{" stage1                                   " link "Installation"}   Installation
 @{" standard pattern names                   " link "Standard Names"}   Standard Names
 @{" STANDARD_EXEC_PREFIX                     " link "Driver"}   Driver
 @{" STANDARD_INCLUDE_COMPONENT               " link "Driver"}   Driver
 @{" STANDARD_INCLUDE_DIR                     " link "Driver"}   Driver
 @{" STANDARD_STARTFILE_PREFIX                " link "Driver"}   Driver
 @{" start files                              " link "Tools and Libraries"}   Tools and Libraries
 @{" STARTFILE_SPEC                           " link "Driver"}   Driver
 @{" STARTING_FRAME_OFFSET                    " link "Frame Layout"}   Frame Layout
 @{" STARTING_FRAME_OFFSET and virtual registers " link "Regs and Memory"}   Regs and Memory
 @{" statements inside expressions            " link "Statement Exprs"}   Statement Exprs
 @{" static data in C++, declaring and defining " link "Static Definitions"}   Static Definitions
 @{" STATIC_CHAIN                             " link "Frame Registers"}   Frame Registers
 @{" STATIC_CHAIN_INCOMING                    " link "Frame Registers"}   Frame Registers
 @{" STATIC_CHAIN_INCOMING_REGNUM             " link "Frame Registers"}   Frame Registers
 @{" STATIC_CHAIN_REGNUM                      " link "Frame Registers"}   Frame Registers
 @{" stdarg.h and register arguments          " link "Register Arguments"}   Register Arguments
 @{" stdarg.h and RT PC                       " link "RT Options"}   RT Options
 @{" storage layout                           " link "Storage Layout"}   Storage Layout
 @{" STORE_FLAG_VALUE                         " link "Misc"}   Misc
 @{" store_multiple instruction pattern       " link "Standard Names"}   Standard Names
 @{" storem bug (29k)                         " link "AMD29K Options"}   AMD29K Options
 @{" strcmp                                   " link "C Dialect Options"}   C Dialect Options
 @{" strcpy <1>                               " link "C Dialect Options"}   C Dialect Options
 @{" strcpy                                   " link "Storage Layout"}   Storage Layout
 @{" strength-reduction                       " link "Passes"}   Passes
 @{" STRICT_ALIGNMENT                         " link "Storage Layout"}   Storage Layout
 @{" STRICT_ARGUMENT_NAMING                   " link "Varargs"}   Varargs
 @{" strict_low_part                          " link "RTL Declarations"}   RTL Declarations
 @{" strict_memory_address_p                  " link "Addressing Modes"}   Addressing Modes
 @{" string constants                         " link "Incompatibilities"}   Incompatibilities
 @{" string constants vs newline              " link "C Dialect Options"}   C Dialect Options
 @{" STRIP_NAME_ENCODING                      " link "Sections"}   Sections
 @{" strlen                                   " link "C Dialect Options"}   C Dialect Options
 @{" strlenM instruction pattern              " link "Standard Names"}   Standard Names
 @{" STRUCT_VALUE                             " link "Aggregate Return"}   Aggregate Return
 @{" STRUCT_VALUE_INCOMING                    " link "Aggregate Return"}   Aggregate Return
 @{" STRUCT_VALUE_INCOMING_REGNUM             " link "Aggregate Return"}   Aggregate Return
 @{" STRUCT_VALUE_REGNUM                      " link "Aggregate Return"}   Aggregate Return
 @{" structure passing (88k)                  " link "M88K Options"}   M88K Options
 @{" structure value address                  " link "Aggregate Return"}   Aggregate Return
 @{" STRUCTURE_SIZE_BOUNDARY                  " link "Storage Layout"}   Storage Layout
 @{" structures                               " link "Incompatibilities"}   Incompatibilities
 @{" structures, constructor expression       " link "Constructors"}   Constructors
 @{" structures, returning                    " link "Interface"}   Interface
 @{" stupid register allocation               " link "Passes"}   Passes
 @{" subM3 instruction pattern                " link "Standard Names"}   Standard Names
 @{" submodel options                         " link "Submodel Options"}   Submodel Options
 @{" subreg                                   " link "Regs and Memory"}   Regs and Memory
 @{" subreg and -s                            " link "Flags"}   Flags
 @{" subreg and -u                            " link "Flags"}   Flags
 @{" subreg, in strict_low_part               " link "RTL Declarations"}   RTL Declarations
 @{" subreg, special reload handling          " link "Regs and Memory"}   Regs and Memory
 @{" SUBREG_PROMOTED_UNSIGNED_P               " link "Flags"}   Flags
 @{" SUBREG_PROMOTED_VAR_P                    " link "Flags"}   Flags
 @{" SUBREG_REG                               " link "Regs and Memory"}   Regs and Memory
 @{" SUBREG_WORD                              " link "Regs and Memory"}   Regs and Memory
 @{" subscripting                             " link "Subscripting"}   Subscripting
 @{" subscripting and function values         " link "Subscripting"}   Subscripting
 @{" subtype polymorphism, C++                " link "C++ Signatures"}   C++ Signatures
 @{" SUCCESS_EXIT_CODE                        " link "Config"}   Config
 @{" suffixes for C++ source                  " link "Invoking G++"}   Invoking G++
 @{" Sun installation                         " link "Sun Install"}   Sun Install
 @{" SUPPORTS_ONE_ONLY                        " link "Label Output"}   Label Output
 @{" SUPPORTS_WEAK                            " link "Label Output"}   Label Output
 @{" suppressing warnings                     " link "Warning Options"}   Warning Options
 @{" surprises in C++                         " link "C++ Misunderstandings"}   C++ Misunderstandings
 @{" SVr4                                     " link "M88K Options"}   M88K Options
 @{" SWITCH_CURTAILS_COMPILATION              " link "Driver"}   Driver
 @{" SWITCH_TAKES_ARG                         " link "Driver"}   Driver
 @{" SWITCHES_NEED_SPACES                     " link "Driver"}   Driver
 @{" symbol_ref                               " link "Constants"}   Constants
 @{" symbol_ref and -u                        " link "Flags"}   Flags
 @{" symbol_ref and -v                        " link "Flags"}   Flags
 @{" symbol_ref, RTL sharing                  " link "Sharing"}   Sharing
 @{" SYMBOL_REF_FLAG                          " link "Flags"}   Flags
 @{" SYMBOL_REF_FLAG, in ENCODE_SECTION_INFO  " link "Sections"}   Sections
 @{" SYMBOL_REF_USED                          " link "Flags"}   Flags
 @{" symbolic label                           " link "Sharing"}   Sharing
 @{" syntax checking                          " link "Warning Options"}   Warning Options
 @{" synthesized methods, warning             " link "Warning Options"}   Warning Options
 @{" sys_siglist                              " link "Config"}   Config
 @{" SYSTEM_INCLUDE_DIR                       " link "Driver"}   Driver
 @{" t-TARGET                                 " link "Target Fragment"}   Target Fragment
 @{" tablejump instruction pattern            " link "Standard Names"}   Standard Names
 @{" tagging insns                            " link "Tagging Insns"}   Tagging Insns
 @{" tail recursion optimization              " link "Passes"}   Passes
 @{" target description macros                " link "Target Macros"}   Target Macros
 @{" target machine, specifying               " link "Target Options"}   Target Options
 @{" target makefile fragment                 " link "Target Fragment"}   Target Fragment
 @{" target options                           " link "Target Options"}   Target Options
 @{" target specifications                    " link "Run-time Target"}   Run-time Target
 @{" target-parameter-dependent code          " link "Passes"}   Passes
 @{" TARGET_BELL                              " link "Type Layout"}   Type Layout
 @{" TARGET_BS                                " link "Type Layout"}   Type Layout
 @{" TARGET_CR                                " link "Type Layout"}   Type Layout
 @{" TARGET_EDOM                              " link "Library Calls"}   Library Calls
 @{" TARGET_FF                                " link "Type Layout"}   Type Layout
 @{" TARGET_FLOAT_FORMAT                      " link "Storage Layout"}   Storage Layout
 @{" TARGET_MEM_FUNCTIONS                     " link "Library Calls"}   Library Calls
 @{" TARGET_NEWLINE                           " link "Type Layout"}   Type Layout
 @{" TARGET_OPTIONS                           " link "Run-time Target"}   Run-time Target
 @{" TARGET_SWITCHES                          " link "Run-time Target"}   Run-time Target
 @{" TARGET_TAB                               " link "Type Layout"}   Type Layout
 @{" TARGET_VERSION                           " link "Run-time Target"}   Run-time Target
 @{" TARGET_VT                                " link "Type Layout"}   Type Layout
 @{" TCmode                                   " link "Machine Modes"}   Machine Modes
 @{" tcov                                     " link "Debugging Options"}   Debugging Options
 @{" template debugging                       " link "Warning Options"}   Warning Options
 @{" template instantiation                   " link "Template Instantiation"}   Template Instantiation
 @{" temporaries, lifetime of                 " link "Temporaries"}   Temporaries
 @{" termination routines                     " link "Initialization"}   Initialization
 @{" text_section                             " link "Sections"}   Sections
 @{" TEXT_SECTION_ASM_OP                      " link "Sections"}   Sections
 @{" TFmode                                   " link "Machine Modes"}   Machine Modes
 @{" threads, Objective C                     " link "Installation"}   Installation
 @{" Thumb Options                            " link "Thumb Options"}   Thumb Options
 @{" thunks                                   " link "Nested Functions"}   Nested Functions
 @{" TImode                                   " link "Machine Modes"}   Machine Modes
 @{" tiny data section on the H8-300H         " link "Function Attributes"}   Function Attributes
 @{" tm.h macros                              " link "Target Macros"}   Target Macros
 @{" TMPDIR                                   " link "Environment Variables"}   Environment Variables
 @{" top level of compiler                    " link "Passes"}   Passes
 @{" traditional C language                   " link "C Dialect Options"}   C Dialect Options
 @{" TRADITIONAL_RETURN_FLOAT                 " link "Scalar Return"}   Scalar Return
 @{" TRAMPOLINE_ALIGNMENT                     " link "Trampolines"}   Trampolines
 @{" TRAMPOLINE_SECTION                       " link "Trampolines"}   Trampolines
 @{" TRAMPOLINE_SIZE                          " link "Trampolines"}   Trampolines
 @{" TRAMPOLINE_TEMPLATE                      " link "Trampolines"}   Trampolines
 @{" trampolines for nested functions         " link "Trampolines"}   Trampolines
 @{" TRANSFER_FROM_TRAMPOLINE                 " link "Trampolines"}   Trampolines
 @{" TRULY_NOOP_TRUNCATION                    " link "Misc"}   Misc
 @{" truncate                                 " link "Conversions"}   Conversions
 @{" truncMN2 instruction pattern             " link "Standard Names"}   Standard Names
 @{" tstM instruction pattern                 " link "Standard Names"}   Standard Names
 @{" type abstraction, C++                    " link "C++ Signatures"}   C++ Signatures
 @{" type alignment                           " link "Alignment"}   Alignment
 @{" type attributes                          " link "Type Attributes"}   Type Attributes
 @{" typedef names as function parameters     " link "Incompatibilities"}   Incompatibilities
 @{" typeof                                   " link "Typeof"}   Typeof
 @{" udiv                                     " link "Arithmetic"}   Arithmetic
 @{" UDIVDI3_LIBCALL                          " link "Library Calls"}   Library Calls
 @{" udivM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" udivmodM4 instruction pattern            " link "Standard Names"}   Standard Names
 @{" UDIVSI3_LIBCALL                          " link "Library Calls"}   Library Calls
 @{" Ultrix calling convention                " link "Interoperation"}   Interoperation
 @{" umax                                     " link "Arithmetic"}   Arithmetic
 @{" umaxM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" umin                                     " link "Arithmetic"}   Arithmetic
 @{" uminM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" umod                                     " link "Arithmetic"}   Arithmetic
 @{" UMODDI3_LIBCALL                          " link "Library Calls"}   Library Calls
 @{" umodM3 instruction pattern               " link "Standard Names"}   Standard Names
 @{" UMODSI3_LIBCALL                          " link "Library Calls"}   Library Calls
 @{" umulhisi3 instruction pattern            " link "Standard Names"}   Standard Names
 @{" umulM3_highpart instruction pattern      " link "Standard Names"}   Standard Names
 @{" umulqihi3 instruction pattern            " link "Standard Names"}   Standard Names
 @{" umulsidi3 instruction pattern            " link "Standard Names"}   Standard Names
 @{" unchanging                               " link "Flags"}   Flags
 @{" unchanging, in call_insn                 " link "Flags"}   Flags
 @{" unchanging, in insn                      " link "Flags"}   Flags
 @{" unchanging, in reg and mem               " link "Flags"}   Flags
 @{" unchanging, in subreg                    " link "Flags"}   Flags
 @{" unchanging, in symbol_ref                " link "Flags"}   Flags
 @{" undefined behavior                       " link "Bug Criteria"}   Bug Criteria
 @{" undefined function value                 " link "Bug Criteria"}   Bug Criteria
 @{" underscores in variables in macros       " link "Naming Types"}   Naming Types
 @{" underscores, avoiding (88k)              " link "M88K Options"}   M88K Options
 @{" union, casting to a                      " link "Cast to Union"}   Cast to Union
 @{" unions                                   " link "Incompatibilities"}   Incompatibilities
 @{" unions, returning                        " link "Interface"}   Interface
 @{" UNIQUE_SECTION                           " link "Sections"}   Sections
 @{" UNIQUE_SECTION_P                         " link "Sections"}   Sections
 @{" UNITS_PER_WORD                           " link "Storage Layout"}   Storage Layout
 @{" unknown pragmas, warning                 " link "Warning Options"}   Warning Options
 @{" UNKNOWN_FLOAT_FORMAT                     " link "Storage Layout"}   Storage Layout
 @{" unreachable code                         " link "Passes"}   Passes
 @{" unresolved references and -nodefaultlibs " link "Link Options"}   Link Options
 @{" unresolved references and -nostdlib      " link "Link Options"}   Link Options
 @{" unshare_all_rtl                          " link "Sharing"}   Sharing
 @{" unsigned division                        " link "Arithmetic"}   Arithmetic
 @{" unsigned greater than                    " link "Comparisons"}   Comparisons
 @{" unsigned less than                       " link "Comparisons"}   Comparisons
 @{" unsigned minimum and maximum             " link "Arithmetic"}   Arithmetic
 @{" unsigned_fix                             " link "Conversions"}   Conversions
 @{" unsigned_float                           " link "Conversions"}   Conversions
 @{" unspec                                   " link "Side Effects"}   Side Effects
 @{" unspec_volatile                          " link "Side Effects"}   Side Effects
 @{" untyped_call instruction pattern         " link "Standard Names"}   Standard Names
 @{" untyped_return instruction pattern       " link "Standard Names"}   Standard Names
 @{" use                                      " link "Side Effects"}   Side Effects
 @{" USE_C_ALLOCA                             " link "Config"}   Config
 @{" USE_PROTOTYPES                           " link "Config"}   Config
 @{" used                                     " link "Flags"}   Flags
 @{" used, in symbol_ref                      " link "Flags"}   Flags
 @{" USER_LABEL_PREFIX                        " link "Instruction Output"}   Instruction Output
 @{" USG                                      " link "Config"}   Config
 @{" V in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" V850 Options                             " link "V850 Options"}   V850 Options
 @{" VALID_MACHINE_DECL_ATTRIBUTE             " link "Misc"}   Misc
 @{" VALID_MACHINE_TYPE_ATTRIBUTE             " link "Misc"}   Misc
 @{" value after longjmp                      " link "Global Reg Vars"}   Global Reg Vars
 @{" values, returned by functions            " link "Scalar Return"}   Scalar Return
 @{" varargs implementation                   " link "Varargs"}   Varargs
 @{" varargs.h and RT PC                      " link "RT Options"}   RT Options
 @{" variable addressability on the M32R-D    " link "Variable Attributes"}   Variable Attributes
 @{" variable alignment                       " link "Alignment"}   Alignment
 @{" variable attributes                      " link "Variable Attributes"}   Variable Attributes
 @{" variable number of arguments             " link "Macro Varargs"}   Macro Varargs
 @{" variable-length array scope              " link "Variable Length"}   Variable Length
 @{" variable-length arrays                   " link "Variable Length"}   Variable Length
 @{" variables in specified registers         " link "Explicit Reg Vars"}   Explicit Reg Vars
 @{" variables, local, in macros              " link "Naming Types"}   Naming Types
 @{" Vax calling convention                   " link "Interoperation"}   Interoperation
 @{" VAX options                              " link "VAX Options"}   VAX Options
 @{" VAX_FLOAT_FORMAT                         " link "Storage Layout"}   Storage Layout
 @{" VAXCRTL                                  " link "VMS Misc"}   VMS Misc
 @{" VIRTUAL_INCOMING_ARGS_REGNUM             " link "Regs and Memory"}   Regs and Memory
 @{" VIRTUAL_OUTGOING_ARGS_REGNUM             " link "Regs and Memory"}   Regs and Memory
 @{" VIRTUAL_STACK_DYNAMIC_REGNUM             " link "Regs and Memory"}   Regs and Memory
 @{" VIRTUAL_STACK_VARS_REGNUM                " link "Regs and Memory"}   Regs and Memory
 @{" VMS                                      " link "Config"}   Config
 @{" VMS and case sensitivity                 " link "VMS Misc"}   VMS Misc
 @{" VMS and include files                    " link "Include Files and VMS"}   Include Files and VMS
 @{" VMS installation                         " link "VMS Install"}   VMS Install
 @{" void pointers, arithmetic                " link "Pointer Arith"}   Pointer Arith
 @{" void, size of pointer to                 " link "Pointer Arith"}   Pointer Arith
 @{" VOIDmode                                 " link "Machine Modes"}   Machine Modes
 @{" volatil                                  " link "Flags"}   Flags
 @{" volatil, in insn                         " link "Flags"}   Flags
 @{" volatil, in mem                          " link "Flags"}   Flags
 @{" volatil, in reg                          " link "Flags"}   Flags
 @{" volatil, in symbol_ref                   " link "Flags"}   Flags
 @{" volatile applied to function             " link "Function Attributes"}   Function Attributes
 @{" volatile memory references               " link "Flags"}   Flags
 @{" voting between constraint alternatives   " link "Class Preferences"}   Class Preferences
 @{" warning for comparison of signed and unsigned values " link "Warning Options"}   Warning Options
 @{" warning for overloaded virtual fn        " link "Warning Options"}   Warning Options
 @{" warning for reordering of member initializers " link "Warning Options"}   Warning Options
 @{" warning for synthesized methods          " link "Warning Options"}   Warning Options
 @{" warning for unknown pragmas              " link "Warning Options"}   Warning Options
 @{" warning messages                         " link "Warning Options"}   Warning Options
 @{" warnings vs errors                       " link "Warnings and Errors"}   Warnings and Errors
 @{" WCHAR_TYPE                               " link "Type Layout"}   Type Layout
 @{" WCHAR_TYPE_SIZE                          " link "Type Layout"}   Type Layout
 @{" weak attribute                           " link "Function Attributes"}   Function Attributes
 @{" which_alternative                        " link "Output Statement"}   Output Statement
 @{" whitespace                               " link "Incompatibilities"}   Incompatibilities
 @{" WIDEST_HARDWARE_FP_SIZE                  " link "Type Layout"}   Type Layout
 @{" word_mode                                " link "Machine Modes"}   Machine Modes
 @{" WORD_REGISTER_OPERATIONS                 " link "Misc"}   Misc
 @{" WORD_SWITCH_TAKES_ARG                    " link "Driver"}   Driver
 @{" WORDS_BIG_ENDIAN                         " link "Storage Layout"}   Storage Layout
 @{" WORDS_BIG_ENDIAN, effect on subreg       " link "Regs and Memory"}   Regs and Memory
 @{" X in constraint                          " link "Simple Constraints"}   Simple Constraints
 @{" x-HOST                                   " link "Host Fragment"}   Host Fragment
 @{" XCmode                                   " link "Machine Modes"}   Machine Modes
 @{" XCOFF_DEBUGGING_INFO                     " link "DBX Options"}   DBX Options
 @{" XEXP                                     " link "Accessors"}   Accessors
 @{" XFmode                                   " link "Machine Modes"}   Machine Modes
 @{" XINT                                     " link "Accessors"}   Accessors
 @{" xm-MACHINE.h                             " link "Config"}   Config
 @{" xor                                      " link "Arithmetic"}   Arithmetic
 @{" xor, canonicalization of                 " link "Insn Canonicalizations"}   Insn Canonicalizations
 @{" xorM3 instruction pattern                " link "Standard Names"}   Standard Names
 @{" XSTR                                     " link "Accessors"}   Accessors
 @{" XVEC                                     " link "Accessors"}   Accessors
 @{" XVECEXP                                  " link "Accessors"}   Accessors
 @{" XVECLEN                                  " link "Accessors"}   Accessors
 @{" XWINT                                    " link "Accessors"}   Accessors
 @{" zero division on 88k                     " link "M88K Options"}   M88K Options
 @{" zero-length arrays                       " link "Zero Length"}   Zero Length
 @{" zero_extend                              " link "Conversions"}   Conversions
 @{" zero_extendMN2 instruction pattern       " link "Standard Names"}   Standard Names
 @{" zero_extract                             " link "Bit Fields"}   Bit Fields
 @{" zero_extract, canonicalization of        " link "Insn Canonicalizations"}   Insn Canonicalizations

@endnode

