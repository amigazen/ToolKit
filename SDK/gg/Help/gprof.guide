@database gprof.guide

@Master /gg-src/gg/fsf/binutils/gprof/gprof.texi

@Width 72


This is the AmigaGuide®  file gprof.guide, produced by Makeinfo-1.68 from 
the input file /gg-src/gg/fsf/binutils/gprof/gprof.texi.

START-INFO-DIR-ENTRY
* gprof: (gprof).                Profiling your program's execution
END-INFO-DIR-ENTRY

   This file documents the gprof profiler of the GNU system.

   Copyright (C) 1988, 1992 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.

@node Main "gprof.guide"
@next "Why"

Profiling a Program: Where Does It Spend Its Time?
**************************************************

   This manual describes the GNU profiler, @{b}gprof@{ub}, and how you can use
it to determine which parts of a program are taking most of the
execution time.  We assume that you know how to write, compile, and
execute programs.  GNU @{b}gprof@{ub} was written by Jay Fenlason.

   This manual was updated January 1993.


 @{" Why                " link "Why"}  What profiling means, and why it is useful.
 @{" Compiling          " link "Compiling"}  How to compile your program for profiling.
 @{" Executing          " link "Executing"}  How to execute your program to generate the
                            profile data file @{b}gmon.out@{ub}.
 @{" Invoking           " link "Invoking"}  How to run @{b}gprof@{ub}, and how to specify
                            options for it.

 @{" Flat Profile       " link "Flat Profile"}  The flat profile shows how much time was spent
                            executing directly in each function.
 @{" Call Graph         " link "Call Graph"}  The call graph shows which functions called which
                            others, and how much time each function used
                            when its subroutine calls are included.

 @{" Implementation     " link "Implementation"}  How the profile data is recorded and written.
 @{" Sampling Error     " link "Sampling Error"}  Statistical margins of error.
                            How to accumulate data from several runs
                            to make it more accurate.

 @{" Assumptions        " link "Assumptions"}  Some of @{b}gprof@{ub}'s measurements are based
                            on assumptions about your program
                            that could be very wrong.

 @{" Incompatibilities  " link "Incompatibilities"}  (between GNU @{b}gprof@{ub} and Unix @{b}gprof@{ub}.)


@endnode

@node "Why" "gprof.guide/Why"
@next "Compiling"
@prev "Main"
@toc "Main"

Why Profile
***********

   Profiling allows you to learn where your program spent its time and
which functions called which other functions while it was executing.
This information can show you which pieces of your program are slower
than you expected, and might be candidates for rewriting to make your
program execute faster.  It can also tell you which functions are being
called more or less often than you expected.  This may help you spot
bugs that had otherwise been unnoticed.

   Since the profiler uses information collected during the actual
execution of your program, it can be used on programs that are too
large or too complex to analyze by reading the source.  However, how
your program is run will affect the information that shows up in the
profile data.  If you don't use some feature of your program while it
is being profiled, no profile information will be generated for that
feature.

   Profiling has several steps:

   * You must compile and link your program with profiling enabled.
     See @{"Compiling" link "Compiling"}.

   * You must execute your program to generate a profile data file.
     See @{"Executing" link "Executing"}.

   * You must run @{b}gprof@{ub} to analyze the profile data.  See @{"Invoking" link "Invoking"}.

   The next three chapters explain these steps in greater detail.

   The result of the analysis is a file containing two tables, the @{i}flat
profile@{ui} and the @{i}call graph@{ui} (plus blurbs which briefly explain the
contents of these tables).

   The flat profile shows how much time your program spent in each
function, and how many times that function was called.  If you simply
want to know which functions burn most of the cycles, it is stated
concisely here.  See @{"Flat Profile" link "Flat Profile"}.

   The call graph shows, for each function, which functions called it,
which other functions it called, and how many times.  There is also an
estimate of how much time was spent in the subroutines of each
function.  This can suggest places where you might try to eliminate
function calls that use a lot of time.  See @{"Call Graph" link "Call Graph"}.


@endnode

@node "Compiling" "gprof.guide/Compiling"
@next "Executing"
@prev "Why"
@toc "Main"

Compiling a Program for Profiling
*********************************

   The first step in generating profile information for your program is
to compile and link it with profiling enabled.

   To compile a source file for profiling, specify the @{b}-pg@{ub} option when
you run the compiler.  (This is in addition to the options you normally
use.)

   To link the program for profiling, if you use a compiler such as @{b}cc@{ub}
to do the linking, simply specify @{b}-pg@{ub} in addition to your usual
options.  The same option, @{b}-pg@{ub}, alters either compilation or linking to
do what is necessary for profiling.  Here are examples:

     cc -g -c myprog.c utils.c -pg
     cc -o myprog myprog.o utils.o -pg

   The @{b}-pg@{ub} option also works with a command that both compiles and
links:

     cc -o myprog myprog.c utils.c -g -pg

   If you run the linker @{b}ld@{ub} directly instead of through a compiler such
as @{b}cc@{ub}, you must specify the profiling startup file @{b}/lib/gcrt0.o@{ub} as the
first input file instead of the usual startup file @{b}/lib/crt0.o@{ub}.  In
addition, you would probably want to specify the profiling C library,
@{b}/usr/lib/libc_p.a@{ub}, by writing @{b}-lc_p@{ub} instead of the usual @{b}-lc@{ub}.  This is
not absolutely necessary, but doing this gives you number-of-calls
information for standard library functions such as @{b}read@{ub} and @{b}open@{ub}.  For
example:

     ld -o myprog /lib/gcrt0.o myprog.o utils.o -lc_p

   If you compile only some of the modules of the program with @{b}-pg@{ub}, you
can still profile the program, but you won't get complete information
about the modules that were compiled without @{b}-pg@{ub}.  The only information
you get for the functions in those modules is the total time spent in
them; there is no record of how many times they were called, or from
where.  This will not affect the flat profile (except that the @{b}calls@{ub}
field for the functions will be blank), but will greatly reduce the
usefulness of the call graph.


@endnode

@node "Executing" "gprof.guide/Executing"
@next "Invoking"
@prev "Compiling"
@toc "Main"

Executing the Program to Generate Profile Data
**********************************************

   Once the program is compiled for profiling, you must run it in order
to generate the information that @{b}gprof@{ub} needs.  Simply run the program
as usual, using the normal arguments, file names, etc.  The program
should run normally, producing the same output as usual.  It will,
however, run somewhat slower than normal because of the time spent
collecting and the writing the profile data.

   The way you run the program--the arguments and input that you give
it--may have a dramatic effect on what the profile information shows.
The profile data will describe the parts of the program that were
activated for the particular input you use.  For example, if the first
command you give to your program is to quit, the profile data will show
the time used in initialization and in cleanup, but not much else.

   You program will write the profile data into a file called @{b}gmon.out@{ub}
just before exiting.  If there is already a file called @{b}gmon.out@{ub}, its
contents are overwritten.  There is currently no way to tell the
program to write the profile data under a different name, but you can
rename the file afterward if you are concerned that it may be
overwritten.

   In order to write the @{b}gmon.out@{ub} file properly, your program must exit
normally: by returning from @{b}main@{ub} or by calling @{b}exit@{ub}.  Calling the
low-level function @{b}_exit@{ub} does not write the profile data, and neither
does abnormal termination due to an unhandled signal.

   The @{b}gmon.out@{ub} file is written in the program's @{i}current working
directory@{ui} at the time it exits.  This means that if your program calls
@{b}chdir@{ub}, the @{b}gmon.out@{ub} file will be left in the last directory your
program @{b}chdir@{ub}'d to.  If you don't have permission to write in this
directory, the file is not written.  You may get a confusing error
message if this happens.  (We have not yet replaced the part of Unix
responsible for this; when we do, we will make the error message
comprehensible.)


@endnode

@node "Invoking" "gprof.guide/Invoking"
@next "Flat Profile"
@prev "Executing"
@toc "Main"

@{b}gprof@{ub} Command Summary
*********************

   After you have a profile data file @{b}gmon.out@{ub}, you can run @{b}gprof@{ub} to
interpret the information in it.  The @{b}gprof@{ub} program prints a flat
profile and a call graph on standard output.  Typically you would
redirect the output of @{b}gprof@{ub} into a file with @{b}>@{ub}.

   You run @{b}gprof@{ub} like this:

     gprof OPTIONS [EXECUTABLE-FILE [PROFILE-DATA-FILES...]] [> OUTFILE]

Here square-brackets indicate optional arguments.

   If you omit the executable file name, the file @{b}a.out@{ub} is used.  If
you give no profile data file name, the file @{b}gmon.out@{ub} is used.  If any
file is not in the proper format, or if the profile data file does not
appear to belong to the executable file, an error message is printed.

   You can give more than one profile data file by entering all their
names after the executable file name; then the statistics in all the
data files are summed together.

   The following options may be used to selectively include or exclude
functions in the output:

@{b}-a@{ub}
     The @{b}-a@{ub} option causes @{b}gprof@{ub} to suppress the printing of statically
     declared (private) functions.  (These are functions whose names
     are not listed as global, and which are not visible outside the
     file/function/block where they were defined.)  Time spent in these
     functions, calls to/from them, etc, will all be attributed to the
     function that was loaded directly before it in the executable file.
     This option affects both the flat profile and the call graph.

@{b}-D@{ub}
     The @{b}-D@{ub} option causes @{b}gprof@{ub} to ignore symbols which are not known
     to be functions.  This option will give more accurate profile data
     on systems where it is supported (Solaris and HPUX for example).

@{b}-e FUNCTION_NAME@{ub}
     The @{b}-e FUNCTION@{ub} option tells @{b}gprof@{ub} to not print information about
     the function FUNCTION_NAME (and its children...) in the call
     graph.  The function will still be listed as a child of any
     functions that call it, but its index number will be shown as @{b}[not
     printed]@{ub}.  More than one @{b}-e@{ub} option may be given; only one
     FUNCTION_NAME may be indicated with each @{b}-e@{ub} option.

@{b}-E FUNCTION_NAME@{ub}
     The @{b}-E FUNCTION@{ub} option works like the @{b}-e@{ub} option, but time spent in
     the function (and children who were not called from anywhere
     else), will not be used to compute the percentages-of-time for the
     call graph.  More than one @{b}-E@{ub} option may be given; only one
     FUNCTION_NAME may be indicated with each @{b}-E@{ub} option.

@{b}-f FUNCTION_NAME@{ub}
     The @{b}-f FUNCTION@{ub} option causes @{b}gprof@{ub} to limit the call graph to the
     function FUNCTION_NAME and its children (and their children...).
     More than one @{b}-f@{ub} option may be given; only one FUNCTION_NAME may
     be indicated with each @{b}-f@{ub} option.

@{b}-F FUNCTION_NAME@{ub}
     The @{b}-F FUNCTION@{ub} option works like the @{b}-f@{ub} option, but only time
     spent in the function and its children (and their children...)
     will be used to determine total-time and percentages-of-time for
     the call graph.  More than one @{b}-F@{ub} option may be given; only one
     FUNCTION_NAME may be indicated with each @{b}-F@{ub} option.  The @{b}-F@{ub} option
     overrides the @{b}-E@{ub} option.

@{b}-k FROM... TO...@{ub}
     The @{b}-k@{ub} option allows you to delete from the profile any arcs from
     routine FROM to routine TO.

@{b}-v@{ub}
     The @{b}-v@{ub} flag causes @{b}gprof@{ub} to print the current version number, and
     then exit.

@{b}-z@{ub}
     If you give the @{b}-z@{ub} option, @{b}gprof@{ub} will mention all functions in the
     flat profile, even those that were never called, and that had no
     time spent in them.  This is useful in conjunction with the @{b}-c@{ub}
     option for discovering which routines were never called.

   The order of these options does not matter.

   Note that only one function can be specified with each @{b}-e@{ub}, @{b}-E@{ub}, @{b}-f@{ub} or
@{b}-F@{ub} option.  To specify more than one function, use multiple options.
For example, this command:

     gprof -e boring -f foo -f bar myprogram > gprof.output

lists in the call graph all functions that were reached from either @{b}foo@{ub}
or @{b}bar@{ub} and were not reachable from @{b}boring@{ub}.

   There are a few other useful @{b}gprof@{ub} options:

@{b}-b@{ub}
     If the @{b}-b@{ub} option is given, @{b}gprof@{ub} doesn't print the verbose blurbs
     that try to explain the meaning of all of the fields in the
     tables.  This is useful if you intend to print out the output, or
     are tired of seeing the blurbs.

@{b}-c@{ub}
     The @{b}-c@{ub} option causes the static call-graph of the program to be
     discovered by a heuristic which examines the text space of the
     object file.  Static-only parents or children are indicated with
     call counts of @{b}0@{ub}.

@{b}-d NUM@{ub}
     The @{b}-d NUM@{ub} option specifies debugging options.

@{b}-s@{ub}
     The @{b}-s@{ub} option causes @{b}gprof@{ub} to summarize the information in the
     profile data files it read in, and write out a profile data file
     called @{b}gmon.sum@{ub}, which contains all the information from the
     profile data files that @{b}gprof@{ub} read in.  The file @{b}gmon.sum@{ub} may be
     one of the specified input files; the effect of this is to merge
     the data in the other input files into @{b}gmon.sum@{ub}.  See
     @{"Sampling Error" link "Sampling Error"}.

     Eventually you can run @{b}gprof@{ub} again without @{b}-s@{ub} to analyze the
     cumulative data in the file @{b}gmon.sum@{ub}.

@{b}-T@{ub}
     The @{b}-T@{ub} option causes @{b}gprof@{ub} to print its output in "traditional"
     BSD style.

@{b}--function-ordering@{ub}
     The @{b}--function-ordering@{ub} option causes @{b}gprof@{ub} to print a suggested
     function ordering for the program based on profiling data.  This
     option suggests an ordering which may improve paging, tlb and
     cache behavior for the program on systems which support arbitrary
     ordering of functions in an executable.

     The exact details of how to force the linker to place functions in
     a particular order is system dependent and out of the scope of this
     manual.

@{b}--file-ordering MAP_FILE@{ub}
     The @{b}--file-ordering@{ub} option causes @{b}gprof@{ub} to print a suggested .o
     link line ordering for the program based on profiling data.  This
     option suggests an ordering which may improve paging, tlb and
     cache behavior for the program on systems which do not support
     arbitrary ordering of functions in an executable.

     Use of the @{b}-a@{ub} argument is highly recommended with this option.

     The MAP_FILE argument is a pathname to a file which provides
     function name to object file mappings.  The format of the file is
     similar to the output of the program @{b}nm@{ub}.

          c-parse.o:00000000 T yyparse
          c-parse.o:00000004 C yyerrflag
          c-lang.o:00000000 T maybe_objc_method_name
          c-lang.o:00000000 T print_lang_statistics
          c-lang.o:00000000 T recognize_objc_keyword
          c-decl.o:00000000 T print_lang_identifier
          c-decl.o:00000000 T print_lang_type
          ...

     GNU @{b}nm@{ub} @{b}--extern-only@{ub} @{b}--defined-only@{ub} @{b}-v@{ub} @{b}--print-file-name@{ub} can be
     used to create MAP_FILE.


@endnode

@node "Flat Profile" "gprof.guide/Flat Profile"
@next "Call Graph"
@prev "Invoking"
@toc "Main"

How to Understand the Flat Profile
**********************************

   The @{i}flat profile@{ui} shows the total amount of time your program spent
executing each function.  Unless the @{b}-z@{ub} option is given, functions with
no apparent time spent in them, and no apparent calls to them, are not
mentioned.  Note that if a function was not compiled for profiling, and
didn't run long enough to show up on the program counter histogram, it
will be indistinguishable from a function that was never called.

   This is part of a flat profile for a small program:

     Flat profile:
     
     Each sample counts as 0.01 seconds.
       %   cumulative   self              self     total
      time   seconds   seconds    calls  ms/call  ms/call  name
      33.34      0.02     0.02     7208     0.00     0.00  open
      16.67      0.03     0.01      244     0.04     0.12  offtime
      16.67      0.04     0.01        8     1.25     1.25  memccpy
      16.67      0.05     0.01        7     1.43     1.43  write
      16.67      0.06     0.01                             mcount
       0.00      0.06     0.00      236     0.00     0.00  tzset
       0.00      0.06     0.00      192     0.00     0.00  tolower
       0.00      0.06     0.00       47     0.00     0.00  strlen
       0.00      0.06     0.00       45     0.00     0.00  strchr
       0.00      0.06     0.00        1     0.00    50.00  main
       0.00      0.06     0.00        1     0.00     0.00  memcpy
       0.00      0.06     0.00        1     0.00    10.11  print
       0.00      0.06     0.00        1     0.00     0.00  profil
       0.00      0.06     0.00        1     0.00    50.00  report
     ...

The functions are sorted by decreasing run-time spent in them.  The
functions @{b}mcount@{ub} and @{b}profil@{ub} are part of the profiling aparatus and
appear in every flat profile; their time gives a measure of the amount
of overhead due to profiling.

   The sampling period estimates the margin of error in each of the time
figures.  A time figure that is not much larger than this is not
reliable.  In this example, the @{b}self seconds@{ub} field for @{b}mcount@{ub} might
well be @{b}0@{ub} or @{b}0.04@{ub} in another run.  See @{"Sampling Error" link "Sampling Error"}, for a complete
discussion.

   Here is what the fields in each line mean:

@{b}% time@{ub}
     This is the percentage of the total execution time your program
     spent in this function.  These should all add up to 100%.

@{b}cumulative seconds@{ub}
     This is the cumulative total number of seconds the computer spent
     executing this functions, plus the time spent in all the functions
     above this one in this table.

@{b}self seconds@{ub}
     This is the number of seconds accounted for by this function alone.
     The flat profile listing is sorted first by this number.

@{b}calls@{ub}
     This is the total number of times the function was called.  If the
     function was never called, or the number of times it was called
     cannot be determined (probably because the function was not
     compiled with profiling enabled), the @{i}calls@{ui} field is blank.

@{b}self ms/call@{ub}
     This represents the average number of milliseconds spent in this
     function per call, if this function is profiled.  Otherwise, this
     field is blank for this function.

@{b}total ms/call@{ub}
     This represents the average number of milliseconds spent in this
     function and its descendants per call, if this function is
     profiled.  Otherwise, this field is blank for this function.

@{b}name@{ub}
     This is the name of the function.   The flat profile is sorted by
     this field alphabetically after the @{i}self seconds@{ui} field is sorted.


@endnode

@node "Call Graph" "gprof.guide/Call Graph"
@next "Implementation"
@prev "Flat Profile"
@toc "Main"

How to Read the Call Graph
**************************

   The @{i}call graph@{ui} shows how much time was spent in each function and
its children.  From this information, you can find functions that,
while they themselves may not have used much time, called other
functions that did use unusual amounts of time.

   Here is a sample call from a small program.  This call came from the
same @{b}gprof@{ub} run as the flat profile example in the previous chapter.

     granularity: each sample hit covers 2 byte(s) for 20.00% of 0.05 seconds
     
     index % time    self  children    called     name
                                                      <spontaneous>
     [1]    100.0    0.00    0.05                 start [1]
                     0.00    0.05       1/1           main [2]
                     0.00    0.00       1/2           on_exit [28]
                     0.00    0.00       1/1           exit [59]
     -----------------------------------------------
                     0.00    0.05       1/1           start [1]
     [2]    100.0    0.00    0.05       1         main [2]
                     0.00    0.05       1/1           report [3]
     -----------------------------------------------
                     0.00    0.05       1/1           main [2]
     [3]    100.0    0.00    0.05       1         report [3]
                     0.00    0.03       8/8           timelocal [6]
                     0.00    0.01       1/1           print [9]
                     0.00    0.01       9/9           fgets [12]
                     0.00    0.00      12/34          strncmp <cycle 1> [40]
                     0.00    0.00       8/8           lookup [20]
                     0.00    0.00       1/1           fopen [21]
                     0.00    0.00       8/8           chewtime [24]
                     0.00    0.00       8/16          skipspace [44]
     -----------------------------------------------
     [4]     59.8    0.01        0.02       8+472     <cycle 2 as a whole>	[4]
                     0.01        0.02     244+260         offtime <cycle 2> [7]
                     0.00        0.00     236+1           tzset <cycle 2> [26]
     -----------------------------------------------

   The lines full of dashes divide this table into @{i}entries@{ui}, one for each
function.  Each entry has one or more lines.

   In each entry, the primary line is the one that starts with an index
number in square brackets.  The end of this line says which function
the entry is for.  The preceding lines in the entry describe the
callers of this function and the following lines describe its
subroutines (also called @{i}children@{ui} when we speak of the call graph).

   The entries are sorted by time spent in the function and its
subroutines.

   The internal profiling function @{b}mcount@{ub} (see @{"Flat Profile" link "Flat Profile"}) is never
mentioned in the call graph.


 @{" Primary      " link "Primary"}  Details of the primary line's contents.
 @{" Callers      " link "Callers"}  Details of caller-lines' contents.
 @{" Subroutines  " link "Subroutines"}  Details of subroutine-lines' contents.
 @{" Cycles       " link "Cycles"}  When there are cycles of recursion,
                   such as @{b}a@{ub} calls @{b}b@{ub} calls @{b}a@{ub}...


@endnode

@node "Primary" "gprof.guide/Primary"
@next "Callers"
@toc "Call Graph"

The Primary Line
================

   The @{i}primary line@{ui} in a call graph entry is the line that describes
the function which the entry is about and gives the overall statistics
for this function.

   For reference, we repeat the primary line from the entry for function
@{b}report@{ub} in our main example, together with the heading line that shows
the names of the fields:

     index  % time    self  children called     name
     ...
     [3]    100.0    0.00    0.05       1         report [3]

   Here is what the fields in the primary line mean:

@{b}index@{ub}
     Entries are numbered with consecutive integers.  Each function
     therefore has an index number, which appears at the beginning of
     its primary line.

     Each cross-reference to a function, as a caller or subroutine of
     another, gives its index number as well as its name.  The index
     number guides you if you wish to look for the entry for that
     function.

@{b}% time@{ub}
     This is the percentage of the total time that was spent in this
     function, including time spent in subroutines called from this
     function.

     The time spent in this function is counted again for the callers of
     this function.  Therefore, adding up these percentages is
     meaningless.

@{b}self@{ub}
     This is the total amount of time spent in this function.  This
     should be identical to the number printed in the @{b}seconds@{ub} field for
     this function in the flat profile.

@{b}children@{ub}
     This is the total amount of time spent in the subroutine calls
     made by this function.  This should be equal to the sum of all the
     @{b}self@{ub} and @{b}children@{ub} entries of the children listed directly below
     this function.

@{b}called@{ub}
     This is the number of times the function was called.

     If the function called itself recursively, there are two numbers,
     separated by a @{b}+@{ub}.  The first number counts non-recursive calls,
     and the second counts recursive calls.

     In the example above, the function @{b}report@{ub} was called once from
     @{b}main@{ub}.

@{b}name@{ub}
     This is the name of the current function.  The index number is
     repeated after it.

     If the function is part of a cycle of recursion, the cycle number
     is printed between the function's name and the index number (see
     @{"Cycles" link "Cycles"}).  For example, if function @{b}gnurr@{ub} is part of cycle number
     one, and has index number twelve, its primary line would be end
     like this:

          gnurr <cycle 1> [12]


@endnode

@node "Callers" "gprof.guide/Callers"
@next "Subroutines"
@prev "Primary"
@toc "Call Graph"

Lines for a Function's Callers
==============================

   A function's entry has a line for each function it was called by.
These lines' fields correspond to the fields of the primary line, but
their meanings are different because of the difference in context.

   For reference, we repeat two lines from the entry for the function
@{b}report@{ub}, the primary line and one caller-line preceding it, together
with the heading line that shows the names of the fields:

     index  % time    self  children called     name
     ...
                     0.00    0.05       1/1           main [2]
     [3]    100.0    0.00    0.05       1         report [3]

   Here are the meanings of the fields in the caller-line for @{b}report@{ub}
called from @{b}main@{ub}:

@{b}self@{ub}
     An estimate of the amount of time spent in @{b}report@{ub} itself when it
     was called from @{b}main@{ub}.

@{b}children@{ub}
     An estimate of the amount of time spent in subroutines of @{b}report@{ub}
     when @{b}report@{ub} was called from @{b}main@{ub}.

     The sum of the @{b}self@{ub} and @{b}children@{ub} fields is an estimate of the
     amount of time spent within calls to @{b}report@{ub} from @{b}main@{ub}.

@{b}called@{ub}
     Two numbers: the number of times @{b}report@{ub} was called from @{b}main@{ub},
     followed by the total number of nonrecursive calls to @{b}report@{ub} from
     all its callers.

@{b}name and index number@{ub}
     The name of the caller of @{b}report@{ub} to which this line applies,
     followed by the caller's index number.

     Not all functions have entries in the call graph; some options to
     @{b}gprof@{ub} request the omission of certain functions.  When a caller
     has no entry of its own, it still has caller-lines in the entries
     of the functions it calls.

     If the caller is part of a recursion cycle, the cycle number is
     printed between the name and the index number.

   If the identity of the callers of a function cannot be determined, a
dummy caller-line is printed which has @{b}<spontaneous>@{ub} as the "caller's
name" and all other fields blank.  This can happen for signal handlers.


@endnode

@node "Subroutines" "gprof.guide/Subroutines"
@next "Cycles"
@prev "Callers"
@toc "Call Graph"

Lines for a Function's Subroutines
==================================

   A function's entry has a line for each of its subroutines--in other
words, a line for each other function that it called.  These lines'
fields correspond to the fields of the primary line, but their meanings
are different because of the difference in context.

   For reference, we repeat two lines from the entry for the function
@{b}main@{ub}, the primary line and a line for a subroutine, together with the
heading line that shows the names of the fields:

     index  % time    self  children called     name
     ...
     [2]    100.0    0.00    0.05       1         main [2]
                     0.00    0.05       1/1           report [3]

   Here are the meanings of the fields in the subroutine-line for @{b}main@{ub}
calling @{b}report@{ub}:

@{b}self@{ub}
     An estimate of the amount of time spent directly within @{b}report@{ub}
     when @{b}report@{ub} was called from @{b}main@{ub}.

@{b}children@{ub}
     An estimate of the amount of time spent in subroutines of @{b}report@{ub}
     when @{b}report@{ub} was called from @{b}main@{ub}.

     The sum of the @{b}self@{ub} and @{b}children@{ub} fields is an estimate of the
     total time spent in calls to @{b}report@{ub} from @{b}main@{ub}.

@{b}called@{ub}
     Two numbers, the number of calls to @{b}report@{ub} from @{b}main@{ub} followed by
     the total number of nonrecursive calls to @{b}report@{ub}.

@{b}name@{ub}
     The name of the subroutine of @{b}main@{ub} to which this line applies,
     followed by the subroutine's index number.

     If the caller is part of a recursion cycle, the cycle number is
     printed between the name and the index number.


@endnode

@node "Cycles" "gprof.guide/Cycles"
@prev "Subroutines"
@toc "Call Graph"

How Mutually Recursive Functions Are Described
==============================================

   The graph may be complicated by the presence of @{i}cycles of recursion@{ui}
in the call graph.  A cycle exists if a function calls another function
that (directly or indirectly) calls (or appears to call) the original
function.  For example: if @{b}a@{ub} calls @{b}b@{ub}, and @{b}b@{ub} calls @{b}a@{ub}, then @{b}a@{ub} and @{b}b@{ub} form
a cycle.

   Whenever there are call-paths both ways between a pair of functions,
they belong to the same cycle.  If @{b}a@{ub} and @{b}b@{ub} call each other and @{b}b@{ub} and @{b}c@{ub}
call each other, all three make one cycle.  Note that even if @{b}b@{ub} only
calls @{b}a@{ub} if it was not called from @{b}a@{ub}, @{b}gprof@{ub} cannot determine this, so @{b}a@{ub}
and @{b}b@{ub} are still considered a cycle.

   The cycles are numbered with consecutive integers.  When a function
belongs to a cycle, each time the function name appears in the call
graph it is followed by @{b}<cycle NUMBER>@{ub}.

   The reason cycles matter is that they make the time values in the
call graph paradoxical.  The "time spent in children" of @{b}a@{ub} should
include the time spent in its subroutine @{b}b@{ub} and in @{b}b@{ub}'s subroutines--but
one of @{b}b@{ub}'s subroutines is @{b}a@{ub}!  How much of @{b}a@{ub}'s time should be included
in the children of @{b}a@{ub}, when @{b}a@{ub} is indirectly recursive?

   The way @{b}gprof@{ub} resolves this paradox is by creating a single entry
for the cycle as a whole.  The primary line of this entry describes the
total time spent directly in the functions of the cycle.  The
"subroutines" of the cycle are the individual functions of the cycle,
and all other functions that were called directly by them.  The
"callers" of the cycle are the functions, outside the cycle, that
called functions in the cycle.

   Here is an example portion of a call graph which shows a cycle
containing functions @{b}a@{ub} and @{b}b@{ub}.  The cycle was entered by a call to @{b}a@{ub}
from @{b}main@{ub}; both @{b}a@{ub} and @{b}b@{ub} called @{b}c@{ub}.

     index  % time    self  children called     name
     ----------------------------------------
                      1.77        0    1/1        main [2]
     [3]     91.71    1.77        0    1+5    <cycle 1 as a whole> [3]
                      1.02        0    3          b <cycle 1> [4]
                      0.75        0    2          a <cycle 1> [5]
     ----------------------------------------
                                       3          a <cycle 1> [5]
     [4]     52.85    1.02        0    0      b <cycle 1> [4]
                                       2          a <cycle 1> [5]
                         0        0    3/6        c [6]
     ----------------------------------------
                      1.77        0    1/1        main [2]
                                       2          b <cycle 1> [4]
     [5]     38.86    0.75        0    1      a <cycle 1> [5]
                                       3          b <cycle 1> [4]
                         0        0    3/6        c [6]
     ----------------------------------------

(The entire call graph for this program contains in addition an entry
for @{b}main@{ub}, which calls @{b}a@{ub}, and an entry for @{b}c@{ub}, with callers @{b}a@{ub} and @{b}b@{ub}.)

     index  % time    self  children called     name
                                                  <spontaneous>
     [1]    100.00       0     1.93    0      start [1]
                      0.16     1.77    1/1        main [2]
     ----------------------------------------
                      0.16     1.77    1/1        start [1]
     [2]    100.00    0.16     1.77    1      main [2]
                      1.77        0    1/1        a <cycle 1> [5]
     ----------------------------------------
                      1.77        0    1/1        main [2]
     [3]     91.71    1.77        0    1+5    <cycle 1 as a whole> [3]
                      1.02        0    3          b <cycle 1> [4]
                      0.75        0    2          a <cycle 1> [5]
                         0        0    6/6        c [6]
     ----------------------------------------
                                       3          a <cycle 1> [5]
     [4]     52.85    1.02        0    0      b <cycle 1> [4]
                                       2          a <cycle 1> [5]
                         0        0    3/6        c [6]
     ----------------------------------------
                      1.77        0    1/1        main [2]
                                       2          b <cycle 1> [4]
     [5]     38.86    0.75        0    1      a <cycle 1> [5]
                                       3          b <cycle 1> [4]
                         0        0    3/6        c [6]
     ----------------------------------------
                         0        0    3/6        b <cycle 1> [4]
                         0        0    3/6        a <cycle 1> [5]
     [6]      0.00       0        0    6      c [6]
     ----------------------------------------

   The @{b}self@{ub} field of the cycle's primary line is the total time spent
in all the functions of the cycle.  It equals the sum of the @{b}self@{ub}
fields for the individual functions in the cycle, found in the entry in
the subroutine lines for these functions.

   The @{b}children@{ub} fields of the cycle's primary line and subroutine lines
count only subroutines outside the cycle.  Even though @{b}a@{ub} calls @{b}b@{ub}, the
time spent in those calls to @{b}b@{ub} is not counted in @{b}a@{ub}'s @{b}children@{ub} time.
Thus, we do not encounter the problem of what to do when the time in
those calls to @{b}b@{ub} includes indirect recursive calls back to @{b}a@{ub}.

   The @{b}children@{ub} field of a caller-line in the cycle's entry estimates
the amount of time spent @{i}in the whole cycle@{ui}, and its other subroutines,
on the times when that caller called a function in the cycle.

   The @{b}calls@{ub} field in the primary line for the cycle has two numbers:
first, the number of times functions in the cycle were called by
functions outside the cycle; second, the number of times they were
called by functions in the cycle (including times when a function in
the cycle calls itself).  This is a generalization of the usual split
into nonrecursive and recursive calls.

   The @{b}calls@{ub} field of a subroutine-line for a cycle member in the
cycle's entry says how many time that function was called from
functions in the cycle.  The total of all these is the second number in
the primary line's @{b}calls@{ub} field.

   In the individual entry for a function in a cycle, the other
functions in the same cycle can appear as subroutines and as callers.
These lines show how many times each function in the cycle called or
was called from each other function in the cycle.  The @{b}self@{ub} and
@{b}children@{ub} fields in these lines are blank because of the difficulty of
defining meanings for them when recursion is going on.


@endnode

@node "Implementation" "gprof.guide/Implementation"
@next "Sampling Error"
@prev "Call Graph"
@toc "Main"

Implementation of Profiling
***************************

   Profiling works by changing how every function in your program is
compiled so that when it is called, it will stash away some information
about where it was called from.  From this, the profiler can figure out
what function called it, and can count how many times it was called.
This change is made by the compiler when your program is compiled with
the @{b}-pg@{ub} option.

   Profiling also involves watching your program as it runs, and
keeping a histogram of where the program counter happens to be every
now and then.  Typically the program counter is looked at around 100
times per second of run time, but the exact frequency may vary from
system to system.

   A special startup routine allocates memory for the histogram and
sets up a clock signal handler to make entries in it.  Use of this
special startup routine is one of the effects of using @{b}gcc ... -pg@{ub} to
link.  The startup file also includes an @{b}exit@{ub} function which is
responsible for writing the file @{b}gmon.out@{ub}.

   Number-of-calls information for library routines is collected by
using a special version of the C library.  The programs in it are the
same as in the usual C library, but they were compiled with @{b}-pg@{ub}.  If you
link your program with @{b}gcc ... -pg@{ub}, it automatically uses the profiling
version of the library.

   The output from @{b}gprof@{ub} gives no indication of parts of your program
that are limited by I/O or swapping bandwidth.  This is because samples
of the program counter are taken at fixed intervals of run time.
Therefore, the time measurements in @{b}gprof@{ub} output say nothing about time
that your program was not running.  For example, a part of the program
that creates so much data that it cannot all fit in physical memory at
once may run very slowly due to thrashing, but @{b}gprof@{ub} will say it uses
little time.  On the other hand, sampling by run time has the advantage
that the amount of load due to other users won't directly affect the
output you get.


@endnode

@node "Sampling Error" "gprof.guide/Sampling Error"
@next "Assumptions"
@prev "Implementation"
@toc "Main"

Statistical Inaccuracy of @{b}gprof@{ub} Output
**************************************

   The run-time figures that @{b}gprof@{ub} gives you are based on a sampling
process, so they are subject to statistical inaccuracy.  If a function
runs only a small amount of time, so that on the average the sampling
process ought to catch that function in the act only once, there is a
pretty good chance it will actually find that function zero times, or
twice.

   By contrast, the number-of-calls figures are derived by counting, not
sampling.  They are completely accurate and will not vary from run to
run if your program is deterministic.

   The @{i}sampling period@{ui} that is printed at the beginning of the flat
profile says how often samples are taken.  The rule of thumb is that a
run-time figure is accurate if it is considerably bigger than the
sampling period.

   The actual amount of error is usually more than one sampling period.
In fact, if a value is N times the sampling period, the @{i}expected@{ui} error
in it is the square-root of N sampling periods.  If the sampling period
is 0.01 seconds and @{b}foo@{ub}'s run-time is 1 second, the expected error in
@{b}foo@{ub}'s run-time is 0.1 seconds.  It is likely to vary this much @{i}on the
average@{ui} from one profiling run to the next.  (@{i}Sometimes@{ui} it will vary
more.)

   This does not mean that a small run-time figure is devoid of
information.  If the program's @{i}total@{ui} run-time is large, a small
run-time for one function does tell you that that function used an
insignificant fraction of the whole program's time.  Usually this means
it is not worth optimizing.

   One way to get more accuracy is to give your program more (but
similar) input data so it will take longer.  Another way is to combine
the data from several runs, using the @{b}-s@{ub} option of @{b}gprof@{ub}.  Here is how:

  1. Run your program once.

  2. Issue the command @{b}mv gmon.out gmon.sum@{ub}.

  3. Run your program again, the same as before.

  4. Merge the new data in @{b}gmon.out@{ub} into @{b}gmon.sum@{ub} with this command:

          gprof -s EXECUTABLE-FILE gmon.out gmon.sum

  5. Repeat the last two steps as often as you wish.

  6. Analyze the cumulative data using this command:

          gprof EXECUTABLE-FILE gmon.sum > OUTPUT-FILE


@endnode

@node "Assumptions" "gprof.guide/Assumptions"
@next "Incompatibilities"
@prev "Sampling Error"
@toc "Main"

Estimating @{b}children@{ub} Times Uses an Assumption
********************************************

   Some of the figures in the call graph are estimates--for example, the
@{b}children@{ub} time values and all the the time figures in caller and
subroutine lines.

   There is no direct information about these measurements in the
profile data itself.  Instead, @{b}gprof@{ub} estimates them by making an
assumption about your program that might or might not be true.

   The assumption made is that the average time spent in each call to
any function @{b}foo@{ub} is not correlated with who called @{b}foo@{ub}.  If @{b}foo@{ub} used 5
seconds in all, and 2/5 of the calls to @{b}foo@{ub} came from @{b}a@{ub}, then @{b}foo@{ub}
contributes 2 seconds to @{b}a@{ub}'s @{b}children@{ub} time, by assumption.

   This assumption is usually true enough, but for some programs it is
far from true.  Suppose that @{b}foo@{ub} returns very quickly when its argument
is zero; suppose that @{b}a@{ub} always passes zero as an argument, while other
callers of @{b}foo@{ub} pass other arguments.  In this program, all the time
spent in @{b}foo@{ub} is in the calls from callers other than @{b}a@{ub}.  But @{b}gprof@{ub} has
no way of knowing this; it will blindly and incorrectly charge 2
seconds of time in @{b}foo@{ub} to the children of @{b}a@{ub}.

   We hope some day to put more complete data into @{b}gmon.out@{ub}, so that
this assumption is no longer needed, if we can figure out how.  For the
nonce, the estimated figures are usually more useful than misleading.


@endnode

@node "Incompatibilities" "gprof.guide/Incompatibilities"
@prev "Assumptions"
@toc "Main"

Incompatibilities with Unix @{b}gprof@{ub}
*********************************

   GNU @{b}gprof@{ub} and Berkeley Unix @{b}gprof@{ub} use the same data file @{b}gmon.out@{ub},
and provide essentially the same information.  But there are a few
differences.

   * For a recursive function, Unix @{b}gprof@{ub} lists the function as a
     parent and as a child, with a @{b}calls@{ub} field that lists the number of
     recursive calls.  GNU @{b}gprof@{ub} omits these lines and puts the number
     of recursive calls in the primary line.

   * When a function is suppressed from the call graph with @{b}-e@{ub}, GNU
     @{b}gprof@{ub} still lists it as a subroutine of functions that call it.

   * The blurbs, field widths, and output formats are different.  GNU
     @{b}gprof@{ub} prints blurbs after the tables, so that you can see the
     tables without skipping the blurbs.

@endnode

